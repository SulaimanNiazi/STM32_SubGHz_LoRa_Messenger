
STM32_SubGHz_LoRa_Messenger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075e8  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08007728  08007728  00008728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007918  08007918  00009084  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007918  08007918  00008918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007920  08007920  00009084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007920  08007920  00008920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007924  08007924  00008924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08007928  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000053c  20000084  080079ac  00009084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005c0  080079ac  000095c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00009084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d2b  00000000  00000000  000090ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000360c  00000000  00000000  0001edd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001598  00000000  00000000  000223e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001044  00000000  00000000  00023980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e894  00000000  00000000  000249c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015ac6  00000000  00000000  00043258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b695d  00000000  00000000  00058d1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010f67b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d80  00000000  00000000  0010f6c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00115440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000084 	.word	0x20000084
 800015c:	00000000 	.word	0x00000000
 8000160:	08007710 	.word	0x08007710

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000088 	.word	0x20000088
 800017c:	08007710 	.word	0x08007710

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b988 	b.w	8000558 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	468e      	mov	lr, r1
 8000268:	4604      	mov	r4, r0
 800026a:	4688      	mov	r8, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14a      	bne.n	8000306 <__udivmoddi4+0xa6>
 8000270:	428a      	cmp	r2, r1
 8000272:	4617      	mov	r7, r2
 8000274:	d962      	bls.n	800033c <__udivmoddi4+0xdc>
 8000276:	fab2 f682 	clz	r6, r2
 800027a:	b14e      	cbz	r6, 8000290 <__udivmoddi4+0x30>
 800027c:	f1c6 0320 	rsb	r3, r6, #32
 8000280:	fa01 f806 	lsl.w	r8, r1, r6
 8000284:	fa20 f303 	lsr.w	r3, r0, r3
 8000288:	40b7      	lsls	r7, r6
 800028a:	ea43 0808 	orr.w	r8, r3, r8
 800028e:	40b4      	lsls	r4, r6
 8000290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000294:	fa1f fc87 	uxth.w	ip, r7
 8000298:	fbb8 f1fe 	udiv	r1, r8, lr
 800029c:	0c23      	lsrs	r3, r4, #16
 800029e:	fb0e 8811 	mls	r8, lr, r1, r8
 80002a2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a6:	fb01 f20c 	mul.w	r2, r1, ip
 80002aa:	429a      	cmp	r2, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x62>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002b4:	f080 80ea 	bcs.w	800048c <__udivmoddi4+0x22c>
 80002b8:	429a      	cmp	r2, r3
 80002ba:	f240 80e7 	bls.w	800048c <__udivmoddi4+0x22c>
 80002be:	3902      	subs	r1, #2
 80002c0:	443b      	add	r3, r7
 80002c2:	1a9a      	subs	r2, r3, r2
 80002c4:	b2a3      	uxth	r3, r4
 80002c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002d2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d6:	459c      	cmp	ip, r3
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0x8e>
 80002da:	18fb      	adds	r3, r7, r3
 80002dc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e0:	f080 80d6 	bcs.w	8000490 <__udivmoddi4+0x230>
 80002e4:	459c      	cmp	ip, r3
 80002e6:	f240 80d3 	bls.w	8000490 <__udivmoddi4+0x230>
 80002ea:	443b      	add	r3, r7
 80002ec:	3802      	subs	r0, #2
 80002ee:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f2:	eba3 030c 	sub.w	r3, r3, ip
 80002f6:	2100      	movs	r1, #0
 80002f8:	b11d      	cbz	r5, 8000302 <__udivmoddi4+0xa2>
 80002fa:	40f3      	lsrs	r3, r6
 80002fc:	2200      	movs	r2, #0
 80002fe:	e9c5 3200 	strd	r3, r2, [r5]
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	428b      	cmp	r3, r1
 8000308:	d905      	bls.n	8000316 <__udivmoddi4+0xb6>
 800030a:	b10d      	cbz	r5, 8000310 <__udivmoddi4+0xb0>
 800030c:	e9c5 0100 	strd	r0, r1, [r5]
 8000310:	2100      	movs	r1, #0
 8000312:	4608      	mov	r0, r1
 8000314:	e7f5      	b.n	8000302 <__udivmoddi4+0xa2>
 8000316:	fab3 f183 	clz	r1, r3
 800031a:	2900      	cmp	r1, #0
 800031c:	d146      	bne.n	80003ac <__udivmoddi4+0x14c>
 800031e:	4573      	cmp	r3, lr
 8000320:	d302      	bcc.n	8000328 <__udivmoddi4+0xc8>
 8000322:	4282      	cmp	r2, r0
 8000324:	f200 8105 	bhi.w	8000532 <__udivmoddi4+0x2d2>
 8000328:	1a84      	subs	r4, r0, r2
 800032a:	eb6e 0203 	sbc.w	r2, lr, r3
 800032e:	2001      	movs	r0, #1
 8000330:	4690      	mov	r8, r2
 8000332:	2d00      	cmp	r5, #0
 8000334:	d0e5      	beq.n	8000302 <__udivmoddi4+0xa2>
 8000336:	e9c5 4800 	strd	r4, r8, [r5]
 800033a:	e7e2      	b.n	8000302 <__udivmoddi4+0xa2>
 800033c:	2a00      	cmp	r2, #0
 800033e:	f000 8090 	beq.w	8000462 <__udivmoddi4+0x202>
 8000342:	fab2 f682 	clz	r6, r2
 8000346:	2e00      	cmp	r6, #0
 8000348:	f040 80a4 	bne.w	8000494 <__udivmoddi4+0x234>
 800034c:	1a8a      	subs	r2, r1, r2
 800034e:	0c03      	lsrs	r3, r0, #16
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	b280      	uxth	r0, r0
 8000356:	b2bc      	uxth	r4, r7
 8000358:	2101      	movs	r1, #1
 800035a:	fbb2 fcfe 	udiv	ip, r2, lr
 800035e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000362:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000366:	fb04 f20c 	mul.w	r2, r4, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d907      	bls.n	800037e <__udivmoddi4+0x11e>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000374:	d202      	bcs.n	800037c <__udivmoddi4+0x11c>
 8000376:	429a      	cmp	r2, r3
 8000378:	f200 80e0 	bhi.w	800053c <__udivmoddi4+0x2dc>
 800037c:	46c4      	mov	ip, r8
 800037e:	1a9b      	subs	r3, r3, r2
 8000380:	fbb3 f2fe 	udiv	r2, r3, lr
 8000384:	fb0e 3312 	mls	r3, lr, r2, r3
 8000388:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800038c:	fb02 f404 	mul.w	r4, r2, r4
 8000390:	429c      	cmp	r4, r3
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0x144>
 8000394:	18fb      	adds	r3, r7, r3
 8000396:	f102 30ff 	add.w	r0, r2, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x142>
 800039c:	429c      	cmp	r4, r3
 800039e:	f200 80ca 	bhi.w	8000536 <__udivmoddi4+0x2d6>
 80003a2:	4602      	mov	r2, r0
 80003a4:	1b1b      	subs	r3, r3, r4
 80003a6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003aa:	e7a5      	b.n	80002f8 <__udivmoddi4+0x98>
 80003ac:	f1c1 0620 	rsb	r6, r1, #32
 80003b0:	408b      	lsls	r3, r1
 80003b2:	fa22 f706 	lsr.w	r7, r2, r6
 80003b6:	431f      	orrs	r7, r3
 80003b8:	fa0e f401 	lsl.w	r4, lr, r1
 80003bc:	fa20 f306 	lsr.w	r3, r0, r6
 80003c0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003c4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003c8:	4323      	orrs	r3, r4
 80003ca:	fa00 f801 	lsl.w	r8, r0, r1
 80003ce:	fa1f fc87 	uxth.w	ip, r7
 80003d2:	fbbe f0f9 	udiv	r0, lr, r9
 80003d6:	0c1c      	lsrs	r4, r3, #16
 80003d8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003dc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003e0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ea:	d909      	bls.n	8000400 <__udivmoddi4+0x1a0>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 3aff 	add.w	sl, r0, #4294967295
 80003f2:	f080 809c 	bcs.w	800052e <__udivmoddi4+0x2ce>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f240 8099 	bls.w	800052e <__udivmoddi4+0x2ce>
 80003fc:	3802      	subs	r0, #2
 80003fe:	443c      	add	r4, r7
 8000400:	eba4 040e 	sub.w	r4, r4, lr
 8000404:	fa1f fe83 	uxth.w	lr, r3
 8000408:	fbb4 f3f9 	udiv	r3, r4, r9
 800040c:	fb09 4413 	mls	r4, r9, r3, r4
 8000410:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000414:	fb03 fc0c 	mul.w	ip, r3, ip
 8000418:	45a4      	cmp	ip, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x1ce>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000422:	f080 8082 	bcs.w	800052a <__udivmoddi4+0x2ca>
 8000426:	45a4      	cmp	ip, r4
 8000428:	d97f      	bls.n	800052a <__udivmoddi4+0x2ca>
 800042a:	3b02      	subs	r3, #2
 800042c:	443c      	add	r4, r7
 800042e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000432:	eba4 040c 	sub.w	r4, r4, ip
 8000436:	fba0 ec02 	umull	lr, ip, r0, r2
 800043a:	4564      	cmp	r4, ip
 800043c:	4673      	mov	r3, lr
 800043e:	46e1      	mov	r9, ip
 8000440:	d362      	bcc.n	8000508 <__udivmoddi4+0x2a8>
 8000442:	d05f      	beq.n	8000504 <__udivmoddi4+0x2a4>
 8000444:	b15d      	cbz	r5, 800045e <__udivmoddi4+0x1fe>
 8000446:	ebb8 0203 	subs.w	r2, r8, r3
 800044a:	eb64 0409 	sbc.w	r4, r4, r9
 800044e:	fa04 f606 	lsl.w	r6, r4, r6
 8000452:	fa22 f301 	lsr.w	r3, r2, r1
 8000456:	431e      	orrs	r6, r3
 8000458:	40cc      	lsrs	r4, r1
 800045a:	e9c5 6400 	strd	r6, r4, [r5]
 800045e:	2100      	movs	r1, #0
 8000460:	e74f      	b.n	8000302 <__udivmoddi4+0xa2>
 8000462:	fbb1 fcf2 	udiv	ip, r1, r2
 8000466:	0c01      	lsrs	r1, r0, #16
 8000468:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800046c:	b280      	uxth	r0, r0
 800046e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000472:	463b      	mov	r3, r7
 8000474:	4638      	mov	r0, r7
 8000476:	463c      	mov	r4, r7
 8000478:	46b8      	mov	r8, r7
 800047a:	46be      	mov	lr, r7
 800047c:	2620      	movs	r6, #32
 800047e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000482:	eba2 0208 	sub.w	r2, r2, r8
 8000486:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800048a:	e766      	b.n	800035a <__udivmoddi4+0xfa>
 800048c:	4601      	mov	r1, r0
 800048e:	e718      	b.n	80002c2 <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e72c      	b.n	80002ee <__udivmoddi4+0x8e>
 8000494:	f1c6 0220 	rsb	r2, r6, #32
 8000498:	fa2e f302 	lsr.w	r3, lr, r2
 800049c:	40b7      	lsls	r7, r6
 800049e:	40b1      	lsls	r1, r6
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	430a      	orrs	r2, r1
 80004aa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ae:	b2bc      	uxth	r4, r7
 80004b0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004b4:	0c11      	lsrs	r1, r2, #16
 80004b6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ba:	fb08 f904 	mul.w	r9, r8, r4
 80004be:	40b0      	lsls	r0, r6
 80004c0:	4589      	cmp	r9, r1
 80004c2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004c6:	b280      	uxth	r0, r0
 80004c8:	d93e      	bls.n	8000548 <__udivmoddi4+0x2e8>
 80004ca:	1879      	adds	r1, r7, r1
 80004cc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004d0:	d201      	bcs.n	80004d6 <__udivmoddi4+0x276>
 80004d2:	4589      	cmp	r9, r1
 80004d4:	d81f      	bhi.n	8000516 <__udivmoddi4+0x2b6>
 80004d6:	eba1 0109 	sub.w	r1, r1, r9
 80004da:	fbb1 f9fe 	udiv	r9, r1, lr
 80004de:	fb09 f804 	mul.w	r8, r9, r4
 80004e2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004e6:	b292      	uxth	r2, r2
 80004e8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004ec:	4542      	cmp	r2, r8
 80004ee:	d229      	bcs.n	8000544 <__udivmoddi4+0x2e4>
 80004f0:	18ba      	adds	r2, r7, r2
 80004f2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004f6:	d2c4      	bcs.n	8000482 <__udivmoddi4+0x222>
 80004f8:	4542      	cmp	r2, r8
 80004fa:	d2c2      	bcs.n	8000482 <__udivmoddi4+0x222>
 80004fc:	f1a9 0102 	sub.w	r1, r9, #2
 8000500:	443a      	add	r2, r7
 8000502:	e7be      	b.n	8000482 <__udivmoddi4+0x222>
 8000504:	45f0      	cmp	r8, lr
 8000506:	d29d      	bcs.n	8000444 <__udivmoddi4+0x1e4>
 8000508:	ebbe 0302 	subs.w	r3, lr, r2
 800050c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000510:	3801      	subs	r0, #1
 8000512:	46e1      	mov	r9, ip
 8000514:	e796      	b.n	8000444 <__udivmoddi4+0x1e4>
 8000516:	eba7 0909 	sub.w	r9, r7, r9
 800051a:	4449      	add	r1, r9
 800051c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000520:	fbb1 f9fe 	udiv	r9, r1, lr
 8000524:	fb09 f804 	mul.w	r8, r9, r4
 8000528:	e7db      	b.n	80004e2 <__udivmoddi4+0x282>
 800052a:	4673      	mov	r3, lr
 800052c:	e77f      	b.n	800042e <__udivmoddi4+0x1ce>
 800052e:	4650      	mov	r0, sl
 8000530:	e766      	b.n	8000400 <__udivmoddi4+0x1a0>
 8000532:	4608      	mov	r0, r1
 8000534:	e6fd      	b.n	8000332 <__udivmoddi4+0xd2>
 8000536:	443b      	add	r3, r7
 8000538:	3a02      	subs	r2, #2
 800053a:	e733      	b.n	80003a4 <__udivmoddi4+0x144>
 800053c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000540:	443b      	add	r3, r7
 8000542:	e71c      	b.n	800037e <__udivmoddi4+0x11e>
 8000544:	4649      	mov	r1, r9
 8000546:	e79c      	b.n	8000482 <__udivmoddi4+0x222>
 8000548:	eba1 0109 	sub.w	r1, r1, r9
 800054c:	46c4      	mov	ip, r8
 800054e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000552:	fb09 f804 	mul.w	r8, r9, r4
 8000556:	e7c4      	b.n	80004e2 <__udivmoddi4+0x282>

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000568:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800056a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4313      	orrs	r3, r2
 8000572:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000574:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000578:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4013      	ands	r3, r2
 800057e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000580:	68fb      	ldr	r3, [r7, #12]
}
 8000582:	bf00      	nop
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr

0800058c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a0:	2004      	movs	r0, #4
 80005a2:	f7ff ffdb 	bl	800055c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	2001      	movs	r0, #1
 80005a8:	f7ff ffd8 	bl	800055c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2138      	movs	r1, #56	@ 0x38
 80005b0:	4809      	ldr	r0, [pc, #36]	@ (80005d8 <MX_GPIO_Init+0x4c>)
 80005b2:	f002 fadd 	bl	8002b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 80005b6:	2338      	movs	r3, #56	@ 0x38
 80005b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ba:	2301      	movs	r3, #1
 80005bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005c2:	2303      	movs	r3, #3
 80005c4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	4619      	mov	r1, r3
 80005ca:	4803      	ldr	r0, [pc, #12]	@ (80005d8 <MX_GPIO_Init+0x4c>)
 80005cc:	f002 f970 	bl	80028b0 <HAL_GPIO_Init>

}
 80005d0:	bf00      	nop
 80005d2:	3718      	adds	r7, #24
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	48000800 	.word	0x48000800

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b0c4      	sub	sp, #272	@ 0x110
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f001 fed1 	bl	8002388 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f88d 	bl	8000704 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  HAL_Delay(3000);
 80005ea:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80005ee:	f001 ff41 	bl	8002474 <HAL_Delay>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f2:	f7ff ffcb 	bl	800058c <MX_GPIO_Init>
  MX_SUBGHZ_Init();
 80005f6:	f000 fc27 	bl	8000e48 <MX_SUBGHZ_Init>
  MX_USART2_UART_Init();
 80005fa:	f000 fcb7 	bl	8000f6c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  BSP_LED_Init(LED_BLUE);	// Connected Master
 80005fe:	2000      	movs	r0, #0
 8000600:	f000 fd90 	bl	8001124 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);	// Connected Slave
 8000604:	2001      	movs	r0, #1
 8000606:	f000 fd8d 	bl	8001124 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);	// Disconnected
 800060a:	2002      	movs	r0, #2
 800060c:	f000 fd8a 	bl	8001124 <BSP_LED_Init>

  Radio_Init();
 8000610:	f000 fa14 	bl	8000a3c <Radio_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  snprintf((char*)buffer, MAX_BUFFER_SIZE, "\r\n\r\nSTM32 SubGHz LoRa Messenger\r\n\r\nPlease Enter an ID of maximum 20 characters: ");
 8000614:	4a30      	ldr	r2, [pc, #192]	@ (80006d8 <main+0xfc>)
 8000616:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800061a:	4830      	ldr	r0, [pc, #192]	@ (80006dc <main+0x100>)
 800061c:	f006 fba2 	bl	8006d64 <sniprintf>
  UART_Transmit((char*)buffer);
 8000620:	482e      	ldr	r0, [pc, #184]	@ (80006dc <main+0x100>)
 8000622:	f000 f8c1 	bl	80007a8 <UART_Transmit>
  while(!messageReady) HAL_UART_Receive_IT(&huart2, input, 1);
 8000626:	e004      	b.n	8000632 <main+0x56>
 8000628:	2201      	movs	r2, #1
 800062a:	492d      	ldr	r1, [pc, #180]	@ (80006e0 <main+0x104>)
 800062c:	482d      	ldr	r0, [pc, #180]	@ (80006e4 <main+0x108>)
 800062e:	f004 fbbf 	bl	8004db0 <HAL_UART_Receive_IT>
 8000632:	4b2d      	ldr	r3, [pc, #180]	@ (80006e8 <main+0x10c>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	f083 0301 	eor.w	r3, r3, #1
 800063a:	b2db      	uxtb	r3, r3
 800063c:	2b00      	cmp	r3, #0
 800063e:	d1f3      	bne.n	8000628 <main+0x4c>
  HAL_NVIC_DisableIRQ(USART2_IRQn);
 8000640:	2025      	movs	r0, #37	@ 0x25
 8000642:	f002 f85e 	bl	8002702 <HAL_NVIC_DisableIRQ>
  idLen = snprintf(id, 20, "%s", (char*)output);
 8000646:	4b29      	ldr	r3, [pc, #164]	@ (80006ec <main+0x110>)
 8000648:	4a29      	ldr	r2, [pc, #164]	@ (80006f0 <main+0x114>)
 800064a:	2114      	movs	r1, #20
 800064c:	4829      	ldr	r0, [pc, #164]	@ (80006f4 <main+0x118>)
 800064e:	f006 fb89 	bl	8006d64 <sniprintf>
 8000652:	4603      	mov	r3, r0
 8000654:	4a28      	ldr	r2, [pc, #160]	@ (80006f8 <main+0x11c>)
 8000656:	6013      	str	r3, [r2, #0]
  UART_Transmit(id);
 8000658:	4826      	ldr	r0, [pc, #152]	@ (80006f4 <main+0x118>)
 800065a:	f000 f8a5 	bl	80007a8 <UART_Transmit>
  UART_Transmit("\r\n\r\n");
 800065e:	4827      	ldr	r0, [pc, #156]	@ (80006fc <main+0x120>)
 8000660:	f000 f8a2 	bl	80007a8 <UART_Transmit>
  resetTerminal();
 8000664:	f000 f8b6 	bl	80007d4 <resetTerminal>

  BSP_LED_On(LED_RED); 				// Disconnected at first
 8000668:	2002      	movs	r0, #2
 800066a:	f000 fd95 	bl	8001198 <BSP_LED_On>

  SessionContext sessionContext = {
 800066e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000672:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000676:	4618      	mov	r0, r3
 8000678:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800067c:	461a      	mov	r2, r3
 800067e:	2100      	movs	r1, #0
 8000680:	f006 fbc8 	bl	8006e14 <memset>
 8000684:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000688:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800068c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000696:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800069a:	2264      	movs	r2, #100	@ 0x64
 800069c:	609a      	str	r2, [r3, #8]
		  .state = MASTER,			// Start as Master
		  .rxTimeout = 3000,		// ms
		  .txDelay = 100 			// ms
  };
  start_RX_mode(&sessionContext);	// Start by listening
 800069e:	463b      	mov	r3, r7
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 faa9 	bl	8000bf8 <start_RX_mode>

  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006a6:	2025      	movs	r0, #37	@ 0x25
 80006a8:	f002 f81d 	bl	80026e6 <HAL_NVIC_EnableIRQ>
  messageReady = false;
 80006ac:	4b0e      	ldr	r3, [pc, #56]	@ (80006e8 <main+0x10c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]

  while (1)
  {
    /* USER CODE END WHILE */

	currentEvent = NULL;
 80006b2:	4b13      	ldr	r3, [pc, #76]	@ (8000700 <main+0x124>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
	while(!currentEvent) HAL_UART_Receive_IT(&huart2, input, 1);
 80006b8:	e004      	b.n	80006c4 <main+0xe8>
 80006ba:	2201      	movs	r2, #1
 80006bc:	4908      	ldr	r1, [pc, #32]	@ (80006e0 <main+0x104>)
 80006be:	4809      	ldr	r0, [pc, #36]	@ (80006e4 <main+0x108>)
 80006c0:	f004 fb76 	bl	8004db0 <HAL_UART_Receive_IT>
 80006c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000700 <main+0x124>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d0f6      	beq.n	80006ba <main+0xde>
	currentEvent(&sessionContext);
 80006cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000700 <main+0x124>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	463a      	mov	r2, r7
 80006d2:	4610      	mov	r0, r2
 80006d4:	4798      	blx	r3
	currentEvent = NULL;
 80006d6:	e7ec      	b.n	80006b2 <main+0xd6>
 80006d8:	08007728 	.word	0x08007728
 80006dc:	200000a0 	.word	0x200000a0
 80006e0:	200002a0 	.word	0x200002a0
 80006e4:	200003d0 	.word	0x200003d0
 80006e8:	200002a4 	.word	0x200002a4
 80006ec:	200001a0 	.word	0x200001a0
 80006f0:	0800777c 	.word	0x0800777c
 80006f4:	20000004 	.word	0x20000004
 80006f8:	20000018 	.word	0x20000018
 80006fc:	08007780 	.word	0x08007780
 8000700:	200003a8 	.word	0x200003a8

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b09a      	sub	sp, #104	@ 0x68
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 0320 	add.w	r3, r7, #32
 800070e:	2248      	movs	r2, #72	@ 0x48
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f006 fb7e 	bl	8006e14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]
 8000726:	615a      	str	r2, [r3, #20]
 8000728:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800072a:	4b1e      	ldr	r3, [pc, #120]	@ (80007a4 <SystemClock_Config+0xa0>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000732:	4a1c      	ldr	r2, [pc, #112]	@ (80007a4 <SystemClock_Config+0xa0>)
 8000734:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000738:	6013      	str	r3, [r2, #0]
 800073a:	4b1a      	ldr	r3, [pc, #104]	@ (80007a4 <SystemClock_Config+0xa0>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000746:	2320      	movs	r3, #32
 8000748:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800074a:	2301      	movs	r3, #1
 800074c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800074e:	2300      	movs	r3, #0
 8000750:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000752:	23b0      	movs	r3, #176	@ 0xb0
 8000754:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000756:	2300      	movs	r3, #0
 8000758:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075a:	f107 0320 	add.w	r3, r7, #32
 800075e:	4618      	mov	r0, r3
 8000760:	f002 fd08 	bl	8003174 <HAL_RCC_OscConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800076a:	f000 fb09 	bl	8000d80 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800076e:	234f      	movs	r3, #79	@ 0x4f
 8000770:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	2102      	movs	r1, #2
 800078a:	4618      	mov	r0, r3
 800078c:	f003 f874 	bl	8003878 <HAL_RCC_ClockConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000796:	f000 faf3 	bl	8000d80 <Error_Handler>
  }
}
 800079a:	bf00      	nop
 800079c:	3768      	adds	r7, #104	@ 0x68
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	58000400 	.word	0x58000400

080007a8 <UART_Transmit>:
 *  APB clocks = AHB = SYSCLK;
 *  flash latency 2.
 *  This is a low-power, simple config suitable for the WL.
 */

void UART_Transmit(const char* string){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)string, strlen(string), HAL_MAX_DELAY);
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f7ff fce5 	bl	8000180 <strlen>
 80007b6:	4603      	mov	r3, r0
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	f04f 33ff 	mov.w	r3, #4294967295
 80007be:	6879      	ldr	r1, [r7, #4]
 80007c0:	4803      	ldr	r0, [pc, #12]	@ (80007d0 <UART_Transmit+0x28>)
 80007c2:	f004 fa6e 	bl	8004ca2 <HAL_UART_Transmit>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200003d0 	.word	0x200003d0

080007d4 <resetTerminal>:

void resetTerminal(){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	count = (uint16_t)snprintf((char*)buffer, MAX_BUFFER_SIZE, "%s: ", id);
 80007d8:	4b07      	ldr	r3, [pc, #28]	@ (80007f8 <resetTerminal+0x24>)
 80007da:	4a08      	ldr	r2, [pc, #32]	@ (80007fc <resetTerminal+0x28>)
 80007dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007e0:	4807      	ldr	r0, [pc, #28]	@ (8000800 <resetTerminal+0x2c>)
 80007e2:	f006 fabf 	bl	8006d64 <sniprintf>
 80007e6:	4603      	mov	r3, r0
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <resetTerminal+0x30>)
 80007ec:	801a      	strh	r2, [r3, #0]
	UART_Transmit((char*)buffer);
 80007ee:	4804      	ldr	r0, [pc, #16]	@ (8000800 <resetTerminal+0x2c>)
 80007f0:	f7ff ffda 	bl	80007a8 <UART_Transmit>
}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000004 	.word	0x20000004
 80007fc:	08007788 	.word	0x08007788
 8000800:	200000a0 	.word	0x200000a0
 8000804:	200002a2 	.word	0x200002a2

08000808 <interruptTerminal>:

void interruptTerminal(const char* interruption){
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	for(uint16_t x = 0; x < count; x++) UART_Transmit("\b \b");
 8000810:	2300      	movs	r3, #0
 8000812:	81fb      	strh	r3, [r7, #14]
 8000814:	e005      	b.n	8000822 <interruptTerminal+0x1a>
 8000816:	4810      	ldr	r0, [pc, #64]	@ (8000858 <interruptTerminal+0x50>)
 8000818:	f7ff ffc6 	bl	80007a8 <UART_Transmit>
 800081c:	89fb      	ldrh	r3, [r7, #14]
 800081e:	3301      	adds	r3, #1
 8000820:	81fb      	strh	r3, [r7, #14]
 8000822:	4b0e      	ldr	r3, [pc, #56]	@ (800085c <interruptTerminal+0x54>)
 8000824:	881b      	ldrh	r3, [r3, #0]
 8000826:	89fa      	ldrh	r2, [r7, #14]
 8000828:	429a      	cmp	r2, r3
 800082a:	d3f4      	bcc.n	8000816 <interruptTerminal+0xe>
	UART_Transmit("\r\n");
 800082c:	480c      	ldr	r0, [pc, #48]	@ (8000860 <interruptTerminal+0x58>)
 800082e:	f7ff ffbb 	bl	80007a8 <UART_Transmit>
	UART_Transmit(interruption);
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f7ff ffb8 	bl	80007a8 <UART_Transmit>
	UART_Transmit("\r\n\r\n");
 8000838:	480a      	ldr	r0, [pc, #40]	@ (8000864 <interruptTerminal+0x5c>)
 800083a:	f7ff ffb5 	bl	80007a8 <UART_Transmit>
	HAL_UART_Transmit(&huart2, buffer, count, HAL_MAX_DELAY);
 800083e:	4b07      	ldr	r3, [pc, #28]	@ (800085c <interruptTerminal+0x54>)
 8000840:	881a      	ldrh	r2, [r3, #0]
 8000842:	f04f 33ff 	mov.w	r3, #4294967295
 8000846:	4908      	ldr	r1, [pc, #32]	@ (8000868 <interruptTerminal+0x60>)
 8000848:	4808      	ldr	r0, [pc, #32]	@ (800086c <interruptTerminal+0x64>)
 800084a:	f004 fa2a 	bl	8004ca2 <HAL_UART_Transmit>
}
 800084e:	bf00      	nop
 8000850:	3710      	adds	r7, #16
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	08007790 	.word	0x08007790
 800085c:	200002a2 	.word	0x200002a2
 8000860:	08007794 	.word	0x08007794
 8000864:	08007780 	.word	0x08007780
 8000868:	200000a0 	.word	0x200000a0
 800086c:	200003d0 	.word	0x200003d0

08000870 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	switch(input[0]){
 8000878:	4b23      	ldr	r3, [pc, #140]	@ (8000908 <HAL_UART_RxCpltCallback+0x98>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2b08      	cmp	r3, #8
 800087e:	d015      	beq.n	80008ac <HAL_UART_RxCpltCallback+0x3c>
 8000880:	2b0d      	cmp	r3, #13
 8000882:	d125      	bne.n	80008d0 <HAL_UART_RxCpltCallback+0x60>
		case 0xd:
			UART_Transmit("\r\n");
 8000884:	4821      	ldr	r0, [pc, #132]	@ (800090c <HAL_UART_RxCpltCallback+0x9c>)
 8000886:	f7ff ff8f 	bl	80007a8 <UART_Transmit>
			sprintf((char*)output, "%s", (char*)buffer);
 800088a:	4a21      	ldr	r2, [pc, #132]	@ (8000910 <HAL_UART_RxCpltCallback+0xa0>)
 800088c:	4921      	ldr	r1, [pc, #132]	@ (8000914 <HAL_UART_RxCpltCallback+0xa4>)
 800088e:	4822      	ldr	r0, [pc, #136]	@ (8000918 <HAL_UART_RxCpltCallback+0xa8>)
 8000890:	f006 fa9e 	bl	8006dd0 <siprintf>
			output[count] = '\0';
 8000894:	4b21      	ldr	r3, [pc, #132]	@ (800091c <HAL_UART_RxCpltCallback+0xac>)
 8000896:	881b      	ldrh	r3, [r3, #0]
 8000898:	461a      	mov	r2, r3
 800089a:	4b1f      	ldr	r3, [pc, #124]	@ (8000918 <HAL_UART_RxCpltCallback+0xa8>)
 800089c:	2100      	movs	r1, #0
 800089e:	5499      	strb	r1, [r3, r2]
			messageReady = true;
 80008a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000920 <HAL_UART_RxCpltCallback+0xb0>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	701a      	strb	r2, [r3, #0]
			resetTerminal();
 80008a6:	f7ff ff95 	bl	80007d4 <resetTerminal>
			break;
 80008aa:	e029      	b.n	8000900 <HAL_UART_RxCpltCallback+0x90>

		case 0x8:
			if(count > (idLen + 2)){
 80008ac:	4b1b      	ldr	r3, [pc, #108]	@ (800091c <HAL_UART_RxCpltCallback+0xac>)
 80008ae:	881b      	ldrh	r3, [r3, #0]
 80008b0:	461a      	mov	r2, r3
 80008b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000924 <HAL_UART_RxCpltCallback+0xb4>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	3302      	adds	r3, #2
 80008b8:	429a      	cmp	r2, r3
 80008ba:	dd20      	ble.n	80008fe <HAL_UART_RxCpltCallback+0x8e>
				count--;
 80008bc:	4b17      	ldr	r3, [pc, #92]	@ (800091c <HAL_UART_RxCpltCallback+0xac>)
 80008be:	881b      	ldrh	r3, [r3, #0]
 80008c0:	3b01      	subs	r3, #1
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	4b15      	ldr	r3, [pc, #84]	@ (800091c <HAL_UART_RxCpltCallback+0xac>)
 80008c6:	801a      	strh	r2, [r3, #0]
				UART_Transmit("\b \b");
 80008c8:	4817      	ldr	r0, [pc, #92]	@ (8000928 <HAL_UART_RxCpltCallback+0xb8>)
 80008ca:	f7ff ff6d 	bl	80007a8 <UART_Transmit>
			}
			break;
 80008ce:	e016      	b.n	80008fe <HAL_UART_RxCpltCallback+0x8e>

		default:
			if(count < MAX_BUFFER_SIZE){
 80008d0:	4b12      	ldr	r3, [pc, #72]	@ (800091c <HAL_UART_RxCpltCallback+0xac>)
 80008d2:	881b      	ldrh	r3, [r3, #0]
 80008d4:	2bff      	cmp	r3, #255	@ 0xff
 80008d6:	d813      	bhi.n	8000900 <HAL_UART_RxCpltCallback+0x90>
				buffer[count++] = input[0];
 80008d8:	4b10      	ldr	r3, [pc, #64]	@ (800091c <HAL_UART_RxCpltCallback+0xac>)
 80008da:	881b      	ldrh	r3, [r3, #0]
 80008dc:	1c5a      	adds	r2, r3, #1
 80008de:	b291      	uxth	r1, r2
 80008e0:	4a0e      	ldr	r2, [pc, #56]	@ (800091c <HAL_UART_RxCpltCallback+0xac>)
 80008e2:	8011      	strh	r1, [r2, #0]
 80008e4:	461a      	mov	r2, r3
 80008e6:	4b08      	ldr	r3, [pc, #32]	@ (8000908 <HAL_UART_RxCpltCallback+0x98>)
 80008e8:	7819      	ldrb	r1, [r3, #0]
 80008ea:	4b09      	ldr	r3, [pc, #36]	@ (8000910 <HAL_UART_RxCpltCallback+0xa0>)
 80008ec:	5499      	strb	r1, [r3, r2]
				HAL_UART_Transmit(huart, input, 1, HAL_MAX_DELAY);
 80008ee:	f04f 33ff 	mov.w	r3, #4294967295
 80008f2:	2201      	movs	r2, #1
 80008f4:	4904      	ldr	r1, [pc, #16]	@ (8000908 <HAL_UART_RxCpltCallback+0x98>)
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f004 f9d3 	bl	8004ca2 <HAL_UART_Transmit>
			}
	}
}
 80008fc:	e000      	b.n	8000900 <HAL_UART_RxCpltCallback+0x90>
			break;
 80008fe:	bf00      	nop
}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	200002a0 	.word	0x200002a0
 800090c:	08007794 	.word	0x08007794
 8000910:	200000a0 	.word	0x200000a0
 8000914:	0800777c 	.word	0x0800777c
 8000918:	200001a0 	.word	0x200001a0
 800091c:	200002a2 	.word	0x200002a2
 8000920:	200002a4 	.word	0x200002a4
 8000924:	20000018 	.word	0x20000018
 8000928:	08007790 	.word	0x08007790

0800092c <Radio_DIO_IRq_Callback_Handler>:

void Radio_DIO_IRq_Callback_Handler(const RadioIrqMasks_t radioIRq){
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	80fb      	strh	r3, [r7, #6]
	switch(radioIRq){
 8000936:	88fb      	ldrh	r3, [r7, #6]
 8000938:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800093c:	d026      	beq.n	800098c <Radio_DIO_IRq_Callback_Handler+0x60>
 800093e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000942:	dc5c      	bgt.n	80009fe <Radio_DIO_IRq_Callback_Handler+0xd2>
 8000944:	2b40      	cmp	r3, #64	@ 0x40
 8000946:	d04c      	beq.n	80009e2 <Radio_DIO_IRq_Callback_Handler+0xb6>
 8000948:	2b40      	cmp	r3, #64	@ 0x40
 800094a:	dc58      	bgt.n	80009fe <Radio_DIO_IRq_Callback_Handler+0xd2>
 800094c:	2b01      	cmp	r3, #1
 800094e:	d002      	beq.n	8000956 <Radio_DIO_IRq_Callback_Handler+0x2a>
 8000950:	2b02      	cmp	r3, #2
 8000952:	d004      	beq.n	800095e <Radio_DIO_IRq_Callback_Handler+0x32>
			interruptTerminal("RX CRC ERROR");
			sprintf((char*)output, "\\\\\\");	// message to repeat last message
			output[4] = '\0';
			messageReady = true;
			break;
		default: break;
 8000954:	e053      	b.n	80009fe <Radio_DIO_IRq_Callback_Handler+0xd2>
			currentEvent = start_RX_mode;
 8000956:	4b2c      	ldr	r3, [pc, #176]	@ (8000a08 <Radio_DIO_IRq_Callback_Handler+0xdc>)
 8000958:	4a2c      	ldr	r2, [pc, #176]	@ (8000a0c <Radio_DIO_IRq_Callback_Handler+0xe0>)
 800095a:	601a      	str	r2, [r3, #0]
			break;
 800095c:	e050      	b.n	8000a00 <Radio_DIO_IRq_Callback_Handler+0xd4>
			if(!connected){
 800095e:	4b2c      	ldr	r3, [pc, #176]	@ (8000a10 <Radio_DIO_IRq_Callback_Handler+0xe4>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	f083 0301 	eor.w	r3, r3, #1
 8000966:	b2db      	uxtb	r3, r3
 8000968:	2b00      	cmp	r3, #0
 800096a:	d00b      	beq.n	8000984 <Radio_DIO_IRq_Callback_Handler+0x58>
				connected = true;
 800096c:	4b28      	ldr	r3, [pc, #160]	@ (8000a10 <Radio_DIO_IRq_Callback_Handler+0xe4>)
 800096e:	2201      	movs	r2, #1
 8000970:	701a      	strb	r2, [r3, #0]
				retries = 0;
 8000972:	4b28      	ldr	r3, [pc, #160]	@ (8000a14 <Radio_DIO_IRq_Callback_Handler+0xe8>)
 8000974:	2200      	movs	r2, #0
 8000976:	801a      	strh	r2, [r3, #0]
				BSP_LED_Off(LED_RED);
 8000978:	2002      	movs	r0, #2
 800097a:	f000 fc27 	bl	80011cc <BSP_LED_Off>
				interruptTerminal("Connected");
 800097e:	4826      	ldr	r0, [pc, #152]	@ (8000a18 <Radio_DIO_IRq_Callback_Handler+0xec>)
 8000980:	f7ff ff42 	bl	8000808 <interruptTerminal>
			currentEvent = RX_done_event;
 8000984:	4b20      	ldr	r3, [pc, #128]	@ (8000a08 <Radio_DIO_IRq_Callback_Handler+0xdc>)
 8000986:	4a25      	ldr	r2, [pc, #148]	@ (8000a1c <Radio_DIO_IRq_Callback_Handler+0xf0>)
 8000988:	601a      	str	r2, [r3, #0]
			break;
 800098a:	e039      	b.n	8000a00 <Radio_DIO_IRq_Callback_Handler+0xd4>
			switch(SUBGRF_GetOperatingMode()){
 800098c:	f000 fdac 	bl	80014e8 <SUBGRF_GetOperatingMode>
 8000990:	4603      	mov	r3, r0
 8000992:	2b04      	cmp	r3, #4
 8000994:	d002      	beq.n	800099c <Radio_DIO_IRq_Callback_Handler+0x70>
 8000996:	2b05      	cmp	r3, #5
 8000998:	d004      	beq.n	80009a4 <Radio_DIO_IRq_Callback_Handler+0x78>
				default:break;
 800099a:	e01e      	b.n	80009da <Radio_DIO_IRq_Callback_Handler+0xae>
					interruptTerminal("TX TIMEOUT");
 800099c:	4820      	ldr	r0, [pc, #128]	@ (8000a20 <Radio_DIO_IRq_Callback_Handler+0xf4>)
 800099e:	f7ff ff33 	bl	8000808 <interruptTerminal>
					break;
 80009a2:	e01a      	b.n	80009da <Radio_DIO_IRq_Callback_Handler+0xae>
					if(connected) if(++retries > RETRY_LIMIT){
 80009a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a10 <Radio_DIO_IRq_Callback_Handler+0xe4>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d015      	beq.n	80009d8 <Radio_DIO_IRq_Callback_Handler+0xac>
 80009ac:	4b19      	ldr	r3, [pc, #100]	@ (8000a14 <Radio_DIO_IRq_Callback_Handler+0xe8>)
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	3301      	adds	r3, #1
 80009b2:	b29a      	uxth	r2, r3
 80009b4:	4b17      	ldr	r3, [pc, #92]	@ (8000a14 <Radio_DIO_IRq_Callback_Handler+0xe8>)
 80009b6:	801a      	strh	r2, [r3, #0]
 80009b8:	4b16      	ldr	r3, [pc, #88]	@ (8000a14 <Radio_DIO_IRq_Callback_Handler+0xe8>)
 80009ba:	881b      	ldrh	r3, [r3, #0]
 80009bc:	2b0a      	cmp	r3, #10
 80009be:	d90b      	bls.n	80009d8 <Radio_DIO_IRq_Callback_Handler+0xac>
						connected = false;
 80009c0:	4b13      	ldr	r3, [pc, #76]	@ (8000a10 <Radio_DIO_IRq_Callback_Handler+0xe4>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	701a      	strb	r2, [r3, #0]
						BSP_LED_On(LED_RED);
 80009c6:	2002      	movs	r0, #2
 80009c8:	f000 fbe6 	bl	8001198 <BSP_LED_On>
						BSP_LED_Off(LED_BLUE|LED_GREEN);
 80009cc:	2001      	movs	r0, #1
 80009ce:	f000 fbfd 	bl	80011cc <BSP_LED_Off>
						interruptTerminal("\r\nDisconnected\r\n");
 80009d2:	4814      	ldr	r0, [pc, #80]	@ (8000a24 <Radio_DIO_IRq_Callback_Handler+0xf8>)
 80009d4:	f7ff ff18 	bl	8000808 <interruptTerminal>
					break;
 80009d8:	bf00      	nop
			currentEvent = timeout_error_event;
 80009da:	4b0b      	ldr	r3, [pc, #44]	@ (8000a08 <Radio_DIO_IRq_Callback_Handler+0xdc>)
 80009dc:	4a12      	ldr	r2, [pc, #72]	@ (8000a28 <Radio_DIO_IRq_Callback_Handler+0xfc>)
 80009de:	601a      	str	r2, [r3, #0]
			break;
 80009e0:	e00e      	b.n	8000a00 <Radio_DIO_IRq_Callback_Handler+0xd4>
			interruptTerminal("RX CRC ERROR");
 80009e2:	4812      	ldr	r0, [pc, #72]	@ (8000a2c <Radio_DIO_IRq_Callback_Handler+0x100>)
 80009e4:	f7ff ff10 	bl	8000808 <interruptTerminal>
			sprintf((char*)output, "\\\\\\");	// message to repeat last message
 80009e8:	4911      	ldr	r1, [pc, #68]	@ (8000a30 <Radio_DIO_IRq_Callback_Handler+0x104>)
 80009ea:	4812      	ldr	r0, [pc, #72]	@ (8000a34 <Radio_DIO_IRq_Callback_Handler+0x108>)
 80009ec:	f006 f9f0 	bl	8006dd0 <siprintf>
			output[4] = '\0';
 80009f0:	4b10      	ldr	r3, [pc, #64]	@ (8000a34 <Radio_DIO_IRq_Callback_Handler+0x108>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	711a      	strb	r2, [r3, #4]
			messageReady = true;
 80009f6:	4b10      	ldr	r3, [pc, #64]	@ (8000a38 <Radio_DIO_IRq_Callback_Handler+0x10c>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	701a      	strb	r2, [r3, #0]
			break;
 80009fc:	e000      	b.n	8000a00 <Radio_DIO_IRq_Callback_Handler+0xd4>
		default: break;
 80009fe:	bf00      	nop
	}
}
 8000a00:	bf00      	nop
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	200003a8 	.word	0x200003a8
 8000a0c:	08000bf9 	.word	0x08000bf9
 8000a10:	200002a5 	.word	0x200002a5
 8000a14:	20000000 	.word	0x20000000
 8000a18:	08007798 	.word	0x08007798
 8000a1c:	08000c6d 	.word	0x08000c6d
 8000a20:	080077a4 	.word	0x080077a4
 8000a24:	080077b0 	.word	0x080077b0
 8000a28:	08000c45 	.word	0x08000c45
 8000a2c:	080077c4 	.word	0x080077c4
 8000a30:	080077d4 	.word	0x080077d4
 8000a34:	200001a0 	.word	0x200001a0
 8000a38:	200002a4 	.word	0x200002a4

08000a3c <Radio_Init>:

/** Initialize the Sub-GHz radio and dependent hardware.
  */
void Radio_Init(){
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b088      	sub	sp, #32
 8000a40:	af00      	add	r7, sp, #0
	// Initialize the hardware (SPI bus, TCXO control, RF switch) or the SUBGHZ (SX126x) and registers the IRQ callback.
	SUBGRF_Init(Radio_DIO_IRq_Callback_Handler);
 8000a42:	4830      	ldr	r0, [pc, #192]	@ (8000b04 <Radio_Init+0xc8>)
 8000a44:	f000 fd08 	bl	8001458 <SUBGRF_Init>

	// Use DCDC converter if `DCDC_ENABLE` is defined in radio_conf.h
	// "By default, the SMPS clock detection is disabled and must be enabled before enabling the SMPS." (6.1 in RM0453)
	SUBGRF_WriteRegister(SUBGHZ_SMPSC0R, (SUBGRF_ReadRegister(SUBGHZ_SMPSC0R) | SMPS_CLK_DET_ENABLE));
 8000a48:	f640 1016 	movw	r0, #2326	@ 0x916
 8000a4c:	f001 fac0 	bl	8001fd0 <SUBGRF_ReadRegister>
 8000a50:	4603      	mov	r3, r0
 8000a52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	4619      	mov	r1, r3
 8000a5a:	f640 1016 	movw	r0, #2326	@ 0x916
 8000a5e:	f001 faa3 	bl	8001fa8 <SUBGRF_WriteRegister>
	SUBGRF_SetRegulatorMode(); // use DCDC if configured in radio_conf.h
 8000a62:	f000 fe3c 	bl	80016de <SUBGRF_SetRegulatorMode>

	// Use the whole 256-byte buffer for both TX and RX (starting at 0)
	SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 8000a66:	2100      	movs	r1, #0
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f001 fa07 	bl	8001e7c <SUBGRF_SetBufferBaseAddress>

	SUBGRF_SetRfFrequency(RF_FREQ);
 8000a6e:	4826      	ldr	r0, [pc, #152]	@ (8000b08 <Radio_Init+0xcc>)
 8000a70:	f000 ff60 	bl	8001934 <SUBGRF_SetRfFrequency>
	SUBGRF_SetRfTxPower(TX_POWER);
 8000a74:	200e      	movs	r0, #14
 8000a76:	f001 fb91 	bl	800219c <SUBGRF_SetRfTxPower>
	SUBGRF_SetStopRxTimerOnPreambleDetect(false);
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f000 fe20 	bl	80016c0 <SUBGRF_SetStopRxTimerOnPreambleDetect>

	SUBGRF_SetPacketType(PACKET_TYPE_LORA);
 8000a80:	2001      	movs	r0, #1
 8000a82:	f000 ff9d 	bl	80019c0 <SUBGRF_SetPacketType>

	// Sets LoRa private syncword (not the public 0x34). Ensures you only talk to your nodes (not public network).
	SUBGRF_WriteRegister(REG_LR_SYNCWORD, (LORA_MAC_PRIVATE_SYNCWORD >> 8) & 0xFF);
 8000a86:	2114      	movs	r1, #20
 8000a88:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8000a8c:	f001 fa8c 	bl	8001fa8 <SUBGRF_WriteRegister>
	SUBGRF_WriteRegister(REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF);
 8000a90:	2124      	movs	r1, #36	@ 0x24
 8000a92:	f240 7041 	movw	r0, #1857	@ 0x741
 8000a96:	f001 fa87 	bl	8001fa8 <SUBGRF_WriteRegister>

	// Applies SF/BW/CR. Low data rate optimize off (OK for SF7/BW125).
	ModulationParams_t modulationParams;
	modulationParams.PacketType = PACKET_TYPE_LORA;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	713b      	strb	r3, [r7, #4]
	modulationParams.Params.LoRa.Bandwidth = LORA_BANDWIDTH;
 8000a9e:	2304      	movs	r3, #4
 8000aa0:	777b      	strb	r3, [r7, #29]
	modulationParams.Params.LoRa.CodingRate = LORA_CODING_RATE;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	77bb      	strb	r3, [r7, #30]
	modulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	77fb      	strb	r3, [r7, #31]
	modulationParams.Params.LoRa.SpreadingFactor = LORA_SPREADING_FACTOR;
 8000aaa:	2307      	movs	r3, #7
 8000aac:	773b      	strb	r3, [r7, #28]
	SUBGRF_SetModulationParams(&modulationParams);
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f001 f879 	bl	8001ba8 <SUBGRF_SetModulationParams>

	// CRC on, variable length, normal IQ, long RX FIFO length.
	packetParams.PacketType = PACKET_TYPE_LORA;
 8000ab6:	4b15      	ldr	r3, [pc, #84]	@ (8000b0c <Radio_Init+0xd0>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	701a      	strb	r2, [r3, #0]
	packetParams.Params.LoRa.CrcMode = LORA_CRC_ON;
 8000abc:	4b13      	ldr	r3, [pc, #76]	@ (8000b0c <Radio_Init+0xd0>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	749a      	strb	r2, [r3, #18]
	packetParams.Params.LoRa.HeaderType = LORA_PACKET_VARIABLE_LENGTH;
 8000ac2:	4b12      	ldr	r3, [pc, #72]	@ (8000b0c <Radio_Init+0xd0>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	741a      	strb	r2, [r3, #16]
	packetParams.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 8000ac8:	4b10      	ldr	r3, [pc, #64]	@ (8000b0c <Radio_Init+0xd0>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	74da      	strb	r2, [r3, #19]
	packetParams.Params.LoRa.PayloadLength = 0xFF;
 8000ace:	4b0f      	ldr	r3, [pc, #60]	@ (8000b0c <Radio_Init+0xd0>)
 8000ad0:	22ff      	movs	r2, #255	@ 0xff
 8000ad2:	745a      	strb	r2, [r3, #17]
	packetParams.Params.LoRa.PreambleLength = LORA_PREAMBLE_LENGTH;
 8000ad4:	4b0d      	ldr	r3, [pc, #52]	@ (8000b0c <Radio_Init+0xd0>)
 8000ad6:	2208      	movs	r2, #8
 8000ad8:	81da      	strh	r2, [r3, #14]
	SUBGRF_SetPacketParams(&packetParams);
 8000ada:	480c      	ldr	r0, [pc, #48]	@ (8000b0c <Radio_Init+0xd0>)
 8000adc:	f001 f932 	bl	8001d44 <SUBGRF_SetPacketParams>

	// WORKAROUND - Optimizing the Inverted IQ Operation, see DS_SX1261-2_V1.2 datasheet chapter 15.4
	// RegIqPolaritySetup @address 0x0736
	// SX126x errata: improves IQ handling (safe even with normal IQ).
	SUBGRF_WriteRegister(0x0736, SUBGRF_ReadRegister(0x0736) | (1 << 2));
 8000ae0:	f240 7036 	movw	r0, #1846	@ 0x736
 8000ae4:	f001 fa74 	bl	8001fd0 <SUBGRF_ReadRegister>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	f043 0304 	orr.w	r3, r3, #4
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	4619      	mov	r1, r3
 8000af2:	f240 7036 	movw	r0, #1846	@ 0x736
 8000af6:	f001 fa57 	bl	8001fa8 <SUBGRF_WriteRegister>
}
 8000afa:	bf00      	nop
 8000afc:	3720      	adds	r7, #32
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	0800092d 	.word	0x0800092d
 8000b08:	33bca100 	.word	0x33bca100
 8000b0c:	200003ac 	.word	0x200003ac

08000b10 <SUBGRF_Transmit>:

void SUBGRF_Transmit(uint8_t* payload, const uint8_t size){
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	460b      	mov	r3, r1
 8000b1a:	70fb      	strb	r3, [r7, #3]
	uint16_t mask = IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT;
 8000b1c:	f240 2301 	movw	r3, #513	@ 0x201
 8000b20:	81fb      	strh	r3, [r7, #14]
	SUBGRF_SetDioIrqParams(mask, mask, IRQ_RADIO_NONE, IRQ_RADIO_NONE);
 8000b22:	89f9      	ldrh	r1, [r7, #14]
 8000b24:	89f8      	ldrh	r0, [r7, #14]
 8000b26:	2300      	movs	r3, #0
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f000 fea7 	bl	800187c <SUBGRF_SetDioIrqParams>
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 8000b2e:	2101      	movs	r1, #1
 8000b30:	2001      	movs	r0, #1
 8000b32:	f001 fb0b 	bl	800214c <SUBGRF_SetSwitch>
	// Workaround 5.1 in DS.SX1261-2.W.APP (before each packet transmission)
	// SX126x errata 5.1: set bit before each TX
	SUBGRF_WriteRegister(0x0889, (SUBGRF_ReadRegister(0x0889) | 0x04));
 8000b36:	f640 0089 	movw	r0, #2185	@ 0x889
 8000b3a:	f001 fa49 	bl	8001fd0 <SUBGRF_ReadRegister>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	f043 0304 	orr.w	r3, r3, #4
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	4619      	mov	r1, r3
 8000b48:	f640 0089 	movw	r0, #2185	@ 0x889
 8000b4c:	f001 fa2c 	bl	8001fa8 <SUBGRF_WriteRegister>
	packetParams.Params.LoRa.PayloadLength = size;
 8000b50:	4a07      	ldr	r2, [pc, #28]	@ (8000b70 <SUBGRF_Transmit+0x60>)
 8000b52:	78fb      	ldrb	r3, [r7, #3]
 8000b54:	7453      	strb	r3, [r2, #17]
	SUBGRF_SetPacketParams(&packetParams);
 8000b56:	4806      	ldr	r0, [pc, #24]	@ (8000b70 <SUBGRF_Transmit+0x60>)
 8000b58:	f001 f8f4 	bl	8001d44 <SUBGRF_SetPacketParams>
	SUBGRF_SendPayload(payload, size, 0);
 8000b5c:	78fb      	ldrb	r3, [r7, #3]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	4619      	mov	r1, r3
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f000 fcfc 	bl	8001560 <SUBGRF_SendPayload>
}
 8000b68:	bf00      	nop
 8000b6a:	3710      	adds	r7, #16
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	200003ac 	.word	0x200003ac

08000b74 <start_TX_mode>:

void start_TX_mode(SessionContext *sessionContext)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	HAL_Delay(sessionContext->txDelay);						// Delay to allow one to be fixed as Master and the other as slave
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	689b      	ldr	r3, [r3, #8]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f001 fc77 	bl	8002474 <HAL_Delay>
	sessionContext->subState = TX;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2201      	movs	r2, #1
 8000b8a:	705a      	strb	r2, [r3, #1]

	if(messageReady){										// Send Message if ready instead of \\\PING / \\\PONG
 8000b8c:	4b14      	ldr	r3, [pc, #80]	@ (8000be0 <start_TX_mode+0x6c>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d016      	beq.n	8000bc2 <start_TX_mode+0x4e>
		uint8_t size = sprintf(backup, "%s", (char*)output);
 8000b94:	4a13      	ldr	r2, [pc, #76]	@ (8000be4 <start_TX_mode+0x70>)
 8000b96:	4914      	ldr	r1, [pc, #80]	@ (8000be8 <start_TX_mode+0x74>)
 8000b98:	4814      	ldr	r0, [pc, #80]	@ (8000bec <start_TX_mode+0x78>)
 8000b9a:	f006 f919 	bl	8006dd0 <siprintf>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	73fb      	strb	r3, [r7, #15]
		backup[size++] = '\0';								// + 1 for last null character
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	1c5a      	adds	r2, r3, #1
 8000ba6:	73fa      	strb	r2, [r7, #15]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b10      	ldr	r3, [pc, #64]	@ (8000bec <start_TX_mode+0x78>)
 8000bac:	2100      	movs	r1, #0
 8000bae:	5499      	strb	r1, [r3, r2]
		SUBGRF_Transmit(output, size);
 8000bb0:	7bfb      	ldrb	r3, [r7, #15]
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	480b      	ldr	r0, [pc, #44]	@ (8000be4 <start_TX_mode+0x70>)
 8000bb6:	f7ff ffab 	bl	8000b10 <SUBGRF_Transmit>
		messageReady = false;
 8000bba:	4b09      	ldr	r3, [pc, #36]	@ (8000be0 <start_TX_mode+0x6c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	701a      	strb	r2, [r3, #0]
	}else{
		SUBGRF_Transmit((uint8_t*)((sessionContext->state == MASTER)?"\\\\\\PING":"\\\\\\PONG"), 7);
	}
}
 8000bc0:	e00a      	b.n	8000bd8 <start_TX_mode+0x64>
		SUBGRF_Transmit((uint8_t*)((sessionContext->state == MASTER)?"\\\\\\PING":"\\\\\\PONG"), 7);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d101      	bne.n	8000bce <start_TX_mode+0x5a>
 8000bca:	4b09      	ldr	r3, [pc, #36]	@ (8000bf0 <start_TX_mode+0x7c>)
 8000bcc:	e000      	b.n	8000bd0 <start_TX_mode+0x5c>
 8000bce:	4b09      	ldr	r3, [pc, #36]	@ (8000bf4 <start_TX_mode+0x80>)
 8000bd0:	2107      	movs	r1, #7
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff ff9c 	bl	8000b10 <SUBGRF_Transmit>
}
 8000bd8:	bf00      	nop
 8000bda:	3710      	adds	r7, #16
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	200002a4 	.word	0x200002a4
 8000be4:	200001a0 	.word	0x200001a0
 8000be8:	0800777c 	.word	0x0800777c
 8000bec:	200002a8 	.word	0x200002a8
 8000bf0:	080077d8 	.word	0x080077d8
 8000bf4:	080077e0 	.word	0x080077e0

08000bf8 <start_RX_mode>:

void start_RX_mode(SessionContext *sessionContext){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	sessionContext->subState = RX;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2200      	movs	r2, #0
 8000c04:	705a      	strb	r2, [r3, #1]

	uint16_t mask = IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR;
 8000c06:	f240 2362 	movw	r3, #610	@ 0x262
 8000c0a:	81fb      	strh	r3, [r7, #14]
	// Arm radio IRQs for RX done, timeout, CRC error
	SUBGRF_SetDioIrqParams(mask, mask, IRQ_RADIO_NONE, IRQ_RADIO_NONE);
 8000c0c:	89f9      	ldrh	r1, [r7, #14]
 8000c0e:	89f8      	ldrh	r0, [r7, #14]
 8000c10:	2300      	movs	r3, #0
 8000c12:	2200      	movs	r2, #0
 8000c14:	f000 fe32 	bl	800187c <SUBGRF_SetDioIrqParams>
	// Set RF switch to RX path on low-power PA path
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 8000c18:	2100      	movs	r1, #0
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	f001 fa96 	bl	800214c <SUBGRF_SetSwitch>

	packetParams.Params.LoRa.PayloadLength = 0xFF;	// Maximum Length
 8000c20:	4b07      	ldr	r3, [pc, #28]	@ (8000c40 <start_RX_mode+0x48>)
 8000c22:	22ff      	movs	r2, #255	@ 0xff
 8000c24:	745a      	strb	r2, [r3, #17]
	SUBGRF_SetPacketParams(&packetParams);
 8000c26:	4806      	ldr	r0, [pc, #24]	@ (8000c40 <start_RX_mode+0x48>)
 8000c28:	f001 f88c 	bl	8001d44 <SUBGRF_SetPacketParams>
	// SetRx(timeout): SX126x timeout units are 15.625 µs (1/64 ms). Multiplying ms by 64 = << 6.
	SUBGRF_SetRx(sessionContext->rxTimeout << 6);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	019b      	lsls	r3, r3, #6
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 fd24 	bl	8001680 <SUBGRF_SetRx>
}
 8000c38:	bf00      	nop
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	200003ac 	.word	0x200003ac

08000c44 <timeout_error_event>:

/** MASTER/RX CRC/header error → treat like “no valid frame” and attempt TX "PING" after random backoff.
  * SLAVE/RX → simply re-enter RX.
  */
void timeout_error_event(SessionContext *sessionContext){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
	if(sessionContext->state == MASTER){
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d103      	bne.n	8000c5c <timeout_error_event+0x18>
		start_TX_mode(sessionContext);
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f7ff ff8d 	bl	8000b74 <start_TX_mode>
	}else{
		start_RX_mode(sessionContext);
	}
}
 8000c5a:	e002      	b.n	8000c62 <timeout_error_event+0x1e>
		start_RX_mode(sessionContext);
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f7ff ffcb 	bl	8000bf8 <start_RX_mode>
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
	...

08000c6c <RX_done_event>:

void RX_done_event(SessionContext *sessionContext){
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	@ 0x28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	// Initialize with MASTER values
	Led_TypeDef desiredLED = LED_BLUE, undesiredLED = LED_GREEN;
 8000c74:	2300      	movs	r3, #0
 8000c76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	char desiredChar = 'O';
 8000c80:	234f      	movs	r3, #79	@ 0x4f
 8000c82:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	PacketStatus_t packetStatus;

	// Workaround 15.3 in DS.SX1261-2.W.APP (following RX w/ timeout sequence fix)
	SUBGRF_WriteRegister(0x0920, 0x00);
 8000c86:	2100      	movs	r1, #0
 8000c88:	f44f 6012 	mov.w	r0, #2336	@ 0x920
 8000c8c:	f001 f98c 	bl	8001fa8 <SUBGRF_WriteRegister>
	SUBGRF_WriteRegister(0x0944, (SUBGRF_ReadRegister(0x0944) | 0x02));
 8000c90:	f640 1044 	movw	r0, #2372	@ 0x944
 8000c94:	f001 f99c 	bl	8001fd0 <SUBGRF_ReadRegister>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	f043 0302 	orr.w	r3, r3, #2
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	f640 1044 	movw	r0, #2372	@ 0x944
 8000ca6:	f001 f97f 	bl	8001fa8 <SUBGRF_WriteRegister>

	SUBGRF_GetPayload((uint8_t *)sessionContext->rxBuffer, &sessionContext->rxLen, 0xFF);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	f103 000d 	add.w	r0, r3, #13
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	330c      	adds	r3, #12
 8000cb4:	22ff      	movs	r2, #255	@ 0xff
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	f000 fc30 	bl	800151c <SUBGRF_GetPayload>
	SUBGRF_GetPacketStatus(&packetStatus);
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f001 f91f 	bl	8001f04 <SUBGRF_GetPacketStatus>

	if(sessionContext->state == SLAVE){
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d108      	bne.n	8000ce0 <RX_done_event+0x74>
		desiredChar = 'I';
 8000cce:	2349      	movs	r3, #73	@ 0x49
 8000cd0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		desiredLED = LED_GREEN;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		undesiredLED = LED_BLUE;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	}

	if ((sessionContext->rxBuffer[0] == '\\') && (sessionContext->rxBuffer[1] == '\\') && (sessionContext->rxBuffer[2] == '\\')){
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	7b5b      	ldrb	r3, [r3, #13]
 8000ce4:	2b5c      	cmp	r3, #92	@ 0x5c
 8000ce6:	d135      	bne.n	8000d54 <RX_done_event+0xe8>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	7b9b      	ldrb	r3, [r3, #14]
 8000cec:	2b5c      	cmp	r3, #92	@ 0x5c
 8000cee:	d131      	bne.n	8000d54 <RX_done_event+0xe8>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	7bdb      	ldrb	r3, [r3, #15]
 8000cf4:	2b5c      	cmp	r3, #92	@ 0x5c
 8000cf6:	d12d      	bne.n	8000d54 <RX_done_event+0xe8>
		if(sessionContext->rxBuffer[4] == desiredChar){
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	7c5b      	ldrb	r3, [r3, #17]
 8000cfc:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d10d      	bne.n	8000d20 <RX_done_event+0xb4>
			BSP_LED_Off(undesiredLED);
 8000d04:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f000 fa5f 	bl	80011cc <BSP_LED_Off>
			BSP_LED_Toggle(desiredLED);
 8000d0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000d12:	4618      	mov	r0, r3
 8000d14:	f000 fa74 	bl	8001200 <BSP_LED_Toggle>
			start_TX_mode(sessionContext);
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f7ff ff2b 	bl	8000b74 <start_TX_mode>
 8000d1e:	e021      	b.n	8000d64 <RX_done_event+0xf8>
			return;
		}
		else if(sessionContext->rxBuffer[4] == '\0'){
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	7c5b      	ldrb	r3, [r3, #17]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d111      	bne.n	8000d4c <RX_done_event+0xe0>
			interruptTerminal("TX CRC Error");
 8000d28:	4810      	ldr	r0, [pc, #64]	@ (8000d6c <RX_done_event+0x100>)
 8000d2a:	f7ff fd6d 	bl	8000808 <interruptTerminal>
			int size = sprintf((char*)output, "%s", backup);
 8000d2e:	4a10      	ldr	r2, [pc, #64]	@ (8000d70 <RX_done_event+0x104>)
 8000d30:	4910      	ldr	r1, [pc, #64]	@ (8000d74 <RX_done_event+0x108>)
 8000d32:	4811      	ldr	r0, [pc, #68]	@ (8000d78 <RX_done_event+0x10c>)
 8000d34:	f006 f84c 	bl	8006dd0 <siprintf>
 8000d38:	6238      	str	r0, [r7, #32]
			output[size] = '\0';
 8000d3a:	4a0f      	ldr	r2, [pc, #60]	@ (8000d78 <RX_done_event+0x10c>)
 8000d3c:	6a3b      	ldr	r3, [r7, #32]
 8000d3e:	4413      	add	r3, r2
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]
			messageReady = true;
 8000d44:	4b0d      	ldr	r3, [pc, #52]	@ (8000d7c <RX_done_event+0x110>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	701a      	strb	r2, [r3, #0]
		if(sessionContext->rxBuffer[4] == desiredChar){
 8000d4a:	e008      	b.n	8000d5e <RX_done_event+0xf2>
		}else{								// unDesired char
			sessionContext->state = SLAVE;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2201      	movs	r2, #1
 8000d50:	701a      	strb	r2, [r3, #0]
		if(sessionContext->rxBuffer[4] == desiredChar){
 8000d52:	e004      	b.n	8000d5e <RX_done_event+0xf2>
		}
	}else{
		interruptTerminal(sessionContext->rxBuffer);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	330d      	adds	r3, #13
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fd55 	bl	8000808 <interruptTerminal>
	}
	start_RX_mode(sessionContext);
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f7ff ff4a 	bl	8000bf8 <start_RX_mode>
}
 8000d64:	3728      	adds	r7, #40	@ 0x28
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	080077e8 	.word	0x080077e8
 8000d70:	200002a8 	.word	0x200002a8
 8000d74:	0800777c 	.word	0x0800777c
 8000d78:	200001a0 	.word	0x200001a0
 8000d7c:	200002a4 	.word	0x200002a4

08000d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d84:	b672      	cpsid	i
}
 8000d86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <Error_Handler+0x8>

08000d8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr

08000d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d9c:	bf00      	nop
 8000d9e:	e7fd      	b.n	8000d9c <NMI_Handler+0x4>

08000da0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <HardFault_Handler+0x4>

08000da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <MemManage_Handler+0x4>

08000db0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <BusFault_Handler+0x4>

08000db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <UsageFault_Handler+0x4>

08000dc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr

08000dcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr

08000dd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr

08000de4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de8:	f001 fb28 	bl	800243c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000df4:	4802      	ldr	r0, [pc, #8]	@ (8000e00 <USART2_IRQHandler+0x10>)
 8000df6:	f004 f827 	bl	8004e48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	200003d0 	.word	0x200003d0

08000e04 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000e08:	4802      	ldr	r0, [pc, #8]	@ (8000e14 <SUBGHZ_Radio_IRQHandler+0x10>)
 8000e0a:	f003 fd2b 	bl	8004864 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	200003c0 	.word	0x200003c0

08000e18 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000e20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e24:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000e26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000e30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e34:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
}
 8000e3e:	bf00      	nop
 8000e40:	3714      	adds	r7, #20
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr

08000e48 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8000e4c:	4b06      	ldr	r3, [pc, #24]	@ (8000e68 <MX_SUBGHZ_Init+0x20>)
 8000e4e:	2208      	movs	r2, #8
 8000e50:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8000e52:	4805      	ldr	r0, [pc, #20]	@ (8000e68 <MX_SUBGHZ_Init+0x20>)
 8000e54:	f003 fa84 	bl	8004360 <HAL_SUBGHZ_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8000e5e:	f7ff ff8f 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	200003c0 	.word	0x200003c0

08000e6c <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000e74:	2001      	movs	r0, #1
 8000e76:	f7ff ffcf 	bl	8000e18 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2032      	movs	r0, #50	@ 0x32
 8000e80:	f001 fc17 	bl	80026b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000e84:	2032      	movs	r0, #50	@ 0x32
 8000e86:	f001 fc2e 	bl	80026e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e9c:	4a14      	ldr	r2, [pc, #80]	@ (8000ef0 <_sbrk+0x5c>)
 8000e9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ef4 <_sbrk+0x60>)
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea8:	4b13      	ldr	r3, [pc, #76]	@ (8000ef8 <_sbrk+0x64>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d102      	bne.n	8000eb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eb0:	4b11      	ldr	r3, [pc, #68]	@ (8000ef8 <_sbrk+0x64>)
 8000eb2:	4a12      	ldr	r2, [pc, #72]	@ (8000efc <_sbrk+0x68>)
 8000eb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eb6:	4b10      	ldr	r3, [pc, #64]	@ (8000ef8 <_sbrk+0x64>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d207      	bcs.n	8000ed4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ec4:	f005 ffae 	bl	8006e24 <__errno>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	220c      	movs	r2, #12
 8000ecc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ece:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed2:	e009      	b.n	8000ee8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed4:	4b08      	ldr	r3, [pc, #32]	@ (8000ef8 <_sbrk+0x64>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eda:	4b07      	ldr	r3, [pc, #28]	@ (8000ef8 <_sbrk+0x64>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	4a05      	ldr	r2, [pc, #20]	@ (8000ef8 <_sbrk+0x64>)
 8000ee4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20010000 	.word	0x20010000
 8000ef4:	00000400 	.word	0x00000400
 8000ef8:	200003cc 	.word	0x200003cc
 8000efc:	200005c0 	.word	0x200005c0

08000f00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr

08000f0c <LL_AHB2_GRP1_EnableClock>:
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f18:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000f1a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f28:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f30:	68fb      	ldr	r3, [r7, #12]
}
 8000f32:	bf00      	nop
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr

08000f3c <LL_APB1_GRP1_EnableClock>:
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000f44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f48:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000f4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000f54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f58:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f60:	68fb      	ldr	r3, [r7, #12]
}
 8000f62:	bf00      	nop
 8000f64:	3714      	adds	r7, #20
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr

08000f6c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f70:	4b22      	ldr	r3, [pc, #136]	@ (8000ffc <MX_USART2_UART_Init+0x90>)
 8000f72:	4a23      	ldr	r2, [pc, #140]	@ (8001000 <MX_USART2_UART_Init+0x94>)
 8000f74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f76:	4b21      	ldr	r3, [pc, #132]	@ (8000ffc <MX_USART2_UART_Init+0x90>)
 8000f78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000ffc <MX_USART2_UART_Init+0x90>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f84:	4b1d      	ldr	r3, [pc, #116]	@ (8000ffc <MX_USART2_UART_Init+0x90>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ffc <MX_USART2_UART_Init+0x90>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f90:	4b1a      	ldr	r3, [pc, #104]	@ (8000ffc <MX_USART2_UART_Init+0x90>)
 8000f92:	220c      	movs	r2, #12
 8000f94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f96:	4b19      	ldr	r3, [pc, #100]	@ (8000ffc <MX_USART2_UART_Init+0x90>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f9c:	4b17      	ldr	r3, [pc, #92]	@ (8000ffc <MX_USART2_UART_Init+0x90>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fa2:	4b16      	ldr	r3, [pc, #88]	@ (8000ffc <MX_USART2_UART_Init+0x90>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fa8:	4b14      	ldr	r3, [pc, #80]	@ (8000ffc <MX_USART2_UART_Init+0x90>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fae:	4b13      	ldr	r3, [pc, #76]	@ (8000ffc <MX_USART2_UART_Init+0x90>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fb4:	4811      	ldr	r0, [pc, #68]	@ (8000ffc <MX_USART2_UART_Init+0x90>)
 8000fb6:	f003 fe24 	bl	8004c02 <HAL_UART_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000fc0:	f7ff fede 	bl	8000d80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	480d      	ldr	r0, [pc, #52]	@ (8000ffc <MX_USART2_UART_Init+0x90>)
 8000fc8:	f005 fde7 	bl	8006b9a <HAL_UARTEx_SetTxFifoThreshold>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000fd2:	f7ff fed5 	bl	8000d80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4808      	ldr	r0, [pc, #32]	@ (8000ffc <MX_USART2_UART_Init+0x90>)
 8000fda:	f005 fe1c 	bl	8006c16 <HAL_UARTEx_SetRxFifoThreshold>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000fe4:	f7ff fecc 	bl	8000d80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000fe8:	4804      	ldr	r0, [pc, #16]	@ (8000ffc <MX_USART2_UART_Init+0x90>)
 8000fea:	f005 fd9e 	bl	8006b2a <HAL_UARTEx_DisableFifoMode>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ff4:	f7ff fec4 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	200003d0 	.word	0x200003d0
 8001000:	40004400 	.word	0x40004400

08001004 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b096      	sub	sp, #88	@ 0x58
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800101c:	f107 030c 	add.w	r3, r7, #12
 8001020:	2238      	movs	r2, #56	@ 0x38
 8001022:	2100      	movs	r1, #0
 8001024:	4618      	mov	r0, r3
 8001026:	f005 fef5 	bl	8006e14 <memset>
  if(uartHandle->Instance==USART2)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a1b      	ldr	r2, [pc, #108]	@ (800109c <HAL_UART_MspInit+0x98>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d12e      	bne.n	8001092 <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001034:	2302      	movs	r3, #2
 8001036:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001038:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 800103c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800103e:	f107 030c 	add.w	r3, r7, #12
 8001042:	4618      	mov	r0, r3
 8001044:	f002 ffd8 	bl	8003ff8 <HAL_RCCEx_PeriphCLKConfig>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800104e:	f7ff fe97 	bl	8000d80 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001052:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001056:	f7ff ff71 	bl	8000f3c <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105a:	2001      	movs	r0, #1
 800105c:	f7ff ff56 	bl	8000f0c <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8001060:	230c      	movs	r3, #12
 8001062:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001070:	2307      	movs	r3, #7
 8001072:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001074:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001078:	4619      	mov	r1, r3
 800107a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800107e:	f001 fc17 	bl	80028b0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001082:	2200      	movs	r2, #0
 8001084:	2100      	movs	r1, #0
 8001086:	2025      	movs	r0, #37	@ 0x25
 8001088:	f001 fb13 	bl	80026b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800108c:	2025      	movs	r0, #37	@ 0x25
 800108e:	f001 fb2a 	bl	80026e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001092:	bf00      	nop
 8001094:	3758      	adds	r7, #88	@ 0x58
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40004400 	.word	0x40004400

080010a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010a0:	480d      	ldr	r0, [pc, #52]	@ (80010d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010a2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010a4:	f7ff ff2c 	bl	8000f00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010a8:	480c      	ldr	r0, [pc, #48]	@ (80010dc <LoopForever+0x6>)
  ldr r1, =_edata
 80010aa:	490d      	ldr	r1, [pc, #52]	@ (80010e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010ac:	4a0d      	ldr	r2, [pc, #52]	@ (80010e4 <LoopForever+0xe>)
  movs r3, #0
 80010ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b0:	e002      	b.n	80010b8 <LoopCopyDataInit>

080010b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010b6:	3304      	adds	r3, #4

080010b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010bc:	d3f9      	bcc.n	80010b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010be:	4a0a      	ldr	r2, [pc, #40]	@ (80010e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010c0:	4c0a      	ldr	r4, [pc, #40]	@ (80010ec <LoopForever+0x16>)
  movs r3, #0
 80010c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c4:	e001      	b.n	80010ca <LoopFillZerobss>

080010c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c8:	3204      	adds	r2, #4

080010ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010cc:	d3fb      	bcc.n	80010c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010ce:	f005 feaf 	bl	8006e30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010d2:	f7ff fa83 	bl	80005dc <main>

080010d6 <LoopForever>:

LoopForever:
    b LoopForever
 80010d6:	e7fe      	b.n	80010d6 <LoopForever>
  ldr   r0, =_estack
 80010d8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80010dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e0:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80010e4:	08007928 	.word	0x08007928
  ldr r2, =_sbss
 80010e8:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80010ec:	200005c0 	.word	0x200005c0

080010f0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010f0:	e7fe      	b.n	80010f0 <ADC_IRQHandler>

080010f2 <LL_AHB2_GRP1_EnableClock>:
{
 80010f2:	b480      	push	{r7}
 80010f4:	b085      	sub	sp, #20
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80010fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001100:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4313      	orrs	r3, r2
 8001108:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800110a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800110e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4013      	ands	r3, r2
 8001114:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001116:	68fb      	ldr	r3, [r7, #12]
}
 8001118:	bf00      	nop
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr
	...

08001124 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b088      	sub	sp, #32
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 800112e:	f107 030c 	add.w	r3, r7, #12
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
 800113c:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800113e:	2002      	movs	r0, #2
 8001140:	f7ff ffd7 	bl	80010f2 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	4a12      	ldr	r2, [pc, #72]	@ (8001190 <BSP_LED_Init+0x6c>)
 8001148:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800114c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 800114e:	2301      	movs	r3, #1
 8001150:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001156:	2302      	movs	r3, #2
 8001158:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	4a0d      	ldr	r2, [pc, #52]	@ (8001194 <BSP_LED_Init+0x70>)
 800115e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001162:	f107 020c 	add.w	r2, r7, #12
 8001166:	4611      	mov	r1, r2
 8001168:	4618      	mov	r0, r3
 800116a:	f001 fba1 	bl	80028b0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	4a08      	ldr	r2, [pc, #32]	@ (8001194 <BSP_LED_Init+0x70>)
 8001172:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	4a05      	ldr	r2, [pc, #20]	@ (8001190 <BSP_LED_Init+0x6c>)
 800117a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800117e:	2200      	movs	r2, #0
 8001180:	4619      	mov	r1, r3
 8001182:	f001 fcf5 	bl	8002b70 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001186:	2300      	movs	r3, #0
}
 8001188:	4618      	mov	r0, r3
 800118a:	3720      	adds	r7, #32
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	080078b4 	.word	0x080078b4
 8001194:	20000020 	.word	0x20000020

08001198 <BSP_LED_On>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	4a07      	ldr	r2, [pc, #28]	@ (80011c4 <BSP_LED_On+0x2c>)
 80011a6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	4a06      	ldr	r2, [pc, #24]	@ (80011c8 <BSP_LED_On+0x30>)
 80011ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011b2:	2201      	movs	r2, #1
 80011b4:	4619      	mov	r1, r3
 80011b6:	f001 fcdb 	bl	8002b70 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000020 	.word	0x20000020
 80011c8:	080078b4 	.word	0x080078b4

080011cc <BSP_LED_Off>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	4a07      	ldr	r2, [pc, #28]	@ (80011f8 <BSP_LED_Off+0x2c>)
 80011da:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	4a06      	ldr	r2, [pc, #24]	@ (80011fc <BSP_LED_Off+0x30>)
 80011e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011e6:	2200      	movs	r2, #0
 80011e8:	4619      	mov	r1, r3
 80011ea:	f001 fcc1 	bl	8002b70 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000020 	.word	0x20000020
 80011fc:	080078b4 	.word	0x080078b4

08001200 <BSP_LED_Toggle>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	4a07      	ldr	r2, [pc, #28]	@ (800122c <BSP_LED_Toggle+0x2c>)
 800120e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	4906      	ldr	r1, [pc, #24]	@ (8001230 <BSP_LED_Toggle+0x30>)
 8001216:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800121a:	4619      	mov	r1, r3
 800121c:	4610      	mov	r0, r2
 800121e:	f001 fcbe 	bl	8002b9e <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8001222:	2300      	movs	r3, #0
}
 8001224:	4618      	mov	r0, r3
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000020 	.word	0x20000020
 8001230:	080078b4 	.word	0x080078b4

08001234 <LL_AHB2_GRP1_EnableClock>:
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800123c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001240:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001242:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4313      	orrs	r3, r2
 800124a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800124c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001250:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4013      	ands	r3, r2
 8001256:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001258:	68fb      	ldr	r3, [r7, #12]
}
 800125a:	bf00      	nop
 800125c:	3714      	adds	r7, #20
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr

08001264 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 8001278:	2004      	movs	r0, #4
 800127a:	f7ff ffdb 	bl	8001234 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 800127e:	2310      	movs	r3, #16
 8001280:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001282:	2301      	movs	r3, #1
 8001284:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128a:	2303      	movs	r3, #3
 800128c:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	4619      	mov	r1, r3
 8001292:	4812      	ldr	r0, [pc, #72]	@ (80012dc <BSP_RADIO_Init+0x78>)
 8001294:	f001 fb0c 	bl	80028b0 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8001298:	2320      	movs	r3, #32
 800129a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800129c:	1d3b      	adds	r3, r7, #4
 800129e:	4619      	mov	r1, r3
 80012a0:	480e      	ldr	r0, [pc, #56]	@ (80012dc <BSP_RADIO_Init+0x78>)
 80012a2:	f001 fb05 	bl	80028b0 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 80012a6:	2308      	movs	r3, #8
 80012a8:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	4619      	mov	r1, r3
 80012ae:	480b      	ldr	r0, [pc, #44]	@ (80012dc <BSP_RADIO_Init+0x78>)
 80012b0:	f001 fafe 	bl	80028b0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80012b4:	2200      	movs	r2, #0
 80012b6:	2120      	movs	r1, #32
 80012b8:	4808      	ldr	r0, [pc, #32]	@ (80012dc <BSP_RADIO_Init+0x78>)
 80012ba:	f001 fc59 	bl	8002b70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80012be:	2200      	movs	r2, #0
 80012c0:	2110      	movs	r1, #16
 80012c2:	4806      	ldr	r0, [pc, #24]	@ (80012dc <BSP_RADIO_Init+0x78>)
 80012c4:	f001 fc54 	bl	8002b70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 80012c8:	2200      	movs	r2, #0
 80012ca:	2108      	movs	r1, #8
 80012cc:	4803      	ldr	r0, [pc, #12]	@ (80012dc <BSP_RADIO_Init+0x78>)
 80012ce:	f001 fc4f 	bl	8002b70 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	48000800 	.word	0x48000800

080012e0 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	2b03      	cmp	r3, #3
 80012ee:	d84b      	bhi.n	8001388 <BSP_RADIO_ConfigRFSwitch+0xa8>
 80012f0:	a201      	add	r2, pc, #4	@ (adr r2, 80012f8 <BSP_RADIO_ConfigRFSwitch+0x18>)
 80012f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f6:	bf00      	nop
 80012f8:	08001309 	.word	0x08001309
 80012fc:	08001329 	.word	0x08001329
 8001300:	08001349 	.word	0x08001349
 8001304:	08001369 	.word	0x08001369
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8001308:	2200      	movs	r2, #0
 800130a:	2108      	movs	r1, #8
 800130c:	4821      	ldr	r0, [pc, #132]	@ (8001394 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800130e:	f001 fc2f 	bl	8002b70 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8001312:	2200      	movs	r2, #0
 8001314:	2110      	movs	r1, #16
 8001316:	481f      	ldr	r0, [pc, #124]	@ (8001394 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001318:	f001 fc2a 	bl	8002b70 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800131c:	2200      	movs	r2, #0
 800131e:	2120      	movs	r1, #32
 8001320:	481c      	ldr	r0, [pc, #112]	@ (8001394 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001322:	f001 fc25 	bl	8002b70 <HAL_GPIO_WritePin>
      break;      
 8001326:	e030      	b.n	800138a <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001328:	2201      	movs	r2, #1
 800132a:	2108      	movs	r1, #8
 800132c:	4819      	ldr	r0, [pc, #100]	@ (8001394 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800132e:	f001 fc1f 	bl	8002b70 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001332:	2201      	movs	r2, #1
 8001334:	2110      	movs	r1, #16
 8001336:	4817      	ldr	r0, [pc, #92]	@ (8001394 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001338:	f001 fc1a 	bl	8002b70 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 800133c:	2200      	movs	r2, #0
 800133e:	2120      	movs	r1, #32
 8001340:	4814      	ldr	r0, [pc, #80]	@ (8001394 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001342:	f001 fc15 	bl	8002b70 <HAL_GPIO_WritePin>
      break;
 8001346:	e020      	b.n	800138a <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001348:	2201      	movs	r2, #1
 800134a:	2108      	movs	r1, #8
 800134c:	4811      	ldr	r0, [pc, #68]	@ (8001394 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800134e:	f001 fc0f 	bl	8002b70 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001352:	2201      	movs	r2, #1
 8001354:	2110      	movs	r1, #16
 8001356:	480f      	ldr	r0, [pc, #60]	@ (8001394 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001358:	f001 fc0a 	bl	8002b70 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800135c:	2201      	movs	r2, #1
 800135e:	2120      	movs	r1, #32
 8001360:	480c      	ldr	r0, [pc, #48]	@ (8001394 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001362:	f001 fc05 	bl	8002b70 <HAL_GPIO_WritePin>
      break;
 8001366:	e010      	b.n	800138a <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001368:	2201      	movs	r2, #1
 800136a:	2108      	movs	r1, #8
 800136c:	4809      	ldr	r0, [pc, #36]	@ (8001394 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800136e:	f001 fbff 	bl	8002b70 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8001372:	2200      	movs	r2, #0
 8001374:	2110      	movs	r1, #16
 8001376:	4807      	ldr	r0, [pc, #28]	@ (8001394 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001378:	f001 fbfa 	bl	8002b70 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800137c:	2201      	movs	r2, #1
 800137e:	2120      	movs	r1, #32
 8001380:	4804      	ldr	r0, [pc, #16]	@ (8001394 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001382:	f001 fbf5 	bl	8002b70 <HAL_GPIO_WritePin>
      break;
 8001386:	e000      	b.n	800138a <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    default:
      break;    
 8001388:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	48000800 	.word	0x48000800

08001398 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr

080013a6 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 80013aa:	2301      	movs	r3, #1
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 80013b8:	2301      	movs	r3, #1
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr

080013c2 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 80013c2:	b480      	push	{r7}
 80013c4:	b085      	sub	sp, #20
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	4603      	mov	r3, r0
 80013ca:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d102      	bne.n	80013d8 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 80013d2:	230f      	movs	r3, #15
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	e001      	b.n	80013dc <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 80013d8:	2316      	movs	r3, #22
 80013da:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80013dc:	68fb      	ldr	r3, [r7, #12]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr

080013e8 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 80013ec:	f7ff ff3a 	bl	8001264 <BSP_RADIO_Init>
 80013f0:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	4603      	mov	r3, r0
 80013fe:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff ff6c 	bl	80012e0 <BSP_RADIO_ConfigRFSwitch>
 8001408:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 8001416:	f7ff ffbf 	bl	8001398 <BSP_RADIO_GetTxConfig>
 800141a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800141c:	4618      	mov	r0, r3
 800141e:	bd80      	pop	{r7, pc}

08001420 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8001424:	f7ff ffbf 	bl	80013a6 <BSP_RADIO_IsTCXO>
 8001428:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800142a:	4618      	mov	r0, r3
 800142c:	bd80      	pop	{r7, pc}

0800142e <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 8001432:	f7ff ffbf 	bl	80013b4 <BSP_RADIO_IsDCDC>
 8001436:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001438:	4618      	mov	r0, r3
 800143a:	bd80      	pop	{r7, pc}

0800143c <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff ffba 	bl	80013c2 <BSP_RADIO_GetRFOMaxPowerConfig>
 800144e:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8001450:	4618      	mov	r0, r3
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d002      	beq.n	800146c <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8001466:	4a1d      	ldr	r2, [pc, #116]	@ (80014dc <SUBGRF_Init+0x84>)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 800146c:	f7ff fcec 	bl	8000e48 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8001470:	2002      	movs	r0, #2
 8001472:	f000 ff67 	bl	8002344 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8001476:	4b1a      	ldr	r3, [pc, #104]	@ (80014e0 <SUBGRF_Init+0x88>)
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 800147c:	2000      	movs	r0, #0
 800147e:	f000 f8c3 	bl	8001608 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8001482:	f7ff ffcd 	bl	8001420 <RBI_IsTCXO>
 8001486:	4603      	mov	r3, r0
 8001488:	2b01      	cmp	r3, #1
 800148a:	d10e      	bne.n	80014aa <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 800148c:	2140      	movs	r1, #64	@ 0x40
 800148e:	2001      	movs	r0, #1
 8001490:	f000 fa2e 	bl	80018f0 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8001494:	2100      	movs	r1, #0
 8001496:	f640 1011 	movw	r0, #2321	@ 0x911
 800149a:	f000 fd85 	bl	8001fa8 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 800149e:	237f      	movs	r3, #127	@ 0x7f
 80014a0:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 80014a2:	7b38      	ldrb	r0, [r7, #12]
 80014a4:	f000 f932 	bl	800170c <SUBGRF_Calibrate>
 80014a8:	e009      	b.n	80014be <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80014aa:	2120      	movs	r1, #32
 80014ac:	f640 1011 	movw	r0, #2321	@ 0x911
 80014b0:	f000 fd7a 	bl	8001fa8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80014b4:	2120      	movs	r1, #32
 80014b6:	f640 1012 	movw	r0, #2322	@ 0x912
 80014ba:	f000 fd75 	bl	8001fa8 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80014be:	210e      	movs	r1, #14
 80014c0:	f640 101f 	movw	r0, #2335	@ 0x91f
 80014c4:	f000 fd70 	bl	8001fa8 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 80014c8:	f7ff ff8e 	bl	80013e8 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 80014cc:	4b05      	ldr	r3, [pc, #20]	@ (80014e4 <SUBGRF_Init+0x8c>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	701a      	strb	r2, [r3, #0]
}
 80014d2:	bf00      	nop
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000470 	.word	0x20000470
 80014e0:	2000046c 	.word	0x2000046c
 80014e4:	20000464 	.word	0x20000464

080014e8 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
    return OperatingMode;
 80014ec:	4b02      	ldr	r3, [pc, #8]	@ (80014f8 <SUBGRF_GetOperatingMode+0x10>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr
 80014f8:	20000464 	.word	0x20000464

080014fc <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	460b      	mov	r3, r1
 8001506:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8001508:	78fb      	ldrb	r3, [r7, #3]
 800150a:	461a      	mov	r2, r3
 800150c:	6879      	ldr	r1, [r7, #4]
 800150e:	2000      	movs	r0, #0
 8001510:	f000 fd94 	bl	800203c <SUBGRF_WriteBuffer>
}
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	4613      	mov	r3, r2
 8001528:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800152e:	f107 0317 	add.w	r3, r7, #23
 8001532:	4619      	mov	r1, r3
 8001534:	68b8      	ldr	r0, [r7, #8]
 8001536:	f000 fcb9 	bl	8001eac <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	79fa      	ldrb	r2, [r7, #7]
 8001540:	429a      	cmp	r2, r3
 8001542:	d201      	bcs.n	8001548 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8001544:	2301      	movs	r3, #1
 8001546:	e007      	b.n	8001558 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8001548:	7df8      	ldrb	r0, [r7, #23]
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	461a      	mov	r2, r3
 8001550:	68f9      	ldr	r1, [r7, #12]
 8001552:	f000 fd95 	bl	8002080 <SUBGRF_ReadBuffer>

    return 0;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	3718      	adds	r7, #24
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	460b      	mov	r3, r1
 800156a:	607a      	str	r2, [r7, #4]
 800156c:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 800156e:	7afb      	ldrb	r3, [r7, #11]
 8001570:	4619      	mov	r1, r3
 8001572:	68f8      	ldr	r0, [r7, #12]
 8001574:	f7ff ffc2 	bl	80014fc <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f000 f861 	bl	8001640 <SUBGRF_SetTx>
}
 800157e:	bf00      	nop
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <SUBGRF_SetCrcSeed>:
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
    return 0;
}

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b084      	sub	sp, #16
 800158a:	af00      	add	r7, sp, #0
 800158c:	4603      	mov	r3, r0
 800158e:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8001590:	88fb      	ldrh	r3, [r7, #6]
 8001592:	0a1b      	lsrs	r3, r3, #8
 8001594:	b29b      	uxth	r3, r3
 8001596:	b2db      	uxtb	r3, r3
 8001598:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800159a:	88fb      	ldrh	r3, [r7, #6]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80015a0:	f000 fa2a 	bl	80019f8 <SUBGRF_GetPacketType>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d108      	bne.n	80015bc <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80015aa:	f107 030c 	add.w	r3, r7, #12
 80015ae:	2202      	movs	r2, #2
 80015b0:	4619      	mov	r1, r3
 80015b2:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 80015b6:	f000 fd1f 	bl	8001ff8 <SUBGRF_WriteRegisters>
            break;
 80015ba:	e000      	b.n	80015be <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 80015bc:	bf00      	nop
    }
}
 80015be:	bf00      	nop
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b084      	sub	sp, #16
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	4603      	mov	r3, r0
 80015ce:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80015d0:	88fb      	ldrh	r3, [r7, #6]
 80015d2:	0a1b      	lsrs	r3, r3, #8
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 80015da:	88fb      	ldrh	r3, [r7, #6]
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80015e0:	f000 fa0a 	bl	80019f8 <SUBGRF_GetPacketType>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d108      	bne.n	80015fc <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 80015ea:	f107 030c 	add.w	r3, r7, #12
 80015ee:	2202      	movs	r2, #2
 80015f0:	4619      	mov	r1, r3
 80015f2:	f240 60be 	movw	r0, #1726	@ 0x6be
 80015f6:	f000 fcff 	bl	8001ff8 <SUBGRF_WriteRegisters>
            break;
 80015fa:	e000      	b.n	80015fe <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 80015fc:	bf00      	nop
    }
}
 80015fe:	bf00      	nop
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <SUBGRF_SetStandby>:
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
    OperatingMode = MODE_SLEEP;
}

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8001612:	1dfb      	adds	r3, r7, #7
 8001614:	2201      	movs	r2, #1
 8001616:	4619      	mov	r1, r3
 8001618:	2080      	movs	r0, #128	@ 0x80
 800161a:	f000 fd53 	bl	80020c4 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d103      	bne.n	800162c <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8001624:	4b05      	ldr	r3, [pc, #20]	@ (800163c <SUBGRF_SetStandby+0x34>)
 8001626:	2201      	movs	r2, #1
 8001628:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 800162a:	e002      	b.n	8001632 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 800162c:	4b03      	ldr	r3, [pc, #12]	@ (800163c <SUBGRF_SetStandby+0x34>)
 800162e:	2202      	movs	r2, #2
 8001630:	701a      	strb	r2, [r3, #0]
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000464 	.word	0x20000464

08001640 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8001648:	4b0c      	ldr	r3, [pc, #48]	@ (800167c <SUBGRF_SetTx+0x3c>)
 800164a:	2204      	movs	r2, #4
 800164c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	0c1b      	lsrs	r3, r3, #16
 8001652:	b2db      	uxtb	r3, r3
 8001654:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	0a1b      	lsrs	r3, r3, #8
 800165a:	b2db      	uxtb	r3, r3
 800165c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	b2db      	uxtb	r3, r3
 8001662:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8001664:	f107 030c 	add.w	r3, r7, #12
 8001668:	2203      	movs	r2, #3
 800166a:	4619      	mov	r1, r3
 800166c:	2083      	movs	r0, #131	@ 0x83
 800166e:	f000 fd29 	bl	80020c4 <SUBGRF_WriteCommand>
}
 8001672:	bf00      	nop
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000464 	.word	0x20000464

08001680 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8001688:	4b0c      	ldr	r3, [pc, #48]	@ (80016bc <SUBGRF_SetRx+0x3c>)
 800168a:	2205      	movs	r2, #5
 800168c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	0c1b      	lsrs	r3, r3, #16
 8001692:	b2db      	uxtb	r3, r3
 8001694:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	0a1b      	lsrs	r3, r3, #8
 800169a:	b2db      	uxtb	r3, r3
 800169c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80016a4:	f107 030c 	add.w	r3, r7, #12
 80016a8:	2203      	movs	r2, #3
 80016aa:	4619      	mov	r1, r3
 80016ac:	2082      	movs	r0, #130	@ 0x82
 80016ae:	f000 fd09 	bl	80020c4 <SUBGRF_WriteCommand>
}
 80016b2:	bf00      	nop
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000464 	.word	0x20000464

080016c0 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
}

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 80016ca:	1dfb      	adds	r3, r7, #7
 80016cc:	2201      	movs	r2, #1
 80016ce:	4619      	mov	r1, r3
 80016d0:	209f      	movs	r0, #159	@ 0x9f
 80016d2:	f000 fcf7 	bl	80020c4 <SUBGRF_WriteCommand>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <SUBGRF_SetRegulatorMode>:
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
    }
}

void SUBGRF_SetRegulatorMode( void )
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 80016e4:	f7ff fea3 	bl	800142e <RBI_IsDCDC>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d102      	bne.n	80016f4 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 80016ee:	2301      	movs	r3, #1
 80016f0:	71fb      	strb	r3, [r7, #7]
 80016f2:	e001      	b.n	80016f8 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 80016f4:	2300      	movs	r3, #0
 80016f6:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80016f8:	1dfb      	adds	r3, r7, #7
 80016fa:	2201      	movs	r2, #1
 80016fc:	4619      	mov	r1, r3
 80016fe:	2096      	movs	r0, #150	@ 0x96
 8001700:	f000 fce0 	bl	80020c4 <SUBGRF_WriteCommand>
}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8001714:	793b      	ldrb	r3, [r7, #4]
 8001716:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800171a:	b2db      	uxtb	r3, r3
 800171c:	b25b      	sxtb	r3, r3
 800171e:	019b      	lsls	r3, r3, #6
 8001720:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8001722:	793b      	ldrb	r3, [r7, #4]
 8001724:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001728:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800172a:	b25b      	sxtb	r3, r3
 800172c:	015b      	lsls	r3, r3, #5
 800172e:	b25b      	sxtb	r3, r3
 8001730:	4313      	orrs	r3, r2
 8001732:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8001734:	793b      	ldrb	r3, [r7, #4]
 8001736:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800173a:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800173c:	b25b      	sxtb	r3, r3
 800173e:	011b      	lsls	r3, r3, #4
 8001740:	b25b      	sxtb	r3, r3
 8001742:	4313      	orrs	r3, r2
 8001744:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8001746:	793b      	ldrb	r3, [r7, #4]
 8001748:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800174c:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800174e:	b25b      	sxtb	r3, r3
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	b25b      	sxtb	r3, r3
 8001754:	4313      	orrs	r3, r2
 8001756:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8001758:	793b      	ldrb	r3, [r7, #4]
 800175a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800175e:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8001760:	b25b      	sxtb	r3, r3
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	b25b      	sxtb	r3, r3
 8001766:	4313      	orrs	r3, r2
 8001768:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800176a:	793b      	ldrb	r3, [r7, #4]
 800176c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001770:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8001772:	b25b      	sxtb	r3, r3
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	b25b      	sxtb	r3, r3
 8001778:	4313      	orrs	r3, r2
 800177a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800177c:	793b      	ldrb	r3, [r7, #4]
 800177e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001782:	b2db      	uxtb	r3, r3
 8001784:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8001786:	4313      	orrs	r3, r2
 8001788:	b25b      	sxtb	r3, r3
 800178a:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800178c:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800178e:	f107 030f 	add.w	r3, r7, #15
 8001792:	2201      	movs	r2, #1
 8001794:	4619      	mov	r1, r3
 8001796:	2089      	movs	r0, #137	@ 0x89
 8001798:	f000 fc94 	bl	80020c4 <SUBGRF_WriteCommand>
}
 800179c:	bf00      	nop
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a1d      	ldr	r2, [pc, #116]	@ (8001824 <SUBGRF_CalibrateImage+0x80>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d904      	bls.n	80017be <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 80017b4:	23e1      	movs	r3, #225	@ 0xe1
 80017b6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 80017b8:	23e9      	movs	r3, #233	@ 0xe9
 80017ba:	737b      	strb	r3, [r7, #13]
 80017bc:	e027      	b.n	800180e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a19      	ldr	r2, [pc, #100]	@ (8001828 <SUBGRF_CalibrateImage+0x84>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d904      	bls.n	80017d0 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 80017c6:	23d7      	movs	r3, #215	@ 0xd7
 80017c8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 80017ca:	23db      	movs	r3, #219	@ 0xdb
 80017cc:	737b      	strb	r3, [r7, #13]
 80017ce:	e01e      	b.n	800180e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a16      	ldr	r2, [pc, #88]	@ (800182c <SUBGRF_CalibrateImage+0x88>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d904      	bls.n	80017e2 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 80017d8:	23c1      	movs	r3, #193	@ 0xc1
 80017da:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 80017dc:	23c5      	movs	r3, #197	@ 0xc5
 80017de:	737b      	strb	r3, [r7, #13]
 80017e0:	e015      	b.n	800180e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a12      	ldr	r2, [pc, #72]	@ (8001830 <SUBGRF_CalibrateImage+0x8c>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d904      	bls.n	80017f4 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 80017ea:	2375      	movs	r3, #117	@ 0x75
 80017ec:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 80017ee:	2381      	movs	r3, #129	@ 0x81
 80017f0:	737b      	strb	r3, [r7, #13]
 80017f2:	e00c      	b.n	800180e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001834 <SUBGRF_CalibrateImage+0x90>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d904      	bls.n	8001806 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 80017fc:	236b      	movs	r3, #107	@ 0x6b
 80017fe:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8001800:	236f      	movs	r3, #111	@ 0x6f
 8001802:	737b      	strb	r3, [r7, #13]
 8001804:	e003      	b.n	800180e <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 8001806:	2329      	movs	r3, #41	@ 0x29
 8001808:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 800180a:	232b      	movs	r3, #43	@ 0x2b
 800180c:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800180e:	f107 030c 	add.w	r3, r7, #12
 8001812:	2202      	movs	r2, #2
 8001814:	4619      	mov	r1, r3
 8001816:	2098      	movs	r0, #152	@ 0x98
 8001818:	f000 fc54 	bl	80020c4 <SUBGRF_WriteCommand>
}
 800181c:	bf00      	nop
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	35a4e900 	.word	0x35a4e900
 8001828:	32a9f880 	.word	0x32a9f880
 800182c:	2de54480 	.word	0x2de54480
 8001830:	1b6b0b00 	.word	0x1b6b0b00
 8001834:	1954fc40 	.word	0x1954fc40

08001838 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8001838:	b590      	push	{r4, r7, lr}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	4604      	mov	r4, r0
 8001840:	4608      	mov	r0, r1
 8001842:	4611      	mov	r1, r2
 8001844:	461a      	mov	r2, r3
 8001846:	4623      	mov	r3, r4
 8001848:	71fb      	strb	r3, [r7, #7]
 800184a:	4603      	mov	r3, r0
 800184c:	71bb      	strb	r3, [r7, #6]
 800184e:	460b      	mov	r3, r1
 8001850:	717b      	strb	r3, [r7, #5]
 8001852:	4613      	mov	r3, r2
 8001854:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800185a:	79bb      	ldrb	r3, [r7, #6]
 800185c:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800185e:	797b      	ldrb	r3, [r7, #5]
 8001860:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8001862:	793b      	ldrb	r3, [r7, #4]
 8001864:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8001866:	f107 030c 	add.w	r3, r7, #12
 800186a:	2204      	movs	r2, #4
 800186c:	4619      	mov	r1, r3
 800186e:	2095      	movs	r0, #149	@ 0x95
 8001870:	f000 fc28 	bl	80020c4 <SUBGRF_WriteCommand>
}
 8001874:	bf00      	nop
 8001876:	3714      	adds	r7, #20
 8001878:	46bd      	mov	sp, r7
 800187a:	bd90      	pop	{r4, r7, pc}

0800187c <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	4604      	mov	r4, r0
 8001884:	4608      	mov	r0, r1
 8001886:	4611      	mov	r1, r2
 8001888:	461a      	mov	r2, r3
 800188a:	4623      	mov	r3, r4
 800188c:	80fb      	strh	r3, [r7, #6]
 800188e:	4603      	mov	r3, r0
 8001890:	80bb      	strh	r3, [r7, #4]
 8001892:	460b      	mov	r3, r1
 8001894:	807b      	strh	r3, [r7, #2]
 8001896:	4613      	mov	r3, r2
 8001898:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800189a:	88fb      	ldrh	r3, [r7, #6]
 800189c:	0a1b      	lsrs	r3, r3, #8
 800189e:	b29b      	uxth	r3, r3
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 80018a4:	88fb      	ldrh	r3, [r7, #6]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 80018aa:	88bb      	ldrh	r3, [r7, #4]
 80018ac:	0a1b      	lsrs	r3, r3, #8
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 80018b4:	88bb      	ldrh	r3, [r7, #4]
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 80018ba:	887b      	ldrh	r3, [r7, #2]
 80018bc:	0a1b      	lsrs	r3, r3, #8
 80018be:	b29b      	uxth	r3, r3
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80018c4:	887b      	ldrh	r3, [r7, #2]
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80018ca:	883b      	ldrh	r3, [r7, #0]
 80018cc:	0a1b      	lsrs	r3, r3, #8
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 80018d4:	883b      	ldrh	r3, [r7, #0]
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 80018da:	f107 0308 	add.w	r3, r7, #8
 80018de:	2208      	movs	r2, #8
 80018e0:	4619      	mov	r1, r3
 80018e2:	2008      	movs	r0, #8
 80018e4:	f000 fbee 	bl	80020c4 <SUBGRF_WriteCommand>
}
 80018e8:	bf00      	nop
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd90      	pop	{r4, r7, pc}

080018f0 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	6039      	str	r1, [r7, #0]
 80018fa:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	b2db      	uxtb	r3, r3
 8001904:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	0c1b      	lsrs	r3, r3, #16
 800190a:	b2db      	uxtb	r3, r3
 800190c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	0a1b      	lsrs	r3, r3, #8
 8001912:	b2db      	uxtb	r3, r3
 8001914:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	b2db      	uxtb	r3, r3
 800191a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800191c:	f107 030c 	add.w	r3, r7, #12
 8001920:	2204      	movs	r2, #4
 8001922:	4619      	mov	r1, r3
 8001924:	2097      	movs	r0, #151	@ 0x97
 8001926:	f000 fbcd 	bl	80020c4 <SUBGRF_WriteCommand>
}
 800192a:	bf00      	nop
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8001934:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001938:	b084      	sub	sp, #16
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800193e:	2300      	movs	r3, #0
 8001940:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8001942:	4b1d      	ldr	r3, [pc, #116]	@ (80019b8 <SUBGRF_SetRfFrequency+0x84>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	f083 0301 	eor.w	r3, r3, #1
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b00      	cmp	r3, #0
 800194e:	d005      	beq.n	800195c <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7ff ff27 	bl	80017a4 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8001956:	4b18      	ldr	r3, [pc, #96]	@ (80019b8 <SUBGRF_SetRfFrequency+0x84>)
 8001958:	2201      	movs	r2, #1
 800195a:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	461c      	mov	r4, r3
 8001962:	4615      	mov	r5, r2
 8001964:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8001968:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800196c:	4a13      	ldr	r2, [pc, #76]	@ (80019bc <SUBGRF_SetRfFrequency+0x88>)
 800196e:	f04f 0300 	mov.w	r3, #0
 8001972:	4640      	mov	r0, r8
 8001974:	4649      	mov	r1, r9
 8001976:	f7fe fc5b 	bl	8000230 <__aeabi_uldivmod>
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	4613      	mov	r3, r2
 8001980:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	0e1b      	lsrs	r3, r3, #24
 8001986:	b2db      	uxtb	r3, r3
 8001988:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	0c1b      	lsrs	r3, r3, #16
 800198e:	b2db      	uxtb	r3, r3
 8001990:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	0a1b      	lsrs	r3, r3, #8
 8001996:	b2db      	uxtb	r3, r3
 8001998:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	b2db      	uxtb	r3, r3
 800199e:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 80019a0:	f107 0308 	add.w	r3, r7, #8
 80019a4:	2204      	movs	r2, #4
 80019a6:	4619      	mov	r1, r3
 80019a8:	2086      	movs	r0, #134	@ 0x86
 80019aa:	f000 fb8b 	bl	80020c4 <SUBGRF_WriteCommand>
}
 80019ae:	bf00      	nop
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80019b8:	2000046c 	.word	0x2000046c
 80019bc:	01e84800 	.word	0x01e84800

080019c0 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 80019ca:	79fa      	ldrb	r2, [r7, #7]
 80019cc:	4b09      	ldr	r3, [pc, #36]	@ (80019f4 <SUBGRF_SetPacketType+0x34>)
 80019ce:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d104      	bne.n	80019e0 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 80019d6:	2100      	movs	r1, #0
 80019d8:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 80019dc:	f000 fae4 	bl	8001fa8 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 80019e0:	1dfb      	adds	r3, r7, #7
 80019e2:	2201      	movs	r2, #1
 80019e4:	4619      	mov	r1, r3
 80019e6:	208a      	movs	r0, #138	@ 0x8a
 80019e8:	f000 fb6c 	bl	80020c4 <SUBGRF_WriteCommand>
}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20000465 	.word	0x20000465

080019f8 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
    return PacketType;
 80019fc:	4b02      	ldr	r3, [pc, #8]	@ (8001a08 <SUBGRF_GetPacketType+0x10>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr
 8001a08:	20000465 	.word	0x20000465

08001a0c <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	71fb      	strb	r3, [r7, #7]
 8001a16:	460b      	mov	r3, r1
 8001a18:	71bb      	strb	r3, [r7, #6]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d149      	bne.n	8001ab8 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8001a24:	2000      	movs	r0, #0
 8001a26:	f7ff fd09 	bl	800143c <RBI_GetRFOMaxPowerConfig>
 8001a2a:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8001a2c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	da01      	bge.n	8001a3a <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2b0e      	cmp	r3, #14
 8001a3e:	d10e      	bne.n	8001a5e <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8001a40:	2301      	movs	r3, #1
 8001a42:	2201      	movs	r2, #1
 8001a44:	2100      	movs	r1, #0
 8001a46:	2004      	movs	r0, #4
 8001a48:	f7ff fef6 	bl	8001838 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8001a4c:	79ba      	ldrb	r2, [r7, #6]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	330e      	adds	r3, #14
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	71bb      	strb	r3, [r7, #6]
 8001a5c:	e01f      	b.n	8001a9e <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2b0a      	cmp	r3, #10
 8001a62:	d10e      	bne.n	8001a82 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8001a64:	2301      	movs	r3, #1
 8001a66:	2201      	movs	r2, #1
 8001a68:	2100      	movs	r1, #0
 8001a6a:	2001      	movs	r0, #1
 8001a6c:	f7ff fee4 	bl	8001838 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8001a70:	79ba      	ldrb	r2, [r7, #6]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	330d      	adds	r3, #13
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	71bb      	strb	r3, [r7, #6]
 8001a80:	e00d      	b.n	8001a9e <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8001a82:	2301      	movs	r3, #1
 8001a84:	2201      	movs	r2, #1
 8001a86:	2100      	movs	r1, #0
 8001a88:	2007      	movs	r0, #7
 8001a8a:	f7ff fed5 	bl	8001838 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8001a8e:	79ba      	ldrb	r2, [r7, #6]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	330e      	adds	r3, #14
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8001a9e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001aa2:	f113 0f11 	cmn.w	r3, #17
 8001aa6:	da01      	bge.n	8001aac <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8001aa8:	23ef      	movs	r3, #239	@ 0xef
 8001aaa:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8001aac:	2118      	movs	r1, #24
 8001aae:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8001ab2:	f000 fa79 	bl	8001fa8 <SUBGRF_WriteRegister>
 8001ab6:	e067      	b.n	8001b88 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8001ab8:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8001abc:	f000 fa88 	bl	8001fd0 <SUBGRF_ReadRegister>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	f043 031e 	orr.w	r3, r3, #30
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8001ace:	f000 fa6b 	bl	8001fa8 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8001ad2:	2001      	movs	r0, #1
 8001ad4:	f7ff fcb2 	bl	800143c <RBI_GetRFOMaxPowerConfig>
 8001ad8:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 8001ada:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	da01      	bge.n	8001ae8 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2b14      	cmp	r3, #20
 8001aec:	d10e      	bne.n	8001b0c <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8001aee:	2301      	movs	r3, #1
 8001af0:	2200      	movs	r2, #0
 8001af2:	2105      	movs	r1, #5
 8001af4:	2003      	movs	r0, #3
 8001af6:	f7ff fe9f 	bl	8001838 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8001afa:	79ba      	ldrb	r2, [r7, #6]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	3316      	adds	r3, #22
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	71bb      	strb	r3, [r7, #6]
 8001b0a:	e031      	b.n	8001b70 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2b11      	cmp	r3, #17
 8001b10:	d10e      	bne.n	8001b30 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8001b12:	2301      	movs	r3, #1
 8001b14:	2200      	movs	r2, #0
 8001b16:	2103      	movs	r1, #3
 8001b18:	2002      	movs	r0, #2
 8001b1a:	f7ff fe8d 	bl	8001838 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8001b1e:	79ba      	ldrb	r2, [r7, #6]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	3316      	adds	r3, #22
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	71bb      	strb	r3, [r7, #6]
 8001b2e:	e01f      	b.n	8001b70 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2b0e      	cmp	r3, #14
 8001b34:	d10e      	bne.n	8001b54 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8001b36:	2301      	movs	r3, #1
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2102      	movs	r1, #2
 8001b3c:	2002      	movs	r0, #2
 8001b3e:	f7ff fe7b 	bl	8001838 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8001b42:	79ba      	ldrb	r2, [r7, #6]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	330e      	adds	r3, #14
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	71bb      	strb	r3, [r7, #6]
 8001b52:	e00d      	b.n	8001b70 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8001b54:	2301      	movs	r3, #1
 8001b56:	2200      	movs	r2, #0
 8001b58:	2107      	movs	r1, #7
 8001b5a:	2004      	movs	r0, #4
 8001b5c:	f7ff fe6c 	bl	8001838 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8001b60:	79ba      	ldrb	r2, [r7, #6]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	3316      	adds	r3, #22
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8001b70:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001b74:	f113 0f09 	cmn.w	r3, #9
 8001b78:	da01      	bge.n	8001b7e <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8001b7a:	23f7      	movs	r3, #247	@ 0xf7
 8001b7c:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8001b7e:	2138      	movs	r1, #56	@ 0x38
 8001b80:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8001b84:	f000 fa10 	bl	8001fa8 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8001b88:	79bb      	ldrb	r3, [r7, #6]
 8001b8a:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8001b8c:	797b      	ldrb	r3, [r7, #5]
 8001b8e:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8001b90:	f107 0308 	add.w	r3, r7, #8
 8001b94:	2202      	movs	r2, #2
 8001b96:	4619      	mov	r1, r3
 8001b98:	208e      	movs	r0, #142	@ 0x8e
 8001b9a:	f000 fa93 	bl	80020c4 <SUBGRF_WriteCommand>
}
 8001b9e:	bf00      	nop
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
	...

08001ba8 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8001ba8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001bac:	b086      	sub	sp, #24
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001bb6:	f107 0308 	add.w	r3, r7, #8
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	781a      	ldrb	r2, [r3, #0]
 8001bc4:	4b5c      	ldr	r3, [pc, #368]	@ (8001d38 <SUBGRF_SetModulationParams+0x190>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d004      	beq.n	8001bd6 <SUBGRF_SetModulationParams+0x2e>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fef5 	bl	80019c0 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b03      	cmp	r3, #3
 8001bdc:	f200 80a5 	bhi.w	8001d2a <SUBGRF_SetModulationParams+0x182>
 8001be0:	a201      	add	r2, pc, #4	@ (adr r2, 8001be8 <SUBGRF_SetModulationParams+0x40>)
 8001be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be6:	bf00      	nop
 8001be8:	08001bf9 	.word	0x08001bf9
 8001bec:	08001cb9 	.word	0x08001cb9
 8001bf0:	08001c7b 	.word	0x08001c7b
 8001bf4:	08001ce7 	.word	0x08001ce7
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8001bf8:	2308      	movs	r3, #8
 8001bfa:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	4a4e      	ldr	r2, [pc, #312]	@ (8001d3c <SUBGRF_SetModulationParams+0x194>)
 8001c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c06:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	0c1b      	lsrs	r3, r3, #16
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	0a1b      	lsrs	r3, r3, #8
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	7b1b      	ldrb	r3, [r3, #12]
 8001c22:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	7b5b      	ldrb	r3, [r3, #13]
 8001c28:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	461c      	mov	r4, r3
 8001c32:	4615      	mov	r5, r2
 8001c34:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8001c38:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8001c3c:	4a40      	ldr	r2, [pc, #256]	@ (8001d40 <SUBGRF_SetModulationParams+0x198>)
 8001c3e:	f04f 0300 	mov.w	r3, #0
 8001c42:	4640      	mov	r0, r8
 8001c44:	4649      	mov	r1, r9
 8001c46:	f7fe faf3 	bl	8000230 <__aeabi_uldivmod>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4613      	mov	r3, r2
 8001c50:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	0c1b      	lsrs	r3, r3, #16
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	0a1b      	lsrs	r3, r3, #8
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8001c68:	7cfb      	ldrb	r3, [r7, #19]
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	f107 0308 	add.w	r3, r7, #8
 8001c70:	4619      	mov	r1, r3
 8001c72:	208b      	movs	r0, #139	@ 0x8b
 8001c74:	f000 fa26 	bl	80020c4 <SUBGRF_WriteCommand>
        break;
 8001c78:	e058      	b.n	8001d2c <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_BPSK:
        n = 4;
 8001c7a:	2304      	movs	r3, #4
 8001c7c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	4a2e      	ldr	r2, [pc, #184]	@ (8001d3c <SUBGRF_SetModulationParams+0x194>)
 8001c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c88:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	0c1b      	lsrs	r3, r3, #16
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	0a1b      	lsrs	r3, r3, #8
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	7d1b      	ldrb	r3, [r3, #20]
 8001ca4:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8001ca6:	7cfb      	ldrb	r3, [r7, #19]
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	f107 0308 	add.w	r3, r7, #8
 8001cae:	4619      	mov	r1, r3
 8001cb0:	208b      	movs	r0, #139	@ 0x8b
 8001cb2:	f000 fa07 	bl	80020c4 <SUBGRF_WriteCommand>
        break;
 8001cb6:	e039      	b.n	8001d2c <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_LORA:
        n = 4;
 8001cb8:	2304      	movs	r3, #4
 8001cba:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	7e1b      	ldrb	r3, [r3, #24]
 8001cc0:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	7e5b      	ldrb	r3, [r3, #25]
 8001cc6:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	7e9b      	ldrb	r3, [r3, #26]
 8001ccc:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	7edb      	ldrb	r3, [r3, #27]
 8001cd2:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8001cd4:	7cfb      	ldrb	r3, [r7, #19]
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	f107 0308 	add.w	r3, r7, #8
 8001cdc:	4619      	mov	r1, r3
 8001cde:	208b      	movs	r0, #139	@ 0x8b
 8001ce0:	f000 f9f0 	bl	80020c4 <SUBGRF_WriteCommand>

        break;
 8001ce4:	e022      	b.n	8001d2c <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_GMSK:
        n = 5;
 8001ce6:	2305      	movs	r3, #5
 8001ce8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	4a13      	ldr	r2, [pc, #76]	@ (8001d3c <SUBGRF_SetModulationParams+0x194>)
 8001cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf4:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	0c1b      	lsrs	r3, r3, #16
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	0a1b      	lsrs	r3, r3, #8
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	7b1b      	ldrb	r3, [r3, #12]
 8001d10:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	7b5b      	ldrb	r3, [r3, #13]
 8001d16:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8001d18:	7cfb      	ldrb	r3, [r7, #19]
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	f107 0308 	add.w	r3, r7, #8
 8001d20:	4619      	mov	r1, r3
 8001d22:	208b      	movs	r0, #139	@ 0x8b
 8001d24:	f000 f9ce 	bl	80020c4 <SUBGRF_WriteCommand>
        break;
 8001d28:	e000      	b.n	8001d2c <SUBGRF_SetModulationParams+0x184>
    default:
    case PACKET_TYPE_NONE:
      break;
 8001d2a:	bf00      	nop
    }
}
 8001d2c:	bf00      	nop
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d36:	bf00      	nop
 8001d38:	20000465 	.word	0x20000465
 8001d3c:	3d090000 	.word	0x3d090000
 8001d40:	01e84800 	.word	0x01e84800

08001d44 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001d50:	f107 030c 	add.w	r3, r7, #12
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	721a      	strb	r2, [r3, #8]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	781a      	ldrb	r2, [r3, #0]
 8001d60:	4b44      	ldr	r3, [pc, #272]	@ (8001e74 <SUBGRF_SetPacketParams+0x130>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d004      	beq.n	8001d72 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff fe27 	bl	80019c0 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b03      	cmp	r3, #3
 8001d78:	d878      	bhi.n	8001e6c <SUBGRF_SetPacketParams+0x128>
 8001d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8001d80 <SUBGRF_SetPacketParams+0x3c>)
 8001d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d80:	08001d91 	.word	0x08001d91
 8001d84:	08001e21 	.word	0x08001e21
 8001d88:	08001e15 	.word	0x08001e15
 8001d8c:	08001d91 	.word	0x08001d91
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	7a5b      	ldrb	r3, [r3, #9]
 8001d94:	2bf1      	cmp	r3, #241	@ 0xf1
 8001d96:	d10a      	bne.n	8001dae <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8001d98:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001d9c:	f7ff fbf3 	bl	8001586 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8001da0:	f248 0005 	movw	r0, #32773	@ 0x8005
 8001da4:	f7ff fc0f 	bl	80015c6 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8001da8:	2302      	movs	r3, #2
 8001daa:	75bb      	strb	r3, [r7, #22]
 8001dac:	e011      	b.n	8001dd2 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	7a5b      	ldrb	r3, [r3, #9]
 8001db2:	2bf2      	cmp	r3, #242	@ 0xf2
 8001db4:	d10a      	bne.n	8001dcc <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8001db6:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 8001dba:	f7ff fbe4 	bl	8001586 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8001dbe:	f241 0021 	movw	r0, #4129	@ 0x1021
 8001dc2:	f7ff fc00 	bl	80015c6 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8001dc6:	2306      	movs	r3, #6
 8001dc8:	75bb      	strb	r3, [r7, #22]
 8001dca:	e002      	b.n	8001dd2 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	7a5b      	ldrb	r3, [r3, #9]
 8001dd0:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8001dd2:	2309      	movs	r3, #9
 8001dd4:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	885b      	ldrh	r3, [r3, #2]
 8001dda:	0a1b      	lsrs	r3, r3, #8
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	885b      	ldrh	r3, [r3, #2]
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	791b      	ldrb	r3, [r3, #4]
 8001dee:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	795b      	ldrb	r3, [r3, #5]
 8001df4:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	799b      	ldrb	r3, [r3, #6]
 8001dfa:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	79db      	ldrb	r3, [r3, #7]
 8001e00:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	7a1b      	ldrb	r3, [r3, #8]
 8001e06:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8001e08:	7dbb      	ldrb	r3, [r7, #22]
 8001e0a:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	7a9b      	ldrb	r3, [r3, #10]
 8001e10:	753b      	strb	r3, [r7, #20]
        break;
 8001e12:	e022      	b.n	8001e5a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8001e14:	2301      	movs	r3, #1
 8001e16:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	7b1b      	ldrb	r3, [r3, #12]
 8001e1c:	733b      	strb	r3, [r7, #12]
        break;
 8001e1e:	e01c      	b.n	8001e5a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8001e20:	2306      	movs	r3, #6
 8001e22:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	89db      	ldrh	r3, [r3, #14]
 8001e28:	0a1b      	lsrs	r3, r3, #8
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	89db      	ldrh	r3, [r3, #14]
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	7c1a      	ldrb	r2, [r3, #16]
 8001e3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001e78 <SUBGRF_SetPacketParams+0x134>)
 8001e3e:	4611      	mov	r1, r2
 8001e40:	7019      	strb	r1, [r3, #0]
 8001e42:	4613      	mov	r3, r2
 8001e44:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	7c5b      	ldrb	r3, [r3, #17]
 8001e4a:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	7c9b      	ldrb	r3, [r3, #18]
 8001e50:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	7cdb      	ldrb	r3, [r3, #19]
 8001e56:	747b      	strb	r3, [r7, #17]
        break;
 8001e58:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8001e5a:	7dfb      	ldrb	r3, [r7, #23]
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	f107 030c 	add.w	r3, r7, #12
 8001e62:	4619      	mov	r1, r3
 8001e64:	208c      	movs	r0, #140	@ 0x8c
 8001e66:	f000 f92d 	bl	80020c4 <SUBGRF_WriteCommand>
 8001e6a:	e000      	b.n	8001e6e <SUBGRF_SetPacketParams+0x12a>
        return;
 8001e6c:	bf00      	nop
}
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20000465 	.word	0x20000465
 8001e78:	20000466 	.word	0x20000466

08001e7c <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	460a      	mov	r2, r1
 8001e86:	71fb      	strb	r3, [r7, #7]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8001e90:	79bb      	ldrb	r3, [r7, #6]
 8001e92:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8001e94:	f107 030c 	add.w	r3, r7, #12
 8001e98:	2202      	movs	r2, #2
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	208f      	movs	r0, #143	@ 0x8f
 8001e9e:	f000 f911 	bl	80020c4 <SUBGRF_WriteCommand>
}
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
	...

08001eac <SUBGRF_GetRxBufferStatus>:
    rssi = -buf[0] >> 1;
    return rssi;
}

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8001eb6:	f107 030c 	add.w	r3, r7, #12
 8001eba:	2202      	movs	r2, #2
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	2013      	movs	r0, #19
 8001ec0:	f000 f922 	bl	8002108 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8001ec4:	f7ff fd98 	bl	80019f8 <SUBGRF_GetPacketType>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d10d      	bne.n	8001eea <SUBGRF_GetRxBufferStatus+0x3e>
 8001ece:	4b0c      	ldr	r3, [pc, #48]	@ (8001f00 <SUBGRF_GetRxBufferStatus+0x54>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d108      	bne.n	8001eea <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8001ed8:	f240 7002 	movw	r0, #1794	@ 0x702
 8001edc:	f000 f878 	bl	8001fd0 <SUBGRF_ReadRegister>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	701a      	strb	r2, [r3, #0]
 8001ee8:	e002      	b.n	8001ef0 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8001eea:	7b3a      	ldrb	r2, [r7, #12]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8001ef0:	7b7a      	ldrb	r2, [r7, #13]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	701a      	strb	r2, [r3, #0]
}
 8001ef6:	bf00      	nop
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000466 	.word	0x20000466

08001f04 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8001f0c:	f107 030c 	add.w	r3, r7, #12
 8001f10:	2203      	movs	r2, #3
 8001f12:	4619      	mov	r1, r3
 8001f14:	2014      	movs	r0, #20
 8001f16:	f000 f8f7 	bl	8002108 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8001f1a:	f7ff fd6d 	bl	80019f8 <SUBGRF_GetPacketType>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	461a      	mov	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d002      	beq.n	8001f34 <SUBGRF_GetPacketStatus+0x30>
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d013      	beq.n	8001f5a <SUBGRF_GetPacketStatus+0x56>
 8001f32:	e02a      	b.n	8001f8a <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8001f34:	7b3a      	ldrb	r2, [r7, #12]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8001f3a:	7b7b      	ldrb	r3, [r7, #13]
 8001f3c:	425b      	negs	r3, r3
 8001f3e:	105b      	asrs	r3, r3, #1
 8001f40:	b25a      	sxtb	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8001f46:	7bbb      	ldrb	r3, [r7, #14]
 8001f48:	425b      	negs	r3, r3
 8001f4a:	105b      	asrs	r3, r3, #1
 8001f4c:	b25a      	sxtb	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	609a      	str	r2, [r3, #8]
            break;
 8001f58:	e020      	b.n	8001f9c <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8001f5a:	7b3b      	ldrb	r3, [r7, #12]
 8001f5c:	425b      	negs	r3, r3
 8001f5e:	105b      	asrs	r3, r3, #1
 8001f60:	b25a      	sxtb	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8001f66:	7b7b      	ldrb	r3, [r7, #13]
 8001f68:	b25b      	sxtb	r3, r3
 8001f6a:	3302      	adds	r3, #2
 8001f6c:	109b      	asrs	r3, r3, #2
 8001f6e:	b25a      	sxtb	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8001f74:	7bbb      	ldrb	r3, [r7, #14]
 8001f76:	425b      	negs	r3, r3
 8001f78:	105b      	asrs	r3, r3, #1
 8001f7a:	b25a      	sxtb	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8001f80:	4b08      	ldr	r3, [pc, #32]	@ (8001fa4 <SUBGRF_GetPacketStatus+0xa0>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	611a      	str	r2, [r3, #16]
            break;
 8001f88:	e008      	b.n	8001f9c <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8001f8a:	2214      	movs	r2, #20
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f004 fecc 	bl	8006d2c <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	220f      	movs	r2, #15
 8001f98:	701a      	strb	r2, [r3, #0]
            break;
 8001f9a:	bf00      	nop
    }
}
 8001f9c:	bf00      	nop
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	20000468 	.word	0x20000468

08001fa8 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	460a      	mov	r2, r1
 8001fb2:	80fb      	strh	r3, [r7, #6]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8001fb8:	1d7a      	adds	r2, r7, #5
 8001fba:	88f9      	ldrh	r1, [r7, #6]
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	4803      	ldr	r0, [pc, #12]	@ (8001fcc <SUBGRF_WriteRegister+0x24>)
 8001fc0:	f002 fa32 	bl	8004428 <HAL_SUBGHZ_WriteRegisters>
}
 8001fc4:	bf00      	nop
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	200003c0 	.word	0x200003c0

08001fd0 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8001fda:	f107 020f 	add.w	r2, r7, #15
 8001fde:	88f9      	ldrh	r1, [r7, #6]
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	4804      	ldr	r0, [pc, #16]	@ (8001ff4 <SUBGRF_ReadRegister+0x24>)
 8001fe4:	f002 fa7f 	bl	80044e6 <HAL_SUBGHZ_ReadRegisters>
    return data;
 8001fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	200003c0 	.word	0x200003c0

08001ff8 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	6039      	str	r1, [r7, #0]
 8002002:	80fb      	strh	r3, [r7, #6]
 8002004:	4613      	mov	r3, r2
 8002006:	80bb      	strh	r3, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002008:	f3ef 8310 	mrs	r3, PRIMASK
 800200c:	60fb      	str	r3, [r7, #12]
  return(result);
 800200e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8002010:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002012:	b672      	cpsid	i
}
 8002014:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8002016:	88bb      	ldrh	r3, [r7, #4]
 8002018:	88f9      	ldrh	r1, [r7, #6]
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	4806      	ldr	r0, [pc, #24]	@ (8002038 <SUBGRF_WriteRegisters+0x40>)
 800201e:	f002 fa03 	bl	8004428 <HAL_SUBGHZ_WriteRegisters>
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	f383 8810 	msr	PRIMASK, r3
}
 800202c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800202e:	bf00      	nop
 8002030:	3718      	adds	r7, #24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	200003c0 	.word	0x200003c0

0800203c <SUBGRF_WriteBuffer>:
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	6039      	str	r1, [r7, #0]
 8002046:	71fb      	strb	r3, [r7, #7]
 8002048:	4613      	mov	r3, r2
 800204a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800204c:	f3ef 8310 	mrs	r3, PRIMASK
 8002050:	60fb      	str	r3, [r7, #12]
  return(result);
 8002052:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8002054:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002056:	b672      	cpsid	i
}
 8002058:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800205a:	79bb      	ldrb	r3, [r7, #6]
 800205c:	b29b      	uxth	r3, r3
 800205e:	79f9      	ldrb	r1, [r7, #7]
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	4806      	ldr	r0, [pc, #24]	@ (800207c <SUBGRF_WriteBuffer+0x40>)
 8002064:	f002 fb53 	bl	800470e <HAL_SUBGHZ_WriteBuffer>
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	f383 8810 	msr	PRIMASK, r3
}
 8002072:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8002074:	bf00      	nop
 8002076:	3718      	adds	r7, #24
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	200003c0 	.word	0x200003c0

08002080 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	6039      	str	r1, [r7, #0]
 800208a:	71fb      	strb	r3, [r7, #7]
 800208c:	4613      	mov	r3, r2
 800208e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002090:	f3ef 8310 	mrs	r3, PRIMASK
 8002094:	60fb      	str	r3, [r7, #12]
  return(result);
 8002096:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8002098:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800209a:	b672      	cpsid	i
}
 800209c:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800209e:	79bb      	ldrb	r3, [r7, #6]
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	79f9      	ldrb	r1, [r7, #7]
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	4806      	ldr	r0, [pc, #24]	@ (80020c0 <SUBGRF_ReadBuffer+0x40>)
 80020a8:	f002 fb84 	bl	80047b4 <HAL_SUBGHZ_ReadBuffer>
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	f383 8810 	msr	PRIMASK, r3
}
 80020b6:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80020b8:	bf00      	nop
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	200003c0 	.word	0x200003c0

080020c4 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	6039      	str	r1, [r7, #0]
 80020ce:	71fb      	strb	r3, [r7, #7]
 80020d0:	4613      	mov	r3, r2
 80020d2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020d4:	f3ef 8310 	mrs	r3, PRIMASK
 80020d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80020da:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80020dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80020de:	b672      	cpsid	i
}
 80020e0:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 80020e2:	88bb      	ldrh	r3, [r7, #4]
 80020e4:	79f9      	ldrb	r1, [r7, #7]
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	4806      	ldr	r0, [pc, #24]	@ (8002104 <SUBGRF_WriteCommand+0x40>)
 80020ea:	f002 fa5d 	bl	80045a8 <HAL_SUBGHZ_ExecSetCmd>
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	f383 8810 	msr	PRIMASK, r3
}
 80020f8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80020fa:	bf00      	nop
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	200003c0 	.word	0x200003c0

08002108 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	6039      	str	r1, [r7, #0]
 8002112:	71fb      	strb	r3, [r7, #7]
 8002114:	4613      	mov	r3, r2
 8002116:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002118:	f3ef 8310 	mrs	r3, PRIMASK
 800211c:	60fb      	str	r3, [r7, #12]
  return(result);
 800211e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8002120:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002122:	b672      	cpsid	i
}
 8002124:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8002126:	88bb      	ldrh	r3, [r7, #4]
 8002128:	79f9      	ldrb	r1, [r7, #7]
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	4806      	ldr	r0, [pc, #24]	@ (8002148 <SUBGRF_ReadCommand+0x40>)
 800212e:	f002 fa9a 	bl	8004666 <HAL_SUBGHZ_ExecGetCmd>
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	f383 8810 	msr	PRIMASK, r3
}
 800213c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800213e:	bf00      	nop
 8002140:	3718      	adds	r7, #24
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	200003c0 	.word	0x200003c0

0800214c <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	460a      	mov	r2, r1
 8002156:	71fb      	strb	r3, [r7, #7]
 8002158:	4613      	mov	r3, r2
 800215a:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800215c:	2301      	movs	r3, #1
 800215e:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8002160:	79bb      	ldrb	r3, [r7, #6]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d10d      	bne.n	8002182 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8002166:	79fb      	ldrb	r3, [r7, #7]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d104      	bne.n	8002176 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800216c:	2302      	movs	r3, #2
 800216e:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8002170:	2004      	movs	r0, #4
 8002172:	f000 f8e7 	bl	8002344 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8002176:	79fb      	ldrb	r3, [r7, #7]
 8002178:	2b02      	cmp	r3, #2
 800217a:	d107      	bne.n	800218c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800217c:	2303      	movs	r3, #3
 800217e:	73fb      	strb	r3, [r7, #15]
 8002180:	e004      	b.n	800218c <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8002182:	79bb      	ldrb	r3, [r7, #6]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8002188:	2301      	movs	r3, #1
 800218a:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800218c:	7bfb      	ldrb	r3, [r7, #15]
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff f931 	bl	80013f6 <RBI_ConfigRFSwitch>
}
 8002194:	bf00      	nop
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 80021a6:	2301      	movs	r3, #1
 80021a8:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 80021aa:	f7ff f932 	bl	8001412 <RBI_GetTxConfig>
 80021ae:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d016      	beq.n	80021e4 <SUBGRF_SetRfTxPower+0x48>
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	dc16      	bgt.n	80021ea <SUBGRF_SetRfTxPower+0x4e>
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <SUBGRF_SetRfTxPower+0x2e>
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d00a      	beq.n	80021de <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 80021c8:	e00f      	b.n	80021ea <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 80021ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ce:	2b0f      	cmp	r3, #15
 80021d0:	dd02      	ble.n	80021d8 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 80021d2:	2302      	movs	r3, #2
 80021d4:	73fb      	strb	r3, [r7, #15]
            break;
 80021d6:	e009      	b.n	80021ec <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 80021d8:	2301      	movs	r3, #1
 80021da:	73fb      	strb	r3, [r7, #15]
            break;
 80021dc:	e006      	b.n	80021ec <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 80021de:	2301      	movs	r3, #1
 80021e0:	73fb      	strb	r3, [r7, #15]
            break;
 80021e2:	e003      	b.n	80021ec <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 80021e4:	2302      	movs	r3, #2
 80021e6:	73fb      	strb	r3, [r7, #15]
            break;
 80021e8:	e000      	b.n	80021ec <SUBGRF_SetRfTxPower+0x50>
            break;
 80021ea:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 80021ec:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
 80021f2:	2202      	movs	r2, #2
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff fc09 	bl	8001a0c <SUBGRF_SetTxParams>

    return paSelect;
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <HAL_SUBGHZ_TxCpltCallback>:
    return RF_WAKEUP_TIME;
}

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800220c:	4b03      	ldr	r3, [pc, #12]	@ (800221c <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2001      	movs	r0, #1
 8002212:	4798      	blx	r3
}
 8002214:	bf00      	nop
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	20000470 	.word	0x20000470

08002220 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8002228:	4b03      	ldr	r3, [pc, #12]	@ (8002238 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2002      	movs	r0, #2
 800222e:	4798      	blx	r3
}
 8002230:	bf00      	nop
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	20000470 	.word	0x20000470

0800223c <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8002244:	4b03      	ldr	r3, [pc, #12]	@ (8002254 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2040      	movs	r0, #64	@ 0x40
 800224a:	4798      	blx	r3
}
 800224c:	bf00      	nop
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	20000470 	.word	0x20000470

08002258 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	460b      	mov	r3, r1
 8002262:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8002264:	78fb      	ldrb	r3, [r7, #3]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d002      	beq.n	8002270 <HAL_SUBGHZ_CADStatusCallback+0x18>
 800226a:	2b01      	cmp	r3, #1
 800226c:	d005      	beq.n	800227a <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800226e:	e00a      	b.n	8002286 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8002270:	4b07      	ldr	r3, [pc, #28]	@ (8002290 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2080      	movs	r0, #128	@ 0x80
 8002276:	4798      	blx	r3
            break;
 8002278:	e005      	b.n	8002286 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800227a:	4b05      	ldr	r3, [pc, #20]	@ (8002290 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002282:	4798      	blx	r3
            break;
 8002284:	bf00      	nop
    }
}
 8002286:	bf00      	nop
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20000470 	.word	0x20000470

08002294 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800229c:	4b04      	ldr	r3, [pc, #16]	@ (80022b0 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80022a4:	4798      	blx	r3
}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	20000470 	.word	0x20000470

080022b4 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 80022bc:	4b03      	ldr	r3, [pc, #12]	@ (80022cc <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2020      	movs	r0, #32
 80022c2:	4798      	blx	r3
}
 80022c4:	bf00      	nop
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	20000470 	.word	0x20000470

080022d0 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 80022d8:	4b03      	ldr	r3, [pc, #12]	@ (80022e8 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2004      	movs	r0, #4
 80022de:	4798      	blx	r3
}
 80022e0:	bf00      	nop
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20000470 	.word	0x20000470

080022ec <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 80022f4:	4b03      	ldr	r3, [pc, #12]	@ (8002304 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2008      	movs	r0, #8
 80022fa:	4798      	blx	r3
}
 80022fc:	bf00      	nop
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	20000470 	.word	0x20000470

08002308 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8002310:	4b03      	ldr	r3, [pc, #12]	@ (8002320 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2010      	movs	r0, #16
 8002316:	4798      	blx	r3
}
 8002318:	bf00      	nop
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20000470 	.word	0x20000470

08002324 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 800232c:	4b04      	ldr	r3, [pc, #16]	@ (8002340 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002334:	4798      	blx	r3
}
 8002336:	bf00      	nop
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	20000470 	.word	0x20000470

08002344 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800234e:	f7ff f86e 	bl	800142e <RBI_IsDCDC>
 8002352:	4603      	mov	r3, r0
 8002354:	2b01      	cmp	r3, #1
 8002356:	d112      	bne.n	800237e <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8002358:	f640 1023 	movw	r0, #2339	@ 0x923
 800235c:	f7ff fe38 	bl	8001fd0 <SUBGRF_ReadRegister>
 8002360:	4603      	mov	r3, r0
 8002362:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8002364:	7bfb      	ldrb	r3, [r7, #15]
 8002366:	f023 0306 	bic.w	r3, r3, #6
 800236a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800236c:	7bfa      	ldrb	r2, [r7, #15]
 800236e:	79fb      	ldrb	r3, [r7, #7]
 8002370:	4313      	orrs	r3, r2
 8002372:	b2db      	uxtb	r3, r3
 8002374:	4619      	mov	r1, r3
 8002376:	f640 1023 	movw	r0, #2339	@ 0x923
 800237a:	f7ff fe15 	bl	8001fa8 <SUBGRF_WriteRegister>
  }
}
 800237e:	bf00      	nop
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
	...

08002388 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800238e:	2300      	movs	r3, #0
 8002390:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002392:	2003      	movs	r0, #3
 8002394:	f000 f982 	bl	800269c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002398:	f001 fc50 	bl	8003c3c <HAL_RCC_GetHCLKFreq>
 800239c:	4603      	mov	r3, r0
 800239e:	4a09      	ldr	r2, [pc, #36]	@ (80023c4 <HAL_Init+0x3c>)
 80023a0:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023a2:	2000      	movs	r0, #0
 80023a4:	f000 f810 	bl	80023c8 <HAL_InitTick>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d002      	beq.n	80023b4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	71fb      	strb	r3, [r7, #7]
 80023b2:	e001      	b.n	80023b8 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023b4:	f7fe fcea 	bl	8000d8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023b8:	79fb      	ldrb	r3, [r7, #7]
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	2000001c 	.word	0x2000001c

080023c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023d0:	2300      	movs	r3, #0
 80023d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80023d4:	4b17      	ldr	r3, [pc, #92]	@ (8002434 <HAL_InitTick+0x6c>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d024      	beq.n	8002426 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80023dc:	f001 fc2e 	bl	8003c3c <HAL_RCC_GetHCLKFreq>
 80023e0:	4602      	mov	r2, r0
 80023e2:	4b14      	ldr	r3, [pc, #80]	@ (8002434 <HAL_InitTick+0x6c>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	4619      	mov	r1, r3
 80023e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80023f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f4:	4618      	mov	r0, r3
 80023f6:	f000 f992 	bl	800271e <HAL_SYSTICK_Config>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10f      	bne.n	8002420 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b0f      	cmp	r3, #15
 8002404:	d809      	bhi.n	800241a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002406:	2200      	movs	r2, #0
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	f04f 30ff 	mov.w	r0, #4294967295
 800240e:	f000 f950 	bl	80026b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002412:	4a09      	ldr	r2, [pc, #36]	@ (8002438 <HAL_InitTick+0x70>)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6013      	str	r3, [r2, #0]
 8002418:	e007      	b.n	800242a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	73fb      	strb	r3, [r7, #15]
 800241e:	e004      	b.n	800242a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	73fb      	strb	r3, [r7, #15]
 8002424:	e001      	b.n	800242a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800242a:	7bfb      	ldrb	r3, [r7, #15]
}
 800242c:	4618      	mov	r0, r3
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	20000030 	.word	0x20000030
 8002438:	2000002c 	.word	0x2000002c

0800243c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002440:	4b05      	ldr	r3, [pc, #20]	@ (8002458 <HAL_IncTick+0x1c>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	461a      	mov	r2, r3
 8002446:	4b05      	ldr	r3, [pc, #20]	@ (800245c <HAL_IncTick+0x20>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4413      	add	r3, r2
 800244c:	4a03      	ldr	r2, [pc, #12]	@ (800245c <HAL_IncTick+0x20>)
 800244e:	6013      	str	r3, [r2, #0]
}
 8002450:	bf00      	nop
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr
 8002458:	20000030 	.word	0x20000030
 800245c:	20000474 	.word	0x20000474

08002460 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  return uwTick;
 8002464:	4b02      	ldr	r3, [pc, #8]	@ (8002470 <HAL_GetTick+0x10>)
 8002466:	681b      	ldr	r3, [r3, #0]
}
 8002468:	4618      	mov	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr
 8002470:	20000474 	.word	0x20000474

08002474 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800247c:	f7ff fff0 	bl	8002460 <HAL_GetTick>
 8002480:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800248c:	d005      	beq.n	800249a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800248e:	4b0a      	ldr	r3, [pc, #40]	@ (80024b8 <HAL_Delay+0x44>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	461a      	mov	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	4413      	add	r3, r2
 8002498:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800249a:	bf00      	nop
 800249c:	f7ff ffe0 	bl	8002460 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d8f7      	bhi.n	800249c <HAL_Delay+0x28>
  {
  }
}
 80024ac:	bf00      	nop
 80024ae:	bf00      	nop
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20000030 	.word	0x20000030

080024bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002500 <__NVIC_SetPriorityGrouping+0x44>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024d2:	68ba      	ldr	r2, [r7, #8]
 80024d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024d8:	4013      	ands	r3, r2
 80024da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ee:	4a04      	ldr	r2, [pc, #16]	@ (8002500 <__NVIC_SetPriorityGrouping+0x44>)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	60d3      	str	r3, [r2, #12]
}
 80024f4:	bf00      	nop
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc80      	pop	{r7}
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	e000ed00 	.word	0xe000ed00

08002504 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002508:	4b04      	ldr	r3, [pc, #16]	@ (800251c <__NVIC_GetPriorityGrouping+0x18>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	0a1b      	lsrs	r3, r3, #8
 800250e:	f003 0307 	and.w	r3, r3, #7
}
 8002512:	4618      	mov	r0, r3
 8002514:	46bd      	mov	sp, r7
 8002516:	bc80      	pop	{r7}
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	e000ed00 	.word	0xe000ed00

08002520 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800252a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252e:	2b00      	cmp	r3, #0
 8002530:	db0b      	blt.n	800254a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002532:	79fb      	ldrb	r3, [r7, #7]
 8002534:	f003 021f 	and.w	r2, r3, #31
 8002538:	4906      	ldr	r1, [pc, #24]	@ (8002554 <__NVIC_EnableIRQ+0x34>)
 800253a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253e:	095b      	lsrs	r3, r3, #5
 8002540:	2001      	movs	r0, #1
 8002542:	fa00 f202 	lsl.w	r2, r0, r2
 8002546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr
 8002554:	e000e100 	.word	0xe000e100

08002558 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	4603      	mov	r3, r0
 8002560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002566:	2b00      	cmp	r3, #0
 8002568:	db12      	blt.n	8002590 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800256a:	79fb      	ldrb	r3, [r7, #7]
 800256c:	f003 021f 	and.w	r2, r3, #31
 8002570:	490a      	ldr	r1, [pc, #40]	@ (800259c <__NVIC_DisableIRQ+0x44>)
 8002572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002576:	095b      	lsrs	r3, r3, #5
 8002578:	2001      	movs	r0, #1
 800257a:	fa00 f202 	lsl.w	r2, r0, r2
 800257e:	3320      	adds	r3, #32
 8002580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002584:	f3bf 8f4f 	dsb	sy
}
 8002588:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800258a:	f3bf 8f6f 	isb	sy
}
 800258e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	bc80      	pop	{r7}
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	e000e100 	.word	0xe000e100

080025a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	6039      	str	r1, [r7, #0]
 80025aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	db0a      	blt.n	80025ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	490c      	ldr	r1, [pc, #48]	@ (80025ec <__NVIC_SetPriority+0x4c>)
 80025ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025be:	0112      	lsls	r2, r2, #4
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	440b      	add	r3, r1
 80025c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025c8:	e00a      	b.n	80025e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	4908      	ldr	r1, [pc, #32]	@ (80025f0 <__NVIC_SetPriority+0x50>)
 80025d0:	79fb      	ldrb	r3, [r7, #7]
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	3b04      	subs	r3, #4
 80025d8:	0112      	lsls	r2, r2, #4
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	440b      	add	r3, r1
 80025de:	761a      	strb	r2, [r3, #24]
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	e000e100 	.word	0xe000e100
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b089      	sub	sp, #36	@ 0x24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f1c3 0307 	rsb	r3, r3, #7
 800260e:	2b04      	cmp	r3, #4
 8002610:	bf28      	it	cs
 8002612:	2304      	movcs	r3, #4
 8002614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	3304      	adds	r3, #4
 800261a:	2b06      	cmp	r3, #6
 800261c:	d902      	bls.n	8002624 <NVIC_EncodePriority+0x30>
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	3b03      	subs	r3, #3
 8002622:	e000      	b.n	8002626 <NVIC_EncodePriority+0x32>
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002628:	f04f 32ff 	mov.w	r2, #4294967295
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	43da      	mvns	r2, r3
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	401a      	ands	r2, r3
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800263c:	f04f 31ff 	mov.w	r1, #4294967295
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	fa01 f303 	lsl.w	r3, r1, r3
 8002646:	43d9      	mvns	r1, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800264c:	4313      	orrs	r3, r2
         );
}
 800264e:	4618      	mov	r0, r3
 8002650:	3724      	adds	r7, #36	@ 0x24
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr

08002658 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3b01      	subs	r3, #1
 8002664:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002668:	d301      	bcc.n	800266e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800266a:	2301      	movs	r3, #1
 800266c:	e00f      	b.n	800268e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800266e:	4a0a      	ldr	r2, [pc, #40]	@ (8002698 <SysTick_Config+0x40>)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3b01      	subs	r3, #1
 8002674:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002676:	210f      	movs	r1, #15
 8002678:	f04f 30ff 	mov.w	r0, #4294967295
 800267c:	f7ff ff90 	bl	80025a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002680:	4b05      	ldr	r3, [pc, #20]	@ (8002698 <SysTick_Config+0x40>)
 8002682:	2200      	movs	r2, #0
 8002684:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002686:	4b04      	ldr	r3, [pc, #16]	@ (8002698 <SysTick_Config+0x40>)
 8002688:	2207      	movs	r2, #7
 800268a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	e000e010 	.word	0xe000e010

0800269c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f7ff ff09 	bl	80024bc <__NVIC_SetPriorityGrouping>
}
 80026aa:	bf00      	nop
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b086      	sub	sp, #24
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	4603      	mov	r3, r0
 80026ba:	60b9      	str	r1, [r7, #8]
 80026bc:	607a      	str	r2, [r7, #4]
 80026be:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026c0:	f7ff ff20 	bl	8002504 <__NVIC_GetPriorityGrouping>
 80026c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	68b9      	ldr	r1, [r7, #8]
 80026ca:	6978      	ldr	r0, [r7, #20]
 80026cc:	f7ff ff92 	bl	80025f4 <NVIC_EncodePriority>
 80026d0:	4602      	mov	r2, r0
 80026d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026d6:	4611      	mov	r1, r2
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff ff61 	bl	80025a0 <__NVIC_SetPriority>
}
 80026de:	bf00      	nop
 80026e0:	3718      	adds	r7, #24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b082      	sub	sp, #8
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	4603      	mov	r3, r0
 80026ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff ff13 	bl	8002520 <__NVIC_EnableIRQ>
}
 80026fa:	bf00      	nop
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b082      	sub	sp, #8
 8002706:	af00      	add	r7, sp, #0
 8002708:	4603      	mov	r3, r0
 800270a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800270c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff ff21 	bl	8002558 <__NVIC_DisableIRQ>
}
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b082      	sub	sp, #8
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7ff ff96 	bl	8002658 <SysTick_Config>
 800272c:	4603      	mov	r3, r0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e04f      	b.n	80027e8 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d008      	beq.n	8002766 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2204      	movs	r2, #4
 8002758:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e040      	b.n	80027e8 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 020e 	bic.w	r2, r2, #14
 8002774:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002780:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002784:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0201 	bic.w	r2, r2, #1
 8002794:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800279a:	f003 021c 	and.w	r2, r3, #28
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a2:	2101      	movs	r1, #1
 80027a4:	fa01 f202 	lsl.w	r2, r1, r2
 80027a8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80027b2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00c      	beq.n	80027d6 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027ca:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80027d4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc80      	pop	{r7}
 80027f0:	4770      	bx	lr

080027f2 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b084      	sub	sp, #16
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027fa:	2300      	movs	r3, #0
 80027fc:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d005      	beq.n	8002816 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2204      	movs	r2, #4
 800280e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	73fb      	strb	r3, [r7, #15]
 8002814:	e047      	b.n	80028a6 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 020e 	bic.w	r2, r2, #14
 8002824:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0201 	bic.w	r2, r2, #1
 8002834:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002840:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002844:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800284a:	f003 021c 	and.w	r2, r3, #28
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002852:	2101      	movs	r1, #1
 8002854:	fa01 f202 	lsl.w	r2, r1, r2
 8002858:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002862:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00c      	beq.n	8002886 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002876:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800287a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002884:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800289a:	2b00      	cmp	r3, #0
 800289c:	d003      	beq.n	80028a6 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	4798      	blx	r3
    }
  }
  return status;
 80028a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b087      	sub	sp, #28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028be:	e140      	b.n	8002b42 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	2101      	movs	r1, #1
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	fa01 f303 	lsl.w	r3, r1, r3
 80028cc:	4013      	ands	r3, r2
 80028ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 8132 	beq.w	8002b3c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f003 0303 	and.w	r3, r3, #3
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d005      	beq.n	80028f0 <HAL_GPIO_Init+0x40>
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 0303 	and.w	r3, r3, #3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d130      	bne.n	8002952 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	2203      	movs	r2, #3
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	43db      	mvns	r3, r3
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	4013      	ands	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	4313      	orrs	r3, r2
 8002918:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002926:	2201      	movs	r2, #1
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43db      	mvns	r3, r3
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4013      	ands	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	091b      	lsrs	r3, r3, #4
 800293c:	f003 0201 	and.w	r2, r3, #1
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	4313      	orrs	r3, r2
 800294a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	2b03      	cmp	r3, #3
 800295c:	d017      	beq.n	800298e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	2203      	movs	r2, #3
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43db      	mvns	r3, r3
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	4013      	ands	r3, r2
 8002974:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	689a      	ldr	r2, [r3, #8]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	4313      	orrs	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f003 0303 	and.w	r3, r3, #3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d123      	bne.n	80029e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	08da      	lsrs	r2, r3, #3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	3208      	adds	r2, #8
 80029a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	220f      	movs	r2, #15
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	43db      	mvns	r3, r3
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	4013      	ands	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	691a      	ldr	r2, [r3, #16]
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	08da      	lsrs	r2, r3, #3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3208      	adds	r2, #8
 80029dc:	6939      	ldr	r1, [r7, #16]
 80029de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	2203      	movs	r2, #3
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	43db      	mvns	r3, r3
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	4013      	ands	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f003 0203 	and.w	r2, r3, #3
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 808c 	beq.w	8002b3c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002a24:	4a4e      	ldr	r2, [pc, #312]	@ (8002b60 <HAL_GPIO_Init+0x2b0>)
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	089b      	lsrs	r3, r3, #2
 8002a2a:	3302      	adds	r3, #2
 8002a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f003 0303 	and.w	r3, r3, #3
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	2207      	movs	r2, #7
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4013      	ands	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002a4e:	d00d      	beq.n	8002a6c <HAL_GPIO_Init+0x1bc>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a44      	ldr	r2, [pc, #272]	@ (8002b64 <HAL_GPIO_Init+0x2b4>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d007      	beq.n	8002a68 <HAL_GPIO_Init+0x1b8>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a43      	ldr	r2, [pc, #268]	@ (8002b68 <HAL_GPIO_Init+0x2b8>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d101      	bne.n	8002a64 <HAL_GPIO_Init+0x1b4>
 8002a60:	2302      	movs	r3, #2
 8002a62:	e004      	b.n	8002a6e <HAL_GPIO_Init+0x1be>
 8002a64:	2307      	movs	r3, #7
 8002a66:	e002      	b.n	8002a6e <HAL_GPIO_Init+0x1be>
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e000      	b.n	8002a6e <HAL_GPIO_Init+0x1be>
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	f002 0203 	and.w	r2, r2, #3
 8002a74:	0092      	lsls	r2, r2, #2
 8002a76:	4093      	lsls	r3, r2
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a7e:	4938      	ldr	r1, [pc, #224]	@ (8002b60 <HAL_GPIO_Init+0x2b0>)
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	089b      	lsrs	r3, r3, #2
 8002a84:	3302      	adds	r3, #2
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a8c:	4b37      	ldr	r3, [pc, #220]	@ (8002b6c <HAL_GPIO_Init+0x2bc>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	43db      	mvns	r3, r3
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ab0:	4a2e      	ldr	r2, [pc, #184]	@ (8002b6c <HAL_GPIO_Init+0x2bc>)
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8002b6c <HAL_GPIO_Init+0x2bc>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ada:	4a24      	ldr	r2, [pc, #144]	@ (8002b6c <HAL_GPIO_Init+0x2bc>)
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002ae0:	4b22      	ldr	r3, [pc, #136]	@ (8002b6c <HAL_GPIO_Init+0x2bc>)
 8002ae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ae6:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	43db      	mvns	r3, r3
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	4013      	ands	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002b06:	4a19      	ldr	r2, [pc, #100]	@ (8002b6c <HAL_GPIO_Init+0x2bc>)
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002b0e:	4b17      	ldr	r3, [pc, #92]	@ (8002b6c <HAL_GPIO_Init+0x2bc>)
 8002b10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b14:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002b34:	4a0d      	ldr	r2, [pc, #52]	@ (8002b6c <HAL_GPIO_Init+0x2bc>)
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	fa22 f303 	lsr.w	r3, r2, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f47f aeb7 	bne.w	80028c0 <HAL_GPIO_Init+0x10>
  }
}
 8002b52:	bf00      	nop
 8002b54:	bf00      	nop
 8002b56:	371c      	adds	r7, #28
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bc80      	pop	{r7}
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	40010000 	.word	0x40010000
 8002b64:	48000400 	.word	0x48000400
 8002b68:	48000800 	.word	0x48000800
 8002b6c:	58000800 	.word	0x58000800

08002b70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	807b      	strh	r3, [r7, #2]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b80:	787b      	ldrb	r3, [r7, #1]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b86:	887a      	ldrh	r2, [r7, #2]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b8c:	e002      	b.n	8002b94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b8e:	887a      	ldrh	r2, [r7, #2]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr

08002b9e <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b085      	sub	sp, #20
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bb0:	887a      	ldrh	r2, [r7, #2]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	041a      	lsls	r2, r3, #16
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	43d9      	mvns	r1, r3
 8002bbc:	887b      	ldrh	r3, [r7, #2]
 8002bbe:	400b      	ands	r3, r1
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	619a      	str	r2, [r3, #24]
}
 8002bc6:	bf00      	nop
 8002bc8:	3714      	adds	r7, #20
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr

08002bd0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bd4:	4b04      	ldr	r3, [pc, #16]	@ (8002be8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a03      	ldr	r2, [pc, #12]	@ (8002be8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002bda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bde:	6013      	str	r3, [r2, #0]
}
 8002be0:	bf00      	nop
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr
 8002be8:	58000400 	.word	0x58000400

08002bec <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002bf0:	4b03      	ldr	r3, [pc, #12]	@ (8002c00 <HAL_PWREx_GetVoltageRange+0x14>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bc80      	pop	{r7}
 8002bfe:	4770      	bx	lr
 8002c00:	58000400 	.word	0x58000400

08002c04 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002c08:	4b06      	ldr	r3, [pc, #24]	@ (8002c24 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c14:	d101      	bne.n	8002c1a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002c16:	2301      	movs	r3, #1
 8002c18:	e000      	b.n	8002c1c <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr
 8002c24:	58000400 	.word	0x58000400

08002c28 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002c2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c36:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002c3a:	6013      	str	r3, [r2, #0]
}
 8002c3c:	bf00      	nop
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr

08002c44 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002c48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c52:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c56:	6013      	str	r3, [r2, #0]
}
 8002c58:	bf00      	nop
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr

08002c60 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002c64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c72:	d101      	bne.n	8002c78 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002c74:	2301      	movs	r3, #1
 8002c76:	e000      	b.n	8002c7a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bc80      	pop	{r7}
 8002c80:	4770      	bx	lr

08002c82 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002c82:	b480      	push	{r7}
 8002c84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002c86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c94:	6013      	str	r3, [r2, #0]
}
 8002c96:	bf00      	nop
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bc80      	pop	{r7}
 8002c9c:	4770      	bx	lr

08002c9e <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002ca2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002cac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cb0:	6013      	str	r3, [r2, #0]
}
 8002cb2:	bf00      	nop
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bc80      	pop	{r7}
 8002cb8:	4770      	bx	lr

08002cba <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002cbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002ccc:	d101      	bne.n	8002cd2 <LL_RCC_HSE_IsReady+0x18>
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e000      	b.n	8002cd4 <LL_RCC_HSE_IsReady+0x1a>
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr

08002cdc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002ce0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002cea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cee:	6013      	str	r3, [r2, #0]
}
 8002cf0:	bf00      	nop
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr

08002cf8 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002cfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d06:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d0a:	6013      	str	r3, [r2, #0]
}
 8002d0c:	bf00      	nop
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr

08002d14 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002d18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d26:	d101      	bne.n	8002d2c <LL_RCC_HSI_IsReady+0x18>
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e000      	b.n	8002d2e <LL_RCC_HSI_IsReady+0x1a>
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bc80      	pop	{r7}
 8002d34:	4770      	bx	lr

08002d36 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002d3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	061b      	lsls	r3, r3, #24
 8002d4c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d50:	4313      	orrs	r3, r2
 8002d52:	604b      	str	r3, [r1, #4]
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bc80      	pop	{r7}
 8002d5c:	4770      	bx	lr

08002d5e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002d62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d101      	bne.n	8002d76 <LL_RCC_LSE_IsReady+0x18>
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <LL_RCC_LSE_IsReady+0x1a>
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bc80      	pop	{r7}
 8002d7e:	4770      	bx	lr

08002d80 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002d84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d90:	f043 0301 	orr.w	r3, r3, #1
 8002d94:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002d98:	bf00      	nop
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr

08002da0 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002da4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002da8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002db0:	f023 0301 	bic.w	r3, r3, #1
 8002db4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002db8:	bf00      	nop
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr

08002dc0 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002dc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d101      	bne.n	8002dd8 <LL_RCC_LSI_IsReady+0x18>
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e000      	b.n	8002dda <LL_RCC_LSI_IsReady+0x1a>
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bc80      	pop	{r7}
 8002de0:	4770      	bx	lr

08002de2 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002de2:	b480      	push	{r7}
 8002de4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002de6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002df0:	f043 0301 	orr.w	r3, r3, #1
 8002df4:	6013      	str	r3, [r2, #0]
}
 8002df6:	bf00      	nop
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bc80      	pop	{r7}
 8002dfc:	4770      	bx	lr

08002dfe <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002e02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e0c:	f023 0301 	bic.w	r3, r3, #1
 8002e10:	6013      	str	r3, [r2, #0]
}
 8002e12:	bf00      	nop
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bc80      	pop	{r7}
 8002e18:	4770      	bx	lr

08002e1a <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002e1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d101      	bne.n	8002e30 <LL_RCC_MSI_IsReady+0x16>
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e000      	b.n	8002e32 <LL_RCC_MSI_IsReady+0x18>
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr

08002e3a <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002e3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0308 	and.w	r3, r3, #8
 8002e48:	2b08      	cmp	r3, #8
 8002e4a:	d101      	bne.n	8002e50 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e000      	b.n	8002e52 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bc80      	pop	{r7}
 8002e58:	4770      	bx	lr

08002e5a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002e5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr

08002e70 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002e74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e7c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bc80      	pop	{r7}
 8002e86:	4770      	bx	lr

08002e88 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002e90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	021b      	lsls	r3, r3, #8
 8002e9e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	604b      	str	r3, [r1, #4]
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr

08002eb0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002eb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f023 0203 	bic.w	r2, r3, #3
 8002ec2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	608b      	str	r3, [r1, #8]
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr

08002ed6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002eda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 030c 	and.w	r3, r3, #12
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr

08002eec <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002ef4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002efe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	608b      	str	r3, [r1, #8]
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr

08002f12 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002f1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f1e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002f22:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bc80      	pop	{r7}
 8002f3a:	4770      	bx	lr

08002f3c <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002f44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f48:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002f4c:	f023 020f 	bic.w	r2, r3, #15
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	091b      	lsrs	r3, r3, #4
 8002f54:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr

08002f68 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002f70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	608b      	str	r3, [r1, #8]
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bc80      	pop	{r7}
 8002f8c:	4770      	bx	lr

08002f8e <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b083      	sub	sp, #12
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002f96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002fa0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	608b      	str	r3, [r1, #8]
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bc80      	pop	{r7}
 8002fb2:	4770      	bx	lr

08002fb4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002fb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bc80      	pop	{r7}
 8002fc8:	4770      	bx	lr

08002fca <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002fce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fd2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr

08002fe4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002fe8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bc80      	pop	{r7}
 8002ff8:	4770      	bx	lr

08002ffa <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002ffe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8003008:	4618      	mov	r0, r3
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr

08003010 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003014:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800301e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003022:	6013      	str	r3, [r2, #0]
}
 8003024:	bf00      	nop
 8003026:	46bd      	mov	sp, r7
 8003028:	bc80      	pop	{r7}
 800302a:	4770      	bx	lr

0800302c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003030:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800303a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800303e:	6013      	str	r3, [r2, #0]
}
 8003040:	bf00      	nop
 8003042:	46bd      	mov	sp, r7
 8003044:	bc80      	pop	{r7}
 8003046:	4770      	bx	lr

08003048 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800304c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003056:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800305a:	d101      	bne.n	8003060 <LL_RCC_PLL_IsReady+0x18>
 800305c:	2301      	movs	r3, #1
 800305e:	e000      	b.n	8003062 <LL_RCC_PLL_IsReady+0x1a>
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	46bd      	mov	sp, r7
 8003066:	bc80      	pop	{r7}
 8003068:	4770      	bx	lr

0800306a <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800306a:	b480      	push	{r7}
 800306c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800306e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	0a1b      	lsrs	r3, r3, #8
 8003076:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800307a:	4618      	mov	r0, r3
 800307c:	46bd      	mov	sp, r7
 800307e:	bc80      	pop	{r7}
 8003080:	4770      	bx	lr

08003082 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003082:	b480      	push	{r7}
 8003084:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003086:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8003090:	4618      	mov	r0, r3
 8003092:	46bd      	mov	sp, r7
 8003094:	bc80      	pop	{r7}
 8003096:	4770      	bx	lr

08003098 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800309c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bc80      	pop	{r7}
 80030ac:	4770      	bx	lr

080030ae <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80030ae:	b480      	push	{r7}
 80030b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80030b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	f003 0303 	and.w	r3, r3, #3
}
 80030bc:	4618      	mov	r0, r3
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr

080030c4 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80030c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030d6:	d101      	bne.n	80030dc <LL_RCC_IsActiveFlag_HPRE+0x18>
 80030d8:	2301      	movs	r3, #1
 80030da:	e000      	b.n	80030de <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bc80      	pop	{r7}
 80030e4:	4770      	bx	lr

080030e6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80030e6:	b480      	push	{r7}
 80030e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80030ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80030f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80030fa:	d101      	bne.n	8003100 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80030fc:	2301      	movs	r3, #1
 80030fe:	e000      	b.n	8003102 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	46bd      	mov	sp, r7
 8003106:	bc80      	pop	{r7}
 8003108:	4770      	bx	lr

0800310a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800310a:	b480      	push	{r7}
 800310c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800310e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003112:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003116:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800311a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800311e:	d101      	bne.n	8003124 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003120:	2301      	movs	r3, #1
 8003122:	e000      	b.n	8003126 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	46bd      	mov	sp, r7
 800312a:	bc80      	pop	{r7}
 800312c:	4770      	bx	lr

0800312e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800312e:	b480      	push	{r7}
 8003130:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003132:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800313c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003140:	d101      	bne.n	8003146 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003142:	2301      	movs	r3, #1
 8003144:	e000      	b.n	8003148 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	46bd      	mov	sp, r7
 800314c:	bc80      	pop	{r7}
 800314e:	4770      	bx	lr

08003150 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003154:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800315e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003162:	d101      	bne.n	8003168 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003164:	2301      	movs	r3, #1
 8003166:	e000      	b.n	800316a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	46bd      	mov	sp, r7
 800316e:	bc80      	pop	{r7}
 8003170:	4770      	bx	lr
	...

08003174 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b088      	sub	sp, #32
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e36f      	b.n	8003866 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003186:	f7ff fea6 	bl	8002ed6 <LL_RCC_GetSysClkSource>
 800318a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800318c:	f7ff ff8f 	bl	80030ae <LL_RCC_PLL_GetMainSource>
 8003190:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0320 	and.w	r3, r3, #32
 800319a:	2b00      	cmp	r3, #0
 800319c:	f000 80c4 	beq.w	8003328 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d005      	beq.n	80031b2 <HAL_RCC_OscConfig+0x3e>
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	2b0c      	cmp	r3, #12
 80031aa:	d176      	bne.n	800329a <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d173      	bne.n	800329a <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e353      	b.n	8003866 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0308 	and.w	r3, r3, #8
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d005      	beq.n	80031dc <HAL_RCC_OscConfig+0x68>
 80031d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031da:	e006      	b.n	80031ea <HAL_RCC_OscConfig+0x76>
 80031dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031e4:	091b      	lsrs	r3, r3, #4
 80031e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d222      	bcs.n	8003234 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 fd5a 	bl	8003cac <RCC_SetFlashLatencyFromMSIRange>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e331      	b.n	8003866 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003202:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800320c:	f043 0308 	orr.w	r3, r3, #8
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003220:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003224:	4313      	orrs	r3, r2
 8003226:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322c:	4618      	mov	r0, r3
 800322e:	f7ff fe2b 	bl	8002e88 <LL_RCC_MSI_SetCalibTrimming>
 8003232:	e021      	b.n	8003278 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003234:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800323e:	f043 0308 	orr.w	r3, r3, #8
 8003242:	6013      	str	r3, [r2, #0]
 8003244:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003252:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003256:	4313      	orrs	r3, r2
 8003258:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff fe12 	bl	8002e88 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003268:	4618      	mov	r0, r3
 800326a:	f000 fd1f 	bl	8003cac <RCC_SetFlashLatencyFromMSIRange>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e2f6      	b.n	8003866 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003278:	f000 fce0 	bl	8003c3c <HAL_RCC_GetHCLKFreq>
 800327c:	4603      	mov	r3, r0
 800327e:	4aa7      	ldr	r2, [pc, #668]	@ (800351c <HAL_RCC_OscConfig+0x3a8>)
 8003280:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8003282:	4ba7      	ldr	r3, [pc, #668]	@ (8003520 <HAL_RCC_OscConfig+0x3ac>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff f89e 	bl	80023c8 <HAL_InitTick>
 800328c:	4603      	mov	r3, r0
 800328e:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8003290:	7cfb      	ldrb	r3, [r7, #19]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d047      	beq.n	8003326 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8003296:	7cfb      	ldrb	r3, [r7, #19]
 8003298:	e2e5      	b.n	8003866 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d02c      	beq.n	80032fc <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80032a2:	f7ff fd9e 	bl	8002de2 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032a6:	f7ff f8db 	bl	8002460 <HAL_GetTick>
 80032aa:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032ae:	f7ff f8d7 	bl	8002460 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e2d2      	b.n	8003866 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80032c0:	f7ff fdab 	bl	8002e1a <LL_RCC_MSI_IsReady>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0f1      	beq.n	80032ae <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80032d4:	f043 0308 	orr.w	r3, r3, #8
 80032d8:	6013      	str	r3, [r2, #0]
 80032da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80032ec:	4313      	orrs	r3, r2
 80032ee:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff fdc7 	bl	8002e88 <LL_RCC_MSI_SetCalibTrimming>
 80032fa:	e015      	b.n	8003328 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032fc:	f7ff fd7f 	bl	8002dfe <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003300:	f7ff f8ae 	bl	8002460 <HAL_GetTick>
 8003304:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003308:	f7ff f8aa 	bl	8002460 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e2a5      	b.n	8003866 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800331a:	f7ff fd7e 	bl	8002e1a <LL_RCC_MSI_IsReady>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1f1      	bne.n	8003308 <HAL_RCC_OscConfig+0x194>
 8003324:	e000      	b.n	8003328 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003326:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b00      	cmp	r3, #0
 8003332:	d058      	beq.n	80033e6 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	2b08      	cmp	r3, #8
 8003338:	d005      	beq.n	8003346 <HAL_RCC_OscConfig+0x1d2>
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	2b0c      	cmp	r3, #12
 800333e:	d108      	bne.n	8003352 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	2b03      	cmp	r3, #3
 8003344:	d105      	bne.n	8003352 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d14b      	bne.n	80033e6 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e289      	b.n	8003866 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8003352:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003364:	4313      	orrs	r3, r2
 8003366:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003370:	d102      	bne.n	8003378 <HAL_RCC_OscConfig+0x204>
 8003372:	f7ff fc86 	bl	8002c82 <LL_RCC_HSE_Enable>
 8003376:	e00d      	b.n	8003394 <HAL_RCC_OscConfig+0x220>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8003380:	d104      	bne.n	800338c <HAL_RCC_OscConfig+0x218>
 8003382:	f7ff fc51 	bl	8002c28 <LL_RCC_HSE_EnableTcxo>
 8003386:	f7ff fc7c 	bl	8002c82 <LL_RCC_HSE_Enable>
 800338a:	e003      	b.n	8003394 <HAL_RCC_OscConfig+0x220>
 800338c:	f7ff fc87 	bl	8002c9e <LL_RCC_HSE_Disable>
 8003390:	f7ff fc58 	bl	8002c44 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d012      	beq.n	80033c2 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339c:	f7ff f860 	bl	8002460 <HAL_GetTick>
 80033a0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033a4:	f7ff f85c 	bl	8002460 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b64      	cmp	r3, #100	@ 0x64
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e257      	b.n	8003866 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80033b6:	f7ff fc80 	bl	8002cba <LL_RCC_HSE_IsReady>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d0f1      	beq.n	80033a4 <HAL_RCC_OscConfig+0x230>
 80033c0:	e011      	b.n	80033e6 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c2:	f7ff f84d 	bl	8002460 <HAL_GetTick>
 80033c6:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80033c8:	e008      	b.n	80033dc <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033ca:	f7ff f849 	bl	8002460 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b64      	cmp	r3, #100	@ 0x64
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e244      	b.n	8003866 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80033dc:	f7ff fc6d 	bl	8002cba <LL_RCC_HSE_IsReady>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1f1      	bne.n	80033ca <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d046      	beq.n	8003480 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	2b04      	cmp	r3, #4
 80033f6:	d005      	beq.n	8003404 <HAL_RCC_OscConfig+0x290>
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	2b0c      	cmp	r3, #12
 80033fc:	d10e      	bne.n	800341c <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	2b02      	cmp	r3, #2
 8003402:	d10b      	bne.n	800341c <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e22a      	b.n	8003866 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff fc8e 	bl	8002d36 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800341a:	e031      	b.n	8003480 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d019      	beq.n	8003458 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003424:	f7ff fc5a 	bl	8002cdc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003428:	f7ff f81a 	bl	8002460 <HAL_GetTick>
 800342c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003430:	f7ff f816 	bl	8002460 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e211      	b.n	8003866 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003442:	f7ff fc67 	bl	8002d14 <LL_RCC_HSI_IsReady>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0f1      	beq.n	8003430 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff fc70 	bl	8002d36 <LL_RCC_HSI_SetCalibTrimming>
 8003456:	e013      	b.n	8003480 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003458:	f7ff fc4e 	bl	8002cf8 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345c:	f7ff f800 	bl	8002460 <HAL_GetTick>
 8003460:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003464:	f7fe fffc 	bl	8002460 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e1f7      	b.n	8003866 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003476:	f7ff fc4d 	bl	8002d14 <LL_RCC_HSI_IsReady>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1f1      	bne.n	8003464 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0308 	and.w	r3, r3, #8
 8003488:	2b00      	cmp	r3, #0
 800348a:	d06e      	beq.n	800356a <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d056      	beq.n	8003542 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8003494:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003498:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800349c:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	69da      	ldr	r2, [r3, #28]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f003 0310 	and.w	r3, r3, #16
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d031      	beq.n	8003510 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d006      	beq.n	80034c4 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e1d0      	b.n	8003866 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d013      	beq.n	80034f6 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80034ce:	f7ff fc67 	bl	8002da0 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034d2:	f7fe ffc5 	bl	8002460 <HAL_GetTick>
 80034d6:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80034d8:	e008      	b.n	80034ec <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034da:	f7fe ffc1 	bl	8002460 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b11      	cmp	r3, #17
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e1bc      	b.n	8003866 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80034ec:	f7ff fc68 	bl	8002dc0 <LL_RCC_LSI_IsReady>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1f1      	bne.n	80034da <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80034f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034fe:	f023 0210 	bic.w	r2, r3, #16
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800350a:	4313      	orrs	r3, r2
 800350c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003510:	f7ff fc36 	bl	8002d80 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003514:	f7fe ffa4 	bl	8002460 <HAL_GetTick>
 8003518:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800351a:	e00c      	b.n	8003536 <HAL_RCC_OscConfig+0x3c2>
 800351c:	2000001c 	.word	0x2000001c
 8003520:	2000002c 	.word	0x2000002c
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003524:	f7fe ff9c 	bl	8002460 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b11      	cmp	r3, #17
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e197      	b.n	8003866 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8003536:	f7ff fc43 	bl	8002dc0 <LL_RCC_LSI_IsReady>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d0f1      	beq.n	8003524 <HAL_RCC_OscConfig+0x3b0>
 8003540:	e013      	b.n	800356a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003542:	f7ff fc2d 	bl	8002da0 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003546:	f7fe ff8b 	bl	8002460 <HAL_GetTick>
 800354a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800354e:	f7fe ff87 	bl	8002460 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b11      	cmp	r3, #17
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e182      	b.n	8003866 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8003560:	f7ff fc2e 	bl	8002dc0 <LL_RCC_LSI_IsReady>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1f1      	bne.n	800354e <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0304 	and.w	r3, r3, #4
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 80d8 	beq.w	8003728 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003578:	f7ff fb44 	bl	8002c04 <LL_PWR_IsEnabledBkUpAccess>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d113      	bne.n	80035aa <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003582:	f7ff fb25 	bl	8002bd0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003586:	f7fe ff6b 	bl	8002460 <HAL_GetTick>
 800358a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800358c:	e008      	b.n	80035a0 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800358e:	f7fe ff67 	bl	8002460 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e162      	b.n	8003866 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80035a0:	f7ff fb30 	bl	8002c04 <LL_PWR_IsEnabledBkUpAccess>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d0f1      	beq.n	800358e <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d07b      	beq.n	80036aa <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	2b85      	cmp	r3, #133	@ 0x85
 80035b8:	d003      	beq.n	80035c2 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	2b05      	cmp	r3, #5
 80035c0:	d109      	bne.n	80035d6 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80035c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80035ce:	f043 0304 	orr.w	r3, r3, #4
 80035d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035d6:	f7fe ff43 	bl	8002460 <HAL_GetTick>
 80035da:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80035dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80035e8:	f043 0301 	orr.w	r3, r3, #1
 80035ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80035f0:	e00a      	b.n	8003608 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035f2:	f7fe ff35 	bl	8002460 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003600:	4293      	cmp	r3, r2
 8003602:	d901      	bls.n	8003608 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e12e      	b.n	8003866 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003608:	f7ff fba9 	bl	8002d5e <LL_RCC_LSE_IsReady>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0ef      	beq.n	80035f2 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	2b81      	cmp	r3, #129	@ 0x81
 8003618:	d003      	beq.n	8003622 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	2b85      	cmp	r3, #133	@ 0x85
 8003620:	d121      	bne.n	8003666 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003622:	f7fe ff1d 	bl	8002460 <HAL_GetTick>
 8003626:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003628:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800362c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003630:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003634:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003638:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800363c:	e00a      	b.n	8003654 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800363e:	f7fe ff0f 	bl	8002460 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	f241 3288 	movw	r2, #5000	@ 0x1388
 800364c:	4293      	cmp	r3, r2
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e108      	b.n	8003866 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003654:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003658:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800365c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0ec      	beq.n	800363e <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003664:	e060      	b.n	8003728 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003666:	f7fe fefb 	bl	8002460 <HAL_GetTick>
 800366a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800366c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003670:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003674:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003678:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800367c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003680:	e00a      	b.n	8003698 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003682:	f7fe feed 	bl	8002460 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003690:	4293      	cmp	r3, r2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e0e6      	b.n	8003866 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003698:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800369c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1ec      	bne.n	8003682 <HAL_RCC_OscConfig+0x50e>
 80036a8:	e03e      	b.n	8003728 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036aa:	f7fe fed9 	bl	8002460 <HAL_GetTick>
 80036ae:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80036b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80036bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80036c4:	e00a      	b.n	80036dc <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c6:	f7fe fecb 	bl	8002460 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e0c4      	b.n	8003866 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80036dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1ec      	bne.n	80036c6 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ec:	f7fe feb8 	bl	8002460 <HAL_GetTick>
 80036f0:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80036f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80036fe:	f023 0301 	bic.w	r3, r3, #1
 8003702:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003706:	e00a      	b.n	800371e <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003708:	f7fe feaa 	bl	8002460 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003716:	4293      	cmp	r3, r2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e0a3      	b.n	8003866 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800371e:	f7ff fb1e 	bl	8002d5e <LL_RCC_LSE_IsReady>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1ef      	bne.n	8003708 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 8099 	beq.w	8003864 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	2b0c      	cmp	r3, #12
 8003736:	d06c      	beq.n	8003812 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800373c:	2b02      	cmp	r3, #2
 800373e:	d14b      	bne.n	80037d8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003740:	f7ff fc74 	bl	800302c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003744:	f7fe fe8c 	bl	8002460 <HAL_GetTick>
 8003748:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800374c:	f7fe fe88 	bl	8002460 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b0a      	cmp	r3, #10
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e083      	b.n	8003866 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800375e:	f7ff fc73 	bl	8003048 <LL_RCC_PLL_IsReady>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1f1      	bne.n	800374c <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003768:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	4b40      	ldr	r3, [pc, #256]	@ (8003870 <HAL_RCC_OscConfig+0x6fc>)
 8003770:	4013      	ands	r3, r2
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800377a:	4311      	orrs	r1, r2
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003780:	0212      	lsls	r2, r2, #8
 8003782:	4311      	orrs	r1, r2
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003788:	4311      	orrs	r1, r2
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800378e:	4311      	orrs	r1, r2
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003794:	430a      	orrs	r2, r1
 8003796:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800379a:	4313      	orrs	r3, r2
 800379c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800379e:	f7ff fc37 	bl	8003010 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80037ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037b0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b2:	f7fe fe55 	bl	8002460 <HAL_GetTick>
 80037b6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80037b8:	e008      	b.n	80037cc <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ba:	f7fe fe51 	bl	8002460 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b0a      	cmp	r3, #10
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e04c      	b.n	8003866 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80037cc:	f7ff fc3c 	bl	8003048 <LL_RCC_PLL_IsReady>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d0f1      	beq.n	80037ba <HAL_RCC_OscConfig+0x646>
 80037d6:	e045      	b.n	8003864 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d8:	f7ff fc28 	bl	800302c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037dc:	f7fe fe40 	bl	8002460 <HAL_GetTick>
 80037e0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e4:	f7fe fe3c 	bl	8002460 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b0a      	cmp	r3, #10
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e037      	b.n	8003866 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80037f6:	f7ff fc27 	bl	8003048 <LL_RCC_PLL_IsReady>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1f1      	bne.n	80037e4 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003800:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003804:	68da      	ldr	r2, [r3, #12]
 8003806:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800380a:	4b1a      	ldr	r3, [pc, #104]	@ (8003874 <HAL_RCC_OscConfig+0x700>)
 800380c:	4013      	ands	r3, r2
 800380e:	60cb      	str	r3, [r1, #12]
 8003810:	e028      	b.n	8003864 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003816:	2b01      	cmp	r3, #1
 8003818:	d101      	bne.n	800381e <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e023      	b.n	8003866 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800381e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	f003 0203 	and.w	r2, r3, #3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003830:	429a      	cmp	r2, r3
 8003832:	d115      	bne.n	8003860 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800383e:	429a      	cmp	r2, r3
 8003840:	d10e      	bne.n	8003860 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800384c:	021b      	lsls	r3, r3, #8
 800384e:	429a      	cmp	r2, r3
 8003850:	d106      	bne.n	8003860 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800385c:	429a      	cmp	r2, r3
 800385e:	d001      	beq.n	8003864 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e000      	b.n	8003866 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3720      	adds	r7, #32
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	11c1808c 	.word	0x11c1808c
 8003874:	eefefffc 	.word	0xeefefffc

08003878 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d101      	bne.n	800388c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e12c      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800388c:	4b98      	ldr	r3, [pc, #608]	@ (8003af0 <HAL_RCC_ClockConfig+0x278>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	429a      	cmp	r2, r3
 8003898:	d91b      	bls.n	80038d2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800389a:	4b95      	ldr	r3, [pc, #596]	@ (8003af0 <HAL_RCC_ClockConfig+0x278>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f023 0207 	bic.w	r2, r3, #7
 80038a2:	4993      	ldr	r1, [pc, #588]	@ (8003af0 <HAL_RCC_ClockConfig+0x278>)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038aa:	f7fe fdd9 	bl	8002460 <HAL_GetTick>
 80038ae:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038b0:	e008      	b.n	80038c4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80038b2:	f7fe fdd5 	bl	8002460 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e110      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c4:	4b8a      	ldr	r3, [pc, #552]	@ (8003af0 <HAL_RCC_ClockConfig+0x278>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0307 	and.w	r3, r3, #7
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d1ef      	bne.n	80038b2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d016      	beq.n	800390c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7ff fb02 	bl	8002eec <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80038e8:	f7fe fdba 	bl	8002460 <HAL_GetTick>
 80038ec:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80038ee:	e008      	b.n	8003902 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80038f0:	f7fe fdb6 	bl	8002460 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e0f1      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003902:	f7ff fbdf 	bl	80030c4 <LL_RCC_IsActiveFlag_HPRE>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d0f1      	beq.n	80038f0 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0320 	and.w	r3, r3, #32
 8003914:	2b00      	cmp	r3, #0
 8003916:	d016      	beq.n	8003946 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff faf8 	bl	8002f12 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003922:	f7fe fd9d 	bl	8002460 <HAL_GetTick>
 8003926:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003928:	e008      	b.n	800393c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800392a:	f7fe fd99 	bl	8002460 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d901      	bls.n	800393c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e0d4      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800393c:	f7ff fbd3 	bl	80030e6 <LL_RCC_IsActiveFlag_C2HPRE>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0f1      	beq.n	800392a <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800394e:	2b00      	cmp	r3, #0
 8003950:	d016      	beq.n	8003980 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	4618      	mov	r0, r3
 8003958:	f7ff faf0 	bl	8002f3c <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800395c:	f7fe fd80 	bl	8002460 <HAL_GetTick>
 8003960:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003962:	e008      	b.n	8003976 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003964:	f7fe fd7c 	bl	8002460 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e0b7      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003976:	f7ff fbc8 	bl	800310a <LL_RCC_IsActiveFlag_SHDHPRE>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d0f1      	beq.n	8003964 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b00      	cmp	r3, #0
 800398a:	d016      	beq.n	80039ba <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff fae9 	bl	8002f68 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003996:	f7fe fd63 	bl	8002460 <HAL_GetTick>
 800399a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800399c:	e008      	b.n	80039b0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800399e:	f7fe fd5f 	bl	8002460 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d901      	bls.n	80039b0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e09a      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80039b0:	f7ff fbbd 	bl	800312e <LL_RCC_IsActiveFlag_PPRE1>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d0f1      	beq.n	800399e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0308 	and.w	r3, r3, #8
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d017      	beq.n	80039f6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff fade 	bl	8002f8e <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80039d2:	f7fe fd45 	bl	8002460 <HAL_GetTick>
 80039d6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80039d8:	e008      	b.n	80039ec <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80039da:	f7fe fd41 	bl	8002460 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d901      	bls.n	80039ec <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e07c      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80039ec:	f7ff fbb0 	bl	8003150 <LL_RCC_IsActiveFlag_PPRE2>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0f1      	beq.n	80039da <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d043      	beq.n	8003a8a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d106      	bne.n	8003a18 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003a0a:	f7ff f956 	bl	8002cba <LL_RCC_HSE_IsReady>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d11e      	bne.n	8003a52 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e066      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2b03      	cmp	r3, #3
 8003a1e:	d106      	bne.n	8003a2e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003a20:	f7ff fb12 	bl	8003048 <LL_RCC_PLL_IsReady>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d113      	bne.n	8003a52 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e05b      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d106      	bne.n	8003a44 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003a36:	f7ff f9f0 	bl	8002e1a <LL_RCC_MSI_IsReady>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d108      	bne.n	8003a52 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e050      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003a44:	f7ff f966 	bl	8002d14 <LL_RCC_HSI_IsReady>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e049      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7ff fa2a 	bl	8002eb0 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a5c:	f7fe fd00 	bl	8002460 <HAL_GetTick>
 8003a60:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a62:	e00a      	b.n	8003a7a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a64:	f7fe fcfc 	bl	8002460 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e035      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a7a:	f7ff fa2c 	bl	8002ed6 <LL_RCC_GetSysClkSource>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d1ec      	bne.n	8003a64 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a8a:	4b19      	ldr	r3, [pc, #100]	@ (8003af0 <HAL_RCC_ClockConfig+0x278>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0307 	and.w	r3, r3, #7
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d21b      	bcs.n	8003ad0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a98:	4b15      	ldr	r3, [pc, #84]	@ (8003af0 <HAL_RCC_ClockConfig+0x278>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f023 0207 	bic.w	r2, r3, #7
 8003aa0:	4913      	ldr	r1, [pc, #76]	@ (8003af0 <HAL_RCC_ClockConfig+0x278>)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003aa8:	f7fe fcda 	bl	8002460 <HAL_GetTick>
 8003aac:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003ab0:	f7fe fcd6 	bl	8002460 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e011      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8003af0 <HAL_RCC_ClockConfig+0x278>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0307 	and.w	r3, r3, #7
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d1ef      	bne.n	8003ab0 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003ad0:	f000 f8b4 	bl	8003c3c <HAL_RCC_GetHCLKFreq>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	4a07      	ldr	r2, [pc, #28]	@ (8003af4 <HAL_RCC_ClockConfig+0x27c>)
 8003ad8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8003ada:	4b07      	ldr	r3, [pc, #28]	@ (8003af8 <HAL_RCC_ClockConfig+0x280>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7fe fc72 	bl	80023c8 <HAL_InitTick>
 8003ae4:	4603      	mov	r3, r0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	58004000 	.word	0x58004000
 8003af4:	2000001c 	.word	0x2000001c
 8003af8:	2000002c 	.word	0x2000002c

08003afc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003afc:	b590      	push	{r4, r7, lr}
 8003afe:	b087      	sub	sp, #28
 8003b00:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8003b02:	2300      	movs	r3, #0
 8003b04:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b0a:	f7ff f9e4 	bl	8002ed6 <LL_RCC_GetSysClkSource>
 8003b0e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b10:	f7ff facd 	bl	80030ae <LL_RCC_PLL_GetMainSource>
 8003b14:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d005      	beq.n	8003b28 <HAL_RCC_GetSysClockFreq+0x2c>
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	2b0c      	cmp	r3, #12
 8003b20:	d139      	bne.n	8003b96 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d136      	bne.n	8003b96 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003b28:	f7ff f987 	bl	8002e3a <LL_RCC_MSI_IsEnabledRangeSelect>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d115      	bne.n	8003b5e <HAL_RCC_GetSysClockFreq+0x62>
 8003b32:	f7ff f982 	bl	8002e3a <LL_RCC_MSI_IsEnabledRangeSelect>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d106      	bne.n	8003b4a <HAL_RCC_GetSysClockFreq+0x4e>
 8003b3c:	f7ff f98d 	bl	8002e5a <LL_RCC_MSI_GetRange>
 8003b40:	4603      	mov	r3, r0
 8003b42:	0a1b      	lsrs	r3, r3, #8
 8003b44:	f003 030f 	and.w	r3, r3, #15
 8003b48:	e005      	b.n	8003b56 <HAL_RCC_GetSysClockFreq+0x5a>
 8003b4a:	f7ff f991 	bl	8002e70 <LL_RCC_MSI_GetRangeAfterStandby>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	0a1b      	lsrs	r3, r3, #8
 8003b52:	f003 030f 	and.w	r3, r3, #15
 8003b56:	4a36      	ldr	r2, [pc, #216]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x134>)
 8003b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b5c:	e014      	b.n	8003b88 <HAL_RCC_GetSysClockFreq+0x8c>
 8003b5e:	f7ff f96c 	bl	8002e3a <LL_RCC_MSI_IsEnabledRangeSelect>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d106      	bne.n	8003b76 <HAL_RCC_GetSysClockFreq+0x7a>
 8003b68:	f7ff f977 	bl	8002e5a <LL_RCC_MSI_GetRange>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	091b      	lsrs	r3, r3, #4
 8003b70:	f003 030f 	and.w	r3, r3, #15
 8003b74:	e005      	b.n	8003b82 <HAL_RCC_GetSysClockFreq+0x86>
 8003b76:	f7ff f97b 	bl	8002e70 <LL_RCC_MSI_GetRangeAfterStandby>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	091b      	lsrs	r3, r3, #4
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	4a2b      	ldr	r2, [pc, #172]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x134>)
 8003b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b88:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d115      	bne.n	8003bbc <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003b94:	e012      	b.n	8003bbc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	2b04      	cmp	r3, #4
 8003b9a:	d102      	bne.n	8003ba2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b9c:	4b25      	ldr	r3, [pc, #148]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x138>)
 8003b9e:	617b      	str	r3, [r7, #20]
 8003ba0:	e00c      	b.n	8003bbc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	2b08      	cmp	r3, #8
 8003ba6:	d109      	bne.n	8003bbc <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003ba8:	f7ff f85a 	bl	8002c60 <LL_RCC_HSE_IsEnabledDiv2>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d102      	bne.n	8003bb8 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003bb2:	4b20      	ldr	r3, [pc, #128]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x138>)
 8003bb4:	617b      	str	r3, [r7, #20]
 8003bb6:	e001      	b.n	8003bbc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003bb8:	4b1f      	ldr	r3, [pc, #124]	@ (8003c38 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003bba:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bbc:	f7ff f98b 	bl	8002ed6 <LL_RCC_GetSysClkSource>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b0c      	cmp	r3, #12
 8003bc4:	d12f      	bne.n	8003c26 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003bc6:	f7ff fa72 	bl	80030ae <LL_RCC_PLL_GetMainSource>
 8003bca:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d003      	beq.n	8003bda <HAL_RCC_GetSysClockFreq+0xde>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b03      	cmp	r3, #3
 8003bd6:	d003      	beq.n	8003be0 <HAL_RCC_GetSysClockFreq+0xe4>
 8003bd8:	e00d      	b.n	8003bf6 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003bda:	4b16      	ldr	r3, [pc, #88]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x138>)
 8003bdc:	60fb      	str	r3, [r7, #12]
        break;
 8003bde:	e00d      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003be0:	f7ff f83e 	bl	8002c60 <LL_RCC_HSE_IsEnabledDiv2>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d102      	bne.n	8003bf0 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003bea:	4b12      	ldr	r3, [pc, #72]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x138>)
 8003bec:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003bee:	e005      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003bf0:	4b11      	ldr	r3, [pc, #68]	@ (8003c38 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003bf2:	60fb      	str	r3, [r7, #12]
        break;
 8003bf4:	e002      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	60fb      	str	r3, [r7, #12]
        break;
 8003bfa:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003bfc:	f7ff fa35 	bl	800306a <LL_RCC_PLL_GetN>
 8003c00:	4602      	mov	r2, r0
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	fb03 f402 	mul.w	r4, r3, r2
 8003c08:	f7ff fa46 	bl	8003098 <LL_RCC_PLL_GetDivider>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	091b      	lsrs	r3, r3, #4
 8003c10:	3301      	adds	r3, #1
 8003c12:	fbb4 f4f3 	udiv	r4, r4, r3
 8003c16:	f7ff fa34 	bl	8003082 <LL_RCC_PLL_GetR>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	0f5b      	lsrs	r3, r3, #29
 8003c1e:	3301      	adds	r3, #1
 8003c20:	fbb4 f3f3 	udiv	r3, r4, r3
 8003c24:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003c26:	697b      	ldr	r3, [r7, #20]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	371c      	adds	r7, #28
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd90      	pop	{r4, r7, pc}
 8003c30:	08007874 	.word	0x08007874
 8003c34:	00f42400 	.word	0x00f42400
 8003c38:	01e84800 	.word	0x01e84800

08003c3c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c3c:	b598      	push	{r3, r4, r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003c40:	f7ff ff5c 	bl	8003afc <HAL_RCC_GetSysClockFreq>
 8003c44:	4604      	mov	r4, r0
 8003c46:	f7ff f9b5 	bl	8002fb4 <LL_RCC_GetAHBPrescaler>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	091b      	lsrs	r3, r3, #4
 8003c4e:	f003 030f 	and.w	r3, r3, #15
 8003c52:	4a03      	ldr	r2, [pc, #12]	@ (8003c60 <HAL_RCC_GetHCLKFreq+0x24>)
 8003c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c58:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	bd98      	pop	{r3, r4, r7, pc}
 8003c60:	08007814 	.word	0x08007814

08003c64 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c64:	b598      	push	{r3, r4, r7, lr}
 8003c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003c68:	f7ff ffe8 	bl	8003c3c <HAL_RCC_GetHCLKFreq>
 8003c6c:	4604      	mov	r4, r0
 8003c6e:	f7ff f9b9 	bl	8002fe4 <LL_RCC_GetAPB1Prescaler>
 8003c72:	4603      	mov	r3, r0
 8003c74:	0a1b      	lsrs	r3, r3, #8
 8003c76:	4a03      	ldr	r2, [pc, #12]	@ (8003c84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c7c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	bd98      	pop	{r3, r4, r7, pc}
 8003c84:	08007854 	.word	0x08007854

08003c88 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c88:	b598      	push	{r3, r4, r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003c8c:	f7ff ffd6 	bl	8003c3c <HAL_RCC_GetHCLKFreq>
 8003c90:	4604      	mov	r4, r0
 8003c92:	f7ff f9b2 	bl	8002ffa <LL_RCC_GetAPB2Prescaler>
 8003c96:	4603      	mov	r3, r0
 8003c98:	0adb      	lsrs	r3, r3, #11
 8003c9a:	4a03      	ldr	r2, [pc, #12]	@ (8003ca8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ca0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	bd98      	pop	{r3, r4, r7, pc}
 8003ca8:	08007854 	.word	0x08007854

08003cac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003cac:	b590      	push	{r4, r7, lr}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	091b      	lsrs	r3, r3, #4
 8003cb8:	f003 030f 	and.w	r3, r3, #15
 8003cbc:	4a10      	ldr	r2, [pc, #64]	@ (8003d00 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cc2:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003cc4:	f7ff f981 	bl	8002fca <LL_RCC_GetAHB3Prescaler>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	091b      	lsrs	r3, r3, #4
 8003ccc:	f003 030f 	and.w	r3, r3, #15
 8003cd0:	4a0c      	ldr	r2, [pc, #48]	@ (8003d04 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cdc:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	4a09      	ldr	r2, [pc, #36]	@ (8003d08 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce6:	0c9c      	lsrs	r4, r3, #18
 8003ce8:	f7fe ff80 	bl	8002bec <HAL_PWREx_GetVoltageRange>
 8003cec:	4603      	mov	r3, r0
 8003cee:	4619      	mov	r1, r3
 8003cf0:	4620      	mov	r0, r4
 8003cf2:	f000 f80b 	bl	8003d0c <RCC_SetFlashLatency>
 8003cf6:	4603      	mov	r3, r0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd90      	pop	{r4, r7, pc}
 8003d00:	08007874 	.word	0x08007874
 8003d04:	08007814 	.word	0x08007814
 8003d08:	431bde83 	.word	0x431bde83

08003d0c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b08e      	sub	sp, #56	@ 0x38
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003d16:	4a3a      	ldr	r2, [pc, #232]	@ (8003e00 <RCC_SetFlashLatency+0xf4>)
 8003d18:	f107 0320 	add.w	r3, r7, #32
 8003d1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d20:	6018      	str	r0, [r3, #0]
 8003d22:	3304      	adds	r3, #4
 8003d24:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003d26:	4a37      	ldr	r2, [pc, #220]	@ (8003e04 <RCC_SetFlashLatency+0xf8>)
 8003d28:	f107 0318 	add.w	r3, r7, #24
 8003d2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d30:	6018      	str	r0, [r3, #0]
 8003d32:	3304      	adds	r3, #4
 8003d34:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003d36:	4a34      	ldr	r2, [pc, #208]	@ (8003e08 <RCC_SetFlashLatency+0xfc>)
 8003d38:	f107 030c 	add.w	r3, r7, #12
 8003d3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8003d3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003d42:	2300      	movs	r3, #0
 8003d44:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d4c:	d11b      	bne.n	8003d86 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003d4e:	2300      	movs	r3, #0
 8003d50:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d52:	e014      	b.n	8003d7e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	3338      	adds	r3, #56	@ 0x38
 8003d5a:	443b      	add	r3, r7
 8003d5c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003d60:	461a      	mov	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d807      	bhi.n	8003d78 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	3338      	adds	r3, #56	@ 0x38
 8003d6e:	443b      	add	r3, r7
 8003d70:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003d74:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003d76:	e021      	b.n	8003dbc <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d9e7      	bls.n	8003d54 <RCC_SetFlashLatency+0x48>
 8003d84:	e01a      	b.n	8003dbc <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003d86:	2300      	movs	r3, #0
 8003d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d8a:	e014      	b.n	8003db6 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	3338      	adds	r3, #56	@ 0x38
 8003d92:	443b      	add	r3, r7
 8003d94:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003d98:	461a      	mov	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d807      	bhi.n	8003db0 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	3338      	adds	r3, #56	@ 0x38
 8003da6:	443b      	add	r3, r7
 8003da8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003dac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003dae:	e005      	b.n	8003dbc <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003db2:	3301      	adds	r3, #1
 8003db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d9e7      	bls.n	8003d8c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003dbc:	4b13      	ldr	r3, [pc, #76]	@ (8003e0c <RCC_SetFlashLatency+0x100>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f023 0207 	bic.w	r2, r3, #7
 8003dc4:	4911      	ldr	r1, [pc, #68]	@ (8003e0c <RCC_SetFlashLatency+0x100>)
 8003dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003dcc:	f7fe fb48 	bl	8002460 <HAL_GetTick>
 8003dd0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003dd2:	e008      	b.n	8003de6 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003dd4:	f7fe fb44 	bl	8002460 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d901      	bls.n	8003de6 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e007      	b.n	8003df6 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003de6:	4b09      	ldr	r3, [pc, #36]	@ (8003e0c <RCC_SetFlashLatency+0x100>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d1ef      	bne.n	8003dd4 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3738      	adds	r7, #56	@ 0x38
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	080077f8 	.word	0x080077f8
 8003e04:	08007800 	.word	0x08007800
 8003e08:	08007808 	.word	0x08007808
 8003e0c:	58004000 	.word	0x58004000

08003e10 <LL_RCC_LSE_IsReady>:
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003e14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d101      	bne.n	8003e28 <LL_RCC_LSE_IsReady+0x18>
 8003e24:	2301      	movs	r3, #1
 8003e26:	e000      	b.n	8003e2a <LL_RCC_LSE_IsReady+0x1a>
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bc80      	pop	{r7}
 8003e30:	4770      	bx	lr

08003e32 <LL_RCC_SetUSARTClockSource>:
{
 8003e32:	b480      	push	{r7}
 8003e34:	b083      	sub	sp, #12
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003e3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e3e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	0c1b      	lsrs	r3, r3, #16
 8003e46:	43db      	mvns	r3, r3
 8003e48:	401a      	ands	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e52:	4313      	orrs	r3, r2
 8003e54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bc80      	pop	{r7}
 8003e60:	4770      	bx	lr

08003e62 <LL_RCC_SetI2SClockSource>:
{
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003e6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e72:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e76:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003e82:	bf00      	nop
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bc80      	pop	{r7}
 8003e8a:	4770      	bx	lr

08003e8c <LL_RCC_SetLPUARTClockSource>:
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003e94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e9c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003ea0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bc80      	pop	{r7}
 8003eb4:	4770      	bx	lr

08003eb6 <LL_RCC_SetI2CClockSource>:
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b083      	sub	sp, #12
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003ebe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ec2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	091b      	lsrs	r3, r3, #4
 8003eca:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003ece:	43db      	mvns	r3, r3
 8003ed0:	401a      	ands	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	011b      	lsls	r3, r3, #4
 8003ed6:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003eda:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bc80      	pop	{r7}
 8003eec:	4770      	bx	lr

08003eee <LL_RCC_SetLPTIMClockSource>:
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003ef6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003efa:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	0c1b      	lsrs	r3, r3, #16
 8003f02:	041b      	lsls	r3, r3, #16
 8003f04:	43db      	mvns	r3, r3
 8003f06:	401a      	ands	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	041b      	lsls	r3, r3, #16
 8003f0c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f10:	4313      	orrs	r3, r2
 8003f12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003f16:	bf00      	nop
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bc80      	pop	{r7}
 8003f1e:	4770      	bx	lr

08003f20 <LL_RCC_SetRNGClockSource>:
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003f28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f30:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003f34:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bc80      	pop	{r7}
 8003f48:	4770      	bx	lr

08003f4a <LL_RCC_SetADCClockSource>:
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b083      	sub	sp, #12
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003f52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f5a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003f5e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003f6a:	bf00      	nop
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bc80      	pop	{r7}
 8003f72:	4770      	bx	lr

08003f74 <LL_RCC_SetRTCClockSource>:
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003f7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f88:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bc80      	pop	{r7}
 8003f9c:	4770      	bx	lr

08003f9e <LL_RCC_GetRTCClockSource>:
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003fa2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003faa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bc80      	pop	{r7}
 8003fb4:	4770      	bx	lr

08003fb6 <LL_RCC_ForceBackupDomainReset>:
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003fba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fc2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003fc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003fce:	bf00      	nop
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bc80      	pop	{r7}
 8003fd4:	4770      	bx	lr

08003fd6 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003fda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fe2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003fe6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003fee:	bf00      	nop
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bc80      	pop	{r7}
 8003ff4:	4770      	bx	lr
	...

08003ff8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8004000:	2300      	movs	r3, #0
 8004002:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8004004:	2300      	movs	r3, #0
 8004006:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004008:	2300      	movs	r3, #0
 800400a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d058      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8004018:	f7fe fdda 	bl	8002bd0 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800401c:	f7fe fa20 	bl	8002460 <HAL_GetTick>
 8004020:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004022:	e009      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004024:	f7fe fa1c 	bl	8002460 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d902      	bls.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	74fb      	strb	r3, [r7, #19]
        break;
 8004036:	e006      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004038:	4b7b      	ldr	r3, [pc, #492]	@ (8004228 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004040:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004044:	d1ee      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8004046:	7cfb      	ldrb	r3, [r7, #19]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d13c      	bne.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800404c:	f7ff ffa7 	bl	8003f9e <LL_RCC_GetRTCClockSource>
 8004050:	4602      	mov	r2, r0
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004056:	429a      	cmp	r2, r3
 8004058:	d00f      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800405a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800405e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004062:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004066:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004068:	f7ff ffa5 	bl	8003fb6 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 800406c:	f7ff ffb3 	bl	8003fd6 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004070:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d014      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004084:	f7fe f9ec 	bl	8002460 <HAL_GetTick>
 8004088:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800408a:	e00b      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800408c:	f7fe f9e8 	bl	8002460 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	f241 3288 	movw	r2, #5000	@ 0x1388
 800409a:	4293      	cmp	r3, r2
 800409c:	d902      	bls.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	74fb      	strb	r3, [r7, #19]
            break;
 80040a2:	e004      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80040a4:	f7ff feb4 	bl	8003e10 <LL_RCC_LSE_IsReady>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d1ee      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80040ae:	7cfb      	ldrb	r3, [r7, #19]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d105      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7ff ff5b 	bl	8003f74 <LL_RCC_SetRTCClockSource>
 80040be:	e004      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040c0:	7cfb      	ldrb	r3, [r7, #19]
 80040c2:	74bb      	strb	r3, [r7, #18]
 80040c4:	e001      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c6:	7cfb      	ldrb	r3, [r7, #19]
 80040c8:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d004      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	4618      	mov	r0, r3
 80040dc:	f7ff fea9 	bl	8003e32 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d004      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7ff fe9e 	bl	8003e32 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0320 	and.w	r3, r3, #32
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d004      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	4618      	mov	r0, r3
 8004108:	f7ff fec0 	bl	8003e8c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004114:	2b00      	cmp	r3, #0
 8004116:	d004      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	4618      	mov	r0, r3
 800411e:	f7ff fee6 	bl	8003eee <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800412a:	2b00      	cmp	r3, #0
 800412c:	d004      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004132:	4618      	mov	r0, r3
 8004134:	f7ff fedb 	bl	8003eee <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004140:	2b00      	cmp	r3, #0
 8004142:	d004      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004148:	4618      	mov	r0, r3
 800414a:	f7ff fed0 	bl	8003eee <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004156:	2b00      	cmp	r3, #0
 8004158:	d004      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	4618      	mov	r0, r3
 8004160:	f7ff fea9 	bl	8003eb6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800416c:	2b00      	cmp	r3, #0
 800416e:	d004      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	4618      	mov	r0, r3
 8004176:	f7ff fe9e 	bl	8003eb6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004182:	2b00      	cmp	r3, #0
 8004184:	d004      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	4618      	mov	r0, r3
 800418c:	f7ff fe93 	bl	8003eb6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0310 	and.w	r3, r3, #16
 8004198:	2b00      	cmp	r3, #0
 800419a:	d011      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7ff fe5e 	bl	8003e62 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041ae:	d107      	bne.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80041b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d010      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7ff fea5 	bl	8003f20 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d107      	bne.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80041de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041ec:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d011      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041fe:	4618      	mov	r0, r3
 8004200:	f7ff fea3 	bl	8003f4a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004208:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800420c:	d107      	bne.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800420e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004218:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800421c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800421e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004220:	4618      	mov	r0, r3
 8004222:	3718      	adds	r7, #24
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	58000400 	.word	0x58000400

0800422c <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8004234:	4b06      	ldr	r3, [pc, #24]	@ (8004250 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800423c:	4904      	ldr	r1, [pc, #16]	@ (8004250 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4313      	orrs	r3, r2
 8004242:	608b      	str	r3, [r1, #8]
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	bc80      	pop	{r7}
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	58000400 	.word	0x58000400

08004254 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8004254:	b480      	push	{r7}
 8004256:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004258:	4b05      	ldr	r3, [pc, #20]	@ (8004270 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800425a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800425e:	4a04      	ldr	r2, [pc, #16]	@ (8004270 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8004260:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004264:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004268:	bf00      	nop
 800426a:	46bd      	mov	sp, r7
 800426c:	bc80      	pop	{r7}
 800426e:	4770      	bx	lr
 8004270:	58000400 	.word	0x58000400

08004274 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8004274:	b480      	push	{r7}
 8004276:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004278:	4b05      	ldr	r3, [pc, #20]	@ (8004290 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800427a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800427e:	4a04      	ldr	r2, [pc, #16]	@ (8004290 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8004280:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004284:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004288:	bf00      	nop
 800428a:	46bd      	mov	sp, r7
 800428c:	bc80      	pop	{r7}
 800428e:	4770      	bx	lr
 8004290:	58000400 	.word	0x58000400

08004294 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8004298:	4b03      	ldr	r3, [pc, #12]	@ (80042a8 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800429a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800429e:	619a      	str	r2, [r3, #24]
}
 80042a0:	bf00      	nop
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bc80      	pop	{r7}
 80042a6:	4770      	bx	lr
 80042a8:	58000400 	.word	0x58000400

080042ac <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80042b0:	4b06      	ldr	r3, [pc, #24]	@ (80042cc <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d101      	bne.n	80042c0 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80042bc:	2301      	movs	r3, #1
 80042be:	e000      	b.n	80042c2 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bc80      	pop	{r7}
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	58000400 	.word	0x58000400

080042d0 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 80042d0:	b480      	push	{r7}
 80042d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80042d4:	4b06      	ldr	r3, [pc, #24]	@ (80042f0 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	2b04      	cmp	r3, #4
 80042de:	d101      	bne.n	80042e4 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80042e0:	2301      	movs	r3, #1
 80042e2:	e000      	b.n	80042e6 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bc80      	pop	{r7}
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	58000400 	.word	0x58000400

080042f4 <LL_RCC_RF_DisableReset>:
{
 80042f4:	b480      	push	{r7}
 80042f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80042f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004300:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004304:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004308:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800430c:	bf00      	nop
 800430e:	46bd      	mov	sp, r7
 8004310:	bc80      	pop	{r7}
 8004312:	4770      	bx	lr

08004314 <LL_RCC_IsRFUnderReset>:
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8004318:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800431c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004320:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004324:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004328:	d101      	bne.n	800432e <LL_RCC_IsRFUnderReset+0x1a>
 800432a:	2301      	movs	r3, #1
 800432c:	e000      	b.n	8004330 <LL_RCC_IsRFUnderReset+0x1c>
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	46bd      	mov	sp, r7
 8004334:	bc80      	pop	{r7}
 8004336:	4770      	bx	lr

08004338 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8004340:	4b06      	ldr	r3, [pc, #24]	@ (800435c <LL_EXTI_EnableIT_32_63+0x24>)
 8004342:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004346:	4905      	ldr	r1, [pc, #20]	@ (800435c <LL_EXTI_EnableIT_32_63+0x24>)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4313      	orrs	r3, r2
 800434c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	bc80      	pop	{r7}
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	58000800 	.word	0x58000800

08004360 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d103      	bne.n	8004376 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	73fb      	strb	r3, [r7, #15]
    return status;
 8004372:	7bfb      	ldrb	r3, [r7, #15]
 8004374:	e052      	b.n	800441c <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8004376:	2300      	movs	r3, #0
 8004378:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	799b      	ldrb	r3, [r3, #6]
 800437e:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8004380:	7bbb      	ldrb	r3, [r7, #14]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d002      	beq.n	800438c <HAL_SUBGHZ_Init+0x2c>
 8004386:	7bbb      	ldrb	r3, [r7, #14]
 8004388:	2b03      	cmp	r3, #3
 800438a:	d109      	bne.n	80043a0 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7fc fd6a 	bl	8000e6c <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8004398:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800439c:	f7ff ffcc 	bl	8004338 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 80043a0:	7bbb      	ldrb	r3, [r7, #14]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d126      	bne.n	80043f4 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2202      	movs	r2, #2
 80043aa:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 80043ac:	f7ff ffa2 	bl	80042f4 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80043b0:	4b1c      	ldr	r3, [pc, #112]	@ (8004424 <HAL_SUBGHZ_Init+0xc4>)
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	4613      	mov	r3, r2
 80043b6:	00db      	lsls	r3, r3, #3
 80043b8:	1a9b      	subs	r3, r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	0cdb      	lsrs	r3, r3, #19
 80043be:	2264      	movs	r2, #100	@ 0x64
 80043c0:	fb02 f303 	mul.w	r3, r2, r3
 80043c4:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d105      	bne.n	80043d8 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	609a      	str	r2, [r3, #8]
        break;
 80043d6:	e007      	b.n	80043e8 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	3b01      	subs	r3, #1
 80043dc:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 80043de:	f7ff ff99 	bl	8004314 <LL_RCC_IsRFUnderReset>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1ee      	bne.n	80043c6 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80043e8:	f7ff ff34 	bl	8004254 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80043ec:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80043f0:	f7ff ff1c 	bl	800422c <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80043f4:	f7ff ff4e 	bl	8004294 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80043f8:	7bfb      	ldrb	r3, [r7, #15]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10a      	bne.n	8004414 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4618      	mov	r0, r3
 8004404:	f000 fabc 	bl	8004980 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	719a      	strb	r2, [r3, #6]

  return status;
 800441a:	7bfb      	ldrb	r3, [r7, #15]
}
 800441c:	4618      	mov	r0, r3
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	2000001c 	.word	0x2000001c

08004428 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	607a      	str	r2, [r7, #4]
 8004432:	461a      	mov	r2, r3
 8004434:	460b      	mov	r3, r1
 8004436:	817b      	strh	r3, [r7, #10]
 8004438:	4613      	mov	r3, r2
 800443a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	799b      	ldrb	r3, [r3, #6]
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b01      	cmp	r3, #1
 8004444:	d14a      	bne.n	80044dc <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	795b      	ldrb	r3, [r3, #5]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d101      	bne.n	8004452 <HAL_SUBGHZ_WriteRegisters+0x2a>
 800444e:	2302      	movs	r3, #2
 8004450:	e045      	b.n	80044de <HAL_SUBGHZ_WriteRegisters+0xb6>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2201      	movs	r2, #1
 8004456:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2202      	movs	r2, #2
 800445c:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f000 fb5c 	bl	8004b1c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004464:	f7ff ff06 	bl	8004274 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8004468:	210d      	movs	r1, #13
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 faa8 	bl	80049c0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8004470:	897b      	ldrh	r3, [r7, #10]
 8004472:	0a1b      	lsrs	r3, r3, #8
 8004474:	b29b      	uxth	r3, r3
 8004476:	b2db      	uxtb	r3, r3
 8004478:	4619      	mov	r1, r3
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f000 faa0 	bl	80049c0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004480:	897b      	ldrh	r3, [r7, #10]
 8004482:	b2db      	uxtb	r3, r3
 8004484:	4619      	mov	r1, r3
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	f000 fa9a 	bl	80049c0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800448c:	2300      	movs	r3, #0
 800448e:	82bb      	strh	r3, [r7, #20]
 8004490:	e00a      	b.n	80044a8 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004492:	8abb      	ldrh	r3, [r7, #20]
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	4413      	add	r3, r2
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	4619      	mov	r1, r3
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f000 fa8f 	bl	80049c0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80044a2:	8abb      	ldrh	r3, [r7, #20]
 80044a4:	3301      	adds	r3, #1
 80044a6:	82bb      	strh	r3, [r7, #20]
 80044a8:	8aba      	ldrh	r2, [r7, #20]
 80044aa:	893b      	ldrh	r3, [r7, #8]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d3f0      	bcc.n	8004492 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80044b0:	f7ff fed0 	bl	8004254 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 fb55 	bl	8004b64 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d002      	beq.n	80044c8 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	75fb      	strb	r3, [r7, #23]
 80044c6:	e001      	b.n	80044cc <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80044c8:	2300      	movs	r3, #0
 80044ca:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2201      	movs	r2, #1
 80044d0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	715a      	strb	r2, [r3, #5]

    return status;
 80044d8:	7dfb      	ldrb	r3, [r7, #23]
 80044da:	e000      	b.n	80044de <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80044dc:	2302      	movs	r3, #2
  }
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3718      	adds	r7, #24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b088      	sub	sp, #32
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	60f8      	str	r0, [r7, #12]
 80044ee:	607a      	str	r2, [r7, #4]
 80044f0:	461a      	mov	r2, r3
 80044f2:	460b      	mov	r3, r1
 80044f4:	817b      	strh	r3, [r7, #10]
 80044f6:	4613      	mov	r3, r2
 80044f8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	799b      	ldrb	r3, [r3, #6]
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b01      	cmp	r3, #1
 8004506:	d14a      	bne.n	800459e <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	795b      	ldrb	r3, [r3, #5]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d101      	bne.n	8004514 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8004510:	2302      	movs	r3, #2
 8004512:	e045      	b.n	80045a0 <HAL_SUBGHZ_ReadRegisters+0xba>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2201      	movs	r2, #1
 8004518:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f000 fafe 	bl	8004b1c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004520:	f7ff fea8 	bl	8004274 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8004524:	211d      	movs	r1, #29
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f000 fa4a 	bl	80049c0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800452c:	897b      	ldrh	r3, [r7, #10]
 800452e:	0a1b      	lsrs	r3, r3, #8
 8004530:	b29b      	uxth	r3, r3
 8004532:	b2db      	uxtb	r3, r3
 8004534:	4619      	mov	r1, r3
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f000 fa42 	bl	80049c0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800453c:	897b      	ldrh	r3, [r7, #10]
 800453e:	b2db      	uxtb	r3, r3
 8004540:	4619      	mov	r1, r3
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 fa3c 	bl	80049c0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8004548:	2100      	movs	r1, #0
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f000 fa38 	bl	80049c0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004550:	2300      	movs	r3, #0
 8004552:	82fb      	strh	r3, [r7, #22]
 8004554:	e009      	b.n	800456a <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004556:	69b9      	ldr	r1, [r7, #24]
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f000 fa87 	bl	8004a6c <SUBGHZSPI_Receive>
      pData++;
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	3301      	adds	r3, #1
 8004562:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004564:	8afb      	ldrh	r3, [r7, #22]
 8004566:	3301      	adds	r3, #1
 8004568:	82fb      	strh	r3, [r7, #22]
 800456a:	8afa      	ldrh	r2, [r7, #22]
 800456c:	893b      	ldrh	r3, [r7, #8]
 800456e:	429a      	cmp	r2, r3
 8004570:	d3f1      	bcc.n	8004556 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004572:	f7ff fe6f 	bl	8004254 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f000 faf4 	bl	8004b64 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d002      	beq.n	800458a <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	77fb      	strb	r3, [r7, #31]
 8004588:	e001      	b.n	800458e <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800458a:	2300      	movs	r3, #0
 800458c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2201      	movs	r2, #1
 8004592:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	715a      	strb	r2, [r3, #5]

    return status;
 800459a:	7ffb      	ldrb	r3, [r7, #31]
 800459c:	e000      	b.n	80045a0 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800459e:	2302      	movs	r3, #2
  }
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3720      	adds	r7, #32
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	607a      	str	r2, [r7, #4]
 80045b2:	461a      	mov	r2, r3
 80045b4:	460b      	mov	r3, r1
 80045b6:	72fb      	strb	r3, [r7, #11]
 80045b8:	4613      	mov	r3, r2
 80045ba:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	799b      	ldrb	r3, [r3, #6]
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d14a      	bne.n	800465c <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	795b      	ldrb	r3, [r3, #5]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d101      	bne.n	80045d2 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 80045ce:	2302      	movs	r3, #2
 80045d0:	e045      	b.n	800465e <HAL_SUBGHZ_ExecSetCmd+0xb6>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2201      	movs	r2, #1
 80045d6:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f000 fa9f 	bl	8004b1c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80045de:	7afb      	ldrb	r3, [r7, #11]
 80045e0:	2b84      	cmp	r3, #132	@ 0x84
 80045e2:	d002      	beq.n	80045ea <HAL_SUBGHZ_ExecSetCmd+0x42>
 80045e4:	7afb      	ldrb	r3, [r7, #11]
 80045e6:	2b94      	cmp	r3, #148	@ 0x94
 80045e8:	d103      	bne.n	80045f2 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2201      	movs	r2, #1
 80045ee:	711a      	strb	r2, [r3, #4]
 80045f0:	e002      	b.n	80045f8 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80045f8:	f7ff fe3c 	bl	8004274 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80045fc:	7afb      	ldrb	r3, [r7, #11]
 80045fe:	4619      	mov	r1, r3
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f000 f9dd 	bl	80049c0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004606:	2300      	movs	r3, #0
 8004608:	82bb      	strh	r3, [r7, #20]
 800460a:	e00a      	b.n	8004622 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800460c:	8abb      	ldrh	r3, [r7, #20]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	4413      	add	r3, r2
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	4619      	mov	r1, r3
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f000 f9d2 	bl	80049c0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800461c:	8abb      	ldrh	r3, [r7, #20]
 800461e:	3301      	adds	r3, #1
 8004620:	82bb      	strh	r3, [r7, #20]
 8004622:	8aba      	ldrh	r2, [r7, #20]
 8004624:	893b      	ldrh	r3, [r7, #8]
 8004626:	429a      	cmp	r2, r3
 8004628:	d3f0      	bcc.n	800460c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800462a:	f7ff fe13 	bl	8004254 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800462e:	7afb      	ldrb	r3, [r7, #11]
 8004630:	2b84      	cmp	r3, #132	@ 0x84
 8004632:	d002      	beq.n	800463a <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f000 fa95 	bl	8004b64 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	75fb      	strb	r3, [r7, #23]
 8004646:	e001      	b.n	800464c <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8004648:	2300      	movs	r3, #0
 800464a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2201      	movs	r2, #1
 8004650:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	715a      	strb	r2, [r3, #5]

    return status;
 8004658:	7dfb      	ldrb	r3, [r7, #23]
 800465a:	e000      	b.n	800465e <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800465c:	2302      	movs	r3, #2
  }
}
 800465e:	4618      	mov	r0, r3
 8004660:	3718      	adds	r7, #24
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b088      	sub	sp, #32
 800466a:	af00      	add	r7, sp, #0
 800466c:	60f8      	str	r0, [r7, #12]
 800466e:	607a      	str	r2, [r7, #4]
 8004670:	461a      	mov	r2, r3
 8004672:	460b      	mov	r3, r1
 8004674:	72fb      	strb	r3, [r7, #11]
 8004676:	4613      	mov	r3, r2
 8004678:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	799b      	ldrb	r3, [r3, #6]
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b01      	cmp	r3, #1
 8004686:	d13d      	bne.n	8004704 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	795b      	ldrb	r3, [r3, #5]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d101      	bne.n	8004694 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8004690:	2302      	movs	r3, #2
 8004692:	e038      	b.n	8004706 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2201      	movs	r2, #1
 8004698:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 fa3e 	bl	8004b1c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80046a0:	f7ff fde8 	bl	8004274 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80046a4:	7afb      	ldrb	r3, [r7, #11]
 80046a6:	4619      	mov	r1, r3
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f000 f989 	bl	80049c0 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80046ae:	2100      	movs	r1, #0
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 f985 	bl	80049c0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80046b6:	2300      	movs	r3, #0
 80046b8:	82fb      	strh	r3, [r7, #22]
 80046ba:	e009      	b.n	80046d0 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80046bc:	69b9      	ldr	r1, [r7, #24]
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f000 f9d4 	bl	8004a6c <SUBGHZSPI_Receive>
      pData++;
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	3301      	adds	r3, #1
 80046c8:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80046ca:	8afb      	ldrh	r3, [r7, #22]
 80046cc:	3301      	adds	r3, #1
 80046ce:	82fb      	strh	r3, [r7, #22]
 80046d0:	8afa      	ldrh	r2, [r7, #22]
 80046d2:	893b      	ldrh	r3, [r7, #8]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d3f1      	bcc.n	80046bc <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80046d8:	f7ff fdbc 	bl	8004254 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 fa41 	bl	8004b64 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d002      	beq.n	80046f0 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	77fb      	strb	r3, [r7, #31]
 80046ee:	e001      	b.n	80046f4 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 80046f0:	2300      	movs	r3, #0
 80046f2:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2201      	movs	r2, #1
 80046f8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	715a      	strb	r2, [r3, #5]

    return status;
 8004700:	7ffb      	ldrb	r3, [r7, #31]
 8004702:	e000      	b.n	8004706 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004704:	2302      	movs	r3, #2
  }
}
 8004706:	4618      	mov	r0, r3
 8004708:	3720      	adds	r7, #32
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b086      	sub	sp, #24
 8004712:	af00      	add	r7, sp, #0
 8004714:	60f8      	str	r0, [r7, #12]
 8004716:	607a      	str	r2, [r7, #4]
 8004718:	461a      	mov	r2, r3
 800471a:	460b      	mov	r3, r1
 800471c:	72fb      	strb	r3, [r7, #11]
 800471e:	4613      	mov	r3, r2
 8004720:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	799b      	ldrb	r3, [r3, #6]
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b01      	cmp	r3, #1
 800472a:	d13e      	bne.n	80047aa <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	795b      	ldrb	r3, [r3, #5]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d101      	bne.n	8004738 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8004734:	2302      	movs	r3, #2
 8004736:	e039      	b.n	80047ac <HAL_SUBGHZ_WriteBuffer+0x9e>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2201      	movs	r2, #1
 800473c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800473e:	68f8      	ldr	r0, [r7, #12]
 8004740:	f000 f9ec 	bl	8004b1c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004744:	f7ff fd96 	bl	8004274 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8004748:	210e      	movs	r1, #14
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f000 f938 	bl	80049c0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004750:	7afb      	ldrb	r3, [r7, #11]
 8004752:	4619      	mov	r1, r3
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 f933 	bl	80049c0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800475a:	2300      	movs	r3, #0
 800475c:	82bb      	strh	r3, [r7, #20]
 800475e:	e00a      	b.n	8004776 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004760:	8abb      	ldrh	r3, [r7, #20]
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	4413      	add	r3, r2
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	4619      	mov	r1, r3
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f000 f928 	bl	80049c0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004770:	8abb      	ldrh	r3, [r7, #20]
 8004772:	3301      	adds	r3, #1
 8004774:	82bb      	strh	r3, [r7, #20]
 8004776:	8aba      	ldrh	r2, [r7, #20]
 8004778:	893b      	ldrh	r3, [r7, #8]
 800477a:	429a      	cmp	r2, r3
 800477c:	d3f0      	bcc.n	8004760 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800477e:	f7ff fd69 	bl	8004254 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f000 f9ee 	bl	8004b64 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d002      	beq.n	8004796 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	75fb      	strb	r3, [r7, #23]
 8004794:	e001      	b.n	800479a <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8004796:	2300      	movs	r3, #0
 8004798:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2201      	movs	r2, #1
 800479e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	715a      	strb	r2, [r3, #5]

    return status;
 80047a6:	7dfb      	ldrb	r3, [r7, #23]
 80047a8:	e000      	b.n	80047ac <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80047aa:	2302      	movs	r3, #2
  }
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b088      	sub	sp, #32
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	607a      	str	r2, [r7, #4]
 80047be:	461a      	mov	r2, r3
 80047c0:	460b      	mov	r3, r1
 80047c2:	72fb      	strb	r3, [r7, #11]
 80047c4:	4613      	mov	r3, r2
 80047c6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	799b      	ldrb	r3, [r3, #6]
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d141      	bne.n	800485a <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	795b      	ldrb	r3, [r3, #5]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d101      	bne.n	80047e2 <HAL_SUBGHZ_ReadBuffer+0x2e>
 80047de:	2302      	movs	r3, #2
 80047e0:	e03c      	b.n	800485c <HAL_SUBGHZ_ReadBuffer+0xa8>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2201      	movs	r2, #1
 80047e6:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f000 f997 	bl	8004b1c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80047ee:	f7ff fd41 	bl	8004274 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 80047f2:	211e      	movs	r1, #30
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f000 f8e3 	bl	80049c0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80047fa:	7afb      	ldrb	r3, [r7, #11]
 80047fc:	4619      	mov	r1, r3
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 f8de 	bl	80049c0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004804:	2100      	movs	r1, #0
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f000 f8da 	bl	80049c0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800480c:	2300      	movs	r3, #0
 800480e:	82fb      	strh	r3, [r7, #22]
 8004810:	e009      	b.n	8004826 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004812:	69b9      	ldr	r1, [r7, #24]
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f000 f929 	bl	8004a6c <SUBGHZSPI_Receive>
      pData++;
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	3301      	adds	r3, #1
 800481e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004820:	8afb      	ldrh	r3, [r7, #22]
 8004822:	3301      	adds	r3, #1
 8004824:	82fb      	strh	r3, [r7, #22]
 8004826:	8afa      	ldrh	r2, [r7, #22]
 8004828:	893b      	ldrh	r3, [r7, #8]
 800482a:	429a      	cmp	r2, r3
 800482c:	d3f1      	bcc.n	8004812 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800482e:	f7ff fd11 	bl	8004254 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f000 f996 	bl	8004b64 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d002      	beq.n	8004846 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	77fb      	strb	r3, [r7, #31]
 8004844:	e001      	b.n	800484a <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8004846:	2300      	movs	r3, #0
 8004848:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2201      	movs	r2, #1
 800484e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	715a      	strb	r2, [r3, #5]

    return status;
 8004856:	7ffb      	ldrb	r3, [r7, #31]
 8004858:	e000      	b.n	800485c <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800485a:	2302      	movs	r3, #2
  }
}
 800485c:	4618      	mov	r0, r3
 800485e:	3720      	adds	r7, #32
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 800486c:	2300      	movs	r3, #0
 800486e:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8004870:	f107 020c 	add.w	r2, r7, #12
 8004874:	2302      	movs	r3, #2
 8004876:	2112      	movs	r1, #18
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f7ff fef4 	bl	8004666 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800487e:	7b3b      	ldrb	r3, [r7, #12]
 8004880:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8004882:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004886:	021b      	lsls	r3, r3, #8
 8004888:	b21a      	sxth	r2, r3
 800488a:	7b7b      	ldrb	r3, [r7, #13]
 800488c:	b21b      	sxth	r3, r3
 800488e:	4313      	orrs	r3, r2
 8004890:	b21b      	sxth	r3, r3
 8004892:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8004894:	f107 020c 	add.w	r2, r7, #12
 8004898:	2302      	movs	r3, #2
 800489a:	2102      	movs	r1, #2
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f7ff fe83 	bl	80045a8 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80048a2:	89fb      	ldrh	r3, [r7, #14]
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d002      	beq.n	80048b2 <HAL_SUBGHZ_IRQHandler+0x4e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f7fd fca9 	bl	8002204 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 80048b2:	89fb      	ldrh	r3, [r7, #14]
 80048b4:	085b      	lsrs	r3, r3, #1
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d008      	beq.n	80048d0 <HAL_SUBGHZ_IRQHandler+0x6c>
      (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) == RESET))
 80048be:	89fb      	ldrh	r3, [r7, #14]
 80048c0:	099b      	lsrs	r3, r3, #6
 80048c2:	f003 0301 	and.w	r3, r3, #1
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d102      	bne.n	80048d0 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7fd fca8 	bl	8002220 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 80048d0:	89fb      	ldrh	r3, [r7, #14]
 80048d2:	089b      	lsrs	r3, r3, #2
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d002      	beq.n	80048e2 <HAL_SUBGHZ_IRQHandler+0x7e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f7fd fcf7 	bl	80022d0 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 80048e2:	89fb      	ldrh	r3, [r7, #14]
 80048e4:	08db      	lsrs	r3, r3, #3
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d002      	beq.n	80048f4 <HAL_SUBGHZ_IRQHandler+0x90>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f7fd fcfc 	bl	80022ec <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 80048f4:	89fb      	ldrh	r3, [r7, #14]
 80048f6:	091b      	lsrs	r3, r3, #4
 80048f8:	f003 0301 	and.w	r3, r3, #1
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d002      	beq.n	8004906 <HAL_SUBGHZ_IRQHandler+0xa2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f7fd fd01 	bl	8002308 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8004906:	89fb      	ldrh	r3, [r7, #14]
 8004908:	095b      	lsrs	r3, r3, #5
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b00      	cmp	r3, #0
 8004910:	d002      	beq.n	8004918 <HAL_SUBGHZ_IRQHandler+0xb4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f7fd fcce 	bl	80022b4 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8004918:	89fb      	ldrh	r3, [r7, #14]
 800491a:	099b      	lsrs	r3, r3, #6
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	2b00      	cmp	r3, #0
 8004922:	d002      	beq.n	800492a <HAL_SUBGHZ_IRQHandler+0xc6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f7fd fc89 	bl	800223c <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800492a:	89fb      	ldrh	r3, [r7, #14]
 800492c:	09db      	lsrs	r3, r3, #7
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00e      	beq.n	8004954 <HAL_SUBGHZ_IRQHandler+0xf0>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8004936:	89fb      	ldrh	r3, [r7, #14]
 8004938:	0a1b      	lsrs	r3, r3, #8
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b00      	cmp	r3, #0
 8004940:	d004      	beq.n	800494c <HAL_SUBGHZ_IRQHandler+0xe8>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8004942:	2101      	movs	r1, #1
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f7fd fc87 	bl	8002258 <HAL_SUBGHZ_CADStatusCallback>
 800494a:	e003      	b.n	8004954 <HAL_SUBGHZ_IRQHandler+0xf0>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800494c:	2100      	movs	r1, #0
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7fd fc82 	bl	8002258 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8004954:	89fb      	ldrh	r3, [r7, #14]
 8004956:	0a5b      	lsrs	r3, r3, #9
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	2b00      	cmp	r3, #0
 800495e:	d002      	beq.n	8004966 <HAL_SUBGHZ_IRQHandler+0x102>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f7fd fc97 	bl	8002294 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8004966:	89fb      	ldrh	r3, [r7, #14]
 8004968:	0b9b      	lsrs	r3, r3, #14
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b00      	cmp	r3, #0
 8004970:	d002      	beq.n	8004978 <HAL_SUBGHZ_IRQHandler+0x114>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7fd fcd6 	bl	8002324 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8004978:	bf00      	nop
 800497a:	3710      	adds	r7, #16
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004988:	4b0c      	ldr	r3, [pc, #48]	@ (80049bc <SUBGHZSPI_Init+0x3c>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a0b      	ldr	r2, [pc, #44]	@ (80049bc <SUBGHZSPI_Init+0x3c>)
 800498e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004992:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8004994:	4a09      	ldr	r2, [pc, #36]	@ (80049bc <SUBGHZSPI_Init+0x3c>)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 800499c:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800499e:	4b07      	ldr	r3, [pc, #28]	@ (80049bc <SUBGHZSPI_Init+0x3c>)
 80049a0:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 80049a4:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80049a6:	4b05      	ldr	r3, [pc, #20]	@ (80049bc <SUBGHZSPI_Init+0x3c>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a04      	ldr	r2, [pc, #16]	@ (80049bc <SUBGHZSPI_Init+0x3c>)
 80049ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049b0:	6013      	str	r3, [r2, #0]
}
 80049b2:	bf00      	nop
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bc80      	pop	{r7}
 80049ba:	4770      	bx	lr
 80049bc:	58010000 	.word	0x58010000

080049c0 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b087      	sub	sp, #28
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	460b      	mov	r3, r1
 80049ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80049cc:	2300      	movs	r3, #0
 80049ce:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80049d0:	4b23      	ldr	r3, [pc, #140]	@ (8004a60 <SUBGHZSPI_Transmit+0xa0>)
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	4613      	mov	r3, r2
 80049d6:	00db      	lsls	r3, r3, #3
 80049d8:	1a9b      	subs	r3, r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	0cdb      	lsrs	r3, r3, #19
 80049de:	2264      	movs	r2, #100	@ 0x64
 80049e0:	fb02 f303 	mul.w	r3, r2, r3
 80049e4:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d105      	bne.n	80049f8 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	609a      	str	r2, [r3, #8]
      break;
 80049f6:	e008      	b.n	8004a0a <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	3b01      	subs	r3, #1
 80049fc:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80049fe:	4b19      	ldr	r3, [pc, #100]	@ (8004a64 <SUBGHZSPI_Transmit+0xa4>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d1ed      	bne.n	80049e6 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004a0a:	4b17      	ldr	r3, [pc, #92]	@ (8004a68 <SUBGHZSPI_Transmit+0xa8>)
 8004a0c:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	78fa      	ldrb	r2, [r7, #3]
 8004a12:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004a14:	4b12      	ldr	r3, [pc, #72]	@ (8004a60 <SUBGHZSPI_Transmit+0xa0>)
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	1a9b      	subs	r3, r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	0cdb      	lsrs	r3, r3, #19
 8004a22:	2264      	movs	r2, #100	@ 0x64
 8004a24:	fb02 f303 	mul.w	r3, r2, r3
 8004a28:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d105      	bne.n	8004a3c <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	609a      	str	r2, [r3, #8]
      break;
 8004a3a:	e008      	b.n	8004a4e <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004a42:	4b08      	ldr	r3, [pc, #32]	@ (8004a64 <SUBGHZSPI_Transmit+0xa4>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d1ed      	bne.n	8004a2a <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8004a4e:	4b05      	ldr	r3, [pc, #20]	@ (8004a64 <SUBGHZSPI_Transmit+0xa4>)
 8004a50:	68db      	ldr	r3, [r3, #12]

  return status;
 8004a52:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	371c      	adds	r7, #28
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bc80      	pop	{r7}
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	2000001c 	.word	0x2000001c
 8004a64:	58010000 	.word	0x58010000
 8004a68:	5801000c 	.word	0x5801000c

08004a6c <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b087      	sub	sp, #28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a76:	2300      	movs	r3, #0
 8004a78:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004a7a:	4b25      	ldr	r3, [pc, #148]	@ (8004b10 <SUBGHZSPI_Receive+0xa4>)
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	4613      	mov	r3, r2
 8004a80:	00db      	lsls	r3, r3, #3
 8004a82:	1a9b      	subs	r3, r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	0cdb      	lsrs	r3, r3, #19
 8004a88:	2264      	movs	r2, #100	@ 0x64
 8004a8a:	fb02 f303 	mul.w	r3, r2, r3
 8004a8e:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d105      	bne.n	8004aa2 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	609a      	str	r2, [r3, #8]
      break;
 8004aa0:	e008      	b.n	8004ab4 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8004b14 <SUBGHZSPI_Receive+0xa8>)
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d1ed      	bne.n	8004a90 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004ab4:	4b18      	ldr	r3, [pc, #96]	@ (8004b18 <SUBGHZSPI_Receive+0xac>)
 8004ab6:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	22ff      	movs	r2, #255	@ 0xff
 8004abc:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004abe:	4b14      	ldr	r3, [pc, #80]	@ (8004b10 <SUBGHZSPI_Receive+0xa4>)
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	00db      	lsls	r3, r3, #3
 8004ac6:	1a9b      	subs	r3, r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	0cdb      	lsrs	r3, r3, #19
 8004acc:	2264      	movs	r2, #100	@ 0x64
 8004ace:	fb02 f303 	mul.w	r3, r2, r3
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d105      	bne.n	8004ae6 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	609a      	str	r2, [r3, #8]
      break;
 8004ae4:	e008      	b.n	8004af8 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004aec:	4b09      	ldr	r3, [pc, #36]	@ (8004b14 <SUBGHZSPI_Receive+0xa8>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d1ed      	bne.n	8004ad4 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8004af8:	4b06      	ldr	r3, [pc, #24]	@ (8004b14 <SUBGHZSPI_Receive+0xa8>)
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	b2da      	uxtb	r2, r3
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	701a      	strb	r2, [r3, #0]

  return status;
 8004b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	371c      	adds	r7, #28
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bc80      	pop	{r7}
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	2000001c 	.word	0x2000001c
 8004b14:	58010000 	.word	0x58010000
 8004b18:	5801000c 	.word	0x5801000c

08004b1c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	791b      	ldrb	r3, [r3, #4]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d111      	bne.n	8004b50 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8004b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8004b60 <SUBGHZ_CheckDeviceReady+0x44>)
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	4613      	mov	r3, r2
 8004b32:	005b      	lsls	r3, r3, #1
 8004b34:	4413      	add	r3, r2
 8004b36:	00db      	lsls	r3, r3, #3
 8004b38:	0c1b      	lsrs	r3, r3, #16
 8004b3a:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004b3c:	f7ff fb9a 	bl	8004274 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	3b01      	subs	r3, #1
 8004b44:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1f9      	bne.n	8004b40 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004b4c:	f7ff fb82 	bl	8004254 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 f807 	bl	8004b64 <SUBGHZ_WaitOnBusy>
 8004b56:	4603      	mov	r3, r0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	2000001c 	.word	0x2000001c

08004b64 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8004b70:	4b12      	ldr	r3, [pc, #72]	@ (8004bbc <SUBGHZ_WaitOnBusy+0x58>)
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	4613      	mov	r3, r2
 8004b76:	005b      	lsls	r3, r3, #1
 8004b78:	4413      	add	r3, r2
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	0d1b      	lsrs	r3, r3, #20
 8004b7e:	2264      	movs	r2, #100	@ 0x64
 8004b80:	fb02 f303 	mul.w	r3, r2, r3
 8004b84:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8004b86:	f7ff fba3 	bl	80042d0 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8004b8a:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d105      	bne.n	8004b9e <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2202      	movs	r2, #2
 8004b9a:	609a      	str	r2, [r3, #8]
      break;
 8004b9c:	e009      	b.n	8004bb2 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8004ba4:	f7ff fb82 	bl	80042ac <LL_PWR_IsActiveFlag_RFBUSYS>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	4013      	ands	r3, r2
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d0e9      	beq.n	8004b86 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8004bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3718      	adds	r7, #24
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	2000001c 	.word	0x2000001c

08004bc0 <LL_RCC_GetUSARTClockSource>:
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004bc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bcc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	401a      	ands	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	041b      	lsls	r3, r3, #16
 8004bd8:	4313      	orrs	r3, r2
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bc80      	pop	{r7}
 8004be2:	4770      	bx	lr

08004be4 <LL_RCC_GetLPUARTClockSource>:
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004bec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bf0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4013      	ands	r3, r2
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bc80      	pop	{r7}
 8004c00:	4770      	bx	lr

08004c02 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b082      	sub	sp, #8
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d101      	bne.n	8004c14 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e042      	b.n	8004c9a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d106      	bne.n	8004c2c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f7fc f9ec 	bl	8001004 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2224      	movs	r2, #36	@ 0x24
 8004c30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 0201 	bic.w	r2, r2, #1
 8004c42:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d002      	beq.n	8004c52 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 feb1 	bl	80059b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 fc3a 	bl	80054cc <UART_SetConfig>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d101      	bne.n	8004c62 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e01b      	b.n	8004c9a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c70:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	689a      	ldr	r2, [r3, #8]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c80:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f042 0201 	orr.w	r2, r2, #1
 8004c90:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 ff2f 	bl	8005af6 <UART_CheckIdleState>
 8004c98:	4603      	mov	r3, r0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b08a      	sub	sp, #40	@ 0x28
 8004ca6:	af02      	add	r7, sp, #8
 8004ca8:	60f8      	str	r0, [r7, #12]
 8004caa:	60b9      	str	r1, [r7, #8]
 8004cac:	603b      	str	r3, [r7, #0]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cb8:	2b20      	cmp	r3, #32
 8004cba:	d173      	bne.n	8004da4 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d002      	beq.n	8004cc8 <HAL_UART_Transmit+0x26>
 8004cc2:	88fb      	ldrh	r3, [r7, #6]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d101      	bne.n	8004ccc <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e06c      	b.n	8004da6 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2221      	movs	r2, #33	@ 0x21
 8004cd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cdc:	f7fd fbc0 	bl	8002460 <HAL_GetTick>
 8004ce0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	88fa      	ldrh	r2, [r7, #6]
 8004ce6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	88fa      	ldrh	r2, [r7, #6]
 8004cee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cfa:	d108      	bne.n	8004d0e <HAL_UART_Transmit+0x6c>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d104      	bne.n	8004d0e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004d04:	2300      	movs	r3, #0
 8004d06:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	61bb      	str	r3, [r7, #24]
 8004d0c:	e003      	b.n	8004d16 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d12:	2300      	movs	r3, #0
 8004d14:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d16:	e02c      	b.n	8004d72 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	9300      	str	r3, [sp, #0]
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	2180      	movs	r1, #128	@ 0x80
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f000 ff35 	bl	8005b92 <UART_WaitOnFlagUntilTimeout>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e039      	b.n	8004da6 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10b      	bne.n	8004d50 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	881b      	ldrh	r3, [r3, #0]
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d46:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	3302      	adds	r3, #2
 8004d4c:	61bb      	str	r3, [r7, #24]
 8004d4e:	e007      	b.n	8004d60 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	781a      	ldrb	r2, [r3, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1cc      	bne.n	8004d18 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	2200      	movs	r2, #0
 8004d86:	2140      	movs	r1, #64	@ 0x40
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f000 ff02 	bl	8005b92 <UART_WaitOnFlagUntilTimeout>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d001      	beq.n	8004d98 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e006      	b.n	8004da6 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004da0:	2300      	movs	r3, #0
 8004da2:	e000      	b.n	8004da6 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8004da4:	2302      	movs	r3, #2
  }
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3720      	adds	r7, #32
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
	...

08004db0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b08a      	sub	sp, #40	@ 0x28
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004dc4:	2b20      	cmp	r3, #32
 8004dc6:	d137      	bne.n	8004e38 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d002      	beq.n	8004dd4 <HAL_UART_Receive_IT+0x24>
 8004dce:	88fb      	ldrh	r3, [r7, #6]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e030      	b.n	8004e3a <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a18      	ldr	r2, [pc, #96]	@ (8004e44 <HAL_UART_Receive_IT+0x94>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d01f      	beq.n	8004e28 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d018      	beq.n	8004e28 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	e853 3f00 	ldrex	r3, [r3]
 8004e02:	613b      	str	r3, [r7, #16]
   return(result);
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	461a      	mov	r2, r3
 8004e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e14:	623b      	str	r3, [r7, #32]
 8004e16:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e18:	69f9      	ldr	r1, [r7, #28]
 8004e1a:	6a3a      	ldr	r2, [r7, #32]
 8004e1c:	e841 2300 	strex	r3, r2, [r1]
 8004e20:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1e6      	bne.n	8004df6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004e28:	88fb      	ldrh	r3, [r7, #6]
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	68b9      	ldr	r1, [r7, #8]
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f000 ff7e 	bl	8005d30 <UART_Start_Receive_IT>
 8004e34:	4603      	mov	r3, r0
 8004e36:	e000      	b.n	8004e3a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004e38:	2302      	movs	r3, #2
  }
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3728      	adds	r7, #40	@ 0x28
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	40008000 	.word	0x40008000

08004e48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b0ba      	sub	sp, #232	@ 0xe8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	69db      	ldr	r3, [r3, #28]
 8004e56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004e6e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004e72:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004e76:	4013      	ands	r3, r2
 8004e78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004e7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d11b      	bne.n	8004ebc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e88:	f003 0320 	and.w	r3, r3, #32
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d015      	beq.n	8004ebc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e94:	f003 0320 	and.w	r3, r3, #32
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d105      	bne.n	8004ea8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004e9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ea0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d009      	beq.n	8004ebc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f000 82e3 	beq.w	8005478 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	4798      	blx	r3
      }
      return;
 8004eba:	e2dd      	b.n	8005478 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004ebc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f000 8123 	beq.w	800510c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004ec6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004eca:	4b8d      	ldr	r3, [pc, #564]	@ (8005100 <HAL_UART_IRQHandler+0x2b8>)
 8004ecc:	4013      	ands	r3, r2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d106      	bne.n	8004ee0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004ed2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004ed6:	4b8b      	ldr	r3, [pc, #556]	@ (8005104 <HAL_UART_IRQHandler+0x2bc>)
 8004ed8:	4013      	ands	r3, r2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	f000 8116 	beq.w	800510c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d011      	beq.n	8004f10 <HAL_UART_IRQHandler+0xc8>
 8004eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ef0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00b      	beq.n	8004f10 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2201      	movs	r2, #1
 8004efe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f06:	f043 0201 	orr.w	r2, r3, #1
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f14:	f003 0302 	and.w	r3, r3, #2
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d011      	beq.n	8004f40 <HAL_UART_IRQHandler+0xf8>
 8004f1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f20:	f003 0301 	and.w	r3, r3, #1
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00b      	beq.n	8004f40 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f36:	f043 0204 	orr.w	r2, r3, #4
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f44:	f003 0304 	and.w	r3, r3, #4
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d011      	beq.n	8004f70 <HAL_UART_IRQHandler+0x128>
 8004f4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00b      	beq.n	8004f70 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2204      	movs	r2, #4
 8004f5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f66:	f043 0202 	orr.w	r2, r3, #2
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004f70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f74:	f003 0308 	and.w	r3, r3, #8
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d017      	beq.n	8004fac <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f80:	f003 0320 	and.w	r3, r3, #32
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d105      	bne.n	8004f94 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004f88:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004f8c:	4b5c      	ldr	r3, [pc, #368]	@ (8005100 <HAL_UART_IRQHandler+0x2b8>)
 8004f8e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00b      	beq.n	8004fac <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2208      	movs	r2, #8
 8004f9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fa2:	f043 0208 	orr.w	r2, r3, #8
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d012      	beq.n	8004fde <HAL_UART_IRQHandler+0x196>
 8004fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fbc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00c      	beq.n	8004fde <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004fcc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fd4:	f043 0220 	orr.w	r2, r3, #32
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 8249 	beq.w	800547c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fee:	f003 0320 	and.w	r3, r3, #32
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d013      	beq.n	800501e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004ff6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ffa:	f003 0320 	and.w	r3, r3, #32
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d105      	bne.n	800500e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005002:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005006:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d007      	beq.n	800501e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005012:	2b00      	cmp	r3, #0
 8005014:	d003      	beq.n	800501e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005024:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005032:	2b40      	cmp	r3, #64	@ 0x40
 8005034:	d005      	beq.n	8005042 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005036:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800503a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800503e:	2b00      	cmp	r3, #0
 8005040:	d054      	beq.n	80050ec <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 ff94 	bl	8005f70 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005052:	2b40      	cmp	r3, #64	@ 0x40
 8005054:	d146      	bne.n	80050e4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	3308      	adds	r3, #8
 800505c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005060:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005064:	e853 3f00 	ldrex	r3, [r3]
 8005068:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800506c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005070:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005074:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	3308      	adds	r3, #8
 800507e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005082:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005086:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800508e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005092:	e841 2300 	strex	r3, r2, [r1]
 8005096:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800509a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1d9      	bne.n	8005056 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d017      	beq.n	80050dc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050b2:	4a15      	ldr	r2, [pc, #84]	@ (8005108 <HAL_UART_IRQHandler+0x2c0>)
 80050b4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050bc:	4618      	mov	r0, r3
 80050be:	f7fd fb98 	bl	80027f2 <HAL_DMA_Abort_IT>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d019      	beq.n	80050fc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80050d6:	4610      	mov	r0, r2
 80050d8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050da:	e00f      	b.n	80050fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 f9e0 	bl	80054a2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e2:	e00b      	b.n	80050fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 f9dc 	bl	80054a2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050ea:	e007      	b.n	80050fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 f9d8 	bl	80054a2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80050fa:	e1bf      	b.n	800547c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050fc:	bf00      	nop
    return;
 80050fe:	e1bd      	b.n	800547c <HAL_UART_IRQHandler+0x634>
 8005100:	10000001 	.word	0x10000001
 8005104:	04000120 	.word	0x04000120
 8005108:	0800603b 	.word	0x0800603b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005110:	2b01      	cmp	r3, #1
 8005112:	f040 8153 	bne.w	80053bc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800511a:	f003 0310 	and.w	r3, r3, #16
 800511e:	2b00      	cmp	r3, #0
 8005120:	f000 814c 	beq.w	80053bc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005128:	f003 0310 	and.w	r3, r3, #16
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 8145 	beq.w	80053bc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2210      	movs	r2, #16
 8005138:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005144:	2b40      	cmp	r3, #64	@ 0x40
 8005146:	f040 80bb 	bne.w	80052c0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005158:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800515c:	2b00      	cmp	r3, #0
 800515e:	f000 818f 	beq.w	8005480 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005168:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800516c:	429a      	cmp	r2, r3
 800516e:	f080 8187 	bcs.w	8005480 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005178:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0320 	and.w	r3, r3, #32
 800518a:	2b00      	cmp	r3, #0
 800518c:	f040 8087 	bne.w	800529e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005198:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800519c:	e853 3f00 	ldrex	r3, [r3]
 80051a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80051a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80051a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	461a      	mov	r2, r3
 80051b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80051ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80051be:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80051c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80051ca:	e841 2300 	strex	r3, r2, [r1]
 80051ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80051d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1da      	bne.n	8005190 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	3308      	adds	r3, #8
 80051e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051e4:	e853 3f00 	ldrex	r3, [r3]
 80051e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80051ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80051ec:	f023 0301 	bic.w	r3, r3, #1
 80051f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	3308      	adds	r3, #8
 80051fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80051fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005202:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005204:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005206:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800520a:	e841 2300 	strex	r3, r2, [r1]
 800520e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005210:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1e1      	bne.n	80051da <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	3308      	adds	r3, #8
 800521c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005220:	e853 3f00 	ldrex	r3, [r3]
 8005224:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005226:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005228:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800522c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	3308      	adds	r3, #8
 8005236:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800523a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800523c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005240:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005242:	e841 2300 	strex	r3, r2, [r1]
 8005246:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005248:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1e3      	bne.n	8005216 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2220      	movs	r2, #32
 8005252:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005262:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005264:	e853 3f00 	ldrex	r3, [r3]
 8005268:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800526a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800526c:	f023 0310 	bic.w	r3, r3, #16
 8005270:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	461a      	mov	r2, r3
 800527a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800527e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005280:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005282:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005284:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005286:	e841 2300 	strex	r3, r2, [r1]
 800528a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800528c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1e4      	bne.n	800525c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005298:	4618      	mov	r0, r3
 800529a:	f7fd fa4c 	bl	8002736 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2202      	movs	r2, #2
 80052a2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	4619      	mov	r1, r3
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 f8fb 	bl	80054b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80052be:	e0df      	b.n	8005480 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80052da:	b29b      	uxth	r3, r3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f000 80d1 	beq.w	8005484 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80052e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	f000 80cc 	beq.w	8005484 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052f4:	e853 3f00 	ldrex	r3, [r3]
 80052f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80052fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005300:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	461a      	mov	r2, r3
 800530a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800530e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005310:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005312:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005314:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005316:	e841 2300 	strex	r3, r2, [r1]
 800531a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800531c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1e4      	bne.n	80052ec <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	3308      	adds	r3, #8
 8005328:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532c:	e853 3f00 	ldrex	r3, [r3]
 8005330:	623b      	str	r3, [r7, #32]
   return(result);
 8005332:	6a3b      	ldr	r3, [r7, #32]
 8005334:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005338:	f023 0301 	bic.w	r3, r3, #1
 800533c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	3308      	adds	r3, #8
 8005346:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800534a:	633a      	str	r2, [r7, #48]	@ 0x30
 800534c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005350:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005352:	e841 2300 	strex	r3, r2, [r1]
 8005356:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1e1      	bne.n	8005322 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2220      	movs	r2, #32
 8005362:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	e853 3f00 	ldrex	r3, [r3]
 800537e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f023 0310 	bic.w	r3, r3, #16
 8005386:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	461a      	mov	r2, r3
 8005390:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005394:	61fb      	str	r3, [r7, #28]
 8005396:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005398:	69b9      	ldr	r1, [r7, #24]
 800539a:	69fa      	ldr	r2, [r7, #28]
 800539c:	e841 2300 	strex	r3, r2, [r1]
 80053a0:	617b      	str	r3, [r7, #20]
   return(result);
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1e4      	bne.n	8005372 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2202      	movs	r2, #2
 80053ac:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80053ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80053b2:	4619      	mov	r1, r3
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 f87d 	bl	80054b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80053ba:	e063      	b.n	8005484 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80053bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00e      	beq.n	80053e6 <HAL_UART_IRQHandler+0x59e>
 80053c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d008      	beq.n	80053e6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80053dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f001 fb88 	bl	8006af4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80053e4:	e051      	b.n	800548a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80053e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d014      	beq.n	800541c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80053f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d105      	bne.n	800540a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80053fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005402:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d008      	beq.n	800541c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800540e:	2b00      	cmp	r3, #0
 8005410:	d03a      	beq.n	8005488 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	4798      	blx	r3
    }
    return;
 800541a:	e035      	b.n	8005488 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800541c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005424:	2b00      	cmp	r3, #0
 8005426:	d009      	beq.n	800543c <HAL_UART_IRQHandler+0x5f4>
 8005428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800542c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005430:	2b00      	cmp	r3, #0
 8005432:	d003      	beq.n	800543c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 fe16 	bl	8006066 <UART_EndTransmit_IT>
    return;
 800543a:	e026      	b.n	800548a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800543c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005440:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d009      	beq.n	800545c <HAL_UART_IRQHandler+0x614>
 8005448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800544c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d003      	beq.n	800545c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f001 fb5f 	bl	8006b18 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800545a:	e016      	b.n	800548a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800545c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005460:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d010      	beq.n	800548a <HAL_UART_IRQHandler+0x642>
 8005468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800546c:	2b00      	cmp	r3, #0
 800546e:	da0c      	bge.n	800548a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f001 fb48 	bl	8006b06 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005476:	e008      	b.n	800548a <HAL_UART_IRQHandler+0x642>
      return;
 8005478:	bf00      	nop
 800547a:	e006      	b.n	800548a <HAL_UART_IRQHandler+0x642>
    return;
 800547c:	bf00      	nop
 800547e:	e004      	b.n	800548a <HAL_UART_IRQHandler+0x642>
      return;
 8005480:	bf00      	nop
 8005482:	e002      	b.n	800548a <HAL_UART_IRQHandler+0x642>
      return;
 8005484:	bf00      	nop
 8005486:	e000      	b.n	800548a <HAL_UART_IRQHandler+0x642>
    return;
 8005488:	bf00      	nop
  }
}
 800548a:	37e8      	adds	r7, #232	@ 0xe8
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	bc80      	pop	{r7}
 80054a0:	4770      	bx	lr

080054a2 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b083      	sub	sp, #12
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80054aa:	bf00      	nop
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bc80      	pop	{r7}
 80054b2:	4770      	bx	lr

080054b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	460b      	mov	r3, r1
 80054be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bc80      	pop	{r7}
 80054c8:	4770      	bx	lr
	...

080054cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054d0:	b08c      	sub	sp, #48	@ 0x30
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054d6:	2300      	movs	r3, #0
 80054d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	689a      	ldr	r2, [r3, #8]
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	431a      	orrs	r2, r3
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	431a      	orrs	r2, r3
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	69db      	ldr	r3, [r3, #28]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	4b94      	ldr	r3, [pc, #592]	@ (800574c <UART_SetConfig+0x280>)
 80054fc:	4013      	ands	r3, r2
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	6812      	ldr	r2, [r2, #0]
 8005502:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005504:	430b      	orrs	r3, r1
 8005506:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	68da      	ldr	r2, [r3, #12]
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	430a      	orrs	r2, r1
 800551c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a89      	ldr	r2, [pc, #548]	@ (8005750 <UART_SetConfig+0x284>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d004      	beq.n	8005538 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005534:	4313      	orrs	r3, r2
 8005536:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005542:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	6812      	ldr	r2, [r2, #0]
 800554a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800554c:	430b      	orrs	r3, r1
 800554e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005556:	f023 010f 	bic.w	r1, r3, #15
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	430a      	orrs	r2, r1
 8005564:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a7a      	ldr	r2, [pc, #488]	@ (8005754 <UART_SetConfig+0x288>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d127      	bne.n	80055c0 <UART_SetConfig+0xf4>
 8005570:	2003      	movs	r0, #3
 8005572:	f7ff fb25 	bl	8004bc0 <LL_RCC_GetUSARTClockSource>
 8005576:	4603      	mov	r3, r0
 8005578:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 800557c:	2b03      	cmp	r3, #3
 800557e:	d81b      	bhi.n	80055b8 <UART_SetConfig+0xec>
 8005580:	a201      	add	r2, pc, #4	@ (adr r2, 8005588 <UART_SetConfig+0xbc>)
 8005582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005586:	bf00      	nop
 8005588:	08005599 	.word	0x08005599
 800558c:	080055a9 	.word	0x080055a9
 8005590:	080055a1 	.word	0x080055a1
 8005594:	080055b1 	.word	0x080055b1
 8005598:	2301      	movs	r3, #1
 800559a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800559e:	e080      	b.n	80056a2 <UART_SetConfig+0x1d6>
 80055a0:	2302      	movs	r3, #2
 80055a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055a6:	e07c      	b.n	80056a2 <UART_SetConfig+0x1d6>
 80055a8:	2304      	movs	r3, #4
 80055aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055ae:	e078      	b.n	80056a2 <UART_SetConfig+0x1d6>
 80055b0:	2308      	movs	r3, #8
 80055b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055b6:	e074      	b.n	80056a2 <UART_SetConfig+0x1d6>
 80055b8:	2310      	movs	r3, #16
 80055ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055be:	e070      	b.n	80056a2 <UART_SetConfig+0x1d6>
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a64      	ldr	r2, [pc, #400]	@ (8005758 <UART_SetConfig+0x28c>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d138      	bne.n	800563c <UART_SetConfig+0x170>
 80055ca:	200c      	movs	r0, #12
 80055cc:	f7ff faf8 	bl	8004bc0 <LL_RCC_GetUSARTClockSource>
 80055d0:	4603      	mov	r3, r0
 80055d2:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 80055d6:	2b0c      	cmp	r3, #12
 80055d8:	d82c      	bhi.n	8005634 <UART_SetConfig+0x168>
 80055da:	a201      	add	r2, pc, #4	@ (adr r2, 80055e0 <UART_SetConfig+0x114>)
 80055dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e0:	08005615 	.word	0x08005615
 80055e4:	08005635 	.word	0x08005635
 80055e8:	08005635 	.word	0x08005635
 80055ec:	08005635 	.word	0x08005635
 80055f0:	08005625 	.word	0x08005625
 80055f4:	08005635 	.word	0x08005635
 80055f8:	08005635 	.word	0x08005635
 80055fc:	08005635 	.word	0x08005635
 8005600:	0800561d 	.word	0x0800561d
 8005604:	08005635 	.word	0x08005635
 8005608:	08005635 	.word	0x08005635
 800560c:	08005635 	.word	0x08005635
 8005610:	0800562d 	.word	0x0800562d
 8005614:	2300      	movs	r3, #0
 8005616:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800561a:	e042      	b.n	80056a2 <UART_SetConfig+0x1d6>
 800561c:	2302      	movs	r3, #2
 800561e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005622:	e03e      	b.n	80056a2 <UART_SetConfig+0x1d6>
 8005624:	2304      	movs	r3, #4
 8005626:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800562a:	e03a      	b.n	80056a2 <UART_SetConfig+0x1d6>
 800562c:	2308      	movs	r3, #8
 800562e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005632:	e036      	b.n	80056a2 <UART_SetConfig+0x1d6>
 8005634:	2310      	movs	r3, #16
 8005636:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800563a:	e032      	b.n	80056a2 <UART_SetConfig+0x1d6>
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a43      	ldr	r2, [pc, #268]	@ (8005750 <UART_SetConfig+0x284>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d12a      	bne.n	800569c <UART_SetConfig+0x1d0>
 8005646:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800564a:	f7ff facb 	bl	8004be4 <LL_RCC_GetLPUARTClockSource>
 800564e:	4603      	mov	r3, r0
 8005650:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005654:	d01a      	beq.n	800568c <UART_SetConfig+0x1c0>
 8005656:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800565a:	d81b      	bhi.n	8005694 <UART_SetConfig+0x1c8>
 800565c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005660:	d00c      	beq.n	800567c <UART_SetConfig+0x1b0>
 8005662:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005666:	d815      	bhi.n	8005694 <UART_SetConfig+0x1c8>
 8005668:	2b00      	cmp	r3, #0
 800566a:	d003      	beq.n	8005674 <UART_SetConfig+0x1a8>
 800566c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005670:	d008      	beq.n	8005684 <UART_SetConfig+0x1b8>
 8005672:	e00f      	b.n	8005694 <UART_SetConfig+0x1c8>
 8005674:	2300      	movs	r3, #0
 8005676:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800567a:	e012      	b.n	80056a2 <UART_SetConfig+0x1d6>
 800567c:	2302      	movs	r3, #2
 800567e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005682:	e00e      	b.n	80056a2 <UART_SetConfig+0x1d6>
 8005684:	2304      	movs	r3, #4
 8005686:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800568a:	e00a      	b.n	80056a2 <UART_SetConfig+0x1d6>
 800568c:	2308      	movs	r3, #8
 800568e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005692:	e006      	b.n	80056a2 <UART_SetConfig+0x1d6>
 8005694:	2310      	movs	r3, #16
 8005696:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800569a:	e002      	b.n	80056a2 <UART_SetConfig+0x1d6>
 800569c:	2310      	movs	r3, #16
 800569e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a2a      	ldr	r2, [pc, #168]	@ (8005750 <UART_SetConfig+0x284>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	f040 80a4 	bne.w	80057f6 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056ae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80056b2:	2b08      	cmp	r3, #8
 80056b4:	d823      	bhi.n	80056fe <UART_SetConfig+0x232>
 80056b6:	a201      	add	r2, pc, #4	@ (adr r2, 80056bc <UART_SetConfig+0x1f0>)
 80056b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056bc:	080056e1 	.word	0x080056e1
 80056c0:	080056ff 	.word	0x080056ff
 80056c4:	080056e9 	.word	0x080056e9
 80056c8:	080056ff 	.word	0x080056ff
 80056cc:	080056ef 	.word	0x080056ef
 80056d0:	080056ff 	.word	0x080056ff
 80056d4:	080056ff 	.word	0x080056ff
 80056d8:	080056ff 	.word	0x080056ff
 80056dc:	080056f7 	.word	0x080056f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056e0:	f7fe fac0 	bl	8003c64 <HAL_RCC_GetPCLK1Freq>
 80056e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80056e6:	e010      	b.n	800570a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056e8:	4b1c      	ldr	r3, [pc, #112]	@ (800575c <UART_SetConfig+0x290>)
 80056ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80056ec:	e00d      	b.n	800570a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056ee:	f7fe fa05 	bl	8003afc <HAL_RCC_GetSysClockFreq>
 80056f2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80056f4:	e009      	b.n	800570a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80056fc:	e005      	b.n	800570a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80056fe:	2300      	movs	r3, #0
 8005700:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005708:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800570a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570c:	2b00      	cmp	r3, #0
 800570e:	f000 8137 	beq.w	8005980 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005716:	4a12      	ldr	r2, [pc, #72]	@ (8005760 <UART_SetConfig+0x294>)
 8005718:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800571c:	461a      	mov	r2, r3
 800571e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005720:	fbb3 f3f2 	udiv	r3, r3, r2
 8005724:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	685a      	ldr	r2, [r3, #4]
 800572a:	4613      	mov	r3, r2
 800572c:	005b      	lsls	r3, r3, #1
 800572e:	4413      	add	r3, r2
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	429a      	cmp	r2, r3
 8005734:	d305      	bcc.n	8005742 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	429a      	cmp	r2, r3
 8005740:	d910      	bls.n	8005764 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005748:	e11a      	b.n	8005980 <UART_SetConfig+0x4b4>
 800574a:	bf00      	nop
 800574c:	cfff69f3 	.word	0xcfff69f3
 8005750:	40008000 	.word	0x40008000
 8005754:	40013800 	.word	0x40013800
 8005758:	40004400 	.word	0x40004400
 800575c:	00f42400 	.word	0x00f42400
 8005760:	080078bc 	.word	0x080078bc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005766:	2200      	movs	r2, #0
 8005768:	60bb      	str	r3, [r7, #8]
 800576a:	60fa      	str	r2, [r7, #12]
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005770:	4a8e      	ldr	r2, [pc, #568]	@ (80059ac <UART_SetConfig+0x4e0>)
 8005772:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005776:	b29b      	uxth	r3, r3
 8005778:	2200      	movs	r2, #0
 800577a:	603b      	str	r3, [r7, #0]
 800577c:	607a      	str	r2, [r7, #4]
 800577e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005782:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005786:	f7fa fd53 	bl	8000230 <__aeabi_uldivmod>
 800578a:	4602      	mov	r2, r0
 800578c:	460b      	mov	r3, r1
 800578e:	4610      	mov	r0, r2
 8005790:	4619      	mov	r1, r3
 8005792:	f04f 0200 	mov.w	r2, #0
 8005796:	f04f 0300 	mov.w	r3, #0
 800579a:	020b      	lsls	r3, r1, #8
 800579c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80057a0:	0202      	lsls	r2, r0, #8
 80057a2:	6979      	ldr	r1, [r7, #20]
 80057a4:	6849      	ldr	r1, [r1, #4]
 80057a6:	0849      	lsrs	r1, r1, #1
 80057a8:	2000      	movs	r0, #0
 80057aa:	460c      	mov	r4, r1
 80057ac:	4605      	mov	r5, r0
 80057ae:	eb12 0804 	adds.w	r8, r2, r4
 80057b2:	eb43 0905 	adc.w	r9, r3, r5
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	469a      	mov	sl, r3
 80057be:	4693      	mov	fp, r2
 80057c0:	4652      	mov	r2, sl
 80057c2:	465b      	mov	r3, fp
 80057c4:	4640      	mov	r0, r8
 80057c6:	4649      	mov	r1, r9
 80057c8:	f7fa fd32 	bl	8000230 <__aeabi_uldivmod>
 80057cc:	4602      	mov	r2, r0
 80057ce:	460b      	mov	r3, r1
 80057d0:	4613      	mov	r3, r2
 80057d2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057d4:	6a3b      	ldr	r3, [r7, #32]
 80057d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057da:	d308      	bcc.n	80057ee <UART_SetConfig+0x322>
 80057dc:	6a3b      	ldr	r3, [r7, #32]
 80057de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057e2:	d204      	bcs.n	80057ee <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	6a3a      	ldr	r2, [r7, #32]
 80057ea:	60da      	str	r2, [r3, #12]
 80057ec:	e0c8      	b.n	8005980 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80057f4:	e0c4      	b.n	8005980 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	69db      	ldr	r3, [r3, #28]
 80057fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057fe:	d167      	bne.n	80058d0 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8005800:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005804:	2b08      	cmp	r3, #8
 8005806:	d828      	bhi.n	800585a <UART_SetConfig+0x38e>
 8005808:	a201      	add	r2, pc, #4	@ (adr r2, 8005810 <UART_SetConfig+0x344>)
 800580a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800580e:	bf00      	nop
 8005810:	08005835 	.word	0x08005835
 8005814:	0800583d 	.word	0x0800583d
 8005818:	08005845 	.word	0x08005845
 800581c:	0800585b 	.word	0x0800585b
 8005820:	0800584b 	.word	0x0800584b
 8005824:	0800585b 	.word	0x0800585b
 8005828:	0800585b 	.word	0x0800585b
 800582c:	0800585b 	.word	0x0800585b
 8005830:	08005853 	.word	0x08005853
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005834:	f7fe fa16 	bl	8003c64 <HAL_RCC_GetPCLK1Freq>
 8005838:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800583a:	e014      	b.n	8005866 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800583c:	f7fe fa24 	bl	8003c88 <HAL_RCC_GetPCLK2Freq>
 8005840:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005842:	e010      	b.n	8005866 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005844:	4b5a      	ldr	r3, [pc, #360]	@ (80059b0 <UART_SetConfig+0x4e4>)
 8005846:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005848:	e00d      	b.n	8005866 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800584a:	f7fe f957 	bl	8003afc <HAL_RCC_GetSysClockFreq>
 800584e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005850:	e009      	b.n	8005866 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005852:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005856:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005858:	e005      	b.n	8005866 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800585a:	2300      	movs	r3, #0
 800585c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005864:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005868:	2b00      	cmp	r3, #0
 800586a:	f000 8089 	beq.w	8005980 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005872:	4a4e      	ldr	r2, [pc, #312]	@ (80059ac <UART_SetConfig+0x4e0>)
 8005874:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005878:	461a      	mov	r2, r3
 800587a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005880:	005a      	lsls	r2, r3, #1
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	085b      	lsrs	r3, r3, #1
 8005888:	441a      	add	r2, r3
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005892:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005894:	6a3b      	ldr	r3, [r7, #32]
 8005896:	2b0f      	cmp	r3, #15
 8005898:	d916      	bls.n	80058c8 <UART_SetConfig+0x3fc>
 800589a:	6a3b      	ldr	r3, [r7, #32]
 800589c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058a0:	d212      	bcs.n	80058c8 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058a2:	6a3b      	ldr	r3, [r7, #32]
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	f023 030f 	bic.w	r3, r3, #15
 80058aa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058ac:	6a3b      	ldr	r3, [r7, #32]
 80058ae:	085b      	lsrs	r3, r3, #1
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	f003 0307 	and.w	r3, r3, #7
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	8bfb      	ldrh	r3, [r7, #30]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	8bfa      	ldrh	r2, [r7, #30]
 80058c4:	60da      	str	r2, [r3, #12]
 80058c6:	e05b      	b.n	8005980 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80058ce:	e057      	b.n	8005980 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058d0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80058d4:	2b08      	cmp	r3, #8
 80058d6:	d828      	bhi.n	800592a <UART_SetConfig+0x45e>
 80058d8:	a201      	add	r2, pc, #4	@ (adr r2, 80058e0 <UART_SetConfig+0x414>)
 80058da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058de:	bf00      	nop
 80058e0:	08005905 	.word	0x08005905
 80058e4:	0800590d 	.word	0x0800590d
 80058e8:	08005915 	.word	0x08005915
 80058ec:	0800592b 	.word	0x0800592b
 80058f0:	0800591b 	.word	0x0800591b
 80058f4:	0800592b 	.word	0x0800592b
 80058f8:	0800592b 	.word	0x0800592b
 80058fc:	0800592b 	.word	0x0800592b
 8005900:	08005923 	.word	0x08005923
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005904:	f7fe f9ae 	bl	8003c64 <HAL_RCC_GetPCLK1Freq>
 8005908:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800590a:	e014      	b.n	8005936 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800590c:	f7fe f9bc 	bl	8003c88 <HAL_RCC_GetPCLK2Freq>
 8005910:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005912:	e010      	b.n	8005936 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005914:	4b26      	ldr	r3, [pc, #152]	@ (80059b0 <UART_SetConfig+0x4e4>)
 8005916:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005918:	e00d      	b.n	8005936 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800591a:	f7fe f8ef 	bl	8003afc <HAL_RCC_GetSysClockFreq>
 800591e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005920:	e009      	b.n	8005936 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005922:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005926:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005928:	e005      	b.n	8005936 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800592a:	2300      	movs	r3, #0
 800592c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005934:	bf00      	nop
    }

    if (pclk != 0U)
 8005936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005938:	2b00      	cmp	r3, #0
 800593a:	d021      	beq.n	8005980 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005940:	4a1a      	ldr	r2, [pc, #104]	@ (80059ac <UART_SetConfig+0x4e0>)
 8005942:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005946:	461a      	mov	r2, r3
 8005948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800594a:	fbb3 f2f2 	udiv	r2, r3, r2
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	085b      	lsrs	r3, r3, #1
 8005954:	441a      	add	r2, r3
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	fbb2 f3f3 	udiv	r3, r2, r3
 800595e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005960:	6a3b      	ldr	r3, [r7, #32]
 8005962:	2b0f      	cmp	r3, #15
 8005964:	d909      	bls.n	800597a <UART_SetConfig+0x4ae>
 8005966:	6a3b      	ldr	r3, [r7, #32]
 8005968:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800596c:	d205      	bcs.n	800597a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800596e:	6a3b      	ldr	r3, [r7, #32]
 8005970:	b29a      	uxth	r2, r3
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	60da      	str	r2, [r3, #12]
 8005978:	e002      	b.n	8005980 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	2201      	movs	r2, #1
 8005984:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	2201      	movs	r2, #1
 800598c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	2200      	movs	r2, #0
 8005994:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	2200      	movs	r2, #0
 800599a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800599c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3730      	adds	r7, #48	@ 0x30
 80059a4:	46bd      	mov	sp, r7
 80059a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059aa:	bf00      	nop
 80059ac:	080078bc 	.word	0x080078bc
 80059b0:	00f42400 	.word	0x00f42400

080059b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c0:	f003 0308 	and.w	r3, r3, #8
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00a      	beq.n	80059de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	430a      	orrs	r2, r1
 80059dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00a      	beq.n	8005a00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	430a      	orrs	r2, r1
 80059fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a04:	f003 0302 	and.w	r3, r3, #2
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00a      	beq.n	8005a22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a26:	f003 0304 	and.w	r3, r3, #4
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00a      	beq.n	8005a44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	430a      	orrs	r2, r1
 8005a42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a48:	f003 0310 	and.w	r3, r3, #16
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00a      	beq.n	8005a66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	430a      	orrs	r2, r1
 8005a64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a6a:	f003 0320 	and.w	r3, r3, #32
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00a      	beq.n	8005a88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	430a      	orrs	r2, r1
 8005a86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d01a      	beq.n	8005aca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ab2:	d10a      	bne.n	8005aca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ace:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00a      	beq.n	8005aec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	605a      	str	r2, [r3, #4]
  }
}
 8005aec:	bf00      	nop
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bc80      	pop	{r7}
 8005af4:	4770      	bx	lr

08005af6 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b086      	sub	sp, #24
 8005afa:	af02      	add	r7, sp, #8
 8005afc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b06:	f7fc fcab 	bl	8002460 <HAL_GetTick>
 8005b0a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 0308 	and.w	r3, r3, #8
 8005b16:	2b08      	cmp	r3, #8
 8005b18:	d10e      	bne.n	8005b38 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b1a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b1e:	9300      	str	r3, [sp, #0]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 f832 	bl	8005b92 <UART_WaitOnFlagUntilTimeout>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d001      	beq.n	8005b38 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e028      	b.n	8005b8a <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0304 	and.w	r3, r3, #4
 8005b42:	2b04      	cmp	r3, #4
 8005b44:	d10e      	bne.n	8005b64 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b46:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b4a:	9300      	str	r3, [sp, #0]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 f81c 	bl	8005b92 <UART_WaitOnFlagUntilTimeout>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d001      	beq.n	8005b64 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b60:	2303      	movs	r3, #3
 8005b62:	e012      	b.n	8005b8a <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2220      	movs	r2, #32
 8005b68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2220      	movs	r2, #32
 8005b70:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b09c      	sub	sp, #112	@ 0x70
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	60f8      	str	r0, [r7, #12]
 8005b9a:	60b9      	str	r1, [r7, #8]
 8005b9c:	603b      	str	r3, [r7, #0]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ba2:	e0af      	b.n	8005d04 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ba4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005baa:	f000 80ab 	beq.w	8005d04 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bae:	f7fc fc57 	bl	8002460 <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d302      	bcc.n	8005bc4 <UART_WaitOnFlagUntilTimeout+0x32>
 8005bbe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d140      	bne.n	8005c46 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bcc:	e853 3f00 	ldrex	r3, [r3]
 8005bd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005bd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bd4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005bd8:	667b      	str	r3, [r7, #100]	@ 0x64
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	461a      	mov	r2, r3
 8005be0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005be2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005be4:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005be8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005bea:	e841 2300 	strex	r3, r2, [r1]
 8005bee:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005bf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1e6      	bne.n	8005bc4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	3308      	adds	r3, #8
 8005bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c00:	e853 3f00 	ldrex	r3, [r3]
 8005c04:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c08:	f023 0301 	bic.w	r3, r3, #1
 8005c0c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	3308      	adds	r3, #8
 8005c14:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005c16:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005c18:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005c1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c1e:	e841 2300 	strex	r3, r2, [r1]
 8005c22:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005c24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1e5      	bne.n	8005bf6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2220      	movs	r2, #32
 8005c2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2220      	movs	r2, #32
 8005c36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e06f      	b.n	8005d26 <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0304 	and.w	r3, r3, #4
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d057      	beq.n	8005d04 <UART_WaitOnFlagUntilTimeout+0x172>
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	2b80      	cmp	r3, #128	@ 0x80
 8005c58:	d054      	beq.n	8005d04 <UART_WaitOnFlagUntilTimeout+0x172>
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	2b40      	cmp	r3, #64	@ 0x40
 8005c5e:	d051      	beq.n	8005d04 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	69db      	ldr	r3, [r3, #28]
 8005c66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c6e:	d149      	bne.n	8005d04 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005c78:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c82:	e853 3f00 	ldrex	r3, [r3]
 8005c86:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c8a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005c8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	461a      	mov	r2, r3
 8005c96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c98:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c9a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005c9e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005ca0:	e841 2300 	strex	r3, r2, [r1]
 8005ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1e6      	bne.n	8005c7a <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	3308      	adds	r3, #8
 8005cb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	e853 3f00 	ldrex	r3, [r3]
 8005cba:	613b      	str	r3, [r7, #16]
   return(result);
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	f023 0301 	bic.w	r3, r3, #1
 8005cc2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	3308      	adds	r3, #8
 8005cca:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005ccc:	623a      	str	r2, [r7, #32]
 8005cce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd0:	69f9      	ldr	r1, [r7, #28]
 8005cd2:	6a3a      	ldr	r2, [r7, #32]
 8005cd4:	e841 2300 	strex	r3, r2, [r1]
 8005cd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1e5      	bne.n	8005cac <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2220      	movs	r2, #32
 8005ce4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2220      	movs	r2, #32
 8005cec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2220      	movs	r2, #32
 8005cf4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e010      	b.n	8005d26 <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	69da      	ldr	r2, [r3, #28]
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	bf0c      	ite	eq
 8005d14:	2301      	moveq	r3, #1
 8005d16:	2300      	movne	r3, #0
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	79fb      	ldrb	r3, [r7, #7]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	f43f af40 	beq.w	8005ba4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3770      	adds	r7, #112	@ 0x70
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
	...

08005d30 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b0a3      	sub	sp, #140	@ 0x8c
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	68ba      	ldr	r2, [r7, #8]
 8005d42:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	88fa      	ldrh	r2, [r7, #6]
 8005d48:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	88fa      	ldrh	r2, [r7, #6]
 8005d50:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d62:	d10e      	bne.n	8005d82 <UART_Start_Receive_IT+0x52>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d105      	bne.n	8005d78 <UART_Start_Receive_IT+0x48>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005d72:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005d76:	e02d      	b.n	8005dd4 <UART_Start_Receive_IT+0xa4>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	22ff      	movs	r2, #255	@ 0xff
 8005d7c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005d80:	e028      	b.n	8005dd4 <UART_Start_Receive_IT+0xa4>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d10d      	bne.n	8005da6 <UART_Start_Receive_IT+0x76>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d104      	bne.n	8005d9c <UART_Start_Receive_IT+0x6c>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	22ff      	movs	r2, #255	@ 0xff
 8005d96:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005d9a:	e01b      	b.n	8005dd4 <UART_Start_Receive_IT+0xa4>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	227f      	movs	r2, #127	@ 0x7f
 8005da0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005da4:	e016      	b.n	8005dd4 <UART_Start_Receive_IT+0xa4>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005dae:	d10d      	bne.n	8005dcc <UART_Start_Receive_IT+0x9c>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d104      	bne.n	8005dc2 <UART_Start_Receive_IT+0x92>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	227f      	movs	r2, #127	@ 0x7f
 8005dbc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005dc0:	e008      	b.n	8005dd4 <UART_Start_Receive_IT+0xa4>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	223f      	movs	r2, #63	@ 0x3f
 8005dc6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005dca:	e003      	b.n	8005dd4 <UART_Start_Receive_IT+0xa4>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2222      	movs	r2, #34	@ 0x22
 8005de0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	3308      	adds	r3, #8
 8005dea:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005dee:	e853 3f00 	ldrex	r3, [r3]
 8005df2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8005df4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005df6:	f043 0301 	orr.w	r3, r3, #1
 8005dfa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	3308      	adds	r3, #8
 8005e04:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005e08:	673a      	str	r2, [r7, #112]	@ 0x70
 8005e0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8005e0e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8005e10:	e841 2300 	strex	r3, r2, [r1]
 8005e14:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8005e16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1e3      	bne.n	8005de4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e24:	d14f      	bne.n	8005ec6 <UART_Start_Receive_IT+0x196>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005e2c:	88fa      	ldrh	r2, [r7, #6]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d349      	bcc.n	8005ec6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e3a:	d107      	bne.n	8005e4c <UART_Start_Receive_IT+0x11c>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d103      	bne.n	8005e4c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	4a46      	ldr	r2, [pc, #280]	@ (8005f60 <UART_Start_Receive_IT+0x230>)
 8005e48:	675a      	str	r2, [r3, #116]	@ 0x74
 8005e4a:	e002      	b.n	8005e52 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	4a45      	ldr	r2, [pc, #276]	@ (8005f64 <UART_Start_Receive_IT+0x234>)
 8005e50:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d01a      	beq.n	8005e90 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e62:	e853 3f00 	ldrex	r3, [r3]
 8005e66:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005e68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e6e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	461a      	mov	r2, r3
 8005e78:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005e7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e7e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e80:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005e82:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005e84:	e841 2300 	strex	r3, r2, [r1]
 8005e88:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005e8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d1e4      	bne.n	8005e5a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	3308      	adds	r3, #8
 8005e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e9a:	e853 3f00 	ldrex	r3, [r3]
 8005e9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ea2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ea6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	3308      	adds	r3, #8
 8005eae:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005eb0:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005eb2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005eb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005eb8:	e841 2300 	strex	r3, r2, [r1]
 8005ebc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005ebe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d1e5      	bne.n	8005e90 <UART_Start_Receive_IT+0x160>
 8005ec4:	e046      	b.n	8005f54 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ece:	d107      	bne.n	8005ee0 <UART_Start_Receive_IT+0x1b0>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d103      	bne.n	8005ee0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	4a23      	ldr	r2, [pc, #140]	@ (8005f68 <UART_Start_Receive_IT+0x238>)
 8005edc:	675a      	str	r2, [r3, #116]	@ 0x74
 8005ede:	e002      	b.n	8005ee6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	4a22      	ldr	r2, [pc, #136]	@ (8005f6c <UART_Start_Receive_IT+0x23c>)
 8005ee4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d019      	beq.n	8005f22 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ef6:	e853 3f00 	ldrex	r3, [r3]
 8005efa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005efe:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005f02:	677b      	str	r3, [r7, #116]	@ 0x74
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	461a      	mov	r2, r3
 8005f0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f0e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f10:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005f12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f14:	e841 2300 	strex	r3, r2, [r1]
 8005f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d1e6      	bne.n	8005eee <UART_Start_Receive_IT+0x1be>
 8005f20:	e018      	b.n	8005f54 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	e853 3f00 	ldrex	r3, [r3]
 8005f2e:	613b      	str	r3, [r7, #16]
   return(result);
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	f043 0320 	orr.w	r3, r3, #32
 8005f36:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f40:	623b      	str	r3, [r7, #32]
 8005f42:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f44:	69f9      	ldr	r1, [r7, #28]
 8005f46:	6a3a      	ldr	r2, [r7, #32]
 8005f48:	e841 2300 	strex	r3, r2, [r1]
 8005f4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1e6      	bne.n	8005f22 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	378c      	adds	r7, #140	@ 0x8c
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bc80      	pop	{r7}
 8005f5e:	4770      	bx	lr
 8005f60:	0800678d 	.word	0x0800678d
 8005f64:	0800642d 	.word	0x0800642d
 8005f68:	08006275 	.word	0x08006275
 8005f6c:	080060bd 	.word	0x080060bd

08005f70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b095      	sub	sp, #84	@ 0x54
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f80:	e853 3f00 	ldrex	r3, [r3]
 8005f84:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	461a      	mov	r2, r3
 8005f94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f96:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f98:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f9c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f9e:	e841 2300 	strex	r3, r2, [r1]
 8005fa2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1e6      	bne.n	8005f78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	3308      	adds	r3, #8
 8005fb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb2:	6a3b      	ldr	r3, [r7, #32]
 8005fb4:	e853 3f00 	ldrex	r3, [r3]
 8005fb8:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fc0:	f023 0301 	bic.w	r3, r3, #1
 8005fc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	3308      	adds	r3, #8
 8005fcc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005fce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005fd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fd6:	e841 2300 	strex	r3, r2, [r1]
 8005fda:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d1e3      	bne.n	8005faa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d118      	bne.n	800601c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	e853 3f00 	ldrex	r3, [r3]
 8005ff6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	f023 0310 	bic.w	r3, r3, #16
 8005ffe:	647b      	str	r3, [r7, #68]	@ 0x44
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	461a      	mov	r2, r3
 8006006:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006008:	61bb      	str	r3, [r7, #24]
 800600a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600c:	6979      	ldr	r1, [r7, #20]
 800600e:	69ba      	ldr	r2, [r7, #24]
 8006010:	e841 2300 	strex	r3, r2, [r1]
 8006014:	613b      	str	r3, [r7, #16]
   return(result);
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1e6      	bne.n	8005fea <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2220      	movs	r2, #32
 8006020:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006030:	bf00      	nop
 8006032:	3754      	adds	r7, #84	@ 0x54
 8006034:	46bd      	mov	sp, r7
 8006036:	bc80      	pop	{r7}
 8006038:	4770      	bx	lr

0800603a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b084      	sub	sp, #16
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006046:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2200      	movs	r2, #0
 800604c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2200      	movs	r2, #0
 8006054:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f7ff fa22 	bl	80054a2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800605e:	bf00      	nop
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b088      	sub	sp, #32
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	e853 3f00 	ldrex	r3, [r3]
 800607a:	60bb      	str	r3, [r7, #8]
   return(result);
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006082:	61fb      	str	r3, [r7, #28]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	461a      	mov	r2, r3
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	61bb      	str	r3, [r7, #24]
 800608e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006090:	6979      	ldr	r1, [r7, #20]
 8006092:	69ba      	ldr	r2, [r7, #24]
 8006094:	e841 2300 	strex	r3, r2, [r1]
 8006098:	613b      	str	r3, [r7, #16]
   return(result);
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1e6      	bne.n	800606e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2220      	movs	r2, #32
 80060a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f7ff f9ee 	bl	8005490 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060b4:	bf00      	nop
 80060b6:	3720      	adds	r7, #32
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b09c      	sub	sp, #112	@ 0x70
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80060ca:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80060d4:	2b22      	cmp	r3, #34	@ 0x22
 80060d6:	f040 80be 	bne.w	8006256 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80060e4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80060e8:	b2d9      	uxtb	r1, r3
 80060ea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80060ee:	b2da      	uxtb	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060f4:	400a      	ands	r2, r1
 80060f6:	b2d2      	uxtb	r2, r2
 80060f8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060fe:	1c5a      	adds	r2, r3, #1
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800610a:	b29b      	uxth	r3, r3
 800610c:	3b01      	subs	r3, #1
 800610e:	b29a      	uxth	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800611c:	b29b      	uxth	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	f040 80a1 	bne.w	8006266 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800612c:	e853 3f00 	ldrex	r3, [r3]
 8006130:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006132:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006134:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006138:	66bb      	str	r3, [r7, #104]	@ 0x68
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	461a      	mov	r2, r3
 8006140:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006142:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006144:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006146:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006148:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800614a:	e841 2300 	strex	r3, r2, [r1]
 800614e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006150:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1e6      	bne.n	8006124 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	3308      	adds	r3, #8
 800615c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006160:	e853 3f00 	ldrex	r3, [r3]
 8006164:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006168:	f023 0301 	bic.w	r3, r3, #1
 800616c:	667b      	str	r3, [r7, #100]	@ 0x64
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	3308      	adds	r3, #8
 8006174:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006176:	647a      	str	r2, [r7, #68]	@ 0x44
 8006178:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800617c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800617e:	e841 2300 	strex	r3, r2, [r1]
 8006182:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006184:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1e5      	bne.n	8006156 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2220      	movs	r2, #32
 800618e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a33      	ldr	r2, [pc, #204]	@ (8006270 <UART_RxISR_8BIT+0x1b4>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d01f      	beq.n	80061e8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d018      	beq.n	80061e8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061be:	e853 3f00 	ldrex	r3, [r3]
 80061c2:	623b      	str	r3, [r7, #32]
   return(result);
 80061c4:	6a3b      	ldr	r3, [r7, #32]
 80061c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80061ca:	663b      	str	r3, [r7, #96]	@ 0x60
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	461a      	mov	r2, r3
 80061d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80061d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80061d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80061da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061dc:	e841 2300 	strex	r3, r2, [r1]
 80061e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80061e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d1e6      	bne.n	80061b6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d12e      	bne.n	800624e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	e853 3f00 	ldrex	r3, [r3]
 8006202:	60fb      	str	r3, [r7, #12]
   return(result);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f023 0310 	bic.w	r3, r3, #16
 800620a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	461a      	mov	r2, r3
 8006212:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006214:	61fb      	str	r3, [r7, #28]
 8006216:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006218:	69b9      	ldr	r1, [r7, #24]
 800621a:	69fa      	ldr	r2, [r7, #28]
 800621c:	e841 2300 	strex	r3, r2, [r1]
 8006220:	617b      	str	r3, [r7, #20]
   return(result);
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1e6      	bne.n	80061f6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	69db      	ldr	r3, [r3, #28]
 800622e:	f003 0310 	and.w	r3, r3, #16
 8006232:	2b10      	cmp	r3, #16
 8006234:	d103      	bne.n	800623e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2210      	movs	r2, #16
 800623c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006244:	4619      	mov	r1, r3
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f7ff f934 	bl	80054b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800624c:	e00b      	b.n	8006266 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f7fa fb0e 	bl	8000870 <HAL_UART_RxCpltCallback>
}
 8006254:	e007      	b.n	8006266 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	699a      	ldr	r2, [r3, #24]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f042 0208 	orr.w	r2, r2, #8
 8006264:	619a      	str	r2, [r3, #24]
}
 8006266:	bf00      	nop
 8006268:	3770      	adds	r7, #112	@ 0x70
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	40008000 	.word	0x40008000

08006274 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b09c      	sub	sp, #112	@ 0x70
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006282:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800628c:	2b22      	cmp	r3, #34	@ 0x22
 800628e:	f040 80be 	bne.w	800640e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006298:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062a0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80062a2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80062a6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80062aa:	4013      	ands	r3, r2
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80062b0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062b6:	1c9a      	adds	r2, r3, #2
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	3b01      	subs	r3, #1
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	f040 80a1 	bne.w	800641e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062e4:	e853 3f00 	ldrex	r3, [r3]
 80062e8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80062ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062f0:	667b      	str	r3, [r7, #100]	@ 0x64
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	461a      	mov	r2, r3
 80062f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80062fc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006300:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006302:	e841 2300 	strex	r3, r2, [r1]
 8006306:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006308:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1e6      	bne.n	80062dc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	3308      	adds	r3, #8
 8006314:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006318:	e853 3f00 	ldrex	r3, [r3]
 800631c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800631e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006320:	f023 0301 	bic.w	r3, r3, #1
 8006324:	663b      	str	r3, [r7, #96]	@ 0x60
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	3308      	adds	r3, #8
 800632c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800632e:	643a      	str	r2, [r7, #64]	@ 0x40
 8006330:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006332:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006334:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006336:	e841 2300 	strex	r3, r2, [r1]
 800633a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800633c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1e5      	bne.n	800630e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2220      	movs	r2, #32
 8006346:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a33      	ldr	r2, [pc, #204]	@ (8006428 <UART_RxISR_16BIT+0x1b4>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d01f      	beq.n	80063a0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d018      	beq.n	80063a0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006374:	6a3b      	ldr	r3, [r7, #32]
 8006376:	e853 3f00 	ldrex	r3, [r3]
 800637a:	61fb      	str	r3, [r7, #28]
   return(result);
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006382:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	461a      	mov	r2, r3
 800638a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800638c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800638e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006390:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006392:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006394:	e841 2300 	strex	r3, r2, [r1]
 8006398:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800639a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1e6      	bne.n	800636e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d12e      	bne.n	8006406 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	e853 3f00 	ldrex	r3, [r3]
 80063ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	f023 0310 	bic.w	r3, r3, #16
 80063c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	461a      	mov	r2, r3
 80063ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80063cc:	61bb      	str	r3, [r7, #24]
 80063ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d0:	6979      	ldr	r1, [r7, #20]
 80063d2:	69ba      	ldr	r2, [r7, #24]
 80063d4:	e841 2300 	strex	r3, r2, [r1]
 80063d8:	613b      	str	r3, [r7, #16]
   return(result);
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d1e6      	bne.n	80063ae <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	69db      	ldr	r3, [r3, #28]
 80063e6:	f003 0310 	and.w	r3, r3, #16
 80063ea:	2b10      	cmp	r3, #16
 80063ec:	d103      	bne.n	80063f6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	2210      	movs	r2, #16
 80063f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80063fc:	4619      	mov	r1, r3
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f7ff f858 	bl	80054b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006404:	e00b      	b.n	800641e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f7fa fa32 	bl	8000870 <HAL_UART_RxCpltCallback>
}
 800640c:	e007      	b.n	800641e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	699a      	ldr	r2, [r3, #24]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f042 0208 	orr.w	r2, r2, #8
 800641c:	619a      	str	r2, [r3, #24]
}
 800641e:	bf00      	nop
 8006420:	3770      	adds	r7, #112	@ 0x70
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	40008000 	.word	0x40008000

0800642c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b0ac      	sub	sp, #176	@ 0xb0
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800643a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	69db      	ldr	r3, [r3, #28]
 8006444:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006462:	2b22      	cmp	r3, #34	@ 0x22
 8006464:	f040 8182 	bne.w	800676c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800646e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006472:	e125      	b.n	80066c0 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800647a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800647e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8006482:	b2d9      	uxtb	r1, r3
 8006484:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8006488:	b2da      	uxtb	r2, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800648e:	400a      	ands	r2, r1
 8006490:	b2d2      	uxtb	r2, r2
 8006492:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006498:	1c5a      	adds	r2, r3, #1
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	3b01      	subs	r3, #1
 80064a8:	b29a      	uxth	r2, r3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	69db      	ldr	r3, [r3, #28]
 80064b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80064ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80064be:	f003 0307 	and.w	r3, r3, #7
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d053      	beq.n	800656e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80064c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80064ca:	f003 0301 	and.w	r3, r3, #1
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d011      	beq.n	80064f6 <UART_RxISR_8BIT_FIFOEN+0xca>
 80064d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80064d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00b      	beq.n	80064f6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2201      	movs	r2, #1
 80064e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064ec:	f043 0201 	orr.w	r2, r3, #1
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80064fa:	f003 0302 	and.w	r3, r3, #2
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d011      	beq.n	8006526 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006502:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006506:	f003 0301 	and.w	r3, r3, #1
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00b      	beq.n	8006526 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2202      	movs	r2, #2
 8006514:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800651c:	f043 0204 	orr.w	r2, r3, #4
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006526:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800652a:	f003 0304 	and.w	r3, r3, #4
 800652e:	2b00      	cmp	r3, #0
 8006530:	d011      	beq.n	8006556 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006532:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00b      	beq.n	8006556 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2204      	movs	r2, #4
 8006544:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800654c:	f043 0202 	orr.w	r2, r3, #2
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800655c:	2b00      	cmp	r3, #0
 800655e:	d006      	beq.n	800656e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f7fe ff9e 	bl	80054a2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006574:	b29b      	uxth	r3, r3
 8006576:	2b00      	cmp	r3, #0
 8006578:	f040 80a2 	bne.w	80066c0 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006582:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006584:	e853 3f00 	ldrex	r3, [r3]
 8006588:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800658a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800658c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006590:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	461a      	mov	r2, r3
 800659a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800659e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80065a0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80065a4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80065a6:	e841 2300 	strex	r3, r2, [r1]
 80065aa:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80065ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1e4      	bne.n	800657c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	3308      	adds	r3, #8
 80065b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065bc:	e853 3f00 	ldrex	r3, [r3]
 80065c0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80065c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80065c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80065c8:	f023 0301 	bic.w	r3, r3, #1
 80065cc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	3308      	adds	r3, #8
 80065d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80065da:	66ba      	str	r2, [r7, #104]	@ 0x68
 80065dc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065de:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80065e0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80065e2:	e841 2300 	strex	r3, r2, [r1]
 80065e6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80065e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1e1      	bne.n	80065b2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2220      	movs	r2, #32
 80065f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a5f      	ldr	r2, [pc, #380]	@ (8006784 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d021      	beq.n	8006650 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006616:	2b00      	cmp	r3, #0
 8006618:	d01a      	beq.n	8006650 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006620:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006622:	e853 3f00 	ldrex	r3, [r3]
 8006626:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006628:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800662a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800662e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	461a      	mov	r2, r3
 8006638:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800663c:	657b      	str	r3, [r7, #84]	@ 0x54
 800663e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006640:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006642:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006644:	e841 2300 	strex	r3, r2, [r1]
 8006648:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800664a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800664c:	2b00      	cmp	r3, #0
 800664e:	d1e4      	bne.n	800661a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006654:	2b01      	cmp	r3, #1
 8006656:	d130      	bne.n	80066ba <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006666:	e853 3f00 	ldrex	r3, [r3]
 800666a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800666c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800666e:	f023 0310 	bic.w	r3, r3, #16
 8006672:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	461a      	mov	r2, r3
 800667c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006680:	643b      	str	r3, [r7, #64]	@ 0x40
 8006682:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006684:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006686:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006688:	e841 2300 	strex	r3, r2, [r1]
 800668c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800668e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006690:	2b00      	cmp	r3, #0
 8006692:	d1e4      	bne.n	800665e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	69db      	ldr	r3, [r3, #28]
 800669a:	f003 0310 	and.w	r3, r3, #16
 800669e:	2b10      	cmp	r3, #16
 80066a0:	d103      	bne.n	80066aa <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2210      	movs	r2, #16
 80066a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80066b0:	4619      	mov	r1, r3
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f7fe fefe 	bl	80054b4 <HAL_UARTEx_RxEventCallback>
 80066b8:	e002      	b.n	80066c0 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f7fa f8d8 	bl	8000870 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80066c0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d006      	beq.n	80066d6 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80066c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80066cc:	f003 0320 	and.w	r3, r3, #32
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f47f aecf 	bne.w	8006474 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80066dc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80066e0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d049      	beq.n	800677c <UART_RxISR_8BIT_FIFOEN+0x350>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80066ee:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d242      	bcs.n	800677c <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	3308      	adds	r3, #8
 80066fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fe:	6a3b      	ldr	r3, [r7, #32]
 8006700:	e853 3f00 	ldrex	r3, [r3]
 8006704:	61fb      	str	r3, [r7, #28]
   return(result);
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800670c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	3308      	adds	r3, #8
 8006716:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800671a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800671c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800671e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006720:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006722:	e841 2300 	strex	r3, r2, [r1]
 8006726:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1e3      	bne.n	80066f6 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a15      	ldr	r2, [pc, #84]	@ (8006788 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006732:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	e853 3f00 	ldrex	r3, [r3]
 8006740:	60bb      	str	r3, [r7, #8]
   return(result);
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	f043 0320 	orr.w	r3, r3, #32
 8006748:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	461a      	mov	r2, r3
 8006752:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006756:	61bb      	str	r3, [r7, #24]
 8006758:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675a:	6979      	ldr	r1, [r7, #20]
 800675c:	69ba      	ldr	r2, [r7, #24]
 800675e:	e841 2300 	strex	r3, r2, [r1]
 8006762:	613b      	str	r3, [r7, #16]
   return(result);
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1e4      	bne.n	8006734 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800676a:	e007      	b.n	800677c <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	699a      	ldr	r2, [r3, #24]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f042 0208 	orr.w	r2, r2, #8
 800677a:	619a      	str	r2, [r3, #24]
}
 800677c:	bf00      	nop
 800677e:	37b0      	adds	r7, #176	@ 0xb0
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}
 8006784:	40008000 	.word	0x40008000
 8006788:	080060bd 	.word	0x080060bd

0800678c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b0ae      	sub	sp, #184	@ 0xb8
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800679a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	69db      	ldr	r3, [r3, #28]
 80067a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067c2:	2b22      	cmp	r3, #34	@ 0x22
 80067c4:	f040 8186 	bne.w	8006ad4 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80067ce:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80067d2:	e129      	b.n	8006a28 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067da:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80067e6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80067ea:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80067ee:	4013      	ands	r3, r2
 80067f0:	b29a      	uxth	r2, r3
 80067f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80067f6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067fc:	1c9a      	adds	r2, r3, #2
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006808:	b29b      	uxth	r3, r3
 800680a:	3b01      	subs	r3, #1
 800680c:	b29a      	uxth	r2, r3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	69db      	ldr	r3, [r3, #28]
 800681a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800681e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006822:	f003 0307 	and.w	r3, r3, #7
 8006826:	2b00      	cmp	r3, #0
 8006828:	d053      	beq.n	80068d2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800682a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	2b00      	cmp	r3, #0
 8006834:	d011      	beq.n	800685a <UART_RxISR_16BIT_FIFOEN+0xce>
 8006836:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800683a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00b      	beq.n	800685a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2201      	movs	r2, #1
 8006848:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006850:	f043 0201 	orr.w	r2, r3, #1
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800685a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800685e:	f003 0302 	and.w	r3, r3, #2
 8006862:	2b00      	cmp	r3, #0
 8006864:	d011      	beq.n	800688a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006866:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800686a:	f003 0301 	and.w	r3, r3, #1
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00b      	beq.n	800688a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2202      	movs	r2, #2
 8006878:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006880:	f043 0204 	orr.w	r2, r3, #4
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800688a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800688e:	f003 0304 	and.w	r3, r3, #4
 8006892:	2b00      	cmp	r3, #0
 8006894:	d011      	beq.n	80068ba <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006896:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800689a:	f003 0301 	and.w	r3, r3, #1
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00b      	beq.n	80068ba <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2204      	movs	r2, #4
 80068a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068b0:	f043 0202 	orr.w	r2, r3, #2
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d006      	beq.n	80068d2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f7fe fdec 	bl	80054a2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80068d8:	b29b      	uxth	r3, r3
 80068da:	2b00      	cmp	r3, #0
 80068dc:	f040 80a4 	bne.w	8006a28 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80068e8:	e853 3f00 	ldrex	r3, [r3]
 80068ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80068ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80068f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	461a      	mov	r2, r3
 80068fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006902:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006906:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006908:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800690a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800690e:	e841 2300 	strex	r3, r2, [r1]
 8006912:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006914:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1e2      	bne.n	80068e0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	3308      	adds	r3, #8
 8006920:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006922:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006924:	e853 3f00 	ldrex	r3, [r3]
 8006928:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800692a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800692c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006930:	f023 0301 	bic.w	r3, r3, #1
 8006934:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	3308      	adds	r3, #8
 800693e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8006942:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006944:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006946:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006948:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800694a:	e841 2300 	strex	r3, r2, [r1]
 800694e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006950:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1e1      	bne.n	800691a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2220      	movs	r2, #32
 800695a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a5f      	ldr	r2, [pc, #380]	@ (8006aec <UART_RxISR_16BIT_FIFOEN+0x360>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d021      	beq.n	80069b8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800697e:	2b00      	cmp	r3, #0
 8006980:	d01a      	beq.n	80069b8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006988:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800698a:	e853 3f00 	ldrex	r3, [r3]
 800698e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006990:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006992:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006996:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	461a      	mov	r2, r3
 80069a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80069a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80069a6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80069aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80069ac:	e841 2300 	strex	r3, r2, [r1]
 80069b0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80069b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1e4      	bne.n	8006982 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d130      	bne.n	8006a22 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ce:	e853 3f00 	ldrex	r3, [r3]
 80069d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80069d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069d6:	f023 0310 	bic.w	r3, r3, #16
 80069da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	461a      	mov	r2, r3
 80069e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80069e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80069ea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80069ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069f0:	e841 2300 	strex	r3, r2, [r1]
 80069f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80069f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1e4      	bne.n	80069c6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	69db      	ldr	r3, [r3, #28]
 8006a02:	f003 0310 	and.w	r3, r3, #16
 8006a06:	2b10      	cmp	r3, #16
 8006a08:	d103      	bne.n	8006a12 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2210      	movs	r2, #16
 8006a10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006a18:	4619      	mov	r1, r3
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f7fe fd4a 	bl	80054b4 <HAL_UARTEx_RxEventCallback>
 8006a20:	e002      	b.n	8006a28 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f7f9 ff24 	bl	8000870 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006a28:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d006      	beq.n	8006a3e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8006a30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006a34:	f003 0320 	and.w	r3, r3, #32
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f47f aecb 	bne.w	80067d4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006a44:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006a48:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d049      	beq.n	8006ae4 <UART_RxISR_16BIT_FIFOEN+0x358>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006a56:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d242      	bcs.n	8006ae4 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	3308      	adds	r3, #8
 8006a64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a68:	e853 3f00 	ldrex	r3, [r3]
 8006a6c:	623b      	str	r3, [r7, #32]
   return(result);
 8006a6e:	6a3b      	ldr	r3, [r7, #32]
 8006a70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	3308      	adds	r3, #8
 8006a7e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8006a82:	633a      	str	r2, [r7, #48]	@ 0x30
 8006a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a8a:	e841 2300 	strex	r3, r2, [r1]
 8006a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d1e3      	bne.n	8006a5e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a15      	ldr	r2, [pc, #84]	@ (8006af0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8006a9a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	e853 3f00 	ldrex	r3, [r3]
 8006aa8:	60fb      	str	r3, [r7, #12]
   return(result);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f043 0320 	orr.w	r3, r3, #32
 8006ab0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	461a      	mov	r2, r3
 8006aba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006abe:	61fb      	str	r3, [r7, #28]
 8006ac0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac2:	69b9      	ldr	r1, [r7, #24]
 8006ac4:	69fa      	ldr	r2, [r7, #28]
 8006ac6:	e841 2300 	strex	r3, r2, [r1]
 8006aca:	617b      	str	r3, [r7, #20]
   return(result);
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1e4      	bne.n	8006a9c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ad2:	e007      	b.n	8006ae4 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	699a      	ldr	r2, [r3, #24]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f042 0208 	orr.w	r2, r2, #8
 8006ae2:	619a      	str	r2, [r3, #24]
}
 8006ae4:	bf00      	nop
 8006ae6:	37b8      	adds	r7, #184	@ 0xb8
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	40008000 	.word	0x40008000
 8006af0:	08006275 	.word	0x08006275

08006af4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006afc:	bf00      	nop
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bc80      	pop	{r7}
 8006b04:	4770      	bx	lr

08006b06 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006b06:	b480      	push	{r7}
 8006b08:	b083      	sub	sp, #12
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006b0e:	bf00      	nop
 8006b10:	370c      	adds	r7, #12
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bc80      	pop	{r7}
 8006b16:	4770      	bx	lr

08006b18 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bc80      	pop	{r7}
 8006b28:	4770      	bx	lr

08006b2a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006b2a:	b480      	push	{r7}
 8006b2c:	b085      	sub	sp, #20
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d101      	bne.n	8006b40 <HAL_UARTEx_DisableFifoMode+0x16>
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	e027      	b.n	8006b90 <HAL_UARTEx_DisableFifoMode+0x66>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2224      	movs	r2, #36	@ 0x24
 8006b4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f022 0201 	bic.w	r2, r2, #1
 8006b66:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006b6e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2220      	movs	r2, #32
 8006b82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3714      	adds	r7, #20
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bc80      	pop	{r7}
 8006b98:	4770      	bx	lr

08006b9a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b084      	sub	sp, #16
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
 8006ba2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d101      	bne.n	8006bb2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006bae:	2302      	movs	r3, #2
 8006bb0:	e02d      	b.n	8006c0e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2224      	movs	r2, #36	@ 0x24
 8006bbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f022 0201 	bic.w	r2, r2, #1
 8006bd8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	683a      	ldr	r2, [r7, #0]
 8006bea:	430a      	orrs	r2, r1
 8006bec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 f850 	bl	8006c94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2220      	movs	r2, #32
 8006c00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b084      	sub	sp, #16
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
 8006c1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d101      	bne.n	8006c2e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006c2a:	2302      	movs	r3, #2
 8006c2c:	e02d      	b.n	8006c8a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2201      	movs	r2, #1
 8006c32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2224      	movs	r2, #36	@ 0x24
 8006c3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f022 0201 	bic.w	r2, r2, #1
 8006c54:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	683a      	ldr	r2, [r7, #0]
 8006c66:	430a      	orrs	r2, r1
 8006c68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 f812 	bl	8006c94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2220      	movs	r2, #32
 8006c7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
	...

08006c94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d108      	bne.n	8006cb6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006cb4:	e031      	b.n	8006d1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006cb6:	2308      	movs	r3, #8
 8006cb8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006cba:	2308      	movs	r3, #8
 8006cbc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	0e5b      	lsrs	r3, r3, #25
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	f003 0307 	and.w	r3, r3, #7
 8006ccc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	0f5b      	lsrs	r3, r3, #29
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	f003 0307 	and.w	r3, r3, #7
 8006cdc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006cde:	7bbb      	ldrb	r3, [r7, #14]
 8006ce0:	7b3a      	ldrb	r2, [r7, #12]
 8006ce2:	4910      	ldr	r1, [pc, #64]	@ (8006d24 <UARTEx_SetNbDataToProcess+0x90>)
 8006ce4:	5c8a      	ldrb	r2, [r1, r2]
 8006ce6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006cea:	7b3a      	ldrb	r2, [r7, #12]
 8006cec:	490e      	ldr	r1, [pc, #56]	@ (8006d28 <UARTEx_SetNbDataToProcess+0x94>)
 8006cee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006cf0:	fb93 f3f2 	sdiv	r3, r3, r2
 8006cf4:	b29a      	uxth	r2, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006cfc:	7bfb      	ldrb	r3, [r7, #15]
 8006cfe:	7b7a      	ldrb	r2, [r7, #13]
 8006d00:	4908      	ldr	r1, [pc, #32]	@ (8006d24 <UARTEx_SetNbDataToProcess+0x90>)
 8006d02:	5c8a      	ldrb	r2, [r1, r2]
 8006d04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006d08:	7b7a      	ldrb	r2, [r7, #13]
 8006d0a:	4907      	ldr	r1, [pc, #28]	@ (8006d28 <UARTEx_SetNbDataToProcess+0x94>)
 8006d0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006d1a:	bf00      	nop
 8006d1c:	3714      	adds	r7, #20
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bc80      	pop	{r7}
 8006d22:	4770      	bx	lr
 8006d24:	080078d4 	.word	0x080078d4
 8006d28:	080078dc 	.word	0x080078dc

08006d2c <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b085      	sub	sp, #20
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	460b      	mov	r3, r1
 8006d36:	70fb      	strb	r3, [r7, #3]
 8006d38:	4613      	mov	r3, r2
 8006d3a:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	60fb      	str	r3, [r7, #12]
  while( size-- )
 8006d40:	e004      	b.n	8006d4c <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	1c5a      	adds	r2, r3, #1
 8006d46:	60fa      	str	r2, [r7, #12]
 8006d48:	78fa      	ldrb	r2, [r7, #3]
 8006d4a:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8006d4c:	883b      	ldrh	r3, [r7, #0]
 8006d4e:	1e5a      	subs	r2, r3, #1
 8006d50:	803a      	strh	r2, [r7, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1f5      	bne.n	8006d42 <UTIL_MEM_set_8+0x16>
  }
}
 8006d56:	bf00      	nop
 8006d58:	bf00      	nop
 8006d5a:	3714      	adds	r7, #20
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bc80      	pop	{r7}
 8006d60:	4770      	bx	lr
	...

08006d64 <sniprintf>:
 8006d64:	b40c      	push	{r2, r3}
 8006d66:	b530      	push	{r4, r5, lr}
 8006d68:	4b18      	ldr	r3, [pc, #96]	@ (8006dcc <sniprintf+0x68>)
 8006d6a:	1e0c      	subs	r4, r1, #0
 8006d6c:	681d      	ldr	r5, [r3, #0]
 8006d6e:	b09d      	sub	sp, #116	@ 0x74
 8006d70:	da08      	bge.n	8006d84 <sniprintf+0x20>
 8006d72:	238b      	movs	r3, #139	@ 0x8b
 8006d74:	602b      	str	r3, [r5, #0]
 8006d76:	f04f 30ff 	mov.w	r0, #4294967295
 8006d7a:	b01d      	add	sp, #116	@ 0x74
 8006d7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d80:	b002      	add	sp, #8
 8006d82:	4770      	bx	lr
 8006d84:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006d88:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006d8c:	f04f 0300 	mov.w	r3, #0
 8006d90:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006d92:	bf14      	ite	ne
 8006d94:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006d98:	4623      	moveq	r3, r4
 8006d9a:	9304      	str	r3, [sp, #16]
 8006d9c:	9307      	str	r3, [sp, #28]
 8006d9e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006da2:	9002      	str	r0, [sp, #8]
 8006da4:	9006      	str	r0, [sp, #24]
 8006da6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006daa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006dac:	ab21      	add	r3, sp, #132	@ 0x84
 8006dae:	a902      	add	r1, sp, #8
 8006db0:	4628      	mov	r0, r5
 8006db2:	9301      	str	r3, [sp, #4]
 8006db4:	f000 f9b6 	bl	8007124 <_svfiprintf_r>
 8006db8:	1c43      	adds	r3, r0, #1
 8006dba:	bfbc      	itt	lt
 8006dbc:	238b      	movlt	r3, #139	@ 0x8b
 8006dbe:	602b      	strlt	r3, [r5, #0]
 8006dc0:	2c00      	cmp	r4, #0
 8006dc2:	d0da      	beq.n	8006d7a <sniprintf+0x16>
 8006dc4:	9b02      	ldr	r3, [sp, #8]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	701a      	strb	r2, [r3, #0]
 8006dca:	e7d6      	b.n	8006d7a <sniprintf+0x16>
 8006dcc:	20000034 	.word	0x20000034

08006dd0 <siprintf>:
 8006dd0:	b40e      	push	{r1, r2, r3}
 8006dd2:	b510      	push	{r4, lr}
 8006dd4:	b09d      	sub	sp, #116	@ 0x74
 8006dd6:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006dd8:	9002      	str	r0, [sp, #8]
 8006dda:	9006      	str	r0, [sp, #24]
 8006ddc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006de0:	480a      	ldr	r0, [pc, #40]	@ (8006e0c <siprintf+0x3c>)
 8006de2:	9107      	str	r1, [sp, #28]
 8006de4:	9104      	str	r1, [sp, #16]
 8006de6:	490a      	ldr	r1, [pc, #40]	@ (8006e10 <siprintf+0x40>)
 8006de8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dec:	9105      	str	r1, [sp, #20]
 8006dee:	2400      	movs	r4, #0
 8006df0:	a902      	add	r1, sp, #8
 8006df2:	6800      	ldr	r0, [r0, #0]
 8006df4:	9301      	str	r3, [sp, #4]
 8006df6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006df8:	f000 f994 	bl	8007124 <_svfiprintf_r>
 8006dfc:	9b02      	ldr	r3, [sp, #8]
 8006dfe:	701c      	strb	r4, [r3, #0]
 8006e00:	b01d      	add	sp, #116	@ 0x74
 8006e02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e06:	b003      	add	sp, #12
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop
 8006e0c:	20000034 	.word	0x20000034
 8006e10:	ffff0208 	.word	0xffff0208

08006e14 <memset>:
 8006e14:	4402      	add	r2, r0
 8006e16:	4603      	mov	r3, r0
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d100      	bne.n	8006e1e <memset+0xa>
 8006e1c:	4770      	bx	lr
 8006e1e:	f803 1b01 	strb.w	r1, [r3], #1
 8006e22:	e7f9      	b.n	8006e18 <memset+0x4>

08006e24 <__errno>:
 8006e24:	4b01      	ldr	r3, [pc, #4]	@ (8006e2c <__errno+0x8>)
 8006e26:	6818      	ldr	r0, [r3, #0]
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	20000034 	.word	0x20000034

08006e30 <__libc_init_array>:
 8006e30:	b570      	push	{r4, r5, r6, lr}
 8006e32:	4d0d      	ldr	r5, [pc, #52]	@ (8006e68 <__libc_init_array+0x38>)
 8006e34:	4c0d      	ldr	r4, [pc, #52]	@ (8006e6c <__libc_init_array+0x3c>)
 8006e36:	1b64      	subs	r4, r4, r5
 8006e38:	10a4      	asrs	r4, r4, #2
 8006e3a:	2600      	movs	r6, #0
 8006e3c:	42a6      	cmp	r6, r4
 8006e3e:	d109      	bne.n	8006e54 <__libc_init_array+0x24>
 8006e40:	4d0b      	ldr	r5, [pc, #44]	@ (8006e70 <__libc_init_array+0x40>)
 8006e42:	4c0c      	ldr	r4, [pc, #48]	@ (8006e74 <__libc_init_array+0x44>)
 8006e44:	f000 fc64 	bl	8007710 <_init>
 8006e48:	1b64      	subs	r4, r4, r5
 8006e4a:	10a4      	asrs	r4, r4, #2
 8006e4c:	2600      	movs	r6, #0
 8006e4e:	42a6      	cmp	r6, r4
 8006e50:	d105      	bne.n	8006e5e <__libc_init_array+0x2e>
 8006e52:	bd70      	pop	{r4, r5, r6, pc}
 8006e54:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e58:	4798      	blx	r3
 8006e5a:	3601      	adds	r6, #1
 8006e5c:	e7ee      	b.n	8006e3c <__libc_init_array+0xc>
 8006e5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e62:	4798      	blx	r3
 8006e64:	3601      	adds	r6, #1
 8006e66:	e7f2      	b.n	8006e4e <__libc_init_array+0x1e>
 8006e68:	08007920 	.word	0x08007920
 8006e6c:	08007920 	.word	0x08007920
 8006e70:	08007920 	.word	0x08007920
 8006e74:	08007924 	.word	0x08007924

08006e78 <__retarget_lock_acquire_recursive>:
 8006e78:	4770      	bx	lr

08006e7a <__retarget_lock_release_recursive>:
 8006e7a:	4770      	bx	lr

08006e7c <_free_r>:
 8006e7c:	b538      	push	{r3, r4, r5, lr}
 8006e7e:	4605      	mov	r5, r0
 8006e80:	2900      	cmp	r1, #0
 8006e82:	d041      	beq.n	8006f08 <_free_r+0x8c>
 8006e84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e88:	1f0c      	subs	r4, r1, #4
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	bfb8      	it	lt
 8006e8e:	18e4      	addlt	r4, r4, r3
 8006e90:	f000 f8e0 	bl	8007054 <__malloc_lock>
 8006e94:	4a1d      	ldr	r2, [pc, #116]	@ (8006f0c <_free_r+0x90>)
 8006e96:	6813      	ldr	r3, [r2, #0]
 8006e98:	b933      	cbnz	r3, 8006ea8 <_free_r+0x2c>
 8006e9a:	6063      	str	r3, [r4, #4]
 8006e9c:	6014      	str	r4, [r2, #0]
 8006e9e:	4628      	mov	r0, r5
 8006ea0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ea4:	f000 b8dc 	b.w	8007060 <__malloc_unlock>
 8006ea8:	42a3      	cmp	r3, r4
 8006eaa:	d908      	bls.n	8006ebe <_free_r+0x42>
 8006eac:	6820      	ldr	r0, [r4, #0]
 8006eae:	1821      	adds	r1, r4, r0
 8006eb0:	428b      	cmp	r3, r1
 8006eb2:	bf01      	itttt	eq
 8006eb4:	6819      	ldreq	r1, [r3, #0]
 8006eb6:	685b      	ldreq	r3, [r3, #4]
 8006eb8:	1809      	addeq	r1, r1, r0
 8006eba:	6021      	streq	r1, [r4, #0]
 8006ebc:	e7ed      	b.n	8006e9a <_free_r+0x1e>
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	b10b      	cbz	r3, 8006ec8 <_free_r+0x4c>
 8006ec4:	42a3      	cmp	r3, r4
 8006ec6:	d9fa      	bls.n	8006ebe <_free_r+0x42>
 8006ec8:	6811      	ldr	r1, [r2, #0]
 8006eca:	1850      	adds	r0, r2, r1
 8006ecc:	42a0      	cmp	r0, r4
 8006ece:	d10b      	bne.n	8006ee8 <_free_r+0x6c>
 8006ed0:	6820      	ldr	r0, [r4, #0]
 8006ed2:	4401      	add	r1, r0
 8006ed4:	1850      	adds	r0, r2, r1
 8006ed6:	4283      	cmp	r3, r0
 8006ed8:	6011      	str	r1, [r2, #0]
 8006eda:	d1e0      	bne.n	8006e9e <_free_r+0x22>
 8006edc:	6818      	ldr	r0, [r3, #0]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	6053      	str	r3, [r2, #4]
 8006ee2:	4408      	add	r0, r1
 8006ee4:	6010      	str	r0, [r2, #0]
 8006ee6:	e7da      	b.n	8006e9e <_free_r+0x22>
 8006ee8:	d902      	bls.n	8006ef0 <_free_r+0x74>
 8006eea:	230c      	movs	r3, #12
 8006eec:	602b      	str	r3, [r5, #0]
 8006eee:	e7d6      	b.n	8006e9e <_free_r+0x22>
 8006ef0:	6820      	ldr	r0, [r4, #0]
 8006ef2:	1821      	adds	r1, r4, r0
 8006ef4:	428b      	cmp	r3, r1
 8006ef6:	bf04      	itt	eq
 8006ef8:	6819      	ldreq	r1, [r3, #0]
 8006efa:	685b      	ldreq	r3, [r3, #4]
 8006efc:	6063      	str	r3, [r4, #4]
 8006efe:	bf04      	itt	eq
 8006f00:	1809      	addeq	r1, r1, r0
 8006f02:	6021      	streq	r1, [r4, #0]
 8006f04:	6054      	str	r4, [r2, #4]
 8006f06:	e7ca      	b.n	8006e9e <_free_r+0x22>
 8006f08:	bd38      	pop	{r3, r4, r5, pc}
 8006f0a:	bf00      	nop
 8006f0c:	200005bc 	.word	0x200005bc

08006f10 <sbrk_aligned>:
 8006f10:	b570      	push	{r4, r5, r6, lr}
 8006f12:	4e0f      	ldr	r6, [pc, #60]	@ (8006f50 <sbrk_aligned+0x40>)
 8006f14:	460c      	mov	r4, r1
 8006f16:	6831      	ldr	r1, [r6, #0]
 8006f18:	4605      	mov	r5, r0
 8006f1a:	b911      	cbnz	r1, 8006f22 <sbrk_aligned+0x12>
 8006f1c:	f000 fba4 	bl	8007668 <_sbrk_r>
 8006f20:	6030      	str	r0, [r6, #0]
 8006f22:	4621      	mov	r1, r4
 8006f24:	4628      	mov	r0, r5
 8006f26:	f000 fb9f 	bl	8007668 <_sbrk_r>
 8006f2a:	1c43      	adds	r3, r0, #1
 8006f2c:	d103      	bne.n	8006f36 <sbrk_aligned+0x26>
 8006f2e:	f04f 34ff 	mov.w	r4, #4294967295
 8006f32:	4620      	mov	r0, r4
 8006f34:	bd70      	pop	{r4, r5, r6, pc}
 8006f36:	1cc4      	adds	r4, r0, #3
 8006f38:	f024 0403 	bic.w	r4, r4, #3
 8006f3c:	42a0      	cmp	r0, r4
 8006f3e:	d0f8      	beq.n	8006f32 <sbrk_aligned+0x22>
 8006f40:	1a21      	subs	r1, r4, r0
 8006f42:	4628      	mov	r0, r5
 8006f44:	f000 fb90 	bl	8007668 <_sbrk_r>
 8006f48:	3001      	adds	r0, #1
 8006f4a:	d1f2      	bne.n	8006f32 <sbrk_aligned+0x22>
 8006f4c:	e7ef      	b.n	8006f2e <sbrk_aligned+0x1e>
 8006f4e:	bf00      	nop
 8006f50:	200005b8 	.word	0x200005b8

08006f54 <_malloc_r>:
 8006f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f58:	1ccd      	adds	r5, r1, #3
 8006f5a:	f025 0503 	bic.w	r5, r5, #3
 8006f5e:	3508      	adds	r5, #8
 8006f60:	2d0c      	cmp	r5, #12
 8006f62:	bf38      	it	cc
 8006f64:	250c      	movcc	r5, #12
 8006f66:	2d00      	cmp	r5, #0
 8006f68:	4606      	mov	r6, r0
 8006f6a:	db01      	blt.n	8006f70 <_malloc_r+0x1c>
 8006f6c:	42a9      	cmp	r1, r5
 8006f6e:	d904      	bls.n	8006f7a <_malloc_r+0x26>
 8006f70:	230c      	movs	r3, #12
 8006f72:	6033      	str	r3, [r6, #0]
 8006f74:	2000      	movs	r0, #0
 8006f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007050 <_malloc_r+0xfc>
 8006f7e:	f000 f869 	bl	8007054 <__malloc_lock>
 8006f82:	f8d8 3000 	ldr.w	r3, [r8]
 8006f86:	461c      	mov	r4, r3
 8006f88:	bb44      	cbnz	r4, 8006fdc <_malloc_r+0x88>
 8006f8a:	4629      	mov	r1, r5
 8006f8c:	4630      	mov	r0, r6
 8006f8e:	f7ff ffbf 	bl	8006f10 <sbrk_aligned>
 8006f92:	1c43      	adds	r3, r0, #1
 8006f94:	4604      	mov	r4, r0
 8006f96:	d158      	bne.n	800704a <_malloc_r+0xf6>
 8006f98:	f8d8 4000 	ldr.w	r4, [r8]
 8006f9c:	4627      	mov	r7, r4
 8006f9e:	2f00      	cmp	r7, #0
 8006fa0:	d143      	bne.n	800702a <_malloc_r+0xd6>
 8006fa2:	2c00      	cmp	r4, #0
 8006fa4:	d04b      	beq.n	800703e <_malloc_r+0xea>
 8006fa6:	6823      	ldr	r3, [r4, #0]
 8006fa8:	4639      	mov	r1, r7
 8006faa:	4630      	mov	r0, r6
 8006fac:	eb04 0903 	add.w	r9, r4, r3
 8006fb0:	f000 fb5a 	bl	8007668 <_sbrk_r>
 8006fb4:	4581      	cmp	r9, r0
 8006fb6:	d142      	bne.n	800703e <_malloc_r+0xea>
 8006fb8:	6821      	ldr	r1, [r4, #0]
 8006fba:	1a6d      	subs	r5, r5, r1
 8006fbc:	4629      	mov	r1, r5
 8006fbe:	4630      	mov	r0, r6
 8006fc0:	f7ff ffa6 	bl	8006f10 <sbrk_aligned>
 8006fc4:	3001      	adds	r0, #1
 8006fc6:	d03a      	beq.n	800703e <_malloc_r+0xea>
 8006fc8:	6823      	ldr	r3, [r4, #0]
 8006fca:	442b      	add	r3, r5
 8006fcc:	6023      	str	r3, [r4, #0]
 8006fce:	f8d8 3000 	ldr.w	r3, [r8]
 8006fd2:	685a      	ldr	r2, [r3, #4]
 8006fd4:	bb62      	cbnz	r2, 8007030 <_malloc_r+0xdc>
 8006fd6:	f8c8 7000 	str.w	r7, [r8]
 8006fda:	e00f      	b.n	8006ffc <_malloc_r+0xa8>
 8006fdc:	6822      	ldr	r2, [r4, #0]
 8006fde:	1b52      	subs	r2, r2, r5
 8006fe0:	d420      	bmi.n	8007024 <_malloc_r+0xd0>
 8006fe2:	2a0b      	cmp	r2, #11
 8006fe4:	d917      	bls.n	8007016 <_malloc_r+0xc2>
 8006fe6:	1961      	adds	r1, r4, r5
 8006fe8:	42a3      	cmp	r3, r4
 8006fea:	6025      	str	r5, [r4, #0]
 8006fec:	bf18      	it	ne
 8006fee:	6059      	strne	r1, [r3, #4]
 8006ff0:	6863      	ldr	r3, [r4, #4]
 8006ff2:	bf08      	it	eq
 8006ff4:	f8c8 1000 	streq.w	r1, [r8]
 8006ff8:	5162      	str	r2, [r4, r5]
 8006ffa:	604b      	str	r3, [r1, #4]
 8006ffc:	4630      	mov	r0, r6
 8006ffe:	f000 f82f 	bl	8007060 <__malloc_unlock>
 8007002:	f104 000b 	add.w	r0, r4, #11
 8007006:	1d23      	adds	r3, r4, #4
 8007008:	f020 0007 	bic.w	r0, r0, #7
 800700c:	1ac2      	subs	r2, r0, r3
 800700e:	bf1c      	itt	ne
 8007010:	1a1b      	subne	r3, r3, r0
 8007012:	50a3      	strne	r3, [r4, r2]
 8007014:	e7af      	b.n	8006f76 <_malloc_r+0x22>
 8007016:	6862      	ldr	r2, [r4, #4]
 8007018:	42a3      	cmp	r3, r4
 800701a:	bf0c      	ite	eq
 800701c:	f8c8 2000 	streq.w	r2, [r8]
 8007020:	605a      	strne	r2, [r3, #4]
 8007022:	e7eb      	b.n	8006ffc <_malloc_r+0xa8>
 8007024:	4623      	mov	r3, r4
 8007026:	6864      	ldr	r4, [r4, #4]
 8007028:	e7ae      	b.n	8006f88 <_malloc_r+0x34>
 800702a:	463c      	mov	r4, r7
 800702c:	687f      	ldr	r7, [r7, #4]
 800702e:	e7b6      	b.n	8006f9e <_malloc_r+0x4a>
 8007030:	461a      	mov	r2, r3
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	42a3      	cmp	r3, r4
 8007036:	d1fb      	bne.n	8007030 <_malloc_r+0xdc>
 8007038:	2300      	movs	r3, #0
 800703a:	6053      	str	r3, [r2, #4]
 800703c:	e7de      	b.n	8006ffc <_malloc_r+0xa8>
 800703e:	230c      	movs	r3, #12
 8007040:	6033      	str	r3, [r6, #0]
 8007042:	4630      	mov	r0, r6
 8007044:	f000 f80c 	bl	8007060 <__malloc_unlock>
 8007048:	e794      	b.n	8006f74 <_malloc_r+0x20>
 800704a:	6005      	str	r5, [r0, #0]
 800704c:	e7d6      	b.n	8006ffc <_malloc_r+0xa8>
 800704e:	bf00      	nop
 8007050:	200005bc 	.word	0x200005bc

08007054 <__malloc_lock>:
 8007054:	4801      	ldr	r0, [pc, #4]	@ (800705c <__malloc_lock+0x8>)
 8007056:	f7ff bf0f 	b.w	8006e78 <__retarget_lock_acquire_recursive>
 800705a:	bf00      	nop
 800705c:	200005b4 	.word	0x200005b4

08007060 <__malloc_unlock>:
 8007060:	4801      	ldr	r0, [pc, #4]	@ (8007068 <__malloc_unlock+0x8>)
 8007062:	f7ff bf0a 	b.w	8006e7a <__retarget_lock_release_recursive>
 8007066:	bf00      	nop
 8007068:	200005b4 	.word	0x200005b4

0800706c <__ssputs_r>:
 800706c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007070:	688e      	ldr	r6, [r1, #8]
 8007072:	461f      	mov	r7, r3
 8007074:	42be      	cmp	r6, r7
 8007076:	680b      	ldr	r3, [r1, #0]
 8007078:	4682      	mov	sl, r0
 800707a:	460c      	mov	r4, r1
 800707c:	4690      	mov	r8, r2
 800707e:	d82d      	bhi.n	80070dc <__ssputs_r+0x70>
 8007080:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007084:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007088:	d026      	beq.n	80070d8 <__ssputs_r+0x6c>
 800708a:	6965      	ldr	r5, [r4, #20]
 800708c:	6909      	ldr	r1, [r1, #16]
 800708e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007092:	eba3 0901 	sub.w	r9, r3, r1
 8007096:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800709a:	1c7b      	adds	r3, r7, #1
 800709c:	444b      	add	r3, r9
 800709e:	106d      	asrs	r5, r5, #1
 80070a0:	429d      	cmp	r5, r3
 80070a2:	bf38      	it	cc
 80070a4:	461d      	movcc	r5, r3
 80070a6:	0553      	lsls	r3, r2, #21
 80070a8:	d527      	bpl.n	80070fa <__ssputs_r+0x8e>
 80070aa:	4629      	mov	r1, r5
 80070ac:	f7ff ff52 	bl	8006f54 <_malloc_r>
 80070b0:	4606      	mov	r6, r0
 80070b2:	b360      	cbz	r0, 800710e <__ssputs_r+0xa2>
 80070b4:	6921      	ldr	r1, [r4, #16]
 80070b6:	464a      	mov	r2, r9
 80070b8:	f000 fae6 	bl	8007688 <memcpy>
 80070bc:	89a3      	ldrh	r3, [r4, #12]
 80070be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80070c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070c6:	81a3      	strh	r3, [r4, #12]
 80070c8:	6126      	str	r6, [r4, #16]
 80070ca:	6165      	str	r5, [r4, #20]
 80070cc:	444e      	add	r6, r9
 80070ce:	eba5 0509 	sub.w	r5, r5, r9
 80070d2:	6026      	str	r6, [r4, #0]
 80070d4:	60a5      	str	r5, [r4, #8]
 80070d6:	463e      	mov	r6, r7
 80070d8:	42be      	cmp	r6, r7
 80070da:	d900      	bls.n	80070de <__ssputs_r+0x72>
 80070dc:	463e      	mov	r6, r7
 80070de:	6820      	ldr	r0, [r4, #0]
 80070e0:	4632      	mov	r2, r6
 80070e2:	4641      	mov	r1, r8
 80070e4:	f000 faa6 	bl	8007634 <memmove>
 80070e8:	68a3      	ldr	r3, [r4, #8]
 80070ea:	1b9b      	subs	r3, r3, r6
 80070ec:	60a3      	str	r3, [r4, #8]
 80070ee:	6823      	ldr	r3, [r4, #0]
 80070f0:	4433      	add	r3, r6
 80070f2:	6023      	str	r3, [r4, #0]
 80070f4:	2000      	movs	r0, #0
 80070f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070fa:	462a      	mov	r2, r5
 80070fc:	f000 fad2 	bl	80076a4 <_realloc_r>
 8007100:	4606      	mov	r6, r0
 8007102:	2800      	cmp	r0, #0
 8007104:	d1e0      	bne.n	80070c8 <__ssputs_r+0x5c>
 8007106:	6921      	ldr	r1, [r4, #16]
 8007108:	4650      	mov	r0, sl
 800710a:	f7ff feb7 	bl	8006e7c <_free_r>
 800710e:	230c      	movs	r3, #12
 8007110:	f8ca 3000 	str.w	r3, [sl]
 8007114:	89a3      	ldrh	r3, [r4, #12]
 8007116:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800711a:	81a3      	strh	r3, [r4, #12]
 800711c:	f04f 30ff 	mov.w	r0, #4294967295
 8007120:	e7e9      	b.n	80070f6 <__ssputs_r+0x8a>
	...

08007124 <_svfiprintf_r>:
 8007124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007128:	4698      	mov	r8, r3
 800712a:	898b      	ldrh	r3, [r1, #12]
 800712c:	061b      	lsls	r3, r3, #24
 800712e:	b09d      	sub	sp, #116	@ 0x74
 8007130:	4607      	mov	r7, r0
 8007132:	460d      	mov	r5, r1
 8007134:	4614      	mov	r4, r2
 8007136:	d510      	bpl.n	800715a <_svfiprintf_r+0x36>
 8007138:	690b      	ldr	r3, [r1, #16]
 800713a:	b973      	cbnz	r3, 800715a <_svfiprintf_r+0x36>
 800713c:	2140      	movs	r1, #64	@ 0x40
 800713e:	f7ff ff09 	bl	8006f54 <_malloc_r>
 8007142:	6028      	str	r0, [r5, #0]
 8007144:	6128      	str	r0, [r5, #16]
 8007146:	b930      	cbnz	r0, 8007156 <_svfiprintf_r+0x32>
 8007148:	230c      	movs	r3, #12
 800714a:	603b      	str	r3, [r7, #0]
 800714c:	f04f 30ff 	mov.w	r0, #4294967295
 8007150:	b01d      	add	sp, #116	@ 0x74
 8007152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007156:	2340      	movs	r3, #64	@ 0x40
 8007158:	616b      	str	r3, [r5, #20]
 800715a:	2300      	movs	r3, #0
 800715c:	9309      	str	r3, [sp, #36]	@ 0x24
 800715e:	2320      	movs	r3, #32
 8007160:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007164:	f8cd 800c 	str.w	r8, [sp, #12]
 8007168:	2330      	movs	r3, #48	@ 0x30
 800716a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007308 <_svfiprintf_r+0x1e4>
 800716e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007172:	f04f 0901 	mov.w	r9, #1
 8007176:	4623      	mov	r3, r4
 8007178:	469a      	mov	sl, r3
 800717a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800717e:	b10a      	cbz	r2, 8007184 <_svfiprintf_r+0x60>
 8007180:	2a25      	cmp	r2, #37	@ 0x25
 8007182:	d1f9      	bne.n	8007178 <_svfiprintf_r+0x54>
 8007184:	ebba 0b04 	subs.w	fp, sl, r4
 8007188:	d00b      	beq.n	80071a2 <_svfiprintf_r+0x7e>
 800718a:	465b      	mov	r3, fp
 800718c:	4622      	mov	r2, r4
 800718e:	4629      	mov	r1, r5
 8007190:	4638      	mov	r0, r7
 8007192:	f7ff ff6b 	bl	800706c <__ssputs_r>
 8007196:	3001      	adds	r0, #1
 8007198:	f000 80a7 	beq.w	80072ea <_svfiprintf_r+0x1c6>
 800719c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800719e:	445a      	add	r2, fp
 80071a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80071a2:	f89a 3000 	ldrb.w	r3, [sl]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	f000 809f 	beq.w	80072ea <_svfiprintf_r+0x1c6>
 80071ac:	2300      	movs	r3, #0
 80071ae:	f04f 32ff 	mov.w	r2, #4294967295
 80071b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071b6:	f10a 0a01 	add.w	sl, sl, #1
 80071ba:	9304      	str	r3, [sp, #16]
 80071bc:	9307      	str	r3, [sp, #28]
 80071be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80071c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80071c4:	4654      	mov	r4, sl
 80071c6:	2205      	movs	r2, #5
 80071c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071cc:	484e      	ldr	r0, [pc, #312]	@ (8007308 <_svfiprintf_r+0x1e4>)
 80071ce:	f7f8 ffdf 	bl	8000190 <memchr>
 80071d2:	9a04      	ldr	r2, [sp, #16]
 80071d4:	b9d8      	cbnz	r0, 800720e <_svfiprintf_r+0xea>
 80071d6:	06d0      	lsls	r0, r2, #27
 80071d8:	bf44      	itt	mi
 80071da:	2320      	movmi	r3, #32
 80071dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80071e0:	0711      	lsls	r1, r2, #28
 80071e2:	bf44      	itt	mi
 80071e4:	232b      	movmi	r3, #43	@ 0x2b
 80071e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80071ea:	f89a 3000 	ldrb.w	r3, [sl]
 80071ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80071f0:	d015      	beq.n	800721e <_svfiprintf_r+0xfa>
 80071f2:	9a07      	ldr	r2, [sp, #28]
 80071f4:	4654      	mov	r4, sl
 80071f6:	2000      	movs	r0, #0
 80071f8:	f04f 0c0a 	mov.w	ip, #10
 80071fc:	4621      	mov	r1, r4
 80071fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007202:	3b30      	subs	r3, #48	@ 0x30
 8007204:	2b09      	cmp	r3, #9
 8007206:	d94b      	bls.n	80072a0 <_svfiprintf_r+0x17c>
 8007208:	b1b0      	cbz	r0, 8007238 <_svfiprintf_r+0x114>
 800720a:	9207      	str	r2, [sp, #28]
 800720c:	e014      	b.n	8007238 <_svfiprintf_r+0x114>
 800720e:	eba0 0308 	sub.w	r3, r0, r8
 8007212:	fa09 f303 	lsl.w	r3, r9, r3
 8007216:	4313      	orrs	r3, r2
 8007218:	9304      	str	r3, [sp, #16]
 800721a:	46a2      	mov	sl, r4
 800721c:	e7d2      	b.n	80071c4 <_svfiprintf_r+0xa0>
 800721e:	9b03      	ldr	r3, [sp, #12]
 8007220:	1d19      	adds	r1, r3, #4
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	9103      	str	r1, [sp, #12]
 8007226:	2b00      	cmp	r3, #0
 8007228:	bfbb      	ittet	lt
 800722a:	425b      	neglt	r3, r3
 800722c:	f042 0202 	orrlt.w	r2, r2, #2
 8007230:	9307      	strge	r3, [sp, #28]
 8007232:	9307      	strlt	r3, [sp, #28]
 8007234:	bfb8      	it	lt
 8007236:	9204      	strlt	r2, [sp, #16]
 8007238:	7823      	ldrb	r3, [r4, #0]
 800723a:	2b2e      	cmp	r3, #46	@ 0x2e
 800723c:	d10a      	bne.n	8007254 <_svfiprintf_r+0x130>
 800723e:	7863      	ldrb	r3, [r4, #1]
 8007240:	2b2a      	cmp	r3, #42	@ 0x2a
 8007242:	d132      	bne.n	80072aa <_svfiprintf_r+0x186>
 8007244:	9b03      	ldr	r3, [sp, #12]
 8007246:	1d1a      	adds	r2, r3, #4
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	9203      	str	r2, [sp, #12]
 800724c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007250:	3402      	adds	r4, #2
 8007252:	9305      	str	r3, [sp, #20]
 8007254:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800730c <_svfiprintf_r+0x1e8>
 8007258:	7821      	ldrb	r1, [r4, #0]
 800725a:	2203      	movs	r2, #3
 800725c:	4650      	mov	r0, sl
 800725e:	f7f8 ff97 	bl	8000190 <memchr>
 8007262:	b138      	cbz	r0, 8007274 <_svfiprintf_r+0x150>
 8007264:	9b04      	ldr	r3, [sp, #16]
 8007266:	eba0 000a 	sub.w	r0, r0, sl
 800726a:	2240      	movs	r2, #64	@ 0x40
 800726c:	4082      	lsls	r2, r0
 800726e:	4313      	orrs	r3, r2
 8007270:	3401      	adds	r4, #1
 8007272:	9304      	str	r3, [sp, #16]
 8007274:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007278:	4825      	ldr	r0, [pc, #148]	@ (8007310 <_svfiprintf_r+0x1ec>)
 800727a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800727e:	2206      	movs	r2, #6
 8007280:	f7f8 ff86 	bl	8000190 <memchr>
 8007284:	2800      	cmp	r0, #0
 8007286:	d036      	beq.n	80072f6 <_svfiprintf_r+0x1d2>
 8007288:	4b22      	ldr	r3, [pc, #136]	@ (8007314 <_svfiprintf_r+0x1f0>)
 800728a:	bb1b      	cbnz	r3, 80072d4 <_svfiprintf_r+0x1b0>
 800728c:	9b03      	ldr	r3, [sp, #12]
 800728e:	3307      	adds	r3, #7
 8007290:	f023 0307 	bic.w	r3, r3, #7
 8007294:	3308      	adds	r3, #8
 8007296:	9303      	str	r3, [sp, #12]
 8007298:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800729a:	4433      	add	r3, r6
 800729c:	9309      	str	r3, [sp, #36]	@ 0x24
 800729e:	e76a      	b.n	8007176 <_svfiprintf_r+0x52>
 80072a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80072a4:	460c      	mov	r4, r1
 80072a6:	2001      	movs	r0, #1
 80072a8:	e7a8      	b.n	80071fc <_svfiprintf_r+0xd8>
 80072aa:	2300      	movs	r3, #0
 80072ac:	3401      	adds	r4, #1
 80072ae:	9305      	str	r3, [sp, #20]
 80072b0:	4619      	mov	r1, r3
 80072b2:	f04f 0c0a 	mov.w	ip, #10
 80072b6:	4620      	mov	r0, r4
 80072b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072bc:	3a30      	subs	r2, #48	@ 0x30
 80072be:	2a09      	cmp	r2, #9
 80072c0:	d903      	bls.n	80072ca <_svfiprintf_r+0x1a6>
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d0c6      	beq.n	8007254 <_svfiprintf_r+0x130>
 80072c6:	9105      	str	r1, [sp, #20]
 80072c8:	e7c4      	b.n	8007254 <_svfiprintf_r+0x130>
 80072ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80072ce:	4604      	mov	r4, r0
 80072d0:	2301      	movs	r3, #1
 80072d2:	e7f0      	b.n	80072b6 <_svfiprintf_r+0x192>
 80072d4:	ab03      	add	r3, sp, #12
 80072d6:	9300      	str	r3, [sp, #0]
 80072d8:	462a      	mov	r2, r5
 80072da:	4b0f      	ldr	r3, [pc, #60]	@ (8007318 <_svfiprintf_r+0x1f4>)
 80072dc:	a904      	add	r1, sp, #16
 80072de:	4638      	mov	r0, r7
 80072e0:	f3af 8000 	nop.w
 80072e4:	1c42      	adds	r2, r0, #1
 80072e6:	4606      	mov	r6, r0
 80072e8:	d1d6      	bne.n	8007298 <_svfiprintf_r+0x174>
 80072ea:	89ab      	ldrh	r3, [r5, #12]
 80072ec:	065b      	lsls	r3, r3, #25
 80072ee:	f53f af2d 	bmi.w	800714c <_svfiprintf_r+0x28>
 80072f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80072f4:	e72c      	b.n	8007150 <_svfiprintf_r+0x2c>
 80072f6:	ab03      	add	r3, sp, #12
 80072f8:	9300      	str	r3, [sp, #0]
 80072fa:	462a      	mov	r2, r5
 80072fc:	4b06      	ldr	r3, [pc, #24]	@ (8007318 <_svfiprintf_r+0x1f4>)
 80072fe:	a904      	add	r1, sp, #16
 8007300:	4638      	mov	r0, r7
 8007302:	f000 f879 	bl	80073f8 <_printf_i>
 8007306:	e7ed      	b.n	80072e4 <_svfiprintf_r+0x1c0>
 8007308:	080078e4 	.word	0x080078e4
 800730c:	080078ea 	.word	0x080078ea
 8007310:	080078ee 	.word	0x080078ee
 8007314:	00000000 	.word	0x00000000
 8007318:	0800706d 	.word	0x0800706d

0800731c <_printf_common>:
 800731c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007320:	4616      	mov	r6, r2
 8007322:	4698      	mov	r8, r3
 8007324:	688a      	ldr	r2, [r1, #8]
 8007326:	690b      	ldr	r3, [r1, #16]
 8007328:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800732c:	4293      	cmp	r3, r2
 800732e:	bfb8      	it	lt
 8007330:	4613      	movlt	r3, r2
 8007332:	6033      	str	r3, [r6, #0]
 8007334:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007338:	4607      	mov	r7, r0
 800733a:	460c      	mov	r4, r1
 800733c:	b10a      	cbz	r2, 8007342 <_printf_common+0x26>
 800733e:	3301      	adds	r3, #1
 8007340:	6033      	str	r3, [r6, #0]
 8007342:	6823      	ldr	r3, [r4, #0]
 8007344:	0699      	lsls	r1, r3, #26
 8007346:	bf42      	ittt	mi
 8007348:	6833      	ldrmi	r3, [r6, #0]
 800734a:	3302      	addmi	r3, #2
 800734c:	6033      	strmi	r3, [r6, #0]
 800734e:	6825      	ldr	r5, [r4, #0]
 8007350:	f015 0506 	ands.w	r5, r5, #6
 8007354:	d106      	bne.n	8007364 <_printf_common+0x48>
 8007356:	f104 0a19 	add.w	sl, r4, #25
 800735a:	68e3      	ldr	r3, [r4, #12]
 800735c:	6832      	ldr	r2, [r6, #0]
 800735e:	1a9b      	subs	r3, r3, r2
 8007360:	42ab      	cmp	r3, r5
 8007362:	dc26      	bgt.n	80073b2 <_printf_common+0x96>
 8007364:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007368:	6822      	ldr	r2, [r4, #0]
 800736a:	3b00      	subs	r3, #0
 800736c:	bf18      	it	ne
 800736e:	2301      	movne	r3, #1
 8007370:	0692      	lsls	r2, r2, #26
 8007372:	d42b      	bmi.n	80073cc <_printf_common+0xb0>
 8007374:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007378:	4641      	mov	r1, r8
 800737a:	4638      	mov	r0, r7
 800737c:	47c8      	blx	r9
 800737e:	3001      	adds	r0, #1
 8007380:	d01e      	beq.n	80073c0 <_printf_common+0xa4>
 8007382:	6823      	ldr	r3, [r4, #0]
 8007384:	6922      	ldr	r2, [r4, #16]
 8007386:	f003 0306 	and.w	r3, r3, #6
 800738a:	2b04      	cmp	r3, #4
 800738c:	bf02      	ittt	eq
 800738e:	68e5      	ldreq	r5, [r4, #12]
 8007390:	6833      	ldreq	r3, [r6, #0]
 8007392:	1aed      	subeq	r5, r5, r3
 8007394:	68a3      	ldr	r3, [r4, #8]
 8007396:	bf0c      	ite	eq
 8007398:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800739c:	2500      	movne	r5, #0
 800739e:	4293      	cmp	r3, r2
 80073a0:	bfc4      	itt	gt
 80073a2:	1a9b      	subgt	r3, r3, r2
 80073a4:	18ed      	addgt	r5, r5, r3
 80073a6:	2600      	movs	r6, #0
 80073a8:	341a      	adds	r4, #26
 80073aa:	42b5      	cmp	r5, r6
 80073ac:	d11a      	bne.n	80073e4 <_printf_common+0xc8>
 80073ae:	2000      	movs	r0, #0
 80073b0:	e008      	b.n	80073c4 <_printf_common+0xa8>
 80073b2:	2301      	movs	r3, #1
 80073b4:	4652      	mov	r2, sl
 80073b6:	4641      	mov	r1, r8
 80073b8:	4638      	mov	r0, r7
 80073ba:	47c8      	blx	r9
 80073bc:	3001      	adds	r0, #1
 80073be:	d103      	bne.n	80073c8 <_printf_common+0xac>
 80073c0:	f04f 30ff 	mov.w	r0, #4294967295
 80073c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073c8:	3501      	adds	r5, #1
 80073ca:	e7c6      	b.n	800735a <_printf_common+0x3e>
 80073cc:	18e1      	adds	r1, r4, r3
 80073ce:	1c5a      	adds	r2, r3, #1
 80073d0:	2030      	movs	r0, #48	@ 0x30
 80073d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80073d6:	4422      	add	r2, r4
 80073d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80073dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80073e0:	3302      	adds	r3, #2
 80073e2:	e7c7      	b.n	8007374 <_printf_common+0x58>
 80073e4:	2301      	movs	r3, #1
 80073e6:	4622      	mov	r2, r4
 80073e8:	4641      	mov	r1, r8
 80073ea:	4638      	mov	r0, r7
 80073ec:	47c8      	blx	r9
 80073ee:	3001      	adds	r0, #1
 80073f0:	d0e6      	beq.n	80073c0 <_printf_common+0xa4>
 80073f2:	3601      	adds	r6, #1
 80073f4:	e7d9      	b.n	80073aa <_printf_common+0x8e>
	...

080073f8 <_printf_i>:
 80073f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073fc:	7e0f      	ldrb	r7, [r1, #24]
 80073fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007400:	2f78      	cmp	r7, #120	@ 0x78
 8007402:	4691      	mov	r9, r2
 8007404:	4680      	mov	r8, r0
 8007406:	460c      	mov	r4, r1
 8007408:	469a      	mov	sl, r3
 800740a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800740e:	d807      	bhi.n	8007420 <_printf_i+0x28>
 8007410:	2f62      	cmp	r7, #98	@ 0x62
 8007412:	d80a      	bhi.n	800742a <_printf_i+0x32>
 8007414:	2f00      	cmp	r7, #0
 8007416:	f000 80d1 	beq.w	80075bc <_printf_i+0x1c4>
 800741a:	2f58      	cmp	r7, #88	@ 0x58
 800741c:	f000 80b8 	beq.w	8007590 <_printf_i+0x198>
 8007420:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007424:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007428:	e03a      	b.n	80074a0 <_printf_i+0xa8>
 800742a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800742e:	2b15      	cmp	r3, #21
 8007430:	d8f6      	bhi.n	8007420 <_printf_i+0x28>
 8007432:	a101      	add	r1, pc, #4	@ (adr r1, 8007438 <_printf_i+0x40>)
 8007434:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007438:	08007491 	.word	0x08007491
 800743c:	080074a5 	.word	0x080074a5
 8007440:	08007421 	.word	0x08007421
 8007444:	08007421 	.word	0x08007421
 8007448:	08007421 	.word	0x08007421
 800744c:	08007421 	.word	0x08007421
 8007450:	080074a5 	.word	0x080074a5
 8007454:	08007421 	.word	0x08007421
 8007458:	08007421 	.word	0x08007421
 800745c:	08007421 	.word	0x08007421
 8007460:	08007421 	.word	0x08007421
 8007464:	080075a3 	.word	0x080075a3
 8007468:	080074cf 	.word	0x080074cf
 800746c:	0800755d 	.word	0x0800755d
 8007470:	08007421 	.word	0x08007421
 8007474:	08007421 	.word	0x08007421
 8007478:	080075c5 	.word	0x080075c5
 800747c:	08007421 	.word	0x08007421
 8007480:	080074cf 	.word	0x080074cf
 8007484:	08007421 	.word	0x08007421
 8007488:	08007421 	.word	0x08007421
 800748c:	08007565 	.word	0x08007565
 8007490:	6833      	ldr	r3, [r6, #0]
 8007492:	1d1a      	adds	r2, r3, #4
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	6032      	str	r2, [r6, #0]
 8007498:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800749c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80074a0:	2301      	movs	r3, #1
 80074a2:	e09c      	b.n	80075de <_printf_i+0x1e6>
 80074a4:	6833      	ldr	r3, [r6, #0]
 80074a6:	6820      	ldr	r0, [r4, #0]
 80074a8:	1d19      	adds	r1, r3, #4
 80074aa:	6031      	str	r1, [r6, #0]
 80074ac:	0606      	lsls	r6, r0, #24
 80074ae:	d501      	bpl.n	80074b4 <_printf_i+0xbc>
 80074b0:	681d      	ldr	r5, [r3, #0]
 80074b2:	e003      	b.n	80074bc <_printf_i+0xc4>
 80074b4:	0645      	lsls	r5, r0, #25
 80074b6:	d5fb      	bpl.n	80074b0 <_printf_i+0xb8>
 80074b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80074bc:	2d00      	cmp	r5, #0
 80074be:	da03      	bge.n	80074c8 <_printf_i+0xd0>
 80074c0:	232d      	movs	r3, #45	@ 0x2d
 80074c2:	426d      	negs	r5, r5
 80074c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074c8:	4858      	ldr	r0, [pc, #352]	@ (800762c <_printf_i+0x234>)
 80074ca:	230a      	movs	r3, #10
 80074cc:	e011      	b.n	80074f2 <_printf_i+0xfa>
 80074ce:	6821      	ldr	r1, [r4, #0]
 80074d0:	6833      	ldr	r3, [r6, #0]
 80074d2:	0608      	lsls	r0, r1, #24
 80074d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80074d8:	d402      	bmi.n	80074e0 <_printf_i+0xe8>
 80074da:	0649      	lsls	r1, r1, #25
 80074dc:	bf48      	it	mi
 80074de:	b2ad      	uxthmi	r5, r5
 80074e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80074e2:	4852      	ldr	r0, [pc, #328]	@ (800762c <_printf_i+0x234>)
 80074e4:	6033      	str	r3, [r6, #0]
 80074e6:	bf14      	ite	ne
 80074e8:	230a      	movne	r3, #10
 80074ea:	2308      	moveq	r3, #8
 80074ec:	2100      	movs	r1, #0
 80074ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80074f2:	6866      	ldr	r6, [r4, #4]
 80074f4:	60a6      	str	r6, [r4, #8]
 80074f6:	2e00      	cmp	r6, #0
 80074f8:	db05      	blt.n	8007506 <_printf_i+0x10e>
 80074fa:	6821      	ldr	r1, [r4, #0]
 80074fc:	432e      	orrs	r6, r5
 80074fe:	f021 0104 	bic.w	r1, r1, #4
 8007502:	6021      	str	r1, [r4, #0]
 8007504:	d04b      	beq.n	800759e <_printf_i+0x1a6>
 8007506:	4616      	mov	r6, r2
 8007508:	fbb5 f1f3 	udiv	r1, r5, r3
 800750c:	fb03 5711 	mls	r7, r3, r1, r5
 8007510:	5dc7      	ldrb	r7, [r0, r7]
 8007512:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007516:	462f      	mov	r7, r5
 8007518:	42bb      	cmp	r3, r7
 800751a:	460d      	mov	r5, r1
 800751c:	d9f4      	bls.n	8007508 <_printf_i+0x110>
 800751e:	2b08      	cmp	r3, #8
 8007520:	d10b      	bne.n	800753a <_printf_i+0x142>
 8007522:	6823      	ldr	r3, [r4, #0]
 8007524:	07df      	lsls	r7, r3, #31
 8007526:	d508      	bpl.n	800753a <_printf_i+0x142>
 8007528:	6923      	ldr	r3, [r4, #16]
 800752a:	6861      	ldr	r1, [r4, #4]
 800752c:	4299      	cmp	r1, r3
 800752e:	bfde      	ittt	le
 8007530:	2330      	movle	r3, #48	@ 0x30
 8007532:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007536:	f106 36ff 	addle.w	r6, r6, #4294967295
 800753a:	1b92      	subs	r2, r2, r6
 800753c:	6122      	str	r2, [r4, #16]
 800753e:	f8cd a000 	str.w	sl, [sp]
 8007542:	464b      	mov	r3, r9
 8007544:	aa03      	add	r2, sp, #12
 8007546:	4621      	mov	r1, r4
 8007548:	4640      	mov	r0, r8
 800754a:	f7ff fee7 	bl	800731c <_printf_common>
 800754e:	3001      	adds	r0, #1
 8007550:	d14a      	bne.n	80075e8 <_printf_i+0x1f0>
 8007552:	f04f 30ff 	mov.w	r0, #4294967295
 8007556:	b004      	add	sp, #16
 8007558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800755c:	6823      	ldr	r3, [r4, #0]
 800755e:	f043 0320 	orr.w	r3, r3, #32
 8007562:	6023      	str	r3, [r4, #0]
 8007564:	4832      	ldr	r0, [pc, #200]	@ (8007630 <_printf_i+0x238>)
 8007566:	2778      	movs	r7, #120	@ 0x78
 8007568:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800756c:	6823      	ldr	r3, [r4, #0]
 800756e:	6831      	ldr	r1, [r6, #0]
 8007570:	061f      	lsls	r7, r3, #24
 8007572:	f851 5b04 	ldr.w	r5, [r1], #4
 8007576:	d402      	bmi.n	800757e <_printf_i+0x186>
 8007578:	065f      	lsls	r7, r3, #25
 800757a:	bf48      	it	mi
 800757c:	b2ad      	uxthmi	r5, r5
 800757e:	6031      	str	r1, [r6, #0]
 8007580:	07d9      	lsls	r1, r3, #31
 8007582:	bf44      	itt	mi
 8007584:	f043 0320 	orrmi.w	r3, r3, #32
 8007588:	6023      	strmi	r3, [r4, #0]
 800758a:	b11d      	cbz	r5, 8007594 <_printf_i+0x19c>
 800758c:	2310      	movs	r3, #16
 800758e:	e7ad      	b.n	80074ec <_printf_i+0xf4>
 8007590:	4826      	ldr	r0, [pc, #152]	@ (800762c <_printf_i+0x234>)
 8007592:	e7e9      	b.n	8007568 <_printf_i+0x170>
 8007594:	6823      	ldr	r3, [r4, #0]
 8007596:	f023 0320 	bic.w	r3, r3, #32
 800759a:	6023      	str	r3, [r4, #0]
 800759c:	e7f6      	b.n	800758c <_printf_i+0x194>
 800759e:	4616      	mov	r6, r2
 80075a0:	e7bd      	b.n	800751e <_printf_i+0x126>
 80075a2:	6833      	ldr	r3, [r6, #0]
 80075a4:	6825      	ldr	r5, [r4, #0]
 80075a6:	6961      	ldr	r1, [r4, #20]
 80075a8:	1d18      	adds	r0, r3, #4
 80075aa:	6030      	str	r0, [r6, #0]
 80075ac:	062e      	lsls	r6, r5, #24
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	d501      	bpl.n	80075b6 <_printf_i+0x1be>
 80075b2:	6019      	str	r1, [r3, #0]
 80075b4:	e002      	b.n	80075bc <_printf_i+0x1c4>
 80075b6:	0668      	lsls	r0, r5, #25
 80075b8:	d5fb      	bpl.n	80075b2 <_printf_i+0x1ba>
 80075ba:	8019      	strh	r1, [r3, #0]
 80075bc:	2300      	movs	r3, #0
 80075be:	6123      	str	r3, [r4, #16]
 80075c0:	4616      	mov	r6, r2
 80075c2:	e7bc      	b.n	800753e <_printf_i+0x146>
 80075c4:	6833      	ldr	r3, [r6, #0]
 80075c6:	1d1a      	adds	r2, r3, #4
 80075c8:	6032      	str	r2, [r6, #0]
 80075ca:	681e      	ldr	r6, [r3, #0]
 80075cc:	6862      	ldr	r2, [r4, #4]
 80075ce:	2100      	movs	r1, #0
 80075d0:	4630      	mov	r0, r6
 80075d2:	f7f8 fddd 	bl	8000190 <memchr>
 80075d6:	b108      	cbz	r0, 80075dc <_printf_i+0x1e4>
 80075d8:	1b80      	subs	r0, r0, r6
 80075da:	6060      	str	r0, [r4, #4]
 80075dc:	6863      	ldr	r3, [r4, #4]
 80075de:	6123      	str	r3, [r4, #16]
 80075e0:	2300      	movs	r3, #0
 80075e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075e6:	e7aa      	b.n	800753e <_printf_i+0x146>
 80075e8:	6923      	ldr	r3, [r4, #16]
 80075ea:	4632      	mov	r2, r6
 80075ec:	4649      	mov	r1, r9
 80075ee:	4640      	mov	r0, r8
 80075f0:	47d0      	blx	sl
 80075f2:	3001      	adds	r0, #1
 80075f4:	d0ad      	beq.n	8007552 <_printf_i+0x15a>
 80075f6:	6823      	ldr	r3, [r4, #0]
 80075f8:	079b      	lsls	r3, r3, #30
 80075fa:	d413      	bmi.n	8007624 <_printf_i+0x22c>
 80075fc:	68e0      	ldr	r0, [r4, #12]
 80075fe:	9b03      	ldr	r3, [sp, #12]
 8007600:	4298      	cmp	r0, r3
 8007602:	bfb8      	it	lt
 8007604:	4618      	movlt	r0, r3
 8007606:	e7a6      	b.n	8007556 <_printf_i+0x15e>
 8007608:	2301      	movs	r3, #1
 800760a:	4632      	mov	r2, r6
 800760c:	4649      	mov	r1, r9
 800760e:	4640      	mov	r0, r8
 8007610:	47d0      	blx	sl
 8007612:	3001      	adds	r0, #1
 8007614:	d09d      	beq.n	8007552 <_printf_i+0x15a>
 8007616:	3501      	adds	r5, #1
 8007618:	68e3      	ldr	r3, [r4, #12]
 800761a:	9903      	ldr	r1, [sp, #12]
 800761c:	1a5b      	subs	r3, r3, r1
 800761e:	42ab      	cmp	r3, r5
 8007620:	dcf2      	bgt.n	8007608 <_printf_i+0x210>
 8007622:	e7eb      	b.n	80075fc <_printf_i+0x204>
 8007624:	2500      	movs	r5, #0
 8007626:	f104 0619 	add.w	r6, r4, #25
 800762a:	e7f5      	b.n	8007618 <_printf_i+0x220>
 800762c:	080078f5 	.word	0x080078f5
 8007630:	08007906 	.word	0x08007906

08007634 <memmove>:
 8007634:	4288      	cmp	r0, r1
 8007636:	b510      	push	{r4, lr}
 8007638:	eb01 0402 	add.w	r4, r1, r2
 800763c:	d902      	bls.n	8007644 <memmove+0x10>
 800763e:	4284      	cmp	r4, r0
 8007640:	4623      	mov	r3, r4
 8007642:	d807      	bhi.n	8007654 <memmove+0x20>
 8007644:	1e43      	subs	r3, r0, #1
 8007646:	42a1      	cmp	r1, r4
 8007648:	d008      	beq.n	800765c <memmove+0x28>
 800764a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800764e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007652:	e7f8      	b.n	8007646 <memmove+0x12>
 8007654:	4402      	add	r2, r0
 8007656:	4601      	mov	r1, r0
 8007658:	428a      	cmp	r2, r1
 800765a:	d100      	bne.n	800765e <memmove+0x2a>
 800765c:	bd10      	pop	{r4, pc}
 800765e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007662:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007666:	e7f7      	b.n	8007658 <memmove+0x24>

08007668 <_sbrk_r>:
 8007668:	b538      	push	{r3, r4, r5, lr}
 800766a:	4d06      	ldr	r5, [pc, #24]	@ (8007684 <_sbrk_r+0x1c>)
 800766c:	2300      	movs	r3, #0
 800766e:	4604      	mov	r4, r0
 8007670:	4608      	mov	r0, r1
 8007672:	602b      	str	r3, [r5, #0]
 8007674:	f7f9 fc0e 	bl	8000e94 <_sbrk>
 8007678:	1c43      	adds	r3, r0, #1
 800767a:	d102      	bne.n	8007682 <_sbrk_r+0x1a>
 800767c:	682b      	ldr	r3, [r5, #0]
 800767e:	b103      	cbz	r3, 8007682 <_sbrk_r+0x1a>
 8007680:	6023      	str	r3, [r4, #0]
 8007682:	bd38      	pop	{r3, r4, r5, pc}
 8007684:	200005b0 	.word	0x200005b0

08007688 <memcpy>:
 8007688:	440a      	add	r2, r1
 800768a:	4291      	cmp	r1, r2
 800768c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007690:	d100      	bne.n	8007694 <memcpy+0xc>
 8007692:	4770      	bx	lr
 8007694:	b510      	push	{r4, lr}
 8007696:	f811 4b01 	ldrb.w	r4, [r1], #1
 800769a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800769e:	4291      	cmp	r1, r2
 80076a0:	d1f9      	bne.n	8007696 <memcpy+0xe>
 80076a2:	bd10      	pop	{r4, pc}

080076a4 <_realloc_r>:
 80076a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076a8:	4607      	mov	r7, r0
 80076aa:	4614      	mov	r4, r2
 80076ac:	460d      	mov	r5, r1
 80076ae:	b921      	cbnz	r1, 80076ba <_realloc_r+0x16>
 80076b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076b4:	4611      	mov	r1, r2
 80076b6:	f7ff bc4d 	b.w	8006f54 <_malloc_r>
 80076ba:	b92a      	cbnz	r2, 80076c8 <_realloc_r+0x24>
 80076bc:	f7ff fbde 	bl	8006e7c <_free_r>
 80076c0:	4625      	mov	r5, r4
 80076c2:	4628      	mov	r0, r5
 80076c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076c8:	f000 f81a 	bl	8007700 <_malloc_usable_size_r>
 80076cc:	4284      	cmp	r4, r0
 80076ce:	4606      	mov	r6, r0
 80076d0:	d802      	bhi.n	80076d8 <_realloc_r+0x34>
 80076d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80076d6:	d8f4      	bhi.n	80076c2 <_realloc_r+0x1e>
 80076d8:	4621      	mov	r1, r4
 80076da:	4638      	mov	r0, r7
 80076dc:	f7ff fc3a 	bl	8006f54 <_malloc_r>
 80076e0:	4680      	mov	r8, r0
 80076e2:	b908      	cbnz	r0, 80076e8 <_realloc_r+0x44>
 80076e4:	4645      	mov	r5, r8
 80076e6:	e7ec      	b.n	80076c2 <_realloc_r+0x1e>
 80076e8:	42b4      	cmp	r4, r6
 80076ea:	4622      	mov	r2, r4
 80076ec:	4629      	mov	r1, r5
 80076ee:	bf28      	it	cs
 80076f0:	4632      	movcs	r2, r6
 80076f2:	f7ff ffc9 	bl	8007688 <memcpy>
 80076f6:	4629      	mov	r1, r5
 80076f8:	4638      	mov	r0, r7
 80076fa:	f7ff fbbf 	bl	8006e7c <_free_r>
 80076fe:	e7f1      	b.n	80076e4 <_realloc_r+0x40>

08007700 <_malloc_usable_size_r>:
 8007700:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007704:	1f18      	subs	r0, r3, #4
 8007706:	2b00      	cmp	r3, #0
 8007708:	bfbc      	itt	lt
 800770a:	580b      	ldrlt	r3, [r1, r0]
 800770c:	18c0      	addlt	r0, r0, r3
 800770e:	4770      	bx	lr

08007710 <_init>:
 8007710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007712:	bf00      	nop
 8007714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007716:	bc08      	pop	{r3}
 8007718:	469e      	mov	lr, r3
 800771a:	4770      	bx	lr

0800771c <_fini>:
 800771c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800771e:	bf00      	nop
 8007720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007722:	bc08      	pop	{r3}
 8007724:	469e      	mov	lr, r3
 8007726:	4770      	bx	lr
