
STM32_SubGHz_LoRa_Messenger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bd8  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08005d18  08005d18  00006d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e88  08005e88  0000706c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005e88  08005e88  00006e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e90  08005e90  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e90  08005e90  00006e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005e94  08005e94  00006e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005e98  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000518  2000006c  08005f04  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000584  08005f04  00007584  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000143b7  00000000  00000000  00007096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003140  00000000  00000000  0001b44d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001478  00000000  00000000  0001e590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f76  00000000  00000000  0001fa08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e004  00000000  00000000  0002097e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013e69  00000000  00000000  0003e982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6620  00000000  00000000  000527eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00108e0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059b0  00000000  00000000  00108e50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0010e800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000006c 	.word	0x2000006c
 800015c:	00000000 	.word	0x00000000
 8000160:	08005d00 	.word	0x08005d00

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000070 	.word	0x20000070
 800017c:	08005d00 	.word	0x08005d00

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b988 	b.w	8000558 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	468e      	mov	lr, r1
 8000268:	4604      	mov	r4, r0
 800026a:	4688      	mov	r8, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14a      	bne.n	8000306 <__udivmoddi4+0xa6>
 8000270:	428a      	cmp	r2, r1
 8000272:	4617      	mov	r7, r2
 8000274:	d962      	bls.n	800033c <__udivmoddi4+0xdc>
 8000276:	fab2 f682 	clz	r6, r2
 800027a:	b14e      	cbz	r6, 8000290 <__udivmoddi4+0x30>
 800027c:	f1c6 0320 	rsb	r3, r6, #32
 8000280:	fa01 f806 	lsl.w	r8, r1, r6
 8000284:	fa20 f303 	lsr.w	r3, r0, r3
 8000288:	40b7      	lsls	r7, r6
 800028a:	ea43 0808 	orr.w	r8, r3, r8
 800028e:	40b4      	lsls	r4, r6
 8000290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000294:	fa1f fc87 	uxth.w	ip, r7
 8000298:	fbb8 f1fe 	udiv	r1, r8, lr
 800029c:	0c23      	lsrs	r3, r4, #16
 800029e:	fb0e 8811 	mls	r8, lr, r1, r8
 80002a2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a6:	fb01 f20c 	mul.w	r2, r1, ip
 80002aa:	429a      	cmp	r2, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x62>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002b4:	f080 80ea 	bcs.w	800048c <__udivmoddi4+0x22c>
 80002b8:	429a      	cmp	r2, r3
 80002ba:	f240 80e7 	bls.w	800048c <__udivmoddi4+0x22c>
 80002be:	3902      	subs	r1, #2
 80002c0:	443b      	add	r3, r7
 80002c2:	1a9a      	subs	r2, r3, r2
 80002c4:	b2a3      	uxth	r3, r4
 80002c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002d2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d6:	459c      	cmp	ip, r3
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0x8e>
 80002da:	18fb      	adds	r3, r7, r3
 80002dc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e0:	f080 80d6 	bcs.w	8000490 <__udivmoddi4+0x230>
 80002e4:	459c      	cmp	ip, r3
 80002e6:	f240 80d3 	bls.w	8000490 <__udivmoddi4+0x230>
 80002ea:	443b      	add	r3, r7
 80002ec:	3802      	subs	r0, #2
 80002ee:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f2:	eba3 030c 	sub.w	r3, r3, ip
 80002f6:	2100      	movs	r1, #0
 80002f8:	b11d      	cbz	r5, 8000302 <__udivmoddi4+0xa2>
 80002fa:	40f3      	lsrs	r3, r6
 80002fc:	2200      	movs	r2, #0
 80002fe:	e9c5 3200 	strd	r3, r2, [r5]
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	428b      	cmp	r3, r1
 8000308:	d905      	bls.n	8000316 <__udivmoddi4+0xb6>
 800030a:	b10d      	cbz	r5, 8000310 <__udivmoddi4+0xb0>
 800030c:	e9c5 0100 	strd	r0, r1, [r5]
 8000310:	2100      	movs	r1, #0
 8000312:	4608      	mov	r0, r1
 8000314:	e7f5      	b.n	8000302 <__udivmoddi4+0xa2>
 8000316:	fab3 f183 	clz	r1, r3
 800031a:	2900      	cmp	r1, #0
 800031c:	d146      	bne.n	80003ac <__udivmoddi4+0x14c>
 800031e:	4573      	cmp	r3, lr
 8000320:	d302      	bcc.n	8000328 <__udivmoddi4+0xc8>
 8000322:	4282      	cmp	r2, r0
 8000324:	f200 8105 	bhi.w	8000532 <__udivmoddi4+0x2d2>
 8000328:	1a84      	subs	r4, r0, r2
 800032a:	eb6e 0203 	sbc.w	r2, lr, r3
 800032e:	2001      	movs	r0, #1
 8000330:	4690      	mov	r8, r2
 8000332:	2d00      	cmp	r5, #0
 8000334:	d0e5      	beq.n	8000302 <__udivmoddi4+0xa2>
 8000336:	e9c5 4800 	strd	r4, r8, [r5]
 800033a:	e7e2      	b.n	8000302 <__udivmoddi4+0xa2>
 800033c:	2a00      	cmp	r2, #0
 800033e:	f000 8090 	beq.w	8000462 <__udivmoddi4+0x202>
 8000342:	fab2 f682 	clz	r6, r2
 8000346:	2e00      	cmp	r6, #0
 8000348:	f040 80a4 	bne.w	8000494 <__udivmoddi4+0x234>
 800034c:	1a8a      	subs	r2, r1, r2
 800034e:	0c03      	lsrs	r3, r0, #16
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	b280      	uxth	r0, r0
 8000356:	b2bc      	uxth	r4, r7
 8000358:	2101      	movs	r1, #1
 800035a:	fbb2 fcfe 	udiv	ip, r2, lr
 800035e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000362:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000366:	fb04 f20c 	mul.w	r2, r4, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d907      	bls.n	800037e <__udivmoddi4+0x11e>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000374:	d202      	bcs.n	800037c <__udivmoddi4+0x11c>
 8000376:	429a      	cmp	r2, r3
 8000378:	f200 80e0 	bhi.w	800053c <__udivmoddi4+0x2dc>
 800037c:	46c4      	mov	ip, r8
 800037e:	1a9b      	subs	r3, r3, r2
 8000380:	fbb3 f2fe 	udiv	r2, r3, lr
 8000384:	fb0e 3312 	mls	r3, lr, r2, r3
 8000388:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800038c:	fb02 f404 	mul.w	r4, r2, r4
 8000390:	429c      	cmp	r4, r3
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0x144>
 8000394:	18fb      	adds	r3, r7, r3
 8000396:	f102 30ff 	add.w	r0, r2, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x142>
 800039c:	429c      	cmp	r4, r3
 800039e:	f200 80ca 	bhi.w	8000536 <__udivmoddi4+0x2d6>
 80003a2:	4602      	mov	r2, r0
 80003a4:	1b1b      	subs	r3, r3, r4
 80003a6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003aa:	e7a5      	b.n	80002f8 <__udivmoddi4+0x98>
 80003ac:	f1c1 0620 	rsb	r6, r1, #32
 80003b0:	408b      	lsls	r3, r1
 80003b2:	fa22 f706 	lsr.w	r7, r2, r6
 80003b6:	431f      	orrs	r7, r3
 80003b8:	fa0e f401 	lsl.w	r4, lr, r1
 80003bc:	fa20 f306 	lsr.w	r3, r0, r6
 80003c0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003c4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003c8:	4323      	orrs	r3, r4
 80003ca:	fa00 f801 	lsl.w	r8, r0, r1
 80003ce:	fa1f fc87 	uxth.w	ip, r7
 80003d2:	fbbe f0f9 	udiv	r0, lr, r9
 80003d6:	0c1c      	lsrs	r4, r3, #16
 80003d8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003dc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003e0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ea:	d909      	bls.n	8000400 <__udivmoddi4+0x1a0>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 3aff 	add.w	sl, r0, #4294967295
 80003f2:	f080 809c 	bcs.w	800052e <__udivmoddi4+0x2ce>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f240 8099 	bls.w	800052e <__udivmoddi4+0x2ce>
 80003fc:	3802      	subs	r0, #2
 80003fe:	443c      	add	r4, r7
 8000400:	eba4 040e 	sub.w	r4, r4, lr
 8000404:	fa1f fe83 	uxth.w	lr, r3
 8000408:	fbb4 f3f9 	udiv	r3, r4, r9
 800040c:	fb09 4413 	mls	r4, r9, r3, r4
 8000410:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000414:	fb03 fc0c 	mul.w	ip, r3, ip
 8000418:	45a4      	cmp	ip, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x1ce>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000422:	f080 8082 	bcs.w	800052a <__udivmoddi4+0x2ca>
 8000426:	45a4      	cmp	ip, r4
 8000428:	d97f      	bls.n	800052a <__udivmoddi4+0x2ca>
 800042a:	3b02      	subs	r3, #2
 800042c:	443c      	add	r4, r7
 800042e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000432:	eba4 040c 	sub.w	r4, r4, ip
 8000436:	fba0 ec02 	umull	lr, ip, r0, r2
 800043a:	4564      	cmp	r4, ip
 800043c:	4673      	mov	r3, lr
 800043e:	46e1      	mov	r9, ip
 8000440:	d362      	bcc.n	8000508 <__udivmoddi4+0x2a8>
 8000442:	d05f      	beq.n	8000504 <__udivmoddi4+0x2a4>
 8000444:	b15d      	cbz	r5, 800045e <__udivmoddi4+0x1fe>
 8000446:	ebb8 0203 	subs.w	r2, r8, r3
 800044a:	eb64 0409 	sbc.w	r4, r4, r9
 800044e:	fa04 f606 	lsl.w	r6, r4, r6
 8000452:	fa22 f301 	lsr.w	r3, r2, r1
 8000456:	431e      	orrs	r6, r3
 8000458:	40cc      	lsrs	r4, r1
 800045a:	e9c5 6400 	strd	r6, r4, [r5]
 800045e:	2100      	movs	r1, #0
 8000460:	e74f      	b.n	8000302 <__udivmoddi4+0xa2>
 8000462:	fbb1 fcf2 	udiv	ip, r1, r2
 8000466:	0c01      	lsrs	r1, r0, #16
 8000468:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800046c:	b280      	uxth	r0, r0
 800046e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000472:	463b      	mov	r3, r7
 8000474:	4638      	mov	r0, r7
 8000476:	463c      	mov	r4, r7
 8000478:	46b8      	mov	r8, r7
 800047a:	46be      	mov	lr, r7
 800047c:	2620      	movs	r6, #32
 800047e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000482:	eba2 0208 	sub.w	r2, r2, r8
 8000486:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800048a:	e766      	b.n	800035a <__udivmoddi4+0xfa>
 800048c:	4601      	mov	r1, r0
 800048e:	e718      	b.n	80002c2 <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e72c      	b.n	80002ee <__udivmoddi4+0x8e>
 8000494:	f1c6 0220 	rsb	r2, r6, #32
 8000498:	fa2e f302 	lsr.w	r3, lr, r2
 800049c:	40b7      	lsls	r7, r6
 800049e:	40b1      	lsls	r1, r6
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	430a      	orrs	r2, r1
 80004aa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ae:	b2bc      	uxth	r4, r7
 80004b0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004b4:	0c11      	lsrs	r1, r2, #16
 80004b6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ba:	fb08 f904 	mul.w	r9, r8, r4
 80004be:	40b0      	lsls	r0, r6
 80004c0:	4589      	cmp	r9, r1
 80004c2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004c6:	b280      	uxth	r0, r0
 80004c8:	d93e      	bls.n	8000548 <__udivmoddi4+0x2e8>
 80004ca:	1879      	adds	r1, r7, r1
 80004cc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004d0:	d201      	bcs.n	80004d6 <__udivmoddi4+0x276>
 80004d2:	4589      	cmp	r9, r1
 80004d4:	d81f      	bhi.n	8000516 <__udivmoddi4+0x2b6>
 80004d6:	eba1 0109 	sub.w	r1, r1, r9
 80004da:	fbb1 f9fe 	udiv	r9, r1, lr
 80004de:	fb09 f804 	mul.w	r8, r9, r4
 80004e2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004e6:	b292      	uxth	r2, r2
 80004e8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004ec:	4542      	cmp	r2, r8
 80004ee:	d229      	bcs.n	8000544 <__udivmoddi4+0x2e4>
 80004f0:	18ba      	adds	r2, r7, r2
 80004f2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004f6:	d2c4      	bcs.n	8000482 <__udivmoddi4+0x222>
 80004f8:	4542      	cmp	r2, r8
 80004fa:	d2c2      	bcs.n	8000482 <__udivmoddi4+0x222>
 80004fc:	f1a9 0102 	sub.w	r1, r9, #2
 8000500:	443a      	add	r2, r7
 8000502:	e7be      	b.n	8000482 <__udivmoddi4+0x222>
 8000504:	45f0      	cmp	r8, lr
 8000506:	d29d      	bcs.n	8000444 <__udivmoddi4+0x1e4>
 8000508:	ebbe 0302 	subs.w	r3, lr, r2
 800050c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000510:	3801      	subs	r0, #1
 8000512:	46e1      	mov	r9, ip
 8000514:	e796      	b.n	8000444 <__udivmoddi4+0x1e4>
 8000516:	eba7 0909 	sub.w	r9, r7, r9
 800051a:	4449      	add	r1, r9
 800051c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000520:	fbb1 f9fe 	udiv	r9, r1, lr
 8000524:	fb09 f804 	mul.w	r8, r9, r4
 8000528:	e7db      	b.n	80004e2 <__udivmoddi4+0x282>
 800052a:	4673      	mov	r3, lr
 800052c:	e77f      	b.n	800042e <__udivmoddi4+0x1ce>
 800052e:	4650      	mov	r0, sl
 8000530:	e766      	b.n	8000400 <__udivmoddi4+0x1a0>
 8000532:	4608      	mov	r0, r1
 8000534:	e6fd      	b.n	8000332 <__udivmoddi4+0xd2>
 8000536:	443b      	add	r3, r7
 8000538:	3a02      	subs	r2, #2
 800053a:	e733      	b.n	80003a4 <__udivmoddi4+0x144>
 800053c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000540:	443b      	add	r3, r7
 8000542:	e71c      	b.n	800037e <__udivmoddi4+0x11e>
 8000544:	4649      	mov	r1, r9
 8000546:	e79c      	b.n	8000482 <__udivmoddi4+0x222>
 8000548:	eba1 0109 	sub.w	r1, r1, r9
 800054c:	46c4      	mov	ip, r8
 800054e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000552:	fb09 f804 	mul.w	r8, r9, r4
 8000556:	e7c4      	b.n	80004e2 <__udivmoddi4+0x282>

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000568:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800056a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4313      	orrs	r3, r2
 8000572:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000574:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000578:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4013      	ands	r3, r2
 800057e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000580:	68fb      	ldr	r3, [r7, #12]
}
 8000582:	bf00      	nop
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr

0800058c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a0:	2004      	movs	r0, #4
 80005a2:	f7ff ffdb 	bl	800055c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	2001      	movs	r0, #1
 80005a8:	f7ff ffd8 	bl	800055c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2138      	movs	r1, #56	@ 0x38
 80005b0:	4809      	ldr	r0, [pc, #36]	@ (80005d8 <MX_GPIO_Init+0x4c>)
 80005b2:	f000 ff73 	bl	800149c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 80005b6:	2338      	movs	r3, #56	@ 0x38
 80005b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ba:	2301      	movs	r3, #1
 80005bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005c2:	2303      	movs	r3, #3
 80005c4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	4619      	mov	r1, r3
 80005ca:	4803      	ldr	r0, [pc, #12]	@ (80005d8 <MX_GPIO_Init+0x4c>)
 80005cc:	f000 fe06 	bl	80011dc <HAL_GPIO_Init>

}
 80005d0:	bf00      	nop
 80005d2:	3718      	adds	r7, #24
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	48000800 	.word	0x48000800

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 fbbe 	bl	8000d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f84c 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f7ff ffd0 	bl	800058c <MX_GPIO_Init>
  MX_SUBGHZ_Init();
 80005ec:	f000 f970 	bl	80008d0 <MX_SUBGHZ_Init>
  MX_USART2_UART_Init();
 80005f0:	f000 fa00 	bl	80009f4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  BSP_LED_Init(LED_BLUE);
 80005f4:	2000      	movs	r0, #0
 80005f6:	f000 fad9 	bl	8000bac <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 80005fa:	2001      	movs	r0, #1
 80005fc:	f000 fad6 	bl	8000bac <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000600:	2002      	movs	r0, #2
 8000602:	f000 fad3 	bl	8000bac <BSP_LED_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  snprintf((char*)buffer, MAX_BUFFER_SIZE, "\r\nSTM32 SubGHz LoRa Messenger\r\n\r\nPlease Enter an ID: ");
 8000606:	4a14      	ldr	r2, [pc, #80]	@ (8000658 <main+0x7c>)
 8000608:	21ff      	movs	r1, #255	@ 0xff
 800060a:	4814      	ldr	r0, [pc, #80]	@ (800065c <main+0x80>)
 800060c:	f004 fea2 	bl	8005354 <sniprintf>
  UART_Transmit((char*)buffer);
 8000610:	4812      	ldr	r0, [pc, #72]	@ (800065c <main+0x80>)
 8000612:	f000 f887 	bl	8000724 <UART_Transmit>
  while(!messageReady)HAL_UART_Receive_IT(&huart2, input, 1);
 8000616:	e004      	b.n	8000622 <main+0x46>
 8000618:	2201      	movs	r2, #1
 800061a:	4911      	ldr	r1, [pc, #68]	@ (8000660 <main+0x84>)
 800061c:	4811      	ldr	r0, [pc, #68]	@ (8000664 <main+0x88>)
 800061e:	f002 fedb 	bl	80033d8 <HAL_UART_Receive_IT>
 8000622:	4b11      	ldr	r3, [pc, #68]	@ (8000668 <main+0x8c>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	f083 0301 	eor.w	r3, r3, #1
 800062a:	b2db      	uxtb	r3, r3
 800062c:	2b00      	cmp	r3, #0
 800062e:	d1f3      	bne.n	8000618 <main+0x3c>
  messageReady = false;
 8000630:	4b0d      	ldr	r3, [pc, #52]	@ (8000668 <main+0x8c>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
  idLen = snprintf(id, MAX_BUFFER_SIZE, "%s", (char*)output);
 8000636:	4b0d      	ldr	r3, [pc, #52]	@ (800066c <main+0x90>)
 8000638:	4a0d      	ldr	r2, [pc, #52]	@ (8000670 <main+0x94>)
 800063a:	21ff      	movs	r1, #255	@ 0xff
 800063c:	480d      	ldr	r0, [pc, #52]	@ (8000674 <main+0x98>)
 800063e:	f004 fe89 	bl	8005354 <sniprintf>
 8000642:	4603      	mov	r3, r0
 8000644:	4a0c      	ldr	r2, [pc, #48]	@ (8000678 <main+0x9c>)
 8000646:	6013      	str	r3, [r2, #0]

  UART_Transmit("Your ID: ");
 8000648:	480c      	ldr	r0, [pc, #48]	@ (800067c <main+0xa0>)
 800064a:	f000 f86b 	bl	8000724 <UART_Transmit>
  UART_Transmit(id);
 800064e:	4809      	ldr	r0, [pc, #36]	@ (8000674 <main+0x98>)
 8000650:	f000 f868 	bl	8000724 <UART_Transmit>

  while (1)
 8000654:	bf00      	nop
 8000656:	e7fd      	b.n	8000654 <main+0x78>
 8000658:	08005d18 	.word	0x08005d18
 800065c:	20000088 	.word	0x20000088
 8000660:	20000288 	.word	0x20000288
 8000664:	200003a0 	.word	0x200003a0
 8000668:	2000028c 	.word	0x2000028c
 800066c:	20000188 	.word	0x20000188
 8000670:	08005d50 	.word	0x08005d50
 8000674:	20000290 	.word	0x20000290
 8000678:	20000000 	.word	0x20000000
 800067c:	08005d54 	.word	0x08005d54

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b09a      	sub	sp, #104	@ 0x68
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0320 	add.w	r3, r7, #32
 800068a:	2248      	movs	r2, #72	@ 0x48
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f004 feb8 	bl	8005404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]
 80006a2:	615a      	str	r2, [r3, #20]
 80006a4:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000720 <SystemClock_Config+0xa0>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80006ae:	4a1c      	ldr	r2, [pc, #112]	@ (8000720 <SystemClock_Config+0xa0>)
 80006b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006b4:	6013      	str	r3, [r2, #0]
 80006b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000720 <SystemClock_Config+0xa0>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006c2:	2320      	movs	r3, #32
 80006c4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006c6:	2301      	movs	r3, #1
 80006c8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006ca:	2300      	movs	r3, #0
 80006cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80006ce:	23b0      	movs	r3, #176	@ 0xb0
 80006d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006d2:	2300      	movs	r3, #0
 80006d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d6:	f107 0320 	add.w	r3, r7, #32
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 f9c8 	bl	8001a70 <HAL_RCC_OscConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80006e6:	f000 f88f 	bl	8000808 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80006ea:	234f      	movs	r3, #79	@ 0x4f
 80006ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2102      	movs	r1, #2
 8000706:	4618      	mov	r0, r3
 8000708:	f001 fd34 	bl	8002174 <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000712:	f000 f879 	bl	8000808 <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	3768      	adds	r7, #104	@ 0x68
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	58000400 	.word	0x58000400

08000724 <UART_Transmit>:

/* USER CODE BEGIN 4 */

void UART_Transmit(const char* string){
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)string, strlen(string), HAL_MAX_DELAY);
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f7ff fd27 	bl	8000180 <strlen>
 8000732:	4603      	mov	r3, r0
 8000734:	b29a      	uxth	r2, r3
 8000736:	f04f 33ff 	mov.w	r3, #4294967295
 800073a:	6879      	ldr	r1, [r7, #4]
 800073c:	4803      	ldr	r0, [pc, #12]	@ (800074c <UART_Transmit+0x28>)
 800073e:	f002 fdc4 	bl	80032ca <HAL_UART_Transmit>
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	200003a0 	.word	0x200003a0

08000750 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
	switch(input[0]){
 8000758:	4b22      	ldr	r3, [pc, #136]	@ (80007e4 <HAL_UART_RxCpltCallback+0x94>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b08      	cmp	r3, #8
 800075e:	d013      	beq.n	8000788 <HAL_UART_RxCpltCallback+0x38>
 8000760:	2b0d      	cmp	r3, #13
 8000762:	d123      	bne.n	80007ac <HAL_UART_RxCpltCallback+0x5c>
		case 0x0d:
			UART_Transmit("\r\n");
 8000764:	4820      	ldr	r0, [pc, #128]	@ (80007e8 <HAL_UART_RxCpltCallback+0x98>)
 8000766:	f7ff ffdd 	bl	8000724 <UART_Transmit>
			sprintf((char*)output, "%s", (char*)buffer);
 800076a:	4a20      	ldr	r2, [pc, #128]	@ (80007ec <HAL_UART_RxCpltCallback+0x9c>)
 800076c:	4920      	ldr	r1, [pc, #128]	@ (80007f0 <HAL_UART_RxCpltCallback+0xa0>)
 800076e:	4821      	ldr	r0, [pc, #132]	@ (80007f4 <HAL_UART_RxCpltCallback+0xa4>)
 8000770:	f004 fe26 	bl	80053c0 <siprintf>
			output[count] = '\0';
 8000774:	4b20      	ldr	r3, [pc, #128]	@ (80007f8 <HAL_UART_RxCpltCallback+0xa8>)
 8000776:	881b      	ldrh	r3, [r3, #0]
 8000778:	461a      	mov	r2, r3
 800077a:	4b1e      	ldr	r3, [pc, #120]	@ (80007f4 <HAL_UART_RxCpltCallback+0xa4>)
 800077c:	2100      	movs	r1, #0
 800077e:	5499      	strb	r1, [r3, r2]
			messageReady = true;
 8000780:	4b1e      	ldr	r3, [pc, #120]	@ (80007fc <HAL_UART_RxCpltCallback+0xac>)
 8000782:	2201      	movs	r2, #1
 8000784:	701a      	strb	r2, [r3, #0]
			break;
 8000786:	e029      	b.n	80007dc <HAL_UART_RxCpltCallback+0x8c>

		case 0x08:
			if(count > (idLen + 2)){
 8000788:	4b1b      	ldr	r3, [pc, #108]	@ (80007f8 <HAL_UART_RxCpltCallback+0xa8>)
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	461a      	mov	r2, r3
 800078e:	4b1c      	ldr	r3, [pc, #112]	@ (8000800 <HAL_UART_RxCpltCallback+0xb0>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	3302      	adds	r3, #2
 8000794:	429a      	cmp	r2, r3
 8000796:	dd20      	ble.n	80007da <HAL_UART_RxCpltCallback+0x8a>
				count--;
 8000798:	4b17      	ldr	r3, [pc, #92]	@ (80007f8 <HAL_UART_RxCpltCallback+0xa8>)
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	3b01      	subs	r3, #1
 800079e:	b29a      	uxth	r2, r3
 80007a0:	4b15      	ldr	r3, [pc, #84]	@ (80007f8 <HAL_UART_RxCpltCallback+0xa8>)
 80007a2:	801a      	strh	r2, [r3, #0]
				UART_Transmit("\b \b");
 80007a4:	4817      	ldr	r0, [pc, #92]	@ (8000804 <HAL_UART_RxCpltCallback+0xb4>)
 80007a6:	f7ff ffbd 	bl	8000724 <UART_Transmit>
			}
			break;
 80007aa:	e016      	b.n	80007da <HAL_UART_RxCpltCallback+0x8a>

		default:
			if(count < MAX_BUFFER_SIZE){
 80007ac:	4b12      	ldr	r3, [pc, #72]	@ (80007f8 <HAL_UART_RxCpltCallback+0xa8>)
 80007ae:	881b      	ldrh	r3, [r3, #0]
 80007b0:	2bfe      	cmp	r3, #254	@ 0xfe
 80007b2:	d813      	bhi.n	80007dc <HAL_UART_RxCpltCallback+0x8c>
				buffer[count++] = input[0];
 80007b4:	4b10      	ldr	r3, [pc, #64]	@ (80007f8 <HAL_UART_RxCpltCallback+0xa8>)
 80007b6:	881b      	ldrh	r3, [r3, #0]
 80007b8:	1c5a      	adds	r2, r3, #1
 80007ba:	b291      	uxth	r1, r2
 80007bc:	4a0e      	ldr	r2, [pc, #56]	@ (80007f8 <HAL_UART_RxCpltCallback+0xa8>)
 80007be:	8011      	strh	r1, [r2, #0]
 80007c0:	461a      	mov	r2, r3
 80007c2:	4b08      	ldr	r3, [pc, #32]	@ (80007e4 <HAL_UART_RxCpltCallback+0x94>)
 80007c4:	7819      	ldrb	r1, [r3, #0]
 80007c6:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <HAL_UART_RxCpltCallback+0x9c>)
 80007c8:	5499      	strb	r1, [r3, r2]
				HAL_UART_Transmit(huart, input, 1, HAL_MAX_DELAY);
 80007ca:	f04f 33ff 	mov.w	r3, #4294967295
 80007ce:	2201      	movs	r2, #1
 80007d0:	4904      	ldr	r1, [pc, #16]	@ (80007e4 <HAL_UART_RxCpltCallback+0x94>)
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f002 fd79 	bl	80032ca <HAL_UART_Transmit>
			}
	}
}
 80007d8:	e000      	b.n	80007dc <HAL_UART_RxCpltCallback+0x8c>
			break;
 80007da:	bf00      	nop
}
 80007dc:	bf00      	nop
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000288 	.word	0x20000288
 80007e8:	08005d60 	.word	0x08005d60
 80007ec:	20000088 	.word	0x20000088
 80007f0:	08005d50 	.word	0x08005d50
 80007f4:	20000188 	.word	0x20000188
 80007f8:	2000028a 	.word	0x2000028a
 80007fc:	2000028c 	.word	0x2000028c
 8000800:	20000000 	.word	0x20000000
 8000804:	08005d64 	.word	0x08005d64

08000808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800080c:	b672      	cpsid	i
}
 800080e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000810:	bf00      	nop
 8000812:	e7fd      	b.n	8000810 <Error_Handler+0x8>

08000814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr

08000820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <NMI_Handler+0x4>

08000828 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <HardFault_Handler+0x4>

08000830 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000834:	bf00      	nop
 8000836:	e7fd      	b.n	8000834 <MemManage_Handler+0x4>

08000838 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800083c:	bf00      	nop
 800083e:	e7fd      	b.n	800083c <BusFault_Handler+0x4>

08000840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000844:	bf00      	nop
 8000846:	e7fd      	b.n	8000844 <UsageFault_Handler+0x4>

08000848 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr

08000854 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr

08000860 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr

0800086c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000870:	f000 fad0 	bl	8000e14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}

08000878 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800087c:	4802      	ldr	r0, [pc, #8]	@ (8000888 <USART2_IRQHandler+0x10>)
 800087e:	f002 fdf7 	bl	8003470 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	200003a0 	.word	0x200003a0

0800088c <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000890:	4802      	ldr	r0, [pc, #8]	@ (800089c <SUBGHZ_Radio_IRQHandler+0x10>)
 8000892:	f002 fafa 	bl	8002e8a <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000390 	.word	0x20000390

080008a0 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80008a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008ac:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80008ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4313      	orrs	r3, r2
 80008b6:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80008b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008bc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4013      	ands	r3, r2
 80008c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008c4:	68fb      	ldr	r3, [r7, #12]
}
 80008c6:	bf00      	nop
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr

080008d0 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80008d4:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <MX_SUBGHZ_Init+0x20>)
 80008d6:	2208      	movs	r2, #8
 80008d8:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80008da:	4805      	ldr	r0, [pc, #20]	@ (80008f0 <MX_SUBGHZ_Init+0x20>)
 80008dc:	f002 f9be 	bl	8002c5c <HAL_SUBGHZ_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80008e6:	f7ff ff8f 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000390 	.word	0x20000390

080008f4 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80008fc:	2001      	movs	r0, #1
 80008fe:	f7ff ffcf 	bl	80008a0 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	2100      	movs	r1, #0
 8000906:	2032      	movs	r0, #50	@ 0x32
 8000908:	f000 fb77 	bl	8000ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 800090c:	2032      	movs	r0, #50	@ 0x32
 800090e:	f000 fb8e 	bl	800102e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000924:	4a14      	ldr	r2, [pc, #80]	@ (8000978 <_sbrk+0x5c>)
 8000926:	4b15      	ldr	r3, [pc, #84]	@ (800097c <_sbrk+0x60>)
 8000928:	1ad3      	subs	r3, r2, r3
 800092a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000930:	4b13      	ldr	r3, [pc, #76]	@ (8000980 <_sbrk+0x64>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d102      	bne.n	800093e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000938:	4b11      	ldr	r3, [pc, #68]	@ (8000980 <_sbrk+0x64>)
 800093a:	4a12      	ldr	r2, [pc, #72]	@ (8000984 <_sbrk+0x68>)
 800093c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800093e:	4b10      	ldr	r3, [pc, #64]	@ (8000980 <_sbrk+0x64>)
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4413      	add	r3, r2
 8000946:	693a      	ldr	r2, [r7, #16]
 8000948:	429a      	cmp	r2, r3
 800094a:	d207      	bcs.n	800095c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800094c:	f004 fd62 	bl	8005414 <__errno>
 8000950:	4603      	mov	r3, r0
 8000952:	220c      	movs	r2, #12
 8000954:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000956:	f04f 33ff 	mov.w	r3, #4294967295
 800095a:	e009      	b.n	8000970 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800095c:	4b08      	ldr	r3, [pc, #32]	@ (8000980 <_sbrk+0x64>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000962:	4b07      	ldr	r3, [pc, #28]	@ (8000980 <_sbrk+0x64>)
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4413      	add	r3, r2
 800096a:	4a05      	ldr	r2, [pc, #20]	@ (8000980 <_sbrk+0x64>)
 800096c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800096e:	68fb      	ldr	r3, [r7, #12]
}
 8000970:	4618      	mov	r0, r3
 8000972:	3718      	adds	r7, #24
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20010000 	.word	0x20010000
 800097c:	00000400 	.word	0x00000400
 8000980:	2000039c 	.word	0x2000039c
 8000984:	20000588 	.word	0x20000588

08000988 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr

08000994 <LL_AHB2_GRP1_EnableClock>:
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800099c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80009a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80009a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4313      	orrs	r3, r2
 80009aa:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80009ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80009b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4013      	ands	r3, r2
 80009b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009b8:	68fb      	ldr	r3, [r7, #12]
}
 80009ba:	bf00      	nop
 80009bc:	3714      	adds	r7, #20
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr

080009c4 <LL_APB1_GRP1_EnableClock>:
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80009cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80009d0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80009d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4313      	orrs	r3, r2
 80009da:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80009dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80009e0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4013      	ands	r3, r2
 80009e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009e8:	68fb      	ldr	r3, [r7, #12]
}
 80009ea:	bf00      	nop
 80009ec:	3714      	adds	r7, #20
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr

080009f4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009f8:	4b22      	ldr	r3, [pc, #136]	@ (8000a84 <MX_USART2_UART_Init+0x90>)
 80009fa:	4a23      	ldr	r2, [pc, #140]	@ (8000a88 <MX_USART2_UART_Init+0x94>)
 80009fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009fe:	4b21      	ldr	r3, [pc, #132]	@ (8000a84 <MX_USART2_UART_Init+0x90>)
 8000a00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a06:	4b1f      	ldr	r3, [pc, #124]	@ (8000a84 <MX_USART2_UART_Init+0x90>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000a84 <MX_USART2_UART_Init+0x90>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a12:	4b1c      	ldr	r3, [pc, #112]	@ (8000a84 <MX_USART2_UART_Init+0x90>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a18:	4b1a      	ldr	r3, [pc, #104]	@ (8000a84 <MX_USART2_UART_Init+0x90>)
 8000a1a:	220c      	movs	r2, #12
 8000a1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1e:	4b19      	ldr	r3, [pc, #100]	@ (8000a84 <MX_USART2_UART_Init+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a24:	4b17      	ldr	r3, [pc, #92]	@ (8000a84 <MX_USART2_UART_Init+0x90>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a2a:	4b16      	ldr	r3, [pc, #88]	@ (8000a84 <MX_USART2_UART_Init+0x90>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a30:	4b14      	ldr	r3, [pc, #80]	@ (8000a84 <MX_USART2_UART_Init+0x90>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a36:	4b13      	ldr	r3, [pc, #76]	@ (8000a84 <MX_USART2_UART_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a3c:	4811      	ldr	r0, [pc, #68]	@ (8000a84 <MX_USART2_UART_Init+0x90>)
 8000a3e:	f002 fbf4 	bl	800322a <HAL_UART_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a48:	f7ff fede 	bl	8000808 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	480d      	ldr	r0, [pc, #52]	@ (8000a84 <MX_USART2_UART_Init+0x90>)
 8000a50:	f004 fbb7 	bl	80051c2 <HAL_UARTEx_SetTxFifoThreshold>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a5a:	f7ff fed5 	bl	8000808 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4808      	ldr	r0, [pc, #32]	@ (8000a84 <MX_USART2_UART_Init+0x90>)
 8000a62:	f004 fbec 	bl	800523e <HAL_UARTEx_SetRxFifoThreshold>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a6c:	f7ff fecc 	bl	8000808 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a70:	4804      	ldr	r0, [pc, #16]	@ (8000a84 <MX_USART2_UART_Init+0x90>)
 8000a72:	f004 fb6e 	bl	8005152 <HAL_UARTEx_DisableFifoMode>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a7c:	f7ff fec4 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	200003a0 	.word	0x200003a0
 8000a88:	40004400 	.word	0x40004400

08000a8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b096      	sub	sp, #88	@ 0x58
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000aa4:	f107 030c 	add.w	r3, r7, #12
 8000aa8:	2238      	movs	r2, #56	@ 0x38
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4618      	mov	r0, r3
 8000aae:	f004 fca9 	bl	8005404 <memset>
  if(uartHandle->Instance==USART2)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a1b      	ldr	r2, [pc, #108]	@ (8000b24 <HAL_UART_MspInit+0x98>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d12e      	bne.n	8000b1a <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000abc:	2302      	movs	r3, #2
 8000abe:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ac0:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8000ac4:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ac6:	f107 030c 	add.w	r3, r7, #12
 8000aca:	4618      	mov	r0, r3
 8000acc:	f001 ff12 	bl	80028f4 <HAL_RCCEx_PeriphCLKConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ad6:	f7ff fe97 	bl	8000808 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ada:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000ade:	f7ff ff71 	bl	80009c4 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	f7ff ff56 	bl	8000994 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000ae8:	230c      	movs	r3, #12
 8000aea:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aec:	2302      	movs	r3, #2
 8000aee:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	2300      	movs	r3, #0
 8000af6:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000af8:	2307      	movs	r3, #7
 8000afa:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000b00:	4619      	mov	r1, r3
 8000b02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b06:	f000 fb69 	bl	80011dc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	2025      	movs	r0, #37	@ 0x25
 8000b10:	f000 fa73 	bl	8000ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b14:	2025      	movs	r0, #37	@ 0x25
 8000b16:	f000 fa8a 	bl	800102e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b1a:	bf00      	nop
 8000b1c:	3758      	adds	r7, #88	@ 0x58
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40004400 	.word	0x40004400

08000b28 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b28:	480d      	ldr	r0, [pc, #52]	@ (8000b60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b2a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b2c:	f7ff ff2c 	bl	8000988 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b30:	480c      	ldr	r0, [pc, #48]	@ (8000b64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b32:	490d      	ldr	r1, [pc, #52]	@ (8000b68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b34:	4a0d      	ldr	r2, [pc, #52]	@ (8000b6c <LoopForever+0xe>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b38:	e002      	b.n	8000b40 <LoopCopyDataInit>

08000b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3e:	3304      	adds	r3, #4

08000b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b44:	d3f9      	bcc.n	8000b3a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b46:	4a0a      	ldr	r2, [pc, #40]	@ (8000b70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b48:	4c0a      	ldr	r4, [pc, #40]	@ (8000b74 <LoopForever+0x16>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b4c:	e001      	b.n	8000b52 <LoopFillZerobss>

08000b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b50:	3204      	adds	r2, #4

08000b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b54:	d3fb      	bcc.n	8000b4e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b56:	f004 fc63 	bl	8005420 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b5a:	f7ff fd3f 	bl	80005dc <main>

08000b5e <LoopForever>:

LoopForever:
    b LoopForever
 8000b5e:	e7fe      	b.n	8000b5e <LoopForever>
  ldr   r0, =_estack
 8000b60:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b68:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000b6c:	08005e98 	.word	0x08005e98
  ldr r2, =_sbss
 8000b70:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000b74:	20000584 	.word	0x20000584

08000b78 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b78:	e7fe      	b.n	8000b78 <ADC_IRQHandler>

08000b7a <LL_AHB2_GRP1_EnableClock>:
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	b085      	sub	sp, #20
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b86:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b88:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ba0:	bf00      	nop
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bc80      	pop	{r7}
 8000ba8:	4770      	bx	lr
	...

08000bac <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b088      	sub	sp, #32
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8000bb6:	f107 030c 	add.w	r3, r7, #12
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
 8000bc4:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000bc6:	2002      	movs	r0, #2
 8000bc8:	f7ff ffd7 	bl	8000b7a <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	4a12      	ldr	r2, [pc, #72]	@ (8000c18 <BSP_LED_Init+0x6c>)
 8000bd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bd4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bde:	2302      	movs	r3, #2
 8000be0:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	4a0d      	ldr	r2, [pc, #52]	@ (8000c1c <BSP_LED_Init+0x70>)
 8000be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bea:	f107 020c 	add.w	r2, r7, #12
 8000bee:	4611      	mov	r1, r2
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f000 faf3 	bl	80011dc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	4a08      	ldr	r2, [pc, #32]	@ (8000c1c <BSP_LED_Init+0x70>)
 8000bfa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	4a05      	ldr	r2, [pc, #20]	@ (8000c18 <BSP_LED_Init+0x6c>)
 8000c02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c06:	2200      	movs	r2, #0
 8000c08:	4619      	mov	r1, r3
 8000c0a:	f000 fc47 	bl	800149c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000c0e:	2300      	movs	r3, #0
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3720      	adds	r7, #32
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	08005e24 	.word	0x08005e24
 8000c1c:	20000008 	.word	0x20000008

08000c20 <HAL_SUBGHZ_TxCpltCallback>:
    return RF_WAKEUP_TIME;
}

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8000c28:	4b03      	ldr	r3, [pc, #12]	@ (8000c38 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	4798      	blx	r3
}
 8000c30:	bf00      	nop
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000434 	.word	0x20000434

08000c3c <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8000c44:	4b03      	ldr	r3, [pc, #12]	@ (8000c54 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2002      	movs	r0, #2
 8000c4a:	4798      	blx	r3
}
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000434 	.word	0x20000434

08000c58 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8000c60:	4b03      	ldr	r3, [pc, #12]	@ (8000c70 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2040      	movs	r0, #64	@ 0x40
 8000c66:	4798      	blx	r3
}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20000434 	.word	0x20000434

08000c74 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8000c80:	78fb      	ldrb	r3, [r7, #3]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d002      	beq.n	8000c8c <HAL_SUBGHZ_CADStatusCallback+0x18>
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d005      	beq.n	8000c96 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8000c8a:	e00a      	b.n	8000ca2 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8000c8c:	4b07      	ldr	r3, [pc, #28]	@ (8000cac <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2080      	movs	r0, #128	@ 0x80
 8000c92:	4798      	blx	r3
            break;
 8000c94:	e005      	b.n	8000ca2 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8000c96:	4b05      	ldr	r3, [pc, #20]	@ (8000cac <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000c9e:	4798      	blx	r3
            break;
 8000ca0:	bf00      	nop
    }
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000434 	.word	0x20000434

08000cb0 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8000cb8:	4b04      	ldr	r3, [pc, #16]	@ (8000ccc <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000cc0:	4798      	blx	r3
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000434 	.word	0x20000434

08000cd0 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8000cd8:	4b03      	ldr	r3, [pc, #12]	@ (8000ce8 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2020      	movs	r0, #32
 8000cde:	4798      	blx	r3
}
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000434 	.word	0x20000434

08000cec <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8000cf4:	4b03      	ldr	r3, [pc, #12]	@ (8000d04 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2004      	movs	r0, #4
 8000cfa:	4798      	blx	r3
}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000434 	.word	0x20000434

08000d08 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8000d10:	4b03      	ldr	r3, [pc, #12]	@ (8000d20 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2008      	movs	r0, #8
 8000d16:	4798      	blx	r3
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000434 	.word	0x20000434

08000d24 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8000d2c:	4b03      	ldr	r3, [pc, #12]	@ (8000d3c <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2010      	movs	r0, #16
 8000d32:	4798      	blx	r3
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000434 	.word	0x20000434

08000d40 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8000d48:	4b04      	ldr	r3, [pc, #16]	@ (8000d5c <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000d50:	4798      	blx	r3
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000434 	.word	0x20000434

08000d60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d66:	2300      	movs	r3, #0
 8000d68:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d6a:	2003      	movs	r0, #3
 8000d6c:	f000 f93a 	bl	8000fe4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000d70:	f001 fbe2 	bl	8002538 <HAL_RCC_GetHCLKFreq>
 8000d74:	4603      	mov	r3, r0
 8000d76:	4a09      	ldr	r2, [pc, #36]	@ (8000d9c <HAL_Init+0x3c>)
 8000d78:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	f000 f810 	bl	8000da0 <HAL_InitTick>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d002      	beq.n	8000d8c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	71fb      	strb	r3, [r7, #7]
 8000d8a:	e001      	b.n	8000d90 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d8c:	f7ff fd42 	bl	8000814 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d90:	79fb      	ldrb	r3, [r7, #7]
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000004 	.word	0x20000004

08000da0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000da8:	2300      	movs	r3, #0
 8000daa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000dac:	4b17      	ldr	r3, [pc, #92]	@ (8000e0c <HAL_InitTick+0x6c>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d024      	beq.n	8000dfe <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000db4:	f001 fbc0 	bl	8002538 <HAL_RCC_GetHCLKFreq>
 8000db8:	4602      	mov	r2, r0
 8000dba:	4b14      	ldr	r3, [pc, #80]	@ (8000e0c <HAL_InitTick+0x6c>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dc4:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f000 f93c 	bl	800104a <HAL_SYSTICK_Config>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d10f      	bne.n	8000df8 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2b0f      	cmp	r3, #15
 8000ddc:	d809      	bhi.n	8000df2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dde:	2200      	movs	r2, #0
 8000de0:	6879      	ldr	r1, [r7, #4]
 8000de2:	f04f 30ff 	mov.w	r0, #4294967295
 8000de6:	f000 f908 	bl	8000ffa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dea:	4a09      	ldr	r2, [pc, #36]	@ (8000e10 <HAL_InitTick+0x70>)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6013      	str	r3, [r2, #0]
 8000df0:	e007      	b.n	8000e02 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	73fb      	strb	r3, [r7, #15]
 8000df6:	e004      	b.n	8000e02 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	73fb      	strb	r3, [r7, #15]
 8000dfc:	e001      	b.n	8000e02 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3710      	adds	r7, #16
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000018 	.word	0x20000018
 8000e10:	20000014 	.word	0x20000014

08000e14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e18:	4b05      	ldr	r3, [pc, #20]	@ (8000e30 <HAL_IncTick+0x1c>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4b05      	ldr	r3, [pc, #20]	@ (8000e34 <HAL_IncTick+0x20>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4413      	add	r3, r2
 8000e24:	4a03      	ldr	r2, [pc, #12]	@ (8000e34 <HAL_IncTick+0x20>)
 8000e26:	6013      	str	r3, [r2, #0]
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr
 8000e30:	20000018 	.word	0x20000018
 8000e34:	20000438 	.word	0x20000438

08000e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e3c:	4b02      	ldr	r3, [pc, #8]	@ (8000e48 <HAL_GetTick+0x10>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr
 8000e48:	20000438 	.word	0x20000438

08000e4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e90 <__NVIC_SetPriorityGrouping+0x44>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e68:	4013      	ands	r3, r2
 8000e6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7e:	4a04      	ldr	r2, [pc, #16]	@ (8000e90 <__NVIC_SetPriorityGrouping+0x44>)
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	60d3      	str	r3, [r2, #12]
}
 8000e84:	bf00      	nop
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bc80      	pop	{r7}
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e98:	4b04      	ldr	r3, [pc, #16]	@ (8000eac <__NVIC_GetPriorityGrouping+0x18>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	0a1b      	lsrs	r3, r3, #8
 8000e9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	db0b      	blt.n	8000eda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	f003 021f 	and.w	r2, r3, #31
 8000ec8:	4906      	ldr	r1, [pc, #24]	@ (8000ee4 <__NVIC_EnableIRQ+0x34>)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	095b      	lsrs	r3, r3, #5
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr
 8000ee4:	e000e100 	.word	0xe000e100

08000ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	6039      	str	r1, [r7, #0]
 8000ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	db0a      	blt.n	8000f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	490c      	ldr	r1, [pc, #48]	@ (8000f34 <__NVIC_SetPriority+0x4c>)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	0112      	lsls	r2, r2, #4
 8000f08:	b2d2      	uxtb	r2, r2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f10:	e00a      	b.n	8000f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4908      	ldr	r1, [pc, #32]	@ (8000f38 <__NVIC_SetPriority+0x50>)
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	f003 030f 	and.w	r3, r3, #15
 8000f1e:	3b04      	subs	r3, #4
 8000f20:	0112      	lsls	r2, r2, #4
 8000f22:	b2d2      	uxtb	r2, r2
 8000f24:	440b      	add	r3, r1
 8000f26:	761a      	strb	r2, [r3, #24]
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000e100 	.word	0xe000e100
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b089      	sub	sp, #36	@ 0x24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f1c3 0307 	rsb	r3, r3, #7
 8000f56:	2b04      	cmp	r3, #4
 8000f58:	bf28      	it	cs
 8000f5a:	2304      	movcs	r3, #4
 8000f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3304      	adds	r3, #4
 8000f62:	2b06      	cmp	r3, #6
 8000f64:	d902      	bls.n	8000f6c <NVIC_EncodePriority+0x30>
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3b03      	subs	r3, #3
 8000f6a:	e000      	b.n	8000f6e <NVIC_EncodePriority+0x32>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f70:	f04f 32ff 	mov.w	r2, #4294967295
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43da      	mvns	r2, r3
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	401a      	ands	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f84:	f04f 31ff 	mov.w	r1, #4294967295
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8e:	43d9      	mvns	r1, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	4313      	orrs	r3, r2
         );
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3724      	adds	r7, #36	@ 0x24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr

08000fa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fb0:	d301      	bcc.n	8000fb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e00f      	b.n	8000fd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe0 <SysTick_Config+0x40>)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fbe:	210f      	movs	r1, #15
 8000fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc4:	f7ff ff90 	bl	8000ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc8:	4b05      	ldr	r3, [pc, #20]	@ (8000fe0 <SysTick_Config+0x40>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fce:	4b04      	ldr	r3, [pc, #16]	@ (8000fe0 <SysTick_Config+0x40>)
 8000fd0:	2207      	movs	r2, #7
 8000fd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	e000e010 	.word	0xe000e010

08000fe4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff ff2d 	bl	8000e4c <__NVIC_SetPriorityGrouping>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b086      	sub	sp, #24
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	4603      	mov	r3, r0
 8001002:	60b9      	str	r1, [r7, #8]
 8001004:	607a      	str	r2, [r7, #4]
 8001006:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001008:	f7ff ff44 	bl	8000e94 <__NVIC_GetPriorityGrouping>
 800100c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	68b9      	ldr	r1, [r7, #8]
 8001012:	6978      	ldr	r0, [r7, #20]
 8001014:	f7ff ff92 	bl	8000f3c <NVIC_EncodePriority>
 8001018:	4602      	mov	r2, r0
 800101a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101e:	4611      	mov	r1, r2
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff61 	bl	8000ee8 <__NVIC_SetPriority>
}
 8001026:	bf00      	nop
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	4603      	mov	r3, r0
 8001036:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ff37 	bl	8000eb0 <__NVIC_EnableIRQ>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff ffa4 	bl	8000fa0 <SysTick_Config>
 8001058:	4603      	mov	r3, r0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d101      	bne.n	8001074 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e04f      	b.n	8001114 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b02      	cmp	r3, #2
 800107e:	d008      	beq.n	8001092 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2204      	movs	r2, #4
 8001084:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e040      	b.n	8001114 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f022 020e 	bic.w	r2, r2, #14
 80010a0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80010b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f022 0201 	bic.w	r2, r2, #1
 80010c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c6:	f003 021c 	and.w	r2, r3, #28
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ce:	2101      	movs	r1, #1
 80010d0:	fa01 f202 	lsl.w	r2, r1, r2
 80010d4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80010de:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d00c      	beq.n	8001102 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80010f6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001100:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2201      	movs	r2, #1
 8001106:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8001112:	2300      	movs	r3, #0
}
 8001114:	4618      	mov	r0, r3
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr

0800111e <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b084      	sub	sp, #16
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001126:	2300      	movs	r3, #0
 8001128:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b02      	cmp	r3, #2
 8001134:	d005      	beq.n	8001142 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2204      	movs	r2, #4
 800113a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	73fb      	strb	r3, [r7, #15]
 8001140:	e047      	b.n	80011d2 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f022 020e 	bic.w	r2, r2, #14
 8001150:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f022 0201 	bic.w	r2, r2, #1
 8001160:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800116c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001170:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001176:	f003 021c 	and.w	r2, r3, #28
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117e:	2101      	movs	r1, #1
 8001180:	fa01 f202 	lsl.w	r2, r1, r2
 8001184:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800118e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001194:	2b00      	cmp	r3, #0
 8001196:	d00c      	beq.n	80011b2 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80011a6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80011b0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2201      	movs	r2, #1
 80011b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	4798      	blx	r3
    }
  }
  return status;
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011dc:	b480      	push	{r7}
 80011de:	b087      	sub	sp, #28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ea:	e140      	b.n	800146e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	2101      	movs	r1, #1
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	fa01 f303 	lsl.w	r3, r1, r3
 80011f8:	4013      	ands	r3, r2
 80011fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f000 8132 	beq.w	8001468 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 0303 	and.w	r3, r3, #3
 800120c:	2b01      	cmp	r3, #1
 800120e:	d005      	beq.n	800121c <HAL_GPIO_Init+0x40>
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 0303 	and.w	r3, r3, #3
 8001218:	2b02      	cmp	r3, #2
 800121a:	d130      	bne.n	800127e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	2203      	movs	r2, #3
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	4013      	ands	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	68da      	ldr	r2, [r3, #12]
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	4313      	orrs	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001252:	2201      	movs	r2, #1
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	4013      	ands	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	091b      	lsrs	r3, r3, #4
 8001268:	f003 0201 	and.w	r2, r3, #1
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	4313      	orrs	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f003 0303 	and.w	r3, r3, #3
 8001286:	2b03      	cmp	r3, #3
 8001288:	d017      	beq.n	80012ba <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	2203      	movs	r2, #3
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43db      	mvns	r3, r3
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	4013      	ands	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	689a      	ldr	r2, [r3, #8]
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 0303 	and.w	r3, r3, #3
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d123      	bne.n	800130e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	08da      	lsrs	r2, r3, #3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3208      	adds	r2, #8
 80012ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	220f      	movs	r2, #15
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43db      	mvns	r3, r3
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	4013      	ands	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	691a      	ldr	r2, [r3, #16]
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	f003 0307 	and.w	r3, r3, #7
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	08da      	lsrs	r2, r3, #3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3208      	adds	r2, #8
 8001308:	6939      	ldr	r1, [r7, #16]
 800130a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	2203      	movs	r2, #3
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43db      	mvns	r3, r3
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	4013      	ands	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f003 0203 	and.w	r2, r3, #3
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4313      	orrs	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800134a:	2b00      	cmp	r3, #0
 800134c:	f000 808c 	beq.w	8001468 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001350:	4a4e      	ldr	r2, [pc, #312]	@ (800148c <HAL_GPIO_Init+0x2b0>)
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	089b      	lsrs	r3, r3, #2
 8001356:	3302      	adds	r3, #2
 8001358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	f003 0303 	and.w	r3, r3, #3
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	2207      	movs	r2, #7
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4013      	ands	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800137a:	d00d      	beq.n	8001398 <HAL_GPIO_Init+0x1bc>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a44      	ldr	r2, [pc, #272]	@ (8001490 <HAL_GPIO_Init+0x2b4>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d007      	beq.n	8001394 <HAL_GPIO_Init+0x1b8>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4a43      	ldr	r2, [pc, #268]	@ (8001494 <HAL_GPIO_Init+0x2b8>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d101      	bne.n	8001390 <HAL_GPIO_Init+0x1b4>
 800138c:	2302      	movs	r3, #2
 800138e:	e004      	b.n	800139a <HAL_GPIO_Init+0x1be>
 8001390:	2307      	movs	r3, #7
 8001392:	e002      	b.n	800139a <HAL_GPIO_Init+0x1be>
 8001394:	2301      	movs	r3, #1
 8001396:	e000      	b.n	800139a <HAL_GPIO_Init+0x1be>
 8001398:	2300      	movs	r3, #0
 800139a:	697a      	ldr	r2, [r7, #20]
 800139c:	f002 0203 	and.w	r2, r2, #3
 80013a0:	0092      	lsls	r2, r2, #2
 80013a2:	4093      	lsls	r3, r2
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013aa:	4938      	ldr	r1, [pc, #224]	@ (800148c <HAL_GPIO_Init+0x2b0>)
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	089b      	lsrs	r3, r3, #2
 80013b0:	3302      	adds	r3, #2
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013b8:	4b37      	ldr	r3, [pc, #220]	@ (8001498 <HAL_GPIO_Init+0x2bc>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	4313      	orrs	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013dc:	4a2e      	ldr	r2, [pc, #184]	@ (8001498 <HAL_GPIO_Init+0x2bc>)
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80013e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001498 <HAL_GPIO_Init+0x2bc>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	43db      	mvns	r3, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4013      	ands	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4313      	orrs	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001406:	4a24      	ldr	r2, [pc, #144]	@ (8001498 <HAL_GPIO_Init+0x2bc>)
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800140c:	4b22      	ldr	r3, [pc, #136]	@ (8001498 <HAL_GPIO_Init+0x2bc>)
 800140e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001412:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	43db      	mvns	r3, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4313      	orrs	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001432:	4a19      	ldr	r2, [pc, #100]	@ (8001498 <HAL_GPIO_Init+0x2bc>)
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800143a:	4b17      	ldr	r3, [pc, #92]	@ (8001498 <HAL_GPIO_Init+0x2bc>)
 800143c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001440:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	43db      	mvns	r3, r3
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	4013      	ands	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d003      	beq.n	8001460 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	4313      	orrs	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001460:	4a0d      	ldr	r2, [pc, #52]	@ (8001498 <HAL_GPIO_Init+0x2bc>)
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	3301      	adds	r3, #1
 800146c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	fa22 f303 	lsr.w	r3, r2, r3
 8001478:	2b00      	cmp	r3, #0
 800147a:	f47f aeb7 	bne.w	80011ec <HAL_GPIO_Init+0x10>
  }
}
 800147e:	bf00      	nop
 8001480:	bf00      	nop
 8001482:	371c      	adds	r7, #28
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	40010000 	.word	0x40010000
 8001490:	48000400 	.word	0x48000400
 8001494:	48000800 	.word	0x48000800
 8001498:	58000800 	.word	0x58000800

0800149c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	460b      	mov	r3, r1
 80014a6:	807b      	strh	r3, [r7, #2]
 80014a8:	4613      	mov	r3, r2
 80014aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014ac:	787b      	ldrb	r3, [r7, #1]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014b2:	887a      	ldrh	r2, [r7, #2]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014b8:	e002      	b.n	80014c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014ba:	887a      	ldrh	r2, [r7, #2]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr
	...

080014cc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014d0:	4b04      	ldr	r3, [pc, #16]	@ (80014e4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a03      	ldr	r2, [pc, #12]	@ (80014e4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80014d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014da:	6013      	str	r3, [r2, #0]
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr
 80014e4:	58000400 	.word	0x58000400

080014e8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80014ec:	4b03      	ldr	r3, [pc, #12]	@ (80014fc <HAL_PWREx_GetVoltageRange+0x14>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr
 80014fc:	58000400 	.word	0x58000400

08001500 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001504:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800150c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001510:	d101      	bne.n	8001516 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001512:	2301      	movs	r3, #1
 8001514:	e000      	b.n	8001518 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	58000400 	.word	0x58000400

08001524 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001528:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001532:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001536:	6013      	str	r3, [r2, #0]
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr

08001540 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001544:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800154e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001552:	6013      	str	r3, [r2, #0]
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr

0800155c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001560:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800156a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800156e:	d101      	bne.n	8001574 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001570:	2301      	movs	r3, #1
 8001572:	e000      	b.n	8001576 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr

0800157e <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001582:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800158c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001590:	6013      	str	r3, [r2, #0]
}
 8001592:	bf00      	nop
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr

0800159a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800159e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015ac:	6013      	str	r3, [r2, #0]
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr

080015b6 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80015ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80015c8:	d101      	bne.n	80015ce <LL_RCC_HSE_IsReady+0x18>
 80015ca:	2301      	movs	r3, #1
 80015cc:	e000      	b.n	80015d0 <LL_RCC_HSE_IsReady+0x1a>
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr

080015d8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80015dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015ea:	6013      	str	r3, [r2, #0]
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr

080015f4 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80015f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001602:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001606:	6013      	str	r3, [r2, #0]
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr

08001610 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001614:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800161e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001622:	d101      	bne.n	8001628 <LL_RCC_HSI_IsReady+0x18>
 8001624:	2301      	movs	r3, #1
 8001626:	e000      	b.n	800162a <LL_RCC_HSI_IsReady+0x1a>
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr

08001632 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800163a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	061b      	lsls	r3, r3, #24
 8001648:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800164c:	4313      	orrs	r3, r2
 800164e:	604b      	str	r3, [r1, #4]
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr

0800165a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800165e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b02      	cmp	r3, #2
 800166c:	d101      	bne.n	8001672 <LL_RCC_LSE_IsReady+0x18>
 800166e:	2301      	movs	r3, #1
 8001670:	e000      	b.n	8001674 <LL_RCC_LSE_IsReady+0x1a>
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr

0800167c <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001680:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001684:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001688:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr

0800169c <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80016a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016ac:	f023 0301 	bic.w	r3, r3, #1
 80016b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr

080016bc <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80016c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d101      	bne.n	80016d4 <LL_RCC_LSI_IsReady+0x18>
 80016d0:	2301      	movs	r3, #1
 80016d2:	e000      	b.n	80016d6 <LL_RCC_LSI_IsReady+0x1a>
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr

080016de <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80016e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6013      	str	r3, [r2, #0]
}
 80016f2:	bf00      	nop
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr

080016fa <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80016fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001708:	f023 0301 	bic.w	r3, r3, #1
 800170c:	6013      	str	r3, [r2, #0]
}
 800170e:	bf00      	nop
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr

08001716 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800171a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b02      	cmp	r3, #2
 8001726:	d101      	bne.n	800172c <LL_RCC_MSI_IsReady+0x16>
 8001728:	2301      	movs	r3, #1
 800172a:	e000      	b.n	800172e <LL_RCC_MSI_IsReady+0x18>
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr

08001736 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800173a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0308 	and.w	r3, r3, #8
 8001744:	2b08      	cmp	r3, #8
 8001746:	d101      	bne.n	800174c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001748:	2301      	movs	r3, #1
 800174a:	e000      	b.n	800174e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr

08001756 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800175a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001770:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001774:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001778:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr

08001784 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800178c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	021b      	lsls	r3, r3, #8
 800179a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800179e:	4313      	orrs	r3, r2
 80017a0:	604b      	str	r3, [r1, #4]
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr

080017ac <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80017b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f023 0203 	bic.w	r2, r3, #3
 80017be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	608b      	str	r3, [r1, #8]
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr

080017d2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80017d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f003 030c 	and.w	r3, r3, #12
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr

080017e8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80017f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4313      	orrs	r3, r2
 8001802:	608b      	str	r3, [r1, #8]
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr

0800180e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001816:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800181a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800181e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001822:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4313      	orrs	r3, r2
 800182a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr

08001838 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001840:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001844:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001848:	f023 020f 	bic.w	r2, r3, #15
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	091b      	lsrs	r3, r3, #4
 8001850:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001854:	4313      	orrs	r3, r2
 8001856:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr

08001864 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800186c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001876:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4313      	orrs	r3, r2
 800187e:	608b      	str	r3, [r1, #8]
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr

0800188a <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800188a:	b480      	push	{r7}
 800188c:	b083      	sub	sp, #12
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001892:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800189c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	608b      	str	r3, [r1, #8]
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr

080018b0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80018b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr

080018c6 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80018ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80018d2:	011b      	lsls	r3, r3, #4
 80018d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr

080018e0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80018e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bc80      	pop	{r7}
 80018f4:	4770      	bx	lr

080018f6 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80018fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8001904:	4618      	mov	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr

0800190c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001910:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800191a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800191e:	6013      	str	r3, [r2, #0]
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr

08001928 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800192c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001936:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800193a:	6013      	str	r3, [r2, #0]
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr

08001944 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001948:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001952:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001956:	d101      	bne.n	800195c <LL_RCC_PLL_IsReady+0x18>
 8001958:	2301      	movs	r3, #1
 800195a:	e000      	b.n	800195e <LL_RCC_PLL_IsReady+0x1a>
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr

08001966 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800196a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	0a1b      	lsrs	r3, r3, #8
 8001972:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8001976:	4618      	mov	r0, r3
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr

0800197e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001982:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800198c:	4618      	mov	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr

08001994 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001998:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr

080019aa <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80019ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	f003 0303 	and.w	r3, r3, #3
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr

080019c0 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80019c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019d2:	d101      	bne.n	80019d8 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80019d4:	2301      	movs	r3, #1
 80019d6:	e000      	b.n	80019da <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr

080019e2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80019e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019ea:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80019ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80019f6:	d101      	bne.n	80019fc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80019f8:	2301      	movs	r3, #1
 80019fa:	e000      	b.n	80019fe <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc80      	pop	{r7}
 8001a04:	4770      	bx	lr

08001a06 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001a0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a0e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001a12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a1a:	d101      	bne.n	8001a20 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e000      	b.n	8001a22 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr

08001a2a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001a2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001a3c:	d101      	bne.n	8001a42 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e000      	b.n	8001a44 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr

08001a4c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001a50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a5a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001a5e:	d101      	bne.n	8001a64 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001a60:	2301      	movs	r3, #1
 8001a62:	e000      	b.n	8001a66 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr
	...

08001a70 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b088      	sub	sp, #32
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e36f      	b.n	8002162 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a82:	f7ff fea6 	bl	80017d2 <LL_RCC_GetSysClkSource>
 8001a86:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a88:	f7ff ff8f 	bl	80019aa <LL_RCC_PLL_GetMainSource>
 8001a8c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0320 	and.w	r3, r3, #32
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 80c4 	beq.w	8001c24 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d005      	beq.n	8001aae <HAL_RCC_OscConfig+0x3e>
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	2b0c      	cmp	r3, #12
 8001aa6:	d176      	bne.n	8001b96 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d173      	bne.n	8001b96 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e353      	b.n	8002162 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001abe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0308 	and.w	r3, r3, #8
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d005      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x68>
 8001acc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ad6:	e006      	b.n	8001ae6 <HAL_RCC_OscConfig+0x76>
 8001ad8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001adc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ae0:	091b      	lsrs	r3, r3, #4
 8001ae2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d222      	bcs.n	8001b30 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aee:	4618      	mov	r0, r3
 8001af0:	f000 fd5a 	bl	80025a8 <RCC_SetFlashLatencyFromMSIRange>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e331      	b.n	8002162 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001afe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b08:	f043 0308 	orr.w	r3, r3, #8
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b1c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b20:	4313      	orrs	r3, r2
 8001b22:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff fe2b 	bl	8001784 <LL_RCC_MSI_SetCalibTrimming>
 8001b2e:	e021      	b.n	8001b74 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b3a:	f043 0308 	orr.w	r3, r3, #8
 8001b3e:	6013      	str	r3, [r2, #0]
 8001b40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b52:	4313      	orrs	r3, r2
 8001b54:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff fe12 	bl	8001784 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b64:	4618      	mov	r0, r3
 8001b66:	f000 fd1f 	bl	80025a8 <RCC_SetFlashLatencyFromMSIRange>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e2f6      	b.n	8002162 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001b74:	f000 fce0 	bl	8002538 <HAL_RCC_GetHCLKFreq>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	4aa7      	ldr	r2, [pc, #668]	@ (8001e18 <HAL_RCC_OscConfig+0x3a8>)
 8001b7c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001b7e:	4ba7      	ldr	r3, [pc, #668]	@ (8001e1c <HAL_RCC_OscConfig+0x3ac>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff f90c 	bl	8000da0 <HAL_InitTick>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001b8c:	7cfb      	ldrb	r3, [r7, #19]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d047      	beq.n	8001c22 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8001b92:	7cfb      	ldrb	r3, [r7, #19]
 8001b94:	e2e5      	b.n	8002162 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a1b      	ldr	r3, [r3, #32]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d02c      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b9e:	f7ff fd9e 	bl	80016de <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ba2:	f7ff f949 	bl	8000e38 <HAL_GetTick>
 8001ba6:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001baa:	f7ff f945 	bl	8000e38 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e2d2      	b.n	8002162 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001bbc:	f7ff fdab 	bl	8001716 <LL_RCC_MSI_IsReady>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0f1      	beq.n	8001baa <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bd0:	f043 0308 	orr.w	r3, r3, #8
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001be4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001be8:	4313      	orrs	r3, r2
 8001bea:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fdc7 	bl	8001784 <LL_RCC_MSI_SetCalibTrimming>
 8001bf6:	e015      	b.n	8001c24 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001bf8:	f7ff fd7f 	bl	80016fa <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bfc:	f7ff f91c 	bl	8000e38 <HAL_GetTick>
 8001c00:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c04:	f7ff f918 	bl	8000e38 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e2a5      	b.n	8002162 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001c16:	f7ff fd7e 	bl	8001716 <LL_RCC_MSI_IsReady>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1f1      	bne.n	8001c04 <HAL_RCC_OscConfig+0x194>
 8001c20:	e000      	b.n	8001c24 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001c22:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d058      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	2b08      	cmp	r3, #8
 8001c34:	d005      	beq.n	8001c42 <HAL_RCC_OscConfig+0x1d2>
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	2b0c      	cmp	r3, #12
 8001c3a:	d108      	bne.n	8001c4e <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	2b03      	cmp	r3, #3
 8001c40:	d105      	bne.n	8001c4e <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d14b      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e289      	b.n	8002162 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001c4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c60:	4313      	orrs	r3, r2
 8001c62:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c6c:	d102      	bne.n	8001c74 <HAL_RCC_OscConfig+0x204>
 8001c6e:	f7ff fc86 	bl	800157e <LL_RCC_HSE_Enable>
 8001c72:	e00d      	b.n	8001c90 <HAL_RCC_OscConfig+0x220>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8001c7c:	d104      	bne.n	8001c88 <HAL_RCC_OscConfig+0x218>
 8001c7e:	f7ff fc51 	bl	8001524 <LL_RCC_HSE_EnableTcxo>
 8001c82:	f7ff fc7c 	bl	800157e <LL_RCC_HSE_Enable>
 8001c86:	e003      	b.n	8001c90 <HAL_RCC_OscConfig+0x220>
 8001c88:	f7ff fc87 	bl	800159a <LL_RCC_HSE_Disable>
 8001c8c:	f7ff fc58 	bl	8001540 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d012      	beq.n	8001cbe <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c98:	f7ff f8ce 	bl	8000e38 <HAL_GetTick>
 8001c9c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca0:	f7ff f8ca 	bl	8000e38 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b64      	cmp	r3, #100	@ 0x64
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e257      	b.n	8002162 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001cb2:	f7ff fc80 	bl	80015b6 <LL_RCC_HSE_IsReady>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0f1      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x230>
 8001cbc:	e011      	b.n	8001ce2 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbe:	f7ff f8bb 	bl	8000e38 <HAL_GetTick>
 8001cc2:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc6:	f7ff f8b7 	bl	8000e38 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b64      	cmp	r3, #100	@ 0x64
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e244      	b.n	8002162 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001cd8:	f7ff fc6d 	bl	80015b6 <LL_RCC_HSE_IsReady>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f1      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d046      	beq.n	8001d7c <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	2b04      	cmp	r3, #4
 8001cf2:	d005      	beq.n	8001d00 <HAL_RCC_OscConfig+0x290>
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	2b0c      	cmp	r3, #12
 8001cf8:	d10e      	bne.n	8001d18 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d10b      	bne.n	8001d18 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d101      	bne.n	8001d0c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e22a      	b.n	8002162 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	695b      	ldr	r3, [r3, #20]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff fc8e 	bl	8001632 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001d16:	e031      	b.n	8001d7c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d019      	beq.n	8001d54 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d20:	f7ff fc5a 	bl	80015d8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d24:	f7ff f888 	bl	8000e38 <HAL_GetTick>
 8001d28:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d2c:	f7ff f884 	bl	8000e38 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e211      	b.n	8002162 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001d3e:	f7ff fc67 	bl	8001610 <LL_RCC_HSI_IsReady>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d0f1      	beq.n	8001d2c <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff fc70 	bl	8001632 <LL_RCC_HSI_SetCalibTrimming>
 8001d52:	e013      	b.n	8001d7c <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d54:	f7ff fc4e 	bl	80015f4 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d58:	f7ff f86e 	bl	8000e38 <HAL_GetTick>
 8001d5c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d60:	f7ff f86a 	bl	8000e38 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e1f7      	b.n	8002162 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001d72:	f7ff fc4d 	bl	8001610 <LL_RCC_HSI_IsReady>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1f1      	bne.n	8001d60 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0308 	and.w	r3, r3, #8
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d06e      	beq.n	8001e66 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d056      	beq.n	8001e3e <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001d90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d98:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69da      	ldr	r2, [r3, #28]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f003 0310 	and.w	r3, r3, #16
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d031      	beq.n	8001e0c <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d006      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d101      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e1d0      	b.n	8002162 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d013      	beq.n	8001df2 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8001dca:	f7ff fc67 	bl	800169c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001dce:	f7ff f833 	bl	8000e38 <HAL_GetTick>
 8001dd2:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dd6:	f7ff f82f 	bl	8000e38 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b11      	cmp	r3, #17
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e1bc      	b.n	8002162 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001de8:	f7ff fc68 	bl	80016bc <LL_RCC_LSI_IsReady>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1f1      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001df2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001df6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dfa:	f023 0210 	bic.w	r2, r3, #16
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e06:	4313      	orrs	r3, r2
 8001e08:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e0c:	f7ff fc36 	bl	800167c <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e10:	f7ff f812 	bl	8000e38 <HAL_GetTick>
 8001e14:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001e16:	e00c      	b.n	8001e32 <HAL_RCC_OscConfig+0x3c2>
 8001e18:	20000004 	.word	0x20000004
 8001e1c:	20000014 	.word	0x20000014
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e20:	f7ff f80a 	bl	8000e38 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b11      	cmp	r3, #17
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e197      	b.n	8002162 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001e32:	f7ff fc43 	bl	80016bc <LL_RCC_LSI_IsReady>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0f1      	beq.n	8001e20 <HAL_RCC_OscConfig+0x3b0>
 8001e3c:	e013      	b.n	8001e66 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e3e:	f7ff fc2d 	bl	800169c <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e42:	f7fe fff9 	bl	8000e38 <HAL_GetTick>
 8001e46:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e4a:	f7fe fff5 	bl	8000e38 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b11      	cmp	r3, #17
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e182      	b.n	8002162 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001e5c:	f7ff fc2e 	bl	80016bc <LL_RCC_LSI_IsReady>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1f1      	bne.n	8001e4a <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0304 	and.w	r3, r3, #4
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f000 80d8 	beq.w	8002024 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001e74:	f7ff fb44 	bl	8001500 <LL_PWR_IsEnabledBkUpAccess>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d113      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001e7e:	f7ff fb25 	bl	80014cc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e82:	f7fe ffd9 	bl	8000e38 <HAL_GetTick>
 8001e86:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e8a:	f7fe ffd5 	bl	8000e38 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e162      	b.n	8002162 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001e9c:	f7ff fb30 	bl	8001500 <LL_PWR_IsEnabledBkUpAccess>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0f1      	beq.n	8001e8a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d07b      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	2b85      	cmp	r3, #133	@ 0x85
 8001eb4:	d003      	beq.n	8001ebe <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	2b05      	cmp	r3, #5
 8001ebc:	d109      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001ebe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ec6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001eca:	f043 0304 	orr.w	r3, r3, #4
 8001ece:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed2:	f7fe ffb1 	bl	8000e38 <HAL_GetTick>
 8001ed6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001ed8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ee0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001eec:	e00a      	b.n	8001f04 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eee:	f7fe ffa3 	bl	8000e38 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e12e      	b.n	8002162 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001f04:	f7ff fba9 	bl	800165a <LL_RCC_LSE_IsReady>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0ef      	beq.n	8001eee <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	2b81      	cmp	r3, #129	@ 0x81
 8001f14:	d003      	beq.n	8001f1e <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	2b85      	cmp	r3, #133	@ 0x85
 8001f1c:	d121      	bne.n	8001f62 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1e:	f7fe ff8b 	bl	8000e38 <HAL_GetTick>
 8001f22:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001f24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f2c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001f38:	e00a      	b.n	8001f50 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f3a:	f7fe ff7d 	bl	8000e38 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e108      	b.n	8002162 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001f50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0ec      	beq.n	8001f3a <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001f60:	e060      	b.n	8002024 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f62:	f7fe ff69 	bl	8000e38 <HAL_GetTick>
 8001f66:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001f68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f70:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001f78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001f7c:	e00a      	b.n	8001f94 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f7e:	f7fe ff5b 	bl	8000e38 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e0e6      	b.n	8002162 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001f94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1ec      	bne.n	8001f7e <HAL_RCC_OscConfig+0x50e>
 8001fa4:	e03e      	b.n	8002024 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa6:	f7fe ff47 	bl	8000e38 <HAL_GetTick>
 8001faa:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001fac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fb4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001fb8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001fbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001fc0:	e00a      	b.n	8001fd8 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc2:	f7fe ff39 	bl	8000e38 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e0c4      	b.n	8002162 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001fd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fe0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1ec      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe8:	f7fe ff26 	bl	8000e38 <HAL_GetTick>
 8001fec:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001fee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ff6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ffa:	f023 0301 	bic.w	r3, r3, #1
 8001ffe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002002:	e00a      	b.n	800201a <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002004:	f7fe ff18 	bl	8000e38 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002012:	4293      	cmp	r3, r2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e0a3      	b.n	8002162 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800201a:	f7ff fb1e 	bl	800165a <LL_RCC_LSE_IsReady>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1ef      	bne.n	8002004 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 8099 	beq.w	8002160 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	2b0c      	cmp	r3, #12
 8002032:	d06c      	beq.n	800210e <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002038:	2b02      	cmp	r3, #2
 800203a:	d14b      	bne.n	80020d4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203c:	f7ff fc74 	bl	8001928 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002040:	f7fe fefa 	bl	8000e38 <HAL_GetTick>
 8002044:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002048:	f7fe fef6 	bl	8000e38 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b0a      	cmp	r3, #10
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e083      	b.n	8002162 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800205a:	f7ff fc73 	bl	8001944 <LL_RCC_PLL_IsReady>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1f1      	bne.n	8002048 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002064:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	4b40      	ldr	r3, [pc, #256]	@ (800216c <HAL_RCC_OscConfig+0x6fc>)
 800206c:	4013      	ands	r3, r2
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002076:	4311      	orrs	r1, r2
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800207c:	0212      	lsls	r2, r2, #8
 800207e:	4311      	orrs	r1, r2
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002084:	4311      	orrs	r1, r2
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800208a:	4311      	orrs	r1, r2
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002090:	430a      	orrs	r2, r1
 8002092:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002096:	4313      	orrs	r3, r2
 8002098:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800209a:	f7ff fc37 	bl	800190c <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800209e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020ac:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ae:	f7fe fec3 	bl	8000e38 <HAL_GetTick>
 80020b2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80020b4:	e008      	b.n	80020c8 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b6:	f7fe febf 	bl	8000e38 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b0a      	cmp	r3, #10
 80020c2:	d901      	bls.n	80020c8 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e04c      	b.n	8002162 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80020c8:	f7ff fc3c 	bl	8001944 <LL_RCC_PLL_IsReady>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d0f1      	beq.n	80020b6 <HAL_RCC_OscConfig+0x646>
 80020d2:	e045      	b.n	8002160 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d4:	f7ff fc28 	bl	8001928 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d8:	f7fe feae 	bl	8000e38 <HAL_GetTick>
 80020dc:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e0:	f7fe feaa 	bl	8000e38 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b0a      	cmp	r3, #10
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e037      	b.n	8002162 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80020f2:	f7ff fc27 	bl	8001944 <LL_RCC_PLL_IsReady>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1f1      	bne.n	80020e0 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80020fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002100:	68da      	ldr	r2, [r3, #12]
 8002102:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002106:	4b1a      	ldr	r3, [pc, #104]	@ (8002170 <HAL_RCC_OscConfig+0x700>)
 8002108:	4013      	ands	r3, r2
 800210a:	60cb      	str	r3, [r1, #12]
 800210c:	e028      	b.n	8002160 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002112:	2b01      	cmp	r3, #1
 8002114:	d101      	bne.n	800211a <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e023      	b.n	8002162 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800211a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	f003 0203 	and.w	r2, r3, #3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212c:	429a      	cmp	r2, r3
 800212e:	d115      	bne.n	800215c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800213a:	429a      	cmp	r2, r3
 800213c:	d10e      	bne.n	800215c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002148:	021b      	lsls	r3, r3, #8
 800214a:	429a      	cmp	r2, r3
 800214c:	d106      	bne.n	800215c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002158:	429a      	cmp	r2, r3
 800215a:	d001      	beq.n	8002160 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e000      	b.n	8002162 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3720      	adds	r7, #32
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	11c1808c 	.word	0x11c1808c
 8002170:	eefefffc 	.word	0xeefefffc

08002174 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e12c      	b.n	80023e2 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002188:	4b98      	ldr	r3, [pc, #608]	@ (80023ec <HAL_RCC_ClockConfig+0x278>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d91b      	bls.n	80021ce <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002196:	4b95      	ldr	r3, [pc, #596]	@ (80023ec <HAL_RCC_ClockConfig+0x278>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f023 0207 	bic.w	r2, r3, #7
 800219e:	4993      	ldr	r1, [pc, #588]	@ (80023ec <HAL_RCC_ClockConfig+0x278>)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021a6:	f7fe fe47 	bl	8000e38 <HAL_GetTick>
 80021aa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80021ae:	f7fe fe43 	bl	8000e38 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e110      	b.n	80023e2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021c0:	4b8a      	ldr	r3, [pc, #552]	@ (80023ec <HAL_RCC_ClockConfig+0x278>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d1ef      	bne.n	80021ae <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d016      	beq.n	8002208 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff fb02 	bl	80017e8 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80021e4:	f7fe fe28 	bl	8000e38 <HAL_GetTick>
 80021e8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80021ec:	f7fe fe24 	bl	8000e38 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e0f1      	b.n	80023e2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80021fe:	f7ff fbdf 	bl	80019c0 <LL_RCC_IsActiveFlag_HPRE>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d0f1      	beq.n	80021ec <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0320 	and.w	r3, r3, #32
 8002210:	2b00      	cmp	r3, #0
 8002212:	d016      	beq.n	8002242 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff faf8 	bl	800180e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800221e:	f7fe fe0b 	bl	8000e38 <HAL_GetTick>
 8002222:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002224:	e008      	b.n	8002238 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002226:	f7fe fe07 	bl	8000e38 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e0d4      	b.n	80023e2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002238:	f7ff fbd3 	bl	80019e2 <LL_RCC_IsActiveFlag_C2HPRE>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d0f1      	beq.n	8002226 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800224a:	2b00      	cmp	r3, #0
 800224c:	d016      	beq.n	800227c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff faf0 	bl	8001838 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002258:	f7fe fdee 	bl	8000e38 <HAL_GetTick>
 800225c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800225e:	e008      	b.n	8002272 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002260:	f7fe fdea 	bl	8000e38 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e0b7      	b.n	80023e2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002272:	f7ff fbc8 	bl	8001a06 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d0f1      	beq.n	8002260 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0304 	and.w	r3, r3, #4
 8002284:	2b00      	cmp	r3, #0
 8002286:	d016      	beq.n	80022b6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff fae9 	bl	8001864 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002292:	f7fe fdd1 	bl	8000e38 <HAL_GetTick>
 8002296:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002298:	e008      	b.n	80022ac <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800229a:	f7fe fdcd 	bl	8000e38 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e09a      	b.n	80023e2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80022ac:	f7ff fbbd 	bl	8001a2a <LL_RCC_IsActiveFlag_PPRE1>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d0f1      	beq.n	800229a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d017      	beq.n	80022f2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff fade 	bl	800188a <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80022ce:	f7fe fdb3 	bl	8000e38 <HAL_GetTick>
 80022d2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80022d6:	f7fe fdaf 	bl	8000e38 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e07c      	b.n	80023e2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80022e8:	f7ff fbb0 	bl	8001a4c <LL_RCC_IsActiveFlag_PPRE2>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0f1      	beq.n	80022d6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d043      	beq.n	8002386 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2b02      	cmp	r3, #2
 8002304:	d106      	bne.n	8002314 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002306:	f7ff f956 	bl	80015b6 <LL_RCC_HSE_IsReady>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d11e      	bne.n	800234e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e066      	b.n	80023e2 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2b03      	cmp	r3, #3
 800231a:	d106      	bne.n	800232a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800231c:	f7ff fb12 	bl	8001944 <LL_RCC_PLL_IsReady>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d113      	bne.n	800234e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e05b      	b.n	80023e2 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d106      	bne.n	8002340 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002332:	f7ff f9f0 	bl	8001716 <LL_RCC_MSI_IsReady>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d108      	bne.n	800234e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e050      	b.n	80023e2 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002340:	f7ff f966 	bl	8001610 <LL_RCC_HSI_IsReady>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e049      	b.n	80023e2 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff fa2a 	bl	80017ac <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002358:	f7fe fd6e 	bl	8000e38 <HAL_GetTick>
 800235c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235e:	e00a      	b.n	8002376 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002360:	f7fe fd6a 	bl	8000e38 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800236e:	4293      	cmp	r3, r2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e035      	b.n	80023e2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002376:	f7ff fa2c 	bl	80017d2 <LL_RCC_GetSysClkSource>
 800237a:	4602      	mov	r2, r0
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	429a      	cmp	r2, r3
 8002384:	d1ec      	bne.n	8002360 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002386:	4b19      	ldr	r3, [pc, #100]	@ (80023ec <HAL_RCC_ClockConfig+0x278>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	429a      	cmp	r2, r3
 8002392:	d21b      	bcs.n	80023cc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002394:	4b15      	ldr	r3, [pc, #84]	@ (80023ec <HAL_RCC_ClockConfig+0x278>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f023 0207 	bic.w	r2, r3, #7
 800239c:	4913      	ldr	r1, [pc, #76]	@ (80023ec <HAL_RCC_ClockConfig+0x278>)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023a4:	f7fe fd48 	bl	8000e38 <HAL_GetTick>
 80023a8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023aa:	e008      	b.n	80023be <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80023ac:	f7fe fd44 	bl	8000e38 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e011      	b.n	80023e2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023be:	4b0b      	ldr	r3, [pc, #44]	@ (80023ec <HAL_RCC_ClockConfig+0x278>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d1ef      	bne.n	80023ac <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80023cc:	f000 f8b4 	bl	8002538 <HAL_RCC_GetHCLKFreq>
 80023d0:	4603      	mov	r3, r0
 80023d2:	4a07      	ldr	r2, [pc, #28]	@ (80023f0 <HAL_RCC_ClockConfig+0x27c>)
 80023d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80023d6:	4b07      	ldr	r3, [pc, #28]	@ (80023f4 <HAL_RCC_ClockConfig+0x280>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7fe fce0 	bl	8000da0 <HAL_InitTick>
 80023e0:	4603      	mov	r3, r0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	58004000 	.word	0x58004000
 80023f0:	20000004 	.word	0x20000004
 80023f4:	20000014 	.word	0x20000014

080023f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023f8:	b590      	push	{r4, r7, lr}
 80023fa:	b087      	sub	sp, #28
 80023fc:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002402:	2300      	movs	r3, #0
 8002404:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002406:	f7ff f9e4 	bl	80017d2 <LL_RCC_GetSysClkSource>
 800240a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800240c:	f7ff facd 	bl	80019aa <LL_RCC_PLL_GetMainSource>
 8002410:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d005      	beq.n	8002424 <HAL_RCC_GetSysClockFreq+0x2c>
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	2b0c      	cmp	r3, #12
 800241c:	d139      	bne.n	8002492 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d136      	bne.n	8002492 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002424:	f7ff f987 	bl	8001736 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d115      	bne.n	800245a <HAL_RCC_GetSysClockFreq+0x62>
 800242e:	f7ff f982 	bl	8001736 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002432:	4603      	mov	r3, r0
 8002434:	2b01      	cmp	r3, #1
 8002436:	d106      	bne.n	8002446 <HAL_RCC_GetSysClockFreq+0x4e>
 8002438:	f7ff f98d 	bl	8001756 <LL_RCC_MSI_GetRange>
 800243c:	4603      	mov	r3, r0
 800243e:	0a1b      	lsrs	r3, r3, #8
 8002440:	f003 030f 	and.w	r3, r3, #15
 8002444:	e005      	b.n	8002452 <HAL_RCC_GetSysClockFreq+0x5a>
 8002446:	f7ff f991 	bl	800176c <LL_RCC_MSI_GetRangeAfterStandby>
 800244a:	4603      	mov	r3, r0
 800244c:	0a1b      	lsrs	r3, r3, #8
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	4a36      	ldr	r2, [pc, #216]	@ (800252c <HAL_RCC_GetSysClockFreq+0x134>)
 8002454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002458:	e014      	b.n	8002484 <HAL_RCC_GetSysClockFreq+0x8c>
 800245a:	f7ff f96c 	bl	8001736 <LL_RCC_MSI_IsEnabledRangeSelect>
 800245e:	4603      	mov	r3, r0
 8002460:	2b01      	cmp	r3, #1
 8002462:	d106      	bne.n	8002472 <HAL_RCC_GetSysClockFreq+0x7a>
 8002464:	f7ff f977 	bl	8001756 <LL_RCC_MSI_GetRange>
 8002468:	4603      	mov	r3, r0
 800246a:	091b      	lsrs	r3, r3, #4
 800246c:	f003 030f 	and.w	r3, r3, #15
 8002470:	e005      	b.n	800247e <HAL_RCC_GetSysClockFreq+0x86>
 8002472:	f7ff f97b 	bl	800176c <LL_RCC_MSI_GetRangeAfterStandby>
 8002476:	4603      	mov	r3, r0
 8002478:	091b      	lsrs	r3, r3, #4
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	4a2b      	ldr	r2, [pc, #172]	@ (800252c <HAL_RCC_GetSysClockFreq+0x134>)
 8002480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002484:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d115      	bne.n	80024b8 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002490:	e012      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2b04      	cmp	r3, #4
 8002496:	d102      	bne.n	800249e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002498:	4b25      	ldr	r3, [pc, #148]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x138>)
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	e00c      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	2b08      	cmp	r3, #8
 80024a2:	d109      	bne.n	80024b8 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80024a4:	f7ff f85a 	bl	800155c <LL_RCC_HSE_IsEnabledDiv2>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d102      	bne.n	80024b4 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80024ae:	4b20      	ldr	r3, [pc, #128]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x138>)
 80024b0:	617b      	str	r3, [r7, #20]
 80024b2:	e001      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80024b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x13c>)
 80024b6:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024b8:	f7ff f98b 	bl	80017d2 <LL_RCC_GetSysClkSource>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b0c      	cmp	r3, #12
 80024c0:	d12f      	bne.n	8002522 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80024c2:	f7ff fa72 	bl	80019aa <LL_RCC_PLL_GetMainSource>
 80024c6:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d003      	beq.n	80024d6 <HAL_RCC_GetSysClockFreq+0xde>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b03      	cmp	r3, #3
 80024d2:	d003      	beq.n	80024dc <HAL_RCC_GetSysClockFreq+0xe4>
 80024d4:	e00d      	b.n	80024f2 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80024d6:	4b16      	ldr	r3, [pc, #88]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x138>)
 80024d8:	60fb      	str	r3, [r7, #12]
        break;
 80024da:	e00d      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80024dc:	f7ff f83e 	bl	800155c <LL_RCC_HSE_IsEnabledDiv2>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d102      	bne.n	80024ec <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80024e6:	4b12      	ldr	r3, [pc, #72]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x138>)
 80024e8:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80024ea:	e005      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80024ec:	4b11      	ldr	r3, [pc, #68]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x13c>)
 80024ee:	60fb      	str	r3, [r7, #12]
        break;
 80024f0:	e002      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	60fb      	str	r3, [r7, #12]
        break;
 80024f6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80024f8:	f7ff fa35 	bl	8001966 <LL_RCC_PLL_GetN>
 80024fc:	4602      	mov	r2, r0
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	fb03 f402 	mul.w	r4, r3, r2
 8002504:	f7ff fa46 	bl	8001994 <LL_RCC_PLL_GetDivider>
 8002508:	4603      	mov	r3, r0
 800250a:	091b      	lsrs	r3, r3, #4
 800250c:	3301      	adds	r3, #1
 800250e:	fbb4 f4f3 	udiv	r4, r4, r3
 8002512:	f7ff fa34 	bl	800197e <LL_RCC_PLL_GetR>
 8002516:	4603      	mov	r3, r0
 8002518:	0f5b      	lsrs	r3, r3, #29
 800251a:	3301      	adds	r3, #1
 800251c:	fbb4 f3f3 	udiv	r3, r4, r3
 8002520:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002522:	697b      	ldr	r3, [r7, #20]
}
 8002524:	4618      	mov	r0, r3
 8002526:	371c      	adds	r7, #28
 8002528:	46bd      	mov	sp, r7
 800252a:	bd90      	pop	{r4, r7, pc}
 800252c:	08005de4 	.word	0x08005de4
 8002530:	00f42400 	.word	0x00f42400
 8002534:	01e84800 	.word	0x01e84800

08002538 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002538:	b598      	push	{r3, r4, r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800253c:	f7ff ff5c 	bl	80023f8 <HAL_RCC_GetSysClockFreq>
 8002540:	4604      	mov	r4, r0
 8002542:	f7ff f9b5 	bl	80018b0 <LL_RCC_GetAHBPrescaler>
 8002546:	4603      	mov	r3, r0
 8002548:	091b      	lsrs	r3, r3, #4
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	4a03      	ldr	r2, [pc, #12]	@ (800255c <HAL_RCC_GetHCLKFreq+0x24>)
 8002550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002554:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002558:	4618      	mov	r0, r3
 800255a:	bd98      	pop	{r3, r4, r7, pc}
 800255c:	08005d84 	.word	0x08005d84

08002560 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002560:	b598      	push	{r3, r4, r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002564:	f7ff ffe8 	bl	8002538 <HAL_RCC_GetHCLKFreq>
 8002568:	4604      	mov	r4, r0
 800256a:	f7ff f9b9 	bl	80018e0 <LL_RCC_GetAPB1Prescaler>
 800256e:	4603      	mov	r3, r0
 8002570:	0a1b      	lsrs	r3, r3, #8
 8002572:	4a03      	ldr	r2, [pc, #12]	@ (8002580 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002578:	fa24 f303 	lsr.w	r3, r4, r3
}
 800257c:	4618      	mov	r0, r3
 800257e:	bd98      	pop	{r3, r4, r7, pc}
 8002580:	08005dc4 	.word	0x08005dc4

08002584 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002584:	b598      	push	{r3, r4, r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002588:	f7ff ffd6 	bl	8002538 <HAL_RCC_GetHCLKFreq>
 800258c:	4604      	mov	r4, r0
 800258e:	f7ff f9b2 	bl	80018f6 <LL_RCC_GetAPB2Prescaler>
 8002592:	4603      	mov	r3, r0
 8002594:	0adb      	lsrs	r3, r3, #11
 8002596:	4a03      	ldr	r2, [pc, #12]	@ (80025a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800259c:	fa24 f303 	lsr.w	r3, r4, r3
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	bd98      	pop	{r3, r4, r7, pc}
 80025a4:	08005dc4 	.word	0x08005dc4

080025a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	091b      	lsrs	r3, r3, #4
 80025b4:	f003 030f 	and.w	r3, r3, #15
 80025b8:	4a10      	ldr	r2, [pc, #64]	@ (80025fc <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80025ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025be:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80025c0:	f7ff f981 	bl	80018c6 <LL_RCC_GetAHB3Prescaler>
 80025c4:	4603      	mov	r3, r0
 80025c6:	091b      	lsrs	r3, r3, #4
 80025c8:	f003 030f 	and.w	r3, r3, #15
 80025cc:	4a0c      	ldr	r2, [pc, #48]	@ (8002600 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80025ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d8:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	4a09      	ldr	r2, [pc, #36]	@ (8002604 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80025de:	fba2 2303 	umull	r2, r3, r2, r3
 80025e2:	0c9c      	lsrs	r4, r3, #18
 80025e4:	f7fe ff80 	bl	80014e8 <HAL_PWREx_GetVoltageRange>
 80025e8:	4603      	mov	r3, r0
 80025ea:	4619      	mov	r1, r3
 80025ec:	4620      	mov	r0, r4
 80025ee:	f000 f80b 	bl	8002608 <RCC_SetFlashLatency>
 80025f2:	4603      	mov	r3, r0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd90      	pop	{r4, r7, pc}
 80025fc:	08005de4 	.word	0x08005de4
 8002600:	08005d84 	.word	0x08005d84
 8002604:	431bde83 	.word	0x431bde83

08002608 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b08e      	sub	sp, #56	@ 0x38
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002612:	4a3a      	ldr	r2, [pc, #232]	@ (80026fc <RCC_SetFlashLatency+0xf4>)
 8002614:	f107 0320 	add.w	r3, r7, #32
 8002618:	e892 0003 	ldmia.w	r2, {r0, r1}
 800261c:	6018      	str	r0, [r3, #0]
 800261e:	3304      	adds	r3, #4
 8002620:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002622:	4a37      	ldr	r2, [pc, #220]	@ (8002700 <RCC_SetFlashLatency+0xf8>)
 8002624:	f107 0318 	add.w	r3, r7, #24
 8002628:	e892 0003 	ldmia.w	r2, {r0, r1}
 800262c:	6018      	str	r0, [r3, #0]
 800262e:	3304      	adds	r3, #4
 8002630:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002632:	4a34      	ldr	r2, [pc, #208]	@ (8002704 <RCC_SetFlashLatency+0xfc>)
 8002634:	f107 030c 	add.w	r3, r7, #12
 8002638:	ca07      	ldmia	r2, {r0, r1, r2}
 800263a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800263e:	2300      	movs	r3, #0
 8002640:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002648:	d11b      	bne.n	8002682 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800264a:	2300      	movs	r3, #0
 800264c:	633b      	str	r3, [r7, #48]	@ 0x30
 800264e:	e014      	b.n	800267a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	3338      	adds	r3, #56	@ 0x38
 8002656:	443b      	add	r3, r7
 8002658:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800265c:	461a      	mov	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4293      	cmp	r3, r2
 8002662:	d807      	bhi.n	8002674 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	3338      	adds	r3, #56	@ 0x38
 800266a:	443b      	add	r3, r7
 800266c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002670:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002672:	e021      	b.n	80026b8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002676:	3301      	adds	r3, #1
 8002678:	633b      	str	r3, [r7, #48]	@ 0x30
 800267a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800267c:	2b02      	cmp	r3, #2
 800267e:	d9e7      	bls.n	8002650 <RCC_SetFlashLatency+0x48>
 8002680:	e01a      	b.n	80026b8 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002682:	2300      	movs	r3, #0
 8002684:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002686:	e014      	b.n	80026b2 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	3338      	adds	r3, #56	@ 0x38
 800268e:	443b      	add	r3, r7
 8002690:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002694:	461a      	mov	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4293      	cmp	r3, r2
 800269a:	d807      	bhi.n	80026ac <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800269c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	3338      	adds	r3, #56	@ 0x38
 80026a2:	443b      	add	r3, r7
 80026a4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80026a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80026aa:	e005      	b.n	80026b8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80026ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026ae:	3301      	adds	r3, #1
 80026b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d9e7      	bls.n	8002688 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026b8:	4b13      	ldr	r3, [pc, #76]	@ (8002708 <RCC_SetFlashLatency+0x100>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f023 0207 	bic.w	r2, r3, #7
 80026c0:	4911      	ldr	r1, [pc, #68]	@ (8002708 <RCC_SetFlashLatency+0x100>)
 80026c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026c4:	4313      	orrs	r3, r2
 80026c6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80026c8:	f7fe fbb6 	bl	8000e38 <HAL_GetTick>
 80026cc:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80026ce:	e008      	b.n	80026e2 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80026d0:	f7fe fbb2 	bl	8000e38 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e007      	b.n	80026f2 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80026e2:	4b09      	ldr	r3, [pc, #36]	@ (8002708 <RCC_SetFlashLatency+0x100>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d1ef      	bne.n	80026d0 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3738      	adds	r7, #56	@ 0x38
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	08005d68 	.word	0x08005d68
 8002700:	08005d70 	.word	0x08005d70
 8002704:	08005d78 	.word	0x08005d78
 8002708:	58004000 	.word	0x58004000

0800270c <LL_RCC_LSE_IsReady>:
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002710:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002714:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b02      	cmp	r3, #2
 800271e:	d101      	bne.n	8002724 <LL_RCC_LSE_IsReady+0x18>
 8002720:	2301      	movs	r3, #1
 8002722:	e000      	b.n	8002726 <LL_RCC_LSE_IsReady+0x1a>
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	46bd      	mov	sp, r7
 800272a:	bc80      	pop	{r7}
 800272c:	4770      	bx	lr

0800272e <LL_RCC_SetUSARTClockSource>:
{
 800272e:	b480      	push	{r7}
 8002730:	b083      	sub	sp, #12
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002736:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800273a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	0c1b      	lsrs	r3, r3, #16
 8002742:	43db      	mvns	r3, r3
 8002744:	401a      	ands	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	b29b      	uxth	r3, r3
 800274a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800274e:	4313      	orrs	r3, r2
 8002750:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	bc80      	pop	{r7}
 800275c:	4770      	bx	lr

0800275e <LL_RCC_SetI2SClockSource>:
{
 800275e:	b480      	push	{r7}
 8002760:	b083      	sub	sp, #12
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002766:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800276a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800276e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002772:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4313      	orrs	r3, r2
 800277a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr

08002788 <LL_RCC_SetLPUARTClockSource>:
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002790:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002794:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002798:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800279c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr

080027b2 <LL_RCC_SetI2CClockSource>:
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80027ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027be:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	091b      	lsrs	r3, r3, #4
 80027c6:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80027ca:	43db      	mvns	r3, r3
 80027cc:	401a      	ands	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	011b      	lsls	r3, r3, #4
 80027d2:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80027d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80027da:	4313      	orrs	r3, r2
 80027dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc80      	pop	{r7}
 80027e8:	4770      	bx	lr

080027ea <LL_RCC_SetLPTIMClockSource>:
{
 80027ea:	b480      	push	{r7}
 80027ec:	b083      	sub	sp, #12
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80027f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027f6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	0c1b      	lsrs	r3, r3, #16
 80027fe:	041b      	lsls	r3, r3, #16
 8002800:	43db      	mvns	r3, r3
 8002802:	401a      	ands	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	041b      	lsls	r3, r3, #16
 8002808:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800280c:	4313      	orrs	r3, r2
 800280e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr

0800281c <LL_RCC_SetRNGClockSource>:
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002824:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002828:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800282c:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002830:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4313      	orrs	r3, r2
 8002838:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	bc80      	pop	{r7}
 8002844:	4770      	bx	lr

08002846 <LL_RCC_SetADCClockSource>:
{
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800284e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002856:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800285a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4313      	orrs	r3, r2
 8002862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr

08002870 <LL_RCC_SetRTCClockSource>:
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002878:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800287c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002880:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002884:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	bc80      	pop	{r7}
 8002898:	4770      	bx	lr

0800289a <LL_RCC_GetRTCClockSource>:
{
 800289a:	b480      	push	{r7}
 800289c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800289e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr

080028b2 <LL_RCC_ForceBackupDomainReset>:
{
 80028b2:	b480      	push	{r7}
 80028b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80028b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80028ca:	bf00      	nop
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr

080028d2 <LL_RCC_ReleaseBackupDomainReset>:
{
 80028d2:	b480      	push	{r7}
 80028d4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80028d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80028ea:	bf00      	nop
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr
	...

080028f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80028fc:	2300      	movs	r3, #0
 80028fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002900:	2300      	movs	r3, #0
 8002902:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002904:	2300      	movs	r3, #0
 8002906:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d058      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002914:	f7fe fdda 	bl	80014cc <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002918:	f7fe fa8e 	bl	8000e38 <HAL_GetTick>
 800291c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800291e:	e009      	b.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002920:	f7fe fa8a 	bl	8000e38 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d902      	bls.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	74fb      	strb	r3, [r7, #19]
        break;
 8002932:	e006      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002934:	4b7b      	ldr	r3, [pc, #492]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800293c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002940:	d1ee      	bne.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002942:	7cfb      	ldrb	r3, [r7, #19]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d13c      	bne.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002948:	f7ff ffa7 	bl	800289a <LL_RCC_GetRTCClockSource>
 800294c:	4602      	mov	r2, r0
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002952:	429a      	cmp	r2, r3
 8002954:	d00f      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002956:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800295a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800295e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002962:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002964:	f7ff ffa5 	bl	80028b2 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002968:	f7ff ffb3 	bl	80028d2 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800296c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d014      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002980:	f7fe fa5a 	bl	8000e38 <HAL_GetTick>
 8002984:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002986:	e00b      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002988:	f7fe fa56 	bl	8000e38 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002996:	4293      	cmp	r3, r2
 8002998:	d902      	bls.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	74fb      	strb	r3, [r7, #19]
            break;
 800299e:	e004      	b.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80029a0:	f7ff feb4 	bl	800270c <LL_RCC_LSE_IsReady>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d1ee      	bne.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80029aa:	7cfb      	ldrb	r3, [r7, #19]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d105      	bne.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff ff5b 	bl	8002870 <LL_RCC_SetRTCClockSource>
 80029ba:	e004      	b.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029bc:	7cfb      	ldrb	r3, [r7, #19]
 80029be:	74bb      	strb	r3, [r7, #18]
 80029c0:	e001      	b.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029c2:	7cfb      	ldrb	r3, [r7, #19]
 80029c4:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d004      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff fea9 	bl	800272e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d004      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff fe9e 	bl	800272e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0320 	and.w	r3, r3, #32
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d004      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff fec0 	bl	8002788 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d004      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff fee6 	bl	80027ea <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d004      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff fedb 	bl	80027ea <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d004      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff fed0 	bl	80027ea <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d004      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff fea9 	bl	80027b2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d004      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff fe9e 	bl	80027b2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d004      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff fe93 	bl	80027b2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0310 	and.w	r3, r3, #16
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d011      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff fe5e 	bl	800275e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002aaa:	d107      	bne.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002aac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ab6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002aba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d010      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff fea5 	bl	800281c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d107      	bne.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002ada:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ae4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ae8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d011      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff fea3 	bl	8002846 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b08:	d107      	bne.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b18:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002b1a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3718      	adds	r7, #24
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	58000400 	.word	0x58000400

08002b28 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8002b30:	4b06      	ldr	r3, [pc, #24]	@ (8002b4c <LL_PWR_SetRadioBusyTrigger+0x24>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002b38:	4904      	ldr	r1, [pc, #16]	@ (8002b4c <LL_PWR_SetRadioBusyTrigger+0x24>)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	608b      	str	r3, [r1, #8]
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bc80      	pop	{r7}
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	58000400 	.word	0x58000400

08002b50 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8002b54:	4b05      	ldr	r3, [pc, #20]	@ (8002b6c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8002b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b5a:	4a04      	ldr	r2, [pc, #16]	@ (8002b6c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8002b5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002b64:	bf00      	nop
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr
 8002b6c:	58000400 	.word	0x58000400

08002b70 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8002b74:	4b05      	ldr	r3, [pc, #20]	@ (8002b8c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8002b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b7a:	4a04      	ldr	r2, [pc, #16]	@ (8002b8c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8002b7c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002b80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002b84:	bf00      	nop
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr
 8002b8c:	58000400 	.word	0x58000400

08002b90 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8002b94:	4b03      	ldr	r3, [pc, #12]	@ (8002ba4 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8002b96:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002b9a:	619a      	str	r2, [r3, #24]
}
 8002b9c:	bf00      	nop
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bc80      	pop	{r7}
 8002ba2:	4770      	bx	lr
 8002ba4:	58000400 	.word	0x58000400

08002ba8 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8002bac:	4b06      	ldr	r3, [pc, #24]	@ (8002bc8 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d101      	bne.n	8002bbc <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e000      	b.n	8002bbe <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bc80      	pop	{r7}
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	58000400 	.word	0x58000400

08002bcc <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8002bd0:	4b06      	ldr	r3, [pc, #24]	@ (8002bec <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2b04      	cmp	r3, #4
 8002bda:	d101      	bne.n	8002be0 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e000      	b.n	8002be2 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bc80      	pop	{r7}
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	58000400 	.word	0x58000400

08002bf0 <LL_RCC_RF_DisableReset>:
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8002bf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bfc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c00:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002c04:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002c08:	bf00      	nop
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr

08002c10 <LL_RCC_IsRFUnderReset>:
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8002c14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c24:	d101      	bne.n	8002c2a <LL_RCC_IsRFUnderReset+0x1a>
 8002c26:	2301      	movs	r3, #1
 8002c28:	e000      	b.n	8002c2c <LL_RCC_IsRFUnderReset+0x1c>
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bc80      	pop	{r7}
 8002c32:	4770      	bx	lr

08002c34 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002c3c:	4b06      	ldr	r3, [pc, #24]	@ (8002c58 <LL_EXTI_EnableIT_32_63+0x24>)
 8002c3e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002c42:	4905      	ldr	r1, [pc, #20]	@ (8002c58 <LL_EXTI_EnableIT_32_63+0x24>)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bc80      	pop	{r7}
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	58000800 	.word	0x58000800

08002c5c <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d103      	bne.n	8002c72 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	73fb      	strb	r3, [r7, #15]
    return status;
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
 8002c70:	e052      	b.n	8002d18 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8002c72:	2300      	movs	r3, #0
 8002c74:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	799b      	ldrb	r3, [r3, #6]
 8002c7a:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8002c7c:	7bbb      	ldrb	r3, [r7, #14]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d002      	beq.n	8002c88 <HAL_SUBGHZ_Init+0x2c>
 8002c82:	7bbb      	ldrb	r3, [r7, #14]
 8002c84:	2b03      	cmp	r3, #3
 8002c86:	d109      	bne.n	8002c9c <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7fd fe30 	bl	80008f4 <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8002c94:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002c98:	f7ff ffcc 	bl	8002c34 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8002c9c:	7bbb      	ldrb	r3, [r7, #14]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d126      	bne.n	8002cf0 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2202      	movs	r2, #2
 8002ca6:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8002ca8:	f7ff ffa2 	bl	8002bf0 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8002cac:	4b1c      	ldr	r3, [pc, #112]	@ (8002d20 <HAL_SUBGHZ_Init+0xc4>)
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	1a9b      	subs	r3, r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	0cdb      	lsrs	r3, r3, #19
 8002cba:	2264      	movs	r2, #100	@ 0x64
 8002cbc:	fb02 f303 	mul.w	r3, r2, r3
 8002cc0:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d105      	bne.n	8002cd4 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	609a      	str	r2, [r3, #8]
        break;
 8002cd2:	e007      	b.n	8002ce4 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8002cda:	f7ff ff99 	bl	8002c10 <LL_RCC_IsRFUnderReset>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1ee      	bne.n	8002cc2 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002ce4:	f7ff ff34 	bl	8002b50 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8002ce8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002cec:	f7ff ff1c 	bl	8002b28 <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8002cf0:	f7ff ff4e 	bl	8002b90 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8002cf4:	7bfb      	ldrb	r3, [r7, #15]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10a      	bne.n	8002d10 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f000 f952 	bl	8002fa8 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	719a      	strb	r2, [r3, #6]

  return status;
 8002d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	20000004 	.word	0x20000004

08002d24 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	607a      	str	r2, [r7, #4]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	460b      	mov	r3, r1
 8002d32:	72fb      	strb	r3, [r7, #11]
 8002d34:	4613      	mov	r3, r2
 8002d36:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	799b      	ldrb	r3, [r3, #6]
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d14a      	bne.n	8002dd8 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	795b      	ldrb	r3, [r3, #5]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d101      	bne.n	8002d4e <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	e045      	b.n	8002dda <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2201      	movs	r2, #1
 8002d52:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f000 f9f5 	bl	8003144 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8002d5a:	7afb      	ldrb	r3, [r7, #11]
 8002d5c:	2b84      	cmp	r3, #132	@ 0x84
 8002d5e:	d002      	beq.n	8002d66 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8002d60:	7afb      	ldrb	r3, [r7, #11]
 8002d62:	2b94      	cmp	r3, #148	@ 0x94
 8002d64:	d103      	bne.n	8002d6e <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	711a      	strb	r2, [r3, #4]
 8002d6c:	e002      	b.n	8002d74 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002d74:	f7ff fefc 	bl	8002b70 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8002d78:	7afb      	ldrb	r3, [r7, #11]
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 f933 	bl	8002fe8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8002d82:	2300      	movs	r3, #0
 8002d84:	82bb      	strh	r3, [r7, #20]
 8002d86:	e00a      	b.n	8002d9e <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8002d88:	8abb      	ldrh	r3, [r7, #20]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	4619      	mov	r1, r3
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 f928 	bl	8002fe8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8002d98:	8abb      	ldrh	r3, [r7, #20]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	82bb      	strh	r3, [r7, #20]
 8002d9e:	8aba      	ldrh	r2, [r7, #20]
 8002da0:	893b      	ldrh	r3, [r7, #8]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d3f0      	bcc.n	8002d88 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002da6:	f7ff fed3 	bl	8002b50 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8002daa:	7afb      	ldrb	r3, [r7, #11]
 8002dac:	2b84      	cmp	r3, #132	@ 0x84
 8002dae:	d002      	beq.n	8002db6 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 f9eb 	bl	800318c <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d002      	beq.n	8002dc4 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	75fb      	strb	r3, [r7, #23]
 8002dc2:	e001      	b.n	8002dc8 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	715a      	strb	r2, [r3, #5]

    return status;
 8002dd4:	7dfb      	ldrb	r3, [r7, #23]
 8002dd6:	e000      	b.n	8002dda <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8002dd8:	2302      	movs	r3, #2
  }
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b088      	sub	sp, #32
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	60f8      	str	r0, [r7, #12]
 8002dea:	607a      	str	r2, [r7, #4]
 8002dec:	461a      	mov	r2, r3
 8002dee:	460b      	mov	r3, r1
 8002df0:	72fb      	strb	r3, [r7, #11]
 8002df2:	4613      	mov	r3, r2
 8002df4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	799b      	ldrb	r3, [r3, #6]
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d13d      	bne.n	8002e80 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	795b      	ldrb	r3, [r3, #5]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d101      	bne.n	8002e10 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	e038      	b.n	8002e82 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2201      	movs	r2, #1
 8002e14:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f000 f994 	bl	8003144 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002e1c:	f7ff fea8 	bl	8002b70 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8002e20:	7afb      	ldrb	r3, [r7, #11]
 8002e22:	4619      	mov	r1, r3
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f000 f8df 	bl	8002fe8 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 f8db 	bl	8002fe8 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8002e32:	2300      	movs	r3, #0
 8002e34:	82fb      	strh	r3, [r7, #22]
 8002e36:	e009      	b.n	8002e4c <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8002e38:	69b9      	ldr	r1, [r7, #24]
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 f92a 	bl	8003094 <SUBGHZSPI_Receive>
      pData++;
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	3301      	adds	r3, #1
 8002e44:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8002e46:	8afb      	ldrh	r3, [r7, #22]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	82fb      	strh	r3, [r7, #22]
 8002e4c:	8afa      	ldrh	r2, [r7, #22]
 8002e4e:	893b      	ldrh	r3, [r7, #8]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d3f1      	bcc.n	8002e38 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002e54:	f7ff fe7c 	bl	8002b50 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f000 f997 	bl	800318c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d002      	beq.n	8002e6c <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	77fb      	strb	r3, [r7, #31]
 8002e6a:	e001      	b.n	8002e70 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2201      	movs	r2, #1
 8002e74:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	715a      	strb	r2, [r3, #5]

    return status;
 8002e7c:	7ffb      	ldrb	r3, [r7, #31]
 8002e7e:	e000      	b.n	8002e82 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002e80:	2302      	movs	r3, #2
  }
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3720      	adds	r7, #32
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b084      	sub	sp, #16
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8002e92:	2300      	movs	r3, #0
 8002e94:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8002e96:	f107 020c 	add.w	r2, r7, #12
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	2112      	movs	r1, #18
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7ff ff9f 	bl	8002de2 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8002ea4:	7b3b      	ldrb	r3, [r7, #12]
 8002ea6:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8002ea8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002eac:	021b      	lsls	r3, r3, #8
 8002eae:	b21a      	sxth	r2, r3
 8002eb0:	7b7b      	ldrb	r3, [r7, #13]
 8002eb2:	b21b      	sxth	r3, r3
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	b21b      	sxth	r3, r3
 8002eb8:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8002eba:	f107 020c 	add.w	r2, r7, #12
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	2102      	movs	r1, #2
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7ff ff2e 	bl	8002d24 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8002ec8:	89fb      	ldrh	r3, [r7, #14]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d002      	beq.n	8002ed8 <HAL_SUBGHZ_IRQHandler+0x4e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7fd fea4 	bl	8000c20 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8002ed8:	89fb      	ldrh	r3, [r7, #14]
 8002eda:	085b      	lsrs	r3, r3, #1
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d008      	beq.n	8002ef6 <HAL_SUBGHZ_IRQHandler+0x6c>
      (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) == RESET))
 8002ee4:	89fb      	ldrh	r3, [r7, #14]
 8002ee6:	099b      	lsrs	r3, r3, #6
 8002ee8:	f003 0301 	and.w	r3, r3, #1
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d102      	bne.n	8002ef6 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f7fd fea3 	bl	8000c3c <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8002ef6:	89fb      	ldrh	r3, [r7, #14]
 8002ef8:	089b      	lsrs	r3, r3, #2
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d002      	beq.n	8002f08 <HAL_SUBGHZ_IRQHandler+0x7e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7fd fef2 	bl	8000cec <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8002f08:	89fb      	ldrh	r3, [r7, #14]
 8002f0a:	08db      	lsrs	r3, r3, #3
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d002      	beq.n	8002f1a <HAL_SUBGHZ_IRQHandler+0x90>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f7fd fef7 	bl	8000d08 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8002f1a:	89fb      	ldrh	r3, [r7, #14]
 8002f1c:	091b      	lsrs	r3, r3, #4
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d002      	beq.n	8002f2c <HAL_SUBGHZ_IRQHandler+0xa2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7fd fefc 	bl	8000d24 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8002f2c:	89fb      	ldrh	r3, [r7, #14]
 8002f2e:	095b      	lsrs	r3, r3, #5
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d002      	beq.n	8002f3e <HAL_SUBGHZ_IRQHandler+0xb4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f7fd fec9 	bl	8000cd0 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8002f3e:	89fb      	ldrh	r3, [r7, #14]
 8002f40:	099b      	lsrs	r3, r3, #6
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d002      	beq.n	8002f50 <HAL_SUBGHZ_IRQHandler+0xc6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7fd fe84 	bl	8000c58 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8002f50:	89fb      	ldrh	r3, [r7, #14]
 8002f52:	09db      	lsrs	r3, r3, #7
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00e      	beq.n	8002f7a <HAL_SUBGHZ_IRQHandler+0xf0>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8002f5c:	89fb      	ldrh	r3, [r7, #14]
 8002f5e:	0a1b      	lsrs	r3, r3, #8
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d004      	beq.n	8002f72 <HAL_SUBGHZ_IRQHandler+0xe8>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8002f68:	2101      	movs	r1, #1
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7fd fe82 	bl	8000c74 <HAL_SUBGHZ_CADStatusCallback>
 8002f70:	e003      	b.n	8002f7a <HAL_SUBGHZ_IRQHandler+0xf0>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8002f72:	2100      	movs	r1, #0
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f7fd fe7d 	bl	8000c74 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8002f7a:	89fb      	ldrh	r3, [r7, #14]
 8002f7c:	0a5b      	lsrs	r3, r3, #9
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d002      	beq.n	8002f8c <HAL_SUBGHZ_IRQHandler+0x102>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f7fd fe92 	bl	8000cb0 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8002f8c:	89fb      	ldrh	r3, [r7, #14]
 8002f8e:	0b9b      	lsrs	r3, r3, #14
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d002      	beq.n	8002f9e <HAL_SUBGHZ_IRQHandler+0x114>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f7fd fed1 	bl	8000d40 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8002f9e:	bf00      	nop
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
	...

08002fa8 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8002fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8002fe4 <SUBGHZSPI_Init+0x3c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a0b      	ldr	r2, [pc, #44]	@ (8002fe4 <SUBGHZSPI_Init+0x3c>)
 8002fb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fba:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8002fbc:	4a09      	ldr	r2, [pc, #36]	@ (8002fe4 <SUBGHZSPI_Init+0x3c>)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8002fc4:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8002fc6:	4b07      	ldr	r3, [pc, #28]	@ (8002fe4 <SUBGHZSPI_Init+0x3c>)
 8002fc8:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8002fcc:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8002fce:	4b05      	ldr	r3, [pc, #20]	@ (8002fe4 <SUBGHZSPI_Init+0x3c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a04      	ldr	r2, [pc, #16]	@ (8002fe4 <SUBGHZSPI_Init+0x3c>)
 8002fd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fd8:	6013      	str	r3, [r2, #0]
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr
 8002fe4:	58010000 	.word	0x58010000

08002fe8 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b087      	sub	sp, #28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8002ff8:	4b23      	ldr	r3, [pc, #140]	@ (8003088 <SUBGHZSPI_Transmit+0xa0>)
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	1a9b      	subs	r3, r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	0cdb      	lsrs	r3, r3, #19
 8003006:	2264      	movs	r2, #100	@ 0x64
 8003008:	fb02 f303 	mul.w	r3, r2, r3
 800300c:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d105      	bne.n	8003020 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	609a      	str	r2, [r3, #8]
      break;
 800301e:	e008      	b.n	8003032 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	3b01      	subs	r3, #1
 8003024:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8003026:	4b19      	ldr	r3, [pc, #100]	@ (800308c <SUBGHZSPI_Transmit+0xa4>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b02      	cmp	r3, #2
 8003030:	d1ed      	bne.n	800300e <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8003032:	4b17      	ldr	r3, [pc, #92]	@ (8003090 <SUBGHZSPI_Transmit+0xa8>)
 8003034:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	78fa      	ldrb	r2, [r7, #3]
 800303a:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800303c:	4b12      	ldr	r3, [pc, #72]	@ (8003088 <SUBGHZSPI_Transmit+0xa0>)
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	4613      	mov	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	1a9b      	subs	r3, r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	0cdb      	lsrs	r3, r3, #19
 800304a:	2264      	movs	r2, #100	@ 0x64
 800304c:	fb02 f303 	mul.w	r3, r2, r3
 8003050:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d105      	bne.n	8003064 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	609a      	str	r2, [r3, #8]
      break;
 8003062:	e008      	b.n	8003076 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	3b01      	subs	r3, #1
 8003068:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800306a:	4b08      	ldr	r3, [pc, #32]	@ (800308c <SUBGHZSPI_Transmit+0xa4>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b01      	cmp	r3, #1
 8003074:	d1ed      	bne.n	8003052 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8003076:	4b05      	ldr	r3, [pc, #20]	@ (800308c <SUBGHZSPI_Transmit+0xa4>)
 8003078:	68db      	ldr	r3, [r3, #12]

  return status;
 800307a:	7dfb      	ldrb	r3, [r7, #23]
}
 800307c:	4618      	mov	r0, r3
 800307e:	371c      	adds	r7, #28
 8003080:	46bd      	mov	sp, r7
 8003082:	bc80      	pop	{r7}
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	20000004 	.word	0x20000004
 800308c:	58010000 	.word	0x58010000
 8003090:	5801000c 	.word	0x5801000c

08003094 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8003094:	b480      	push	{r7}
 8003096:	b087      	sub	sp, #28
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800309e:	2300      	movs	r3, #0
 80030a0:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80030a2:	4b25      	ldr	r3, [pc, #148]	@ (8003138 <SUBGHZSPI_Receive+0xa4>)
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	4613      	mov	r3, r2
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	1a9b      	subs	r3, r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	0cdb      	lsrs	r3, r3, #19
 80030b0:	2264      	movs	r2, #100	@ 0x64
 80030b2:	fb02 f303 	mul.w	r3, r2, r3
 80030b6:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d105      	bne.n	80030ca <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	609a      	str	r2, [r3, #8]
      break;
 80030c8:	e008      	b.n	80030dc <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	3b01      	subs	r3, #1
 80030ce:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80030d0:	4b1a      	ldr	r3, [pc, #104]	@ (800313c <SUBGHZSPI_Receive+0xa8>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d1ed      	bne.n	80030b8 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80030dc:	4b18      	ldr	r3, [pc, #96]	@ (8003140 <SUBGHZSPI_Receive+0xac>)
 80030de:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	22ff      	movs	r2, #255	@ 0xff
 80030e4:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80030e6:	4b14      	ldr	r3, [pc, #80]	@ (8003138 <SUBGHZSPI_Receive+0xa4>)
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	4613      	mov	r3, r2
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	1a9b      	subs	r3, r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	0cdb      	lsrs	r3, r3, #19
 80030f4:	2264      	movs	r2, #100	@ 0x64
 80030f6:	fb02 f303 	mul.w	r3, r2, r3
 80030fa:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d105      	bne.n	800310e <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	609a      	str	r2, [r3, #8]
      break;
 800310c:	e008      	b.n	8003120 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	3b01      	subs	r3, #1
 8003112:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8003114:	4b09      	ldr	r3, [pc, #36]	@ (800313c <SUBGHZSPI_Receive+0xa8>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b01      	cmp	r3, #1
 800311e:	d1ed      	bne.n	80030fc <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8003120:	4b06      	ldr	r3, [pc, #24]	@ (800313c <SUBGHZSPI_Receive+0xa8>)
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	b2da      	uxtb	r2, r3
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	701a      	strb	r2, [r3, #0]

  return status;
 800312a:	7dfb      	ldrb	r3, [r7, #23]
}
 800312c:	4618      	mov	r0, r3
 800312e:	371c      	adds	r7, #28
 8003130:	46bd      	mov	sp, r7
 8003132:	bc80      	pop	{r7}
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	20000004 	.word	0x20000004
 800313c:	58010000 	.word	0x58010000
 8003140:	5801000c 	.word	0x5801000c

08003144 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	791b      	ldrb	r3, [r3, #4]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d111      	bne.n	8003178 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8003154:	4b0c      	ldr	r3, [pc, #48]	@ (8003188 <SUBGHZ_CheckDeviceReady+0x44>)
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	4613      	mov	r3, r2
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	4413      	add	r3, r2
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	0c1b      	lsrs	r3, r3, #16
 8003162:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003164:	f7ff fd04 	bl	8002b70 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	3b01      	subs	r3, #1
 800316c:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1f9      	bne.n	8003168 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003174:	f7ff fcec 	bl	8002b50 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 f807 	bl	800318c <SUBGHZ_WaitOnBusy>
 800317e:	4603      	mov	r3, r0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	20000004 	.word	0x20000004

0800318c <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8003194:	2300      	movs	r3, #0
 8003196:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8003198:	4b12      	ldr	r3, [pc, #72]	@ (80031e4 <SUBGHZ_WaitOnBusy+0x58>)
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	4613      	mov	r3, r2
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	4413      	add	r3, r2
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	0d1b      	lsrs	r3, r3, #20
 80031a6:	2264      	movs	r2, #100	@ 0x64
 80031a8:	fb02 f303 	mul.w	r3, r2, r3
 80031ac:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80031ae:	f7ff fd0d 	bl	8002bcc <LL_PWR_IsActiveFlag_RFBUSYMS>
 80031b2:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d105      	bne.n	80031c6 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2202      	movs	r2, #2
 80031c2:	609a      	str	r2, [r3, #8]
      break;
 80031c4:	e009      	b.n	80031da <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	3b01      	subs	r3, #1
 80031ca:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80031cc:	f7ff fcec 	bl	8002ba8 <LL_PWR_IsActiveFlag_RFBUSYS>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	4013      	ands	r3, r2
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d0e9      	beq.n	80031ae <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80031da:	7dfb      	ldrb	r3, [r7, #23]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3718      	adds	r7, #24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	20000004 	.word	0x20000004

080031e8 <LL_RCC_GetUSARTClockSource>:
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80031f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	401a      	ands	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	041b      	lsls	r3, r3, #16
 8003200:	4313      	orrs	r3, r2
}
 8003202:	4618      	mov	r0, r3
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr

0800320c <LL_RCC_GetLPUARTClockSource>:
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003214:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003218:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4013      	ands	r3, r2
}
 8003220:	4618      	mov	r0, r3
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	bc80      	pop	{r7}
 8003228:	4770      	bx	lr

0800322a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b082      	sub	sp, #8
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d101      	bne.n	800323c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e042      	b.n	80032c2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003242:	2b00      	cmp	r3, #0
 8003244:	d106      	bne.n	8003254 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7fd fc1c 	bl	8000a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2224      	movs	r2, #36	@ 0x24
 8003258:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0201 	bic.w	r2, r2, #1
 800326a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003270:	2b00      	cmp	r3, #0
 8003272:	d002      	beq.n	800327a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 feb1 	bl	8003fdc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 fc3a 	bl	8003af4 <UART_SetConfig>
 8003280:	4603      	mov	r3, r0
 8003282:	2b01      	cmp	r3, #1
 8003284:	d101      	bne.n	800328a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e01b      	b.n	80032c2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003298:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80032a8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f042 0201 	orr.w	r2, r2, #1
 80032b8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 ff2f 	bl	800411e <UART_CheckIdleState>
 80032c0:	4603      	mov	r3, r0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b08a      	sub	sp, #40	@ 0x28
 80032ce:	af02      	add	r7, sp, #8
 80032d0:	60f8      	str	r0, [r7, #12]
 80032d2:	60b9      	str	r1, [r7, #8]
 80032d4:	603b      	str	r3, [r7, #0]
 80032d6:	4613      	mov	r3, r2
 80032d8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032e0:	2b20      	cmp	r3, #32
 80032e2:	d173      	bne.n	80033cc <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d002      	beq.n	80032f0 <HAL_UART_Transmit+0x26>
 80032ea:	88fb      	ldrh	r3, [r7, #6]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d101      	bne.n	80032f4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e06c      	b.n	80033ce <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2221      	movs	r2, #33	@ 0x21
 8003300:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003304:	f7fd fd98 	bl	8000e38 <HAL_GetTick>
 8003308:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	88fa      	ldrh	r2, [r7, #6]
 800330e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	88fa      	ldrh	r2, [r7, #6]
 8003316:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003322:	d108      	bne.n	8003336 <HAL_UART_Transmit+0x6c>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d104      	bne.n	8003336 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800332c:	2300      	movs	r3, #0
 800332e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	61bb      	str	r3, [r7, #24]
 8003334:	e003      	b.n	800333e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800333a:	2300      	movs	r3, #0
 800333c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800333e:	e02c      	b.n	800339a <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	2200      	movs	r2, #0
 8003348:	2180      	movs	r1, #128	@ 0x80
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f000 ff35 	bl	80041ba <UART_WaitOnFlagUntilTimeout>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e039      	b.n	80033ce <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d10b      	bne.n	8003378 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	881b      	ldrh	r3, [r3, #0]
 8003364:	461a      	mov	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800336e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	3302      	adds	r3, #2
 8003374:	61bb      	str	r3, [r7, #24]
 8003376:	e007      	b.n	8003388 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	781a      	ldrb	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	3301      	adds	r3, #1
 8003386:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800338e:	b29b      	uxth	r3, r3
 8003390:	3b01      	subs	r3, #1
 8003392:	b29a      	uxth	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1cc      	bne.n	8003340 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	9300      	str	r3, [sp, #0]
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	2200      	movs	r2, #0
 80033ae:	2140      	movs	r1, #64	@ 0x40
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f000 ff02 	bl	80041ba <UART_WaitOnFlagUntilTimeout>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e006      	b.n	80033ce <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2220      	movs	r2, #32
 80033c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80033c8:	2300      	movs	r3, #0
 80033ca:	e000      	b.n	80033ce <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 80033cc:	2302      	movs	r3, #2
  }
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3720      	adds	r7, #32
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
	...

080033d8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b08a      	sub	sp, #40	@ 0x28
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	4613      	mov	r3, r2
 80033e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033ec:	2b20      	cmp	r3, #32
 80033ee:	d137      	bne.n	8003460 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d002      	beq.n	80033fc <HAL_UART_Receive_IT+0x24>
 80033f6:	88fb      	ldrh	r3, [r7, #6]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e030      	b.n	8003462 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a18      	ldr	r2, [pc, #96]	@ (800346c <HAL_UART_Receive_IT+0x94>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d01f      	beq.n	8003450 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d018      	beq.n	8003450 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	e853 3f00 	ldrex	r3, [r3]
 800342a:	613b      	str	r3, [r7, #16]
   return(result);
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003432:	627b      	str	r3, [r7, #36]	@ 0x24
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	461a      	mov	r2, r3
 800343a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800343c:	623b      	str	r3, [r7, #32]
 800343e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003440:	69f9      	ldr	r1, [r7, #28]
 8003442:	6a3a      	ldr	r2, [r7, #32]
 8003444:	e841 2300 	strex	r3, r2, [r1]
 8003448:	61bb      	str	r3, [r7, #24]
   return(result);
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1e6      	bne.n	800341e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003450:	88fb      	ldrh	r3, [r7, #6]
 8003452:	461a      	mov	r2, r3
 8003454:	68b9      	ldr	r1, [r7, #8]
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 ff7e 	bl	8004358 <UART_Start_Receive_IT>
 800345c:	4603      	mov	r3, r0
 800345e:	e000      	b.n	8003462 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003460:	2302      	movs	r3, #2
  }
}
 8003462:	4618      	mov	r0, r3
 8003464:	3728      	adds	r7, #40	@ 0x28
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	40008000 	.word	0x40008000

08003470 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b0ba      	sub	sp, #232	@ 0xe8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003496:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800349a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800349e:	4013      	ands	r3, r2
 80034a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80034a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d11b      	bne.n	80034e4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80034ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034b0:	f003 0320 	and.w	r3, r3, #32
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d015      	beq.n	80034e4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80034b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034bc:	f003 0320 	and.w	r3, r3, #32
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d105      	bne.n	80034d0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80034c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d009      	beq.n	80034e4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 82e3 	beq.w	8003aa0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	4798      	blx	r3
      }
      return;
 80034e2:	e2dd      	b.n	8003aa0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80034e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 8123 	beq.w	8003734 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80034ee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80034f2:	4b8d      	ldr	r3, [pc, #564]	@ (8003728 <HAL_UART_IRQHandler+0x2b8>)
 80034f4:	4013      	ands	r3, r2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d106      	bne.n	8003508 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80034fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80034fe:	4b8b      	ldr	r3, [pc, #556]	@ (800372c <HAL_UART_IRQHandler+0x2bc>)
 8003500:	4013      	ands	r3, r2
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 8116 	beq.w	8003734 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b00      	cmp	r3, #0
 8003512:	d011      	beq.n	8003538 <HAL_UART_IRQHandler+0xc8>
 8003514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00b      	beq.n	8003538 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2201      	movs	r2, #1
 8003526:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800352e:	f043 0201 	orr.w	r2, r3, #1
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d011      	beq.n	8003568 <HAL_UART_IRQHandler+0xf8>
 8003544:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00b      	beq.n	8003568 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2202      	movs	r2, #2
 8003556:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800355e:	f043 0204 	orr.w	r2, r3, #4
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b00      	cmp	r3, #0
 8003572:	d011      	beq.n	8003598 <HAL_UART_IRQHandler+0x128>
 8003574:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00b      	beq.n	8003598 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2204      	movs	r2, #4
 8003586:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800358e:	f043 0202 	orr.w	r2, r3, #2
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800359c:	f003 0308 	and.w	r3, r3, #8
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d017      	beq.n	80035d4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80035a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035a8:	f003 0320 	and.w	r3, r3, #32
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d105      	bne.n	80035bc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80035b0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80035b4:	4b5c      	ldr	r3, [pc, #368]	@ (8003728 <HAL_UART_IRQHandler+0x2b8>)
 80035b6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00b      	beq.n	80035d4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2208      	movs	r2, #8
 80035c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ca:	f043 0208 	orr.w	r2, r3, #8
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80035d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d012      	beq.n	8003606 <HAL_UART_IRQHandler+0x196>
 80035e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00c      	beq.n	8003606 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80035f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035fc:	f043 0220 	orr.w	r2, r3, #32
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 8249 	beq.w	8003aa4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003616:	f003 0320 	and.w	r3, r3, #32
 800361a:	2b00      	cmp	r3, #0
 800361c:	d013      	beq.n	8003646 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800361e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003622:	f003 0320 	and.w	r3, r3, #32
 8003626:	2b00      	cmp	r3, #0
 8003628:	d105      	bne.n	8003636 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800362a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800362e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d007      	beq.n	8003646 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800364c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800365a:	2b40      	cmp	r3, #64	@ 0x40
 800365c:	d005      	beq.n	800366a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800365e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003662:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003666:	2b00      	cmp	r3, #0
 8003668:	d054      	beq.n	8003714 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 ff94 	bl	8004598 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800367a:	2b40      	cmp	r3, #64	@ 0x40
 800367c:	d146      	bne.n	800370c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	3308      	adds	r3, #8
 8003684:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003688:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800368c:	e853 3f00 	ldrex	r3, [r3]
 8003690:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003694:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003698:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800369c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	3308      	adds	r3, #8
 80036a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80036aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80036ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80036b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80036ba:	e841 2300 	strex	r3, r2, [r1]
 80036be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80036c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1d9      	bne.n	800367e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d017      	beq.n	8003704 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036da:	4a15      	ldr	r2, [pc, #84]	@ (8003730 <HAL_UART_IRQHandler+0x2c0>)
 80036dc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7fd fd1a 	bl	800111e <HAL_DMA_Abort_IT>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d019      	beq.n	8003724 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80036fe:	4610      	mov	r0, r2
 8003700:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003702:	e00f      	b.n	8003724 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 f9e0 	bl	8003aca <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800370a:	e00b      	b.n	8003724 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 f9dc 	bl	8003aca <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003712:	e007      	b.n	8003724 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f9d8 	bl	8003aca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8003722:	e1bf      	b.n	8003aa4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003724:	bf00      	nop
    return;
 8003726:	e1bd      	b.n	8003aa4 <HAL_UART_IRQHandler+0x634>
 8003728:	10000001 	.word	0x10000001
 800372c:	04000120 	.word	0x04000120
 8003730:	08004663 	.word	0x08004663

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003738:	2b01      	cmp	r3, #1
 800373a:	f040 8153 	bne.w	80039e4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800373e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003742:	f003 0310 	and.w	r3, r3, #16
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 814c 	beq.w	80039e4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800374c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003750:	f003 0310 	and.w	r3, r3, #16
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 8145 	beq.w	80039e4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2210      	movs	r2, #16
 8003760:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800376c:	2b40      	cmp	r3, #64	@ 0x40
 800376e:	f040 80bb 	bne.w	80038e8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003780:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003784:	2b00      	cmp	r3, #0
 8003786:	f000 818f 	beq.w	8003aa8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003790:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003794:	429a      	cmp	r2, r3
 8003796:	f080 8187 	bcs.w	8003aa8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80037a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0320 	and.w	r3, r3, #32
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f040 8087 	bne.w	80038c6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80037c4:	e853 3f00 	ldrex	r3, [r3]
 80037c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80037cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80037d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	461a      	mov	r2, r3
 80037de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80037e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80037e6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80037ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80037f2:	e841 2300 	strex	r3, r2, [r1]
 80037f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80037fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1da      	bne.n	80037b8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	3308      	adds	r3, #8
 8003808:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800380c:	e853 3f00 	ldrex	r3, [r3]
 8003810:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003812:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003814:	f023 0301 	bic.w	r3, r3, #1
 8003818:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	3308      	adds	r3, #8
 8003822:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003826:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800382a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800382c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800382e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003832:	e841 2300 	strex	r3, r2, [r1]
 8003836:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003838:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1e1      	bne.n	8003802 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	3308      	adds	r3, #8
 8003844:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003846:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003848:	e853 3f00 	ldrex	r3, [r3]
 800384c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800384e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003850:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003854:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	3308      	adds	r3, #8
 800385e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003862:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003864:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003866:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003868:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800386a:	e841 2300 	strex	r3, r2, [r1]
 800386e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003870:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1e3      	bne.n	800383e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2220      	movs	r2, #32
 800387a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800388c:	e853 3f00 	ldrex	r3, [r3]
 8003890:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003892:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003894:	f023 0310 	bic.w	r3, r3, #16
 8003898:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	461a      	mov	r2, r3
 80038a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80038a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80038a8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80038ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80038ae:	e841 2300 	strex	r3, r2, [r1]
 80038b2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80038b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1e4      	bne.n	8003884 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7fd fbce 	bl	8001062 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2202      	movs	r2, #2
 80038ca:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80038d8:	b29b      	uxth	r3, r3
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	b29b      	uxth	r3, r3
 80038de:	4619      	mov	r1, r3
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 f8fb 	bl	8003adc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80038e6:	e0df      	b.n	8003aa8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003902:	b29b      	uxth	r3, r3
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 80d1 	beq.w	8003aac <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800390a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800390e:	2b00      	cmp	r3, #0
 8003910:	f000 80cc 	beq.w	8003aac <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800391c:	e853 3f00 	ldrex	r3, [r3]
 8003920:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003924:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003928:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	461a      	mov	r2, r3
 8003932:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003936:	647b      	str	r3, [r7, #68]	@ 0x44
 8003938:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800393c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800393e:	e841 2300 	strex	r3, r2, [r1]
 8003942:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003944:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1e4      	bne.n	8003914 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	3308      	adds	r3, #8
 8003950:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003954:	e853 3f00 	ldrex	r3, [r3]
 8003958:	623b      	str	r3, [r7, #32]
   return(result);
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003960:	f023 0301 	bic.w	r3, r3, #1
 8003964:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	3308      	adds	r3, #8
 800396e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003972:	633a      	str	r2, [r7, #48]	@ 0x30
 8003974:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003976:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003978:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800397a:	e841 2300 	strex	r3, r2, [r1]
 800397e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1e1      	bne.n	800394a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2220      	movs	r2, #32
 800398a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	e853 3f00 	ldrex	r3, [r3]
 80039a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f023 0310 	bic.w	r3, r3, #16
 80039ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	461a      	mov	r2, r3
 80039b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80039bc:	61fb      	str	r3, [r7, #28]
 80039be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c0:	69b9      	ldr	r1, [r7, #24]
 80039c2:	69fa      	ldr	r2, [r7, #28]
 80039c4:	e841 2300 	strex	r3, r2, [r1]
 80039c8:	617b      	str	r3, [r7, #20]
   return(result);
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1e4      	bne.n	800399a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2202      	movs	r2, #2
 80039d4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80039da:	4619      	mov	r1, r3
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f87d 	bl	8003adc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80039e2:	e063      	b.n	8003aac <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80039e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00e      	beq.n	8003a0e <HAL_UART_IRQHandler+0x59e>
 80039f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d008      	beq.n	8003a0e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003a04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f001 fb88 	bl	800511c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003a0c:	e051      	b.n	8003ab2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d014      	beq.n	8003a44 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003a1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d105      	bne.n	8003a32 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003a26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d008      	beq.n	8003a44 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d03a      	beq.n	8003ab0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	4798      	blx	r3
    }
    return;
 8003a42:	e035      	b.n	8003ab0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d009      	beq.n	8003a64 <HAL_UART_IRQHandler+0x5f4>
 8003a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d003      	beq.n	8003a64 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 fe16 	bl	800468e <UART_EndTransmit_IT>
    return;
 8003a62:	e026      	b.n	8003ab2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d009      	beq.n	8003a84 <HAL_UART_IRQHandler+0x614>
 8003a70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a74:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f001 fb5f 	bl	8005140 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003a82:	e016      	b.n	8003ab2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d010      	beq.n	8003ab2 <HAL_UART_IRQHandler+0x642>
 8003a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	da0c      	bge.n	8003ab2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f001 fb48 	bl	800512e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003a9e:	e008      	b.n	8003ab2 <HAL_UART_IRQHandler+0x642>
      return;
 8003aa0:	bf00      	nop
 8003aa2:	e006      	b.n	8003ab2 <HAL_UART_IRQHandler+0x642>
    return;
 8003aa4:	bf00      	nop
 8003aa6:	e004      	b.n	8003ab2 <HAL_UART_IRQHandler+0x642>
      return;
 8003aa8:	bf00      	nop
 8003aaa:	e002      	b.n	8003ab2 <HAL_UART_IRQHandler+0x642>
      return;
 8003aac:	bf00      	nop
 8003aae:	e000      	b.n	8003ab2 <HAL_UART_IRQHandler+0x642>
    return;
 8003ab0:	bf00      	nop
  }
}
 8003ab2:	37e8      	adds	r7, #232	@ 0xe8
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bc80      	pop	{r7}
 8003ac8:	4770      	bx	lr

08003aca <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b083      	sub	sp, #12
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bc80      	pop	{r7}
 8003ada:	4770      	bx	lr

08003adc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bc80      	pop	{r7}
 8003af0:	4770      	bx	lr
	...

08003af4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003af4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003af8:	b08c      	sub	sp, #48	@ 0x30
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003afe:	2300      	movs	r3, #0
 8003b00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	431a      	orrs	r2, r3
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	69db      	ldr	r3, [r3, #28]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	4b94      	ldr	r3, [pc, #592]	@ (8003d74 <UART_SetConfig+0x280>)
 8003b24:	4013      	ands	r3, r2
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	6812      	ldr	r2, [r2, #0]
 8003b2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b2c:	430b      	orrs	r3, r1
 8003b2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	68da      	ldr	r2, [r3, #12]
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a89      	ldr	r2, [pc, #548]	@ (8003d78 <UART_SetConfig+0x284>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d004      	beq.n	8003b60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003b6a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	6812      	ldr	r2, [r2, #0]
 8003b72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b74:	430b      	orrs	r3, r1
 8003b76:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b7e:	f023 010f 	bic.w	r1, r3, #15
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a7a      	ldr	r2, [pc, #488]	@ (8003d7c <UART_SetConfig+0x288>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d127      	bne.n	8003be8 <UART_SetConfig+0xf4>
 8003b98:	2003      	movs	r0, #3
 8003b9a:	f7ff fb25 	bl	80031e8 <LL_RCC_GetUSARTClockSource>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8003ba4:	2b03      	cmp	r3, #3
 8003ba6:	d81b      	bhi.n	8003be0 <UART_SetConfig+0xec>
 8003ba8:	a201      	add	r2, pc, #4	@ (adr r2, 8003bb0 <UART_SetConfig+0xbc>)
 8003baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bae:	bf00      	nop
 8003bb0:	08003bc1 	.word	0x08003bc1
 8003bb4:	08003bd1 	.word	0x08003bd1
 8003bb8:	08003bc9 	.word	0x08003bc9
 8003bbc:	08003bd9 	.word	0x08003bd9
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bc6:	e080      	b.n	8003cca <UART_SetConfig+0x1d6>
 8003bc8:	2302      	movs	r3, #2
 8003bca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bce:	e07c      	b.n	8003cca <UART_SetConfig+0x1d6>
 8003bd0:	2304      	movs	r3, #4
 8003bd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bd6:	e078      	b.n	8003cca <UART_SetConfig+0x1d6>
 8003bd8:	2308      	movs	r3, #8
 8003bda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bde:	e074      	b.n	8003cca <UART_SetConfig+0x1d6>
 8003be0:	2310      	movs	r3, #16
 8003be2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003be6:	e070      	b.n	8003cca <UART_SetConfig+0x1d6>
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a64      	ldr	r2, [pc, #400]	@ (8003d80 <UART_SetConfig+0x28c>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d138      	bne.n	8003c64 <UART_SetConfig+0x170>
 8003bf2:	200c      	movs	r0, #12
 8003bf4:	f7ff faf8 	bl	80031e8 <LL_RCC_GetUSARTClockSource>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8003bfe:	2b0c      	cmp	r3, #12
 8003c00:	d82c      	bhi.n	8003c5c <UART_SetConfig+0x168>
 8003c02:	a201      	add	r2, pc, #4	@ (adr r2, 8003c08 <UART_SetConfig+0x114>)
 8003c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c08:	08003c3d 	.word	0x08003c3d
 8003c0c:	08003c5d 	.word	0x08003c5d
 8003c10:	08003c5d 	.word	0x08003c5d
 8003c14:	08003c5d 	.word	0x08003c5d
 8003c18:	08003c4d 	.word	0x08003c4d
 8003c1c:	08003c5d 	.word	0x08003c5d
 8003c20:	08003c5d 	.word	0x08003c5d
 8003c24:	08003c5d 	.word	0x08003c5d
 8003c28:	08003c45 	.word	0x08003c45
 8003c2c:	08003c5d 	.word	0x08003c5d
 8003c30:	08003c5d 	.word	0x08003c5d
 8003c34:	08003c5d 	.word	0x08003c5d
 8003c38:	08003c55 	.word	0x08003c55
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c42:	e042      	b.n	8003cca <UART_SetConfig+0x1d6>
 8003c44:	2302      	movs	r3, #2
 8003c46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c4a:	e03e      	b.n	8003cca <UART_SetConfig+0x1d6>
 8003c4c:	2304      	movs	r3, #4
 8003c4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c52:	e03a      	b.n	8003cca <UART_SetConfig+0x1d6>
 8003c54:	2308      	movs	r3, #8
 8003c56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c5a:	e036      	b.n	8003cca <UART_SetConfig+0x1d6>
 8003c5c:	2310      	movs	r3, #16
 8003c5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c62:	e032      	b.n	8003cca <UART_SetConfig+0x1d6>
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a43      	ldr	r2, [pc, #268]	@ (8003d78 <UART_SetConfig+0x284>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d12a      	bne.n	8003cc4 <UART_SetConfig+0x1d0>
 8003c6e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8003c72:	f7ff facb 	bl	800320c <LL_RCC_GetLPUARTClockSource>
 8003c76:	4603      	mov	r3, r0
 8003c78:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c7c:	d01a      	beq.n	8003cb4 <UART_SetConfig+0x1c0>
 8003c7e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c82:	d81b      	bhi.n	8003cbc <UART_SetConfig+0x1c8>
 8003c84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c88:	d00c      	beq.n	8003ca4 <UART_SetConfig+0x1b0>
 8003c8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c8e:	d815      	bhi.n	8003cbc <UART_SetConfig+0x1c8>
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d003      	beq.n	8003c9c <UART_SetConfig+0x1a8>
 8003c94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c98:	d008      	beq.n	8003cac <UART_SetConfig+0x1b8>
 8003c9a:	e00f      	b.n	8003cbc <UART_SetConfig+0x1c8>
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ca2:	e012      	b.n	8003cca <UART_SetConfig+0x1d6>
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003caa:	e00e      	b.n	8003cca <UART_SetConfig+0x1d6>
 8003cac:	2304      	movs	r3, #4
 8003cae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cb2:	e00a      	b.n	8003cca <UART_SetConfig+0x1d6>
 8003cb4:	2308      	movs	r3, #8
 8003cb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cba:	e006      	b.n	8003cca <UART_SetConfig+0x1d6>
 8003cbc:	2310      	movs	r3, #16
 8003cbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cc2:	e002      	b.n	8003cca <UART_SetConfig+0x1d6>
 8003cc4:	2310      	movs	r3, #16
 8003cc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a2a      	ldr	r2, [pc, #168]	@ (8003d78 <UART_SetConfig+0x284>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	f040 80a4 	bne.w	8003e1e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003cd6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003cda:	2b08      	cmp	r3, #8
 8003cdc:	d823      	bhi.n	8003d26 <UART_SetConfig+0x232>
 8003cde:	a201      	add	r2, pc, #4	@ (adr r2, 8003ce4 <UART_SetConfig+0x1f0>)
 8003ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce4:	08003d09 	.word	0x08003d09
 8003ce8:	08003d27 	.word	0x08003d27
 8003cec:	08003d11 	.word	0x08003d11
 8003cf0:	08003d27 	.word	0x08003d27
 8003cf4:	08003d17 	.word	0x08003d17
 8003cf8:	08003d27 	.word	0x08003d27
 8003cfc:	08003d27 	.word	0x08003d27
 8003d00:	08003d27 	.word	0x08003d27
 8003d04:	08003d1f 	.word	0x08003d1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d08:	f7fe fc2a 	bl	8002560 <HAL_RCC_GetPCLK1Freq>
 8003d0c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d0e:	e010      	b.n	8003d32 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d10:	4b1c      	ldr	r3, [pc, #112]	@ (8003d84 <UART_SetConfig+0x290>)
 8003d12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003d14:	e00d      	b.n	8003d32 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d16:	f7fe fb6f 	bl	80023f8 <HAL_RCC_GetSysClockFreq>
 8003d1a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d1c:	e009      	b.n	8003d32 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003d24:	e005      	b.n	8003d32 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8003d26:	2300      	movs	r3, #0
 8003d28:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003d30:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 8137 	beq.w	8003fa8 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3e:	4a12      	ldr	r2, [pc, #72]	@ (8003d88 <UART_SetConfig+0x294>)
 8003d40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d44:	461a      	mov	r2, r3
 8003d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d48:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d4c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	685a      	ldr	r2, [r3, #4]
 8003d52:	4613      	mov	r3, r2
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	4413      	add	r3, r2
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d305      	bcc.n	8003d6a <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d910      	bls.n	8003d8c <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003d70:	e11a      	b.n	8003fa8 <UART_SetConfig+0x4b4>
 8003d72:	bf00      	nop
 8003d74:	cfff69f3 	.word	0xcfff69f3
 8003d78:	40008000 	.word	0x40008000
 8003d7c:	40013800 	.word	0x40013800
 8003d80:	40004400 	.word	0x40004400
 8003d84:	00f42400 	.word	0x00f42400
 8003d88:	08005e2c 	.word	0x08005e2c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8e:	2200      	movs	r2, #0
 8003d90:	60bb      	str	r3, [r7, #8]
 8003d92:	60fa      	str	r2, [r7, #12]
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d98:	4a8e      	ldr	r2, [pc, #568]	@ (8003fd4 <UART_SetConfig+0x4e0>)
 8003d9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	2200      	movs	r2, #0
 8003da2:	603b      	str	r3, [r7, #0]
 8003da4:	607a      	str	r2, [r7, #4]
 8003da6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003daa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003dae:	f7fc fa3f 	bl	8000230 <__aeabi_uldivmod>
 8003db2:	4602      	mov	r2, r0
 8003db4:	460b      	mov	r3, r1
 8003db6:	4610      	mov	r0, r2
 8003db8:	4619      	mov	r1, r3
 8003dba:	f04f 0200 	mov.w	r2, #0
 8003dbe:	f04f 0300 	mov.w	r3, #0
 8003dc2:	020b      	lsls	r3, r1, #8
 8003dc4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003dc8:	0202      	lsls	r2, r0, #8
 8003dca:	6979      	ldr	r1, [r7, #20]
 8003dcc:	6849      	ldr	r1, [r1, #4]
 8003dce:	0849      	lsrs	r1, r1, #1
 8003dd0:	2000      	movs	r0, #0
 8003dd2:	460c      	mov	r4, r1
 8003dd4:	4605      	mov	r5, r0
 8003dd6:	eb12 0804 	adds.w	r8, r2, r4
 8003dda:	eb43 0905 	adc.w	r9, r3, r5
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	469a      	mov	sl, r3
 8003de6:	4693      	mov	fp, r2
 8003de8:	4652      	mov	r2, sl
 8003dea:	465b      	mov	r3, fp
 8003dec:	4640      	mov	r0, r8
 8003dee:	4649      	mov	r1, r9
 8003df0:	f7fc fa1e 	bl	8000230 <__aeabi_uldivmod>
 8003df4:	4602      	mov	r2, r0
 8003df6:	460b      	mov	r3, r1
 8003df8:	4613      	mov	r3, r2
 8003dfa:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003dfc:	6a3b      	ldr	r3, [r7, #32]
 8003dfe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e02:	d308      	bcc.n	8003e16 <UART_SetConfig+0x322>
 8003e04:	6a3b      	ldr	r3, [r7, #32]
 8003e06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e0a:	d204      	bcs.n	8003e16 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6a3a      	ldr	r2, [r7, #32]
 8003e12:	60da      	str	r2, [r3, #12]
 8003e14:	e0c8      	b.n	8003fa8 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003e1c:	e0c4      	b.n	8003fa8 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e26:	d167      	bne.n	8003ef8 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8003e28:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	d828      	bhi.n	8003e82 <UART_SetConfig+0x38e>
 8003e30:	a201      	add	r2, pc, #4	@ (adr r2, 8003e38 <UART_SetConfig+0x344>)
 8003e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e36:	bf00      	nop
 8003e38:	08003e5d 	.word	0x08003e5d
 8003e3c:	08003e65 	.word	0x08003e65
 8003e40:	08003e6d 	.word	0x08003e6d
 8003e44:	08003e83 	.word	0x08003e83
 8003e48:	08003e73 	.word	0x08003e73
 8003e4c:	08003e83 	.word	0x08003e83
 8003e50:	08003e83 	.word	0x08003e83
 8003e54:	08003e83 	.word	0x08003e83
 8003e58:	08003e7b 	.word	0x08003e7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e5c:	f7fe fb80 	bl	8002560 <HAL_RCC_GetPCLK1Freq>
 8003e60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e62:	e014      	b.n	8003e8e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e64:	f7fe fb8e 	bl	8002584 <HAL_RCC_GetPCLK2Freq>
 8003e68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e6a:	e010      	b.n	8003e8e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e6c:	4b5a      	ldr	r3, [pc, #360]	@ (8003fd8 <UART_SetConfig+0x4e4>)
 8003e6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e70:	e00d      	b.n	8003e8e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e72:	f7fe fac1 	bl	80023f8 <HAL_RCC_GetSysClockFreq>
 8003e76:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e78:	e009      	b.n	8003e8e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e80:	e005      	b.n	8003e8e <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8003e82:	2300      	movs	r3, #0
 8003e84:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003e8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f000 8089 	beq.w	8003fa8 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e9a:	4a4e      	ldr	r2, [pc, #312]	@ (8003fd4 <UART_SetConfig+0x4e0>)
 8003e9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ea8:	005a      	lsls	r2, r3, #1
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	085b      	lsrs	r3, r3, #1
 8003eb0:	441a      	add	r2, r3
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ebc:	6a3b      	ldr	r3, [r7, #32]
 8003ebe:	2b0f      	cmp	r3, #15
 8003ec0:	d916      	bls.n	8003ef0 <UART_SetConfig+0x3fc>
 8003ec2:	6a3b      	ldr	r3, [r7, #32]
 8003ec4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ec8:	d212      	bcs.n	8003ef0 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003eca:	6a3b      	ldr	r3, [r7, #32]
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	f023 030f 	bic.w	r3, r3, #15
 8003ed2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
 8003ed6:	085b      	lsrs	r3, r3, #1
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	f003 0307 	and.w	r3, r3, #7
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	8bfb      	ldrh	r3, [r7, #30]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	8bfa      	ldrh	r2, [r7, #30]
 8003eec:	60da      	str	r2, [r3, #12]
 8003eee:	e05b      	b.n	8003fa8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003ef6:	e057      	b.n	8003fa8 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ef8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003efc:	2b08      	cmp	r3, #8
 8003efe:	d828      	bhi.n	8003f52 <UART_SetConfig+0x45e>
 8003f00:	a201      	add	r2, pc, #4	@ (adr r2, 8003f08 <UART_SetConfig+0x414>)
 8003f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f06:	bf00      	nop
 8003f08:	08003f2d 	.word	0x08003f2d
 8003f0c:	08003f35 	.word	0x08003f35
 8003f10:	08003f3d 	.word	0x08003f3d
 8003f14:	08003f53 	.word	0x08003f53
 8003f18:	08003f43 	.word	0x08003f43
 8003f1c:	08003f53 	.word	0x08003f53
 8003f20:	08003f53 	.word	0x08003f53
 8003f24:	08003f53 	.word	0x08003f53
 8003f28:	08003f4b 	.word	0x08003f4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f2c:	f7fe fb18 	bl	8002560 <HAL_RCC_GetPCLK1Freq>
 8003f30:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f32:	e014      	b.n	8003f5e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f34:	f7fe fb26 	bl	8002584 <HAL_RCC_GetPCLK2Freq>
 8003f38:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f3a:	e010      	b.n	8003f5e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f3c:	4b26      	ldr	r3, [pc, #152]	@ (8003fd8 <UART_SetConfig+0x4e4>)
 8003f3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003f40:	e00d      	b.n	8003f5e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f42:	f7fe fa59 	bl	80023f8 <HAL_RCC_GetSysClockFreq>
 8003f46:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f48:	e009      	b.n	8003f5e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003f50:	e005      	b.n	8003f5e <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8003f52:	2300      	movs	r3, #0
 8003f54:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003f5c:	bf00      	nop
    }

    if (pclk != 0U)
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d021      	beq.n	8003fa8 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f68:	4a1a      	ldr	r2, [pc, #104]	@ (8003fd4 <UART_SetConfig+0x4e0>)
 8003f6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f72:	fbb3 f2f2 	udiv	r2, r3, r2
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	085b      	lsrs	r3, r3, #1
 8003f7c:	441a      	add	r2, r3
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f86:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f88:	6a3b      	ldr	r3, [r7, #32]
 8003f8a:	2b0f      	cmp	r3, #15
 8003f8c:	d909      	bls.n	8003fa2 <UART_SetConfig+0x4ae>
 8003f8e:	6a3b      	ldr	r3, [r7, #32]
 8003f90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f94:	d205      	bcs.n	8003fa2 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f96:	6a3b      	ldr	r3, [r7, #32]
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	60da      	str	r2, [r3, #12]
 8003fa0:	e002      	b.n	8003fa8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003fc4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3730      	adds	r7, #48	@ 0x30
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fd2:	bf00      	nop
 8003fd4:	08005e2c 	.word	0x08005e2c
 8003fd8:	00f42400 	.word	0x00f42400

08003fdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe8:	f003 0308 	and.w	r3, r3, #8
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00a      	beq.n	8004006 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	430a      	orrs	r2, r1
 8004004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00a      	beq.n	8004028 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00a      	beq.n	800404a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800404e:	f003 0304 	and.w	r3, r3, #4
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00a      	beq.n	800406c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	430a      	orrs	r2, r1
 800406a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004070:	f003 0310 	and.w	r3, r3, #16
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00a      	beq.n	800408e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004092:	f003 0320 	and.w	r3, r3, #32
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00a      	beq.n	80040b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d01a      	beq.n	80040f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040da:	d10a      	bne.n	80040f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00a      	beq.n	8004114 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	605a      	str	r2, [r3, #4]
  }
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	bc80      	pop	{r7}
 800411c:	4770      	bx	lr

0800411e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b086      	sub	sp, #24
 8004122:	af02      	add	r7, sp, #8
 8004124:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800412e:	f7fc fe83 	bl	8000e38 <HAL_GetTick>
 8004132:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0308 	and.w	r3, r3, #8
 800413e:	2b08      	cmp	r3, #8
 8004140:	d10e      	bne.n	8004160 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004142:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 f832 	bl	80041ba <UART_WaitOnFlagUntilTimeout>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e028      	b.n	80041b2 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0304 	and.w	r3, r3, #4
 800416a:	2b04      	cmp	r3, #4
 800416c:	d10e      	bne.n	800418c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800416e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004172:	9300      	str	r3, [sp, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f81c 	bl	80041ba <UART_WaitOnFlagUntilTimeout>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d001      	beq.n	800418c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e012      	b.n	80041b2 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2220      	movs	r2, #32
 8004190:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2220      	movs	r2, #32
 8004198:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b09c      	sub	sp, #112	@ 0x70
 80041be:	af00      	add	r7, sp, #0
 80041c0:	60f8      	str	r0, [r7, #12]
 80041c2:	60b9      	str	r1, [r7, #8]
 80041c4:	603b      	str	r3, [r7, #0]
 80041c6:	4613      	mov	r3, r2
 80041c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041ca:	e0af      	b.n	800432c <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d2:	f000 80ab 	beq.w	800432c <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041d6:	f7fc fe2f 	bl	8000e38 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d302      	bcc.n	80041ec <UART_WaitOnFlagUntilTimeout+0x32>
 80041e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d140      	bne.n	800426e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041f4:	e853 3f00 	ldrex	r3, [r3]
 80041f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80041fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041fc:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004200:	667b      	str	r3, [r7, #100]	@ 0x64
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	461a      	mov	r2, r3
 8004208:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800420a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800420c:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004210:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004212:	e841 2300 	strex	r3, r2, [r1]
 8004216:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004218:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1e6      	bne.n	80041ec <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	3308      	adds	r3, #8
 8004224:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004226:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004228:	e853 3f00 	ldrex	r3, [r3]
 800422c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800422e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004230:	f023 0301 	bic.w	r3, r3, #1
 8004234:	663b      	str	r3, [r7, #96]	@ 0x60
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	3308      	adds	r3, #8
 800423c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800423e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004240:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004242:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004244:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004246:	e841 2300 	strex	r3, r2, [r1]
 800424a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800424c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1e5      	bne.n	800421e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2220      	movs	r2, #32
 8004256:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2220      	movs	r2, #32
 800425e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e06f      	b.n	800434e <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b00      	cmp	r3, #0
 800427a:	d057      	beq.n	800432c <UART_WaitOnFlagUntilTimeout+0x172>
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	2b80      	cmp	r3, #128	@ 0x80
 8004280:	d054      	beq.n	800432c <UART_WaitOnFlagUntilTimeout+0x172>
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	2b40      	cmp	r3, #64	@ 0x40
 8004286:	d051      	beq.n	800432c <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004292:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004296:	d149      	bne.n	800432c <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80042a0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042aa:	e853 3f00 	ldrex	r3, [r3]
 80042ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b2:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80042b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	461a      	mov	r2, r3
 80042be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80042c2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80042c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80042c8:	e841 2300 	strex	r3, r2, [r1]
 80042cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80042ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1e6      	bne.n	80042a2 <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	3308      	adds	r3, #8
 80042da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	e853 3f00 	ldrex	r3, [r3]
 80042e2:	613b      	str	r3, [r7, #16]
   return(result);
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	f023 0301 	bic.w	r3, r3, #1
 80042ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	3308      	adds	r3, #8
 80042f2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80042f4:	623a      	str	r2, [r7, #32]
 80042f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f8:	69f9      	ldr	r1, [r7, #28]
 80042fa:	6a3a      	ldr	r2, [r7, #32]
 80042fc:	e841 2300 	strex	r3, r2, [r1]
 8004300:	61bb      	str	r3, [r7, #24]
   return(result);
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1e5      	bne.n	80042d4 <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2220      	movs	r2, #32
 800430c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2220      	movs	r2, #32
 8004314:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2220      	movs	r2, #32
 800431c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e010      	b.n	800434e <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	69da      	ldr	r2, [r3, #28]
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	4013      	ands	r3, r2
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	429a      	cmp	r2, r3
 800433a:	bf0c      	ite	eq
 800433c:	2301      	moveq	r3, #1
 800433e:	2300      	movne	r3, #0
 8004340:	b2db      	uxtb	r3, r3
 8004342:	461a      	mov	r2, r3
 8004344:	79fb      	ldrb	r3, [r7, #7]
 8004346:	429a      	cmp	r2, r3
 8004348:	f43f af40 	beq.w	80041cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3770      	adds	r7, #112	@ 0x70
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
	...

08004358 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004358:	b480      	push	{r7}
 800435a:	b0a3      	sub	sp, #140	@ 0x8c
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	4613      	mov	r3, r2
 8004364:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	88fa      	ldrh	r2, [r7, #6]
 8004370:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	88fa      	ldrh	r2, [r7, #6]
 8004378:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800438a:	d10e      	bne.n	80043aa <UART_Start_Receive_IT+0x52>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d105      	bne.n	80043a0 <UART_Start_Receive_IT+0x48>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800439a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800439e:	e02d      	b.n	80043fc <UART_Start_Receive_IT+0xa4>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	22ff      	movs	r2, #255	@ 0xff
 80043a4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80043a8:	e028      	b.n	80043fc <UART_Start_Receive_IT+0xa4>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10d      	bne.n	80043ce <UART_Start_Receive_IT+0x76>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d104      	bne.n	80043c4 <UART_Start_Receive_IT+0x6c>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	22ff      	movs	r2, #255	@ 0xff
 80043be:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80043c2:	e01b      	b.n	80043fc <UART_Start_Receive_IT+0xa4>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	227f      	movs	r2, #127	@ 0x7f
 80043c8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80043cc:	e016      	b.n	80043fc <UART_Start_Receive_IT+0xa4>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043d6:	d10d      	bne.n	80043f4 <UART_Start_Receive_IT+0x9c>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d104      	bne.n	80043ea <UART_Start_Receive_IT+0x92>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	227f      	movs	r2, #127	@ 0x7f
 80043e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80043e8:	e008      	b.n	80043fc <UART_Start_Receive_IT+0xa4>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	223f      	movs	r2, #63	@ 0x3f
 80043ee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80043f2:	e003      	b.n	80043fc <UART_Start_Receive_IT+0xa4>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2222      	movs	r2, #34	@ 0x22
 8004408:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	3308      	adds	r3, #8
 8004412:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004414:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004416:	e853 3f00 	ldrex	r3, [r3]
 800441a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800441c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800441e:	f043 0301 	orr.w	r3, r3, #1
 8004422:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	3308      	adds	r3, #8
 800442c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004430:	673a      	str	r2, [r7, #112]	@ 0x70
 8004432:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004434:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8004436:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004438:	e841 2300 	strex	r3, r2, [r1]
 800443c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800443e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1e3      	bne.n	800440c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004448:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800444c:	d14f      	bne.n	80044ee <UART_Start_Receive_IT+0x196>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004454:	88fa      	ldrh	r2, [r7, #6]
 8004456:	429a      	cmp	r2, r3
 8004458:	d349      	bcc.n	80044ee <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004462:	d107      	bne.n	8004474 <UART_Start_Receive_IT+0x11c>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d103      	bne.n	8004474 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	4a46      	ldr	r2, [pc, #280]	@ (8004588 <UART_Start_Receive_IT+0x230>)
 8004470:	675a      	str	r2, [r3, #116]	@ 0x74
 8004472:	e002      	b.n	800447a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	4a45      	ldr	r2, [pc, #276]	@ (800458c <UART_Start_Receive_IT+0x234>)
 8004478:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d01a      	beq.n	80044b8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004488:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800448a:	e853 3f00 	ldrex	r3, [r3]
 800448e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004490:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004492:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004496:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	461a      	mov	r2, r3
 80044a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80044a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044a6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80044aa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80044ac:	e841 2300 	strex	r3, r2, [r1]
 80044b0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80044b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1e4      	bne.n	8004482 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	3308      	adds	r3, #8
 80044be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044c2:	e853 3f00 	ldrex	r3, [r3]
 80044c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80044c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	3308      	adds	r3, #8
 80044d6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80044d8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80044da:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044dc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80044de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044e0:	e841 2300 	strex	r3, r2, [r1]
 80044e4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80044e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1e5      	bne.n	80044b8 <UART_Start_Receive_IT+0x160>
 80044ec:	e046      	b.n	800457c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044f6:	d107      	bne.n	8004508 <UART_Start_Receive_IT+0x1b0>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d103      	bne.n	8004508 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4a23      	ldr	r2, [pc, #140]	@ (8004590 <UART_Start_Receive_IT+0x238>)
 8004504:	675a      	str	r2, [r3, #116]	@ 0x74
 8004506:	e002      	b.n	800450e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	4a22      	ldr	r2, [pc, #136]	@ (8004594 <UART_Start_Receive_IT+0x23c>)
 800450c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d019      	beq.n	800454a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800451e:	e853 3f00 	ldrex	r3, [r3]
 8004522:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004526:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800452a:	677b      	str	r3, [r7, #116]	@ 0x74
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	461a      	mov	r2, r3
 8004532:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004534:	637b      	str	r3, [r7, #52]	@ 0x34
 8004536:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004538:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800453a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800453c:	e841 2300 	strex	r3, r2, [r1]
 8004540:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1e6      	bne.n	8004516 <UART_Start_Receive_IT+0x1be>
 8004548:	e018      	b.n	800457c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	e853 3f00 	ldrex	r3, [r3]
 8004556:	613b      	str	r3, [r7, #16]
   return(result);
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	f043 0320 	orr.w	r3, r3, #32
 800455e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	461a      	mov	r2, r3
 8004566:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004568:	623b      	str	r3, [r7, #32]
 800456a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456c:	69f9      	ldr	r1, [r7, #28]
 800456e:	6a3a      	ldr	r2, [r7, #32]
 8004570:	e841 2300 	strex	r3, r2, [r1]
 8004574:	61bb      	str	r3, [r7, #24]
   return(result);
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1e6      	bne.n	800454a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	378c      	adds	r7, #140	@ 0x8c
 8004582:	46bd      	mov	sp, r7
 8004584:	bc80      	pop	{r7}
 8004586:	4770      	bx	lr
 8004588:	08004db5 	.word	0x08004db5
 800458c:	08004a55 	.word	0x08004a55
 8004590:	0800489d 	.word	0x0800489d
 8004594:	080046e5 	.word	0x080046e5

08004598 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004598:	b480      	push	{r7}
 800459a:	b095      	sub	sp, #84	@ 0x54
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045a8:	e853 3f00 	ldrex	r3, [r3]
 80045ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80045ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	461a      	mov	r2, r3
 80045bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045be:	643b      	str	r3, [r7, #64]	@ 0x40
 80045c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80045c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80045c6:	e841 2300 	strex	r3, r2, [r1]
 80045ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80045cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1e6      	bne.n	80045a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	3308      	adds	r3, #8
 80045d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045da:	6a3b      	ldr	r3, [r7, #32]
 80045dc:	e853 3f00 	ldrex	r3, [r3]
 80045e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045e8:	f023 0301 	bic.w	r3, r3, #1
 80045ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	3308      	adds	r3, #8
 80045f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045fe:	e841 2300 	strex	r3, r2, [r1]
 8004602:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1e3      	bne.n	80045d2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800460e:	2b01      	cmp	r3, #1
 8004610:	d118      	bne.n	8004644 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	e853 3f00 	ldrex	r3, [r3]
 800461e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	f023 0310 	bic.w	r3, r3, #16
 8004626:	647b      	str	r3, [r7, #68]	@ 0x44
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	461a      	mov	r2, r3
 800462e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004630:	61bb      	str	r3, [r7, #24]
 8004632:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004634:	6979      	ldr	r1, [r7, #20]
 8004636:	69ba      	ldr	r2, [r7, #24]
 8004638:	e841 2300 	strex	r3, r2, [r1]
 800463c:	613b      	str	r3, [r7, #16]
   return(result);
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1e6      	bne.n	8004612 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2220      	movs	r2, #32
 8004648:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004658:	bf00      	nop
 800465a:	3754      	adds	r7, #84	@ 0x54
 800465c:	46bd      	mov	sp, r7
 800465e:	bc80      	pop	{r7}
 8004660:	4770      	bx	lr

08004662 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b084      	sub	sp, #16
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800466e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f7ff fa22 	bl	8003aca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004686:	bf00      	nop
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b088      	sub	sp, #32
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	e853 3f00 	ldrex	r3, [r3]
 80046a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046aa:	61fb      	str	r3, [r7, #28]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	461a      	mov	r2, r3
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	61bb      	str	r3, [r7, #24]
 80046b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b8:	6979      	ldr	r1, [r7, #20]
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	e841 2300 	strex	r3, r2, [r1]
 80046c0:	613b      	str	r3, [r7, #16]
   return(result);
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1e6      	bne.n	8004696 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2220      	movs	r2, #32
 80046cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7ff f9ee 	bl	8003ab8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046dc:	bf00      	nop
 80046de:	3720      	adds	r7, #32
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b09c      	sub	sp, #112	@ 0x70
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80046f2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046fc:	2b22      	cmp	r3, #34	@ 0x22
 80046fe:	f040 80be 	bne.w	800487e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004708:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800470c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004710:	b2d9      	uxtb	r1, r3
 8004712:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004716:	b2da      	uxtb	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800471c:	400a      	ands	r2, r1
 800471e:	b2d2      	uxtb	r2, r2
 8004720:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004726:	1c5a      	adds	r2, r3, #1
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004732:	b29b      	uxth	r3, r3
 8004734:	3b01      	subs	r3, #1
 8004736:	b29a      	uxth	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004744:	b29b      	uxth	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	f040 80a1 	bne.w	800488e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004752:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004754:	e853 3f00 	ldrex	r3, [r3]
 8004758:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800475a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800475c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004760:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	461a      	mov	r2, r3
 8004768:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800476a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800476c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004770:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004772:	e841 2300 	strex	r3, r2, [r1]
 8004776:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004778:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1e6      	bne.n	800474c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	3308      	adds	r3, #8
 8004784:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004788:	e853 3f00 	ldrex	r3, [r3]
 800478c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800478e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004790:	f023 0301 	bic.w	r3, r3, #1
 8004794:	667b      	str	r3, [r7, #100]	@ 0x64
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	3308      	adds	r3, #8
 800479c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800479e:	647a      	str	r2, [r7, #68]	@ 0x44
 80047a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047a6:	e841 2300 	strex	r3, r2, [r1]
 80047aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1e5      	bne.n	800477e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2220      	movs	r2, #32
 80047b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a33      	ldr	r2, [pc, #204]	@ (8004898 <UART_RxISR_8BIT+0x1b4>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d01f      	beq.n	8004810 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d018      	beq.n	8004810 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e6:	e853 3f00 	ldrex	r3, [r3]
 80047ea:	623b      	str	r3, [r7, #32]
   return(result);
 80047ec:	6a3b      	ldr	r3, [r7, #32]
 80047ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80047f2:	663b      	str	r3, [r7, #96]	@ 0x60
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	461a      	mov	r2, r3
 80047fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80047fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004800:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004802:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004804:	e841 2300 	strex	r3, r2, [r1]
 8004808:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800480a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1e6      	bne.n	80047de <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004814:	2b01      	cmp	r3, #1
 8004816:	d12e      	bne.n	8004876 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	e853 3f00 	ldrex	r3, [r3]
 800482a:	60fb      	str	r3, [r7, #12]
   return(result);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f023 0310 	bic.w	r3, r3, #16
 8004832:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	461a      	mov	r2, r3
 800483a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800483c:	61fb      	str	r3, [r7, #28]
 800483e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004840:	69b9      	ldr	r1, [r7, #24]
 8004842:	69fa      	ldr	r2, [r7, #28]
 8004844:	e841 2300 	strex	r3, r2, [r1]
 8004848:	617b      	str	r3, [r7, #20]
   return(result);
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1e6      	bne.n	800481e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	f003 0310 	and.w	r3, r3, #16
 800485a:	2b10      	cmp	r3, #16
 800485c:	d103      	bne.n	8004866 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2210      	movs	r2, #16
 8004864:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800486c:	4619      	mov	r1, r3
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f7ff f934 	bl	8003adc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004874:	e00b      	b.n	800488e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7fb ff6a 	bl	8000750 <HAL_UART_RxCpltCallback>
}
 800487c:	e007      	b.n	800488e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	699a      	ldr	r2, [r3, #24]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f042 0208 	orr.w	r2, r2, #8
 800488c:	619a      	str	r2, [r3, #24]
}
 800488e:	bf00      	nop
 8004890:	3770      	adds	r7, #112	@ 0x70
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	40008000 	.word	0x40008000

0800489c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b09c      	sub	sp, #112	@ 0x70
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80048aa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048b4:	2b22      	cmp	r3, #34	@ 0x22
 80048b6:	f040 80be 	bne.w	8004a36 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048c8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80048ca:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80048ce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80048d2:	4013      	ands	r3, r2
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048d8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048de:	1c9a      	adds	r2, r3, #2
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	3b01      	subs	r3, #1
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f040 80a1 	bne.w	8004a46 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800490c:	e853 3f00 	ldrex	r3, [r3]
 8004910:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004912:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004914:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004918:	667b      	str	r3, [r7, #100]	@ 0x64
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	461a      	mov	r2, r3
 8004920:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004922:	657b      	str	r3, [r7, #84]	@ 0x54
 8004924:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004926:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004928:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800492a:	e841 2300 	strex	r3, r2, [r1]
 800492e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004930:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1e6      	bne.n	8004904 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	3308      	adds	r3, #8
 800493c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004940:	e853 3f00 	ldrex	r3, [r3]
 8004944:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004948:	f023 0301 	bic.w	r3, r3, #1
 800494c:	663b      	str	r3, [r7, #96]	@ 0x60
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	3308      	adds	r3, #8
 8004954:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004956:	643a      	str	r2, [r7, #64]	@ 0x40
 8004958:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800495c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800495e:	e841 2300 	strex	r3, r2, [r1]
 8004962:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1e5      	bne.n	8004936 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2220      	movs	r2, #32
 800496e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a33      	ldr	r2, [pc, #204]	@ (8004a50 <UART_RxISR_16BIT+0x1b4>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d01f      	beq.n	80049c8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d018      	beq.n	80049c8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499c:	6a3b      	ldr	r3, [r7, #32]
 800499e:	e853 3f00 	ldrex	r3, [r3]
 80049a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80049aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	461a      	mov	r2, r3
 80049b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049b6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049bc:	e841 2300 	strex	r3, r2, [r1]
 80049c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80049c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1e6      	bne.n	8004996 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d12e      	bne.n	8004a2e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	e853 3f00 	ldrex	r3, [r3]
 80049e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	f023 0310 	bic.w	r3, r3, #16
 80049ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	461a      	mov	r2, r3
 80049f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049f4:	61bb      	str	r3, [r7, #24]
 80049f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f8:	6979      	ldr	r1, [r7, #20]
 80049fa:	69ba      	ldr	r2, [r7, #24]
 80049fc:	e841 2300 	strex	r3, r2, [r1]
 8004a00:	613b      	str	r3, [r7, #16]
   return(result);
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1e6      	bne.n	80049d6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	f003 0310 	and.w	r3, r3, #16
 8004a12:	2b10      	cmp	r3, #16
 8004a14:	d103      	bne.n	8004a1e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2210      	movs	r2, #16
 8004a1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004a24:	4619      	mov	r1, r3
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7ff f858 	bl	8003adc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a2c:	e00b      	b.n	8004a46 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f7fb fe8e 	bl	8000750 <HAL_UART_RxCpltCallback>
}
 8004a34:	e007      	b.n	8004a46 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	699a      	ldr	r2, [r3, #24]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f042 0208 	orr.w	r2, r2, #8
 8004a44:	619a      	str	r2, [r3, #24]
}
 8004a46:	bf00      	nop
 8004a48:	3770      	adds	r7, #112	@ 0x70
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	40008000 	.word	0x40008000

08004a54 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b0ac      	sub	sp, #176	@ 0xb0
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004a62:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	69db      	ldr	r3, [r3, #28]
 8004a6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a8a:	2b22      	cmp	r3, #34	@ 0x22
 8004a8c:	f040 8182 	bne.w	8004d94 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004a96:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004a9a:	e125      	b.n	8004ce8 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004aa6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8004aaa:	b2d9      	uxtb	r1, r3
 8004aac:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8004ab0:	b2da      	uxtb	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ab6:	400a      	ands	r2, r1
 8004ab8:	b2d2      	uxtb	r2, r2
 8004aba:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ac0:	1c5a      	adds	r2, r3, #1
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004ae2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004ae6:	f003 0307 	and.w	r3, r3, #7
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d053      	beq.n	8004b96 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004aee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d011      	beq.n	8004b1e <UART_RxISR_8BIT_FIFOEN+0xca>
 8004afa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00b      	beq.n	8004b1e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b14:	f043 0201 	orr.w	r2, r3, #1
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d011      	beq.n	8004b4e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8004b2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00b      	beq.n	8004b4e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b44:	f043 0204 	orr.w	r2, r3, #4
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b52:	f003 0304 	and.w	r3, r3, #4
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d011      	beq.n	8004b7e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8004b5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00b      	beq.n	8004b7e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2204      	movs	r2, #4
 8004b6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b74:	f043 0202 	orr.w	r2, r3, #2
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d006      	beq.n	8004b96 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f7fe ff9e 	bl	8003aca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f040 80a2 	bne.w	8004ce8 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004baa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004bac:	e853 3f00 	ldrex	r3, [r3]
 8004bb0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8004bb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bb8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004bc6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004bc8:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bca:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8004bcc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004bce:	e841 2300 	strex	r3, r2, [r1]
 8004bd2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8004bd4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1e4      	bne.n	8004ba4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	3308      	adds	r3, #8
 8004be0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004be4:	e853 3f00 	ldrex	r3, [r3]
 8004be8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8004bea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004bec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bf0:	f023 0301 	bic.w	r3, r3, #1
 8004bf4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	3308      	adds	r3, #8
 8004bfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004c02:	66ba      	str	r2, [r7, #104]	@ 0x68
 8004c04:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c06:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8004c08:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004c0a:	e841 2300 	strex	r3, r2, [r1]
 8004c0e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8004c10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1e1      	bne.n	8004bda <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2220      	movs	r2, #32
 8004c1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a5f      	ldr	r2, [pc, #380]	@ (8004dac <UART_RxISR_8BIT_FIFOEN+0x358>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d021      	beq.n	8004c78 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d01a      	beq.n	8004c78 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c4a:	e853 3f00 	ldrex	r3, [r3]
 8004c4e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004c50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c52:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	461a      	mov	r2, r3
 8004c60:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004c64:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c66:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c68:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004c6a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004c6c:	e841 2300 	strex	r3, r2, [r1]
 8004c70:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004c72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1e4      	bne.n	8004c42 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d130      	bne.n	8004ce2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c8e:	e853 3f00 	ldrex	r3, [r3]
 8004c92:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c96:	f023 0310 	bic.w	r3, r3, #16
 8004c9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ca8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004caa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004cae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004cb0:	e841 2300 	strex	r3, r2, [r1]
 8004cb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1e4      	bne.n	8004c86 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	f003 0310 	and.w	r3, r3, #16
 8004cc6:	2b10      	cmp	r3, #16
 8004cc8:	d103      	bne.n	8004cd2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2210      	movs	r2, #16
 8004cd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004cd8:	4619      	mov	r1, r3
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7fe fefe 	bl	8003adc <HAL_UARTEx_RxEventCallback>
 8004ce0:	e002      	b.n	8004ce8 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7fb fd34 	bl	8000750 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004ce8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d006      	beq.n	8004cfe <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8004cf0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004cf4:	f003 0320 	and.w	r3, r3, #32
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f47f aecf 	bne.w	8004a9c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004d04:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004d08:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d049      	beq.n	8004da4 <UART_RxISR_8BIT_FIFOEN+0x350>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004d16:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d242      	bcs.n	8004da4 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	3308      	adds	r3, #8
 8004d24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d26:	6a3b      	ldr	r3, [r7, #32]
 8004d28:	e853 3f00 	ldrex	r3, [r3]
 8004d2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	3308      	adds	r3, #8
 8004d3e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004d42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d4a:	e841 2300 	strex	r3, r2, [r1]
 8004d4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1e3      	bne.n	8004d1e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a15      	ldr	r2, [pc, #84]	@ (8004db0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8004d5a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	e853 3f00 	ldrex	r3, [r3]
 8004d68:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	f043 0320 	orr.w	r3, r3, #32
 8004d70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	461a      	mov	r2, r3
 8004d7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004d7e:	61bb      	str	r3, [r7, #24]
 8004d80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d82:	6979      	ldr	r1, [r7, #20]
 8004d84:	69ba      	ldr	r2, [r7, #24]
 8004d86:	e841 2300 	strex	r3, r2, [r1]
 8004d8a:	613b      	str	r3, [r7, #16]
   return(result);
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1e4      	bne.n	8004d5c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d92:	e007      	b.n	8004da4 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	699a      	ldr	r2, [r3, #24]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f042 0208 	orr.w	r2, r2, #8
 8004da2:	619a      	str	r2, [r3, #24]
}
 8004da4:	bf00      	nop
 8004da6:	37b0      	adds	r7, #176	@ 0xb0
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	40008000 	.word	0x40008000
 8004db0:	080046e5 	.word	0x080046e5

08004db4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b0ae      	sub	sp, #184	@ 0xb8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004dc2:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	69db      	ldr	r3, [r3, #28]
 8004dcc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004dea:	2b22      	cmp	r3, #34	@ 0x22
 8004dec:	f040 8186 	bne.w	80050fc <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004df6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004dfa:	e129      	b.n	8005050 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e02:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8004e0e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8004e12:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8004e16:	4013      	ands	r3, r2
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004e1e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e24:	1c9a      	adds	r2, r3, #2
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	3b01      	subs	r3, #1
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	69db      	ldr	r3, [r3, #28]
 8004e42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004e46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004e4a:	f003 0307 	and.w	r3, r3, #7
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d053      	beq.n	8004efa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d011      	beq.n	8004e82 <UART_RxISR_16BIT_FIFOEN+0xce>
 8004e5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00b      	beq.n	8004e82 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e78:	f043 0201 	orr.w	r2, r3, #1
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004e86:	f003 0302 	and.w	r3, r3, #2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d011      	beq.n	8004eb2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8004e8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00b      	beq.n	8004eb2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ea8:	f043 0204 	orr.w	r2, r3, #4
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004eb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004eb6:	f003 0304 	and.w	r3, r3, #4
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d011      	beq.n	8004ee2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8004ebe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00b      	beq.n	8004ee2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2204      	movs	r2, #4
 8004ed0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ed8:	f043 0202 	orr.w	r2, r3, #2
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d006      	beq.n	8004efa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f7fe fdec 	bl	8003aca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f040 80a4 	bne.w	8005050 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f10:	e853 3f00 	ldrex	r3, [r3]
 8004f14:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004f16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	461a      	mov	r2, r3
 8004f26:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004f2a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f2e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f30:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004f32:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004f36:	e841 2300 	strex	r3, r2, [r1]
 8004f3a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004f3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1e2      	bne.n	8004f08 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	3308      	adds	r3, #8
 8004f48:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f4c:	e853 3f00 	ldrex	r3, [r3]
 8004f50:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004f52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f58:	f023 0301 	bic.w	r3, r3, #1
 8004f5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	3308      	adds	r3, #8
 8004f66:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8004f6a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004f6c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004f70:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004f72:	e841 2300 	strex	r3, r2, [r1]
 8004f76:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004f78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1e1      	bne.n	8004f42 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2220      	movs	r2, #32
 8004f82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a5f      	ldr	r2, [pc, #380]	@ (8005114 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d021      	beq.n	8004fe0 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d01a      	beq.n	8004fe0 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fb2:	e853 3f00 	ldrex	r3, [r3]
 8004fb6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004fb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004fbe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004fcc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004fce:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004fd2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004fd4:	e841 2300 	strex	r3, r2, [r1]
 8004fd8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004fda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d1e4      	bne.n	8004faa <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d130      	bne.n	800504a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ff6:	e853 3f00 	ldrex	r3, [r3]
 8004ffa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ffe:	f023 0310 	bic.w	r3, r3, #16
 8005002:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	461a      	mov	r2, r3
 800500c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005010:	647b      	str	r3, [r7, #68]	@ 0x44
 8005012:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005014:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005016:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005018:	e841 2300 	strex	r3, r2, [r1]
 800501c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800501e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1e4      	bne.n	8004fee <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	69db      	ldr	r3, [r3, #28]
 800502a:	f003 0310 	and.w	r3, r3, #16
 800502e:	2b10      	cmp	r3, #16
 8005030:	d103      	bne.n	800503a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2210      	movs	r2, #16
 8005038:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005040:	4619      	mov	r1, r3
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f7fe fd4a 	bl	8003adc <HAL_UARTEx_RxEventCallback>
 8005048:	e002      	b.n	8005050 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f7fb fb80 	bl	8000750 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005050:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8005054:	2b00      	cmp	r3, #0
 8005056:	d006      	beq.n	8005066 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8005058:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800505c:	f003 0320 	and.w	r3, r3, #32
 8005060:	2b00      	cmp	r3, #0
 8005062:	f47f aecb 	bne.w	8004dfc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800506c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005070:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8005074:	2b00      	cmp	r3, #0
 8005076:	d049      	beq.n	800510c <UART_RxISR_16BIT_FIFOEN+0x358>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800507e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8005082:	429a      	cmp	r2, r3
 8005084:	d242      	bcs.n	800510c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	3308      	adds	r3, #8
 800508c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005090:	e853 3f00 	ldrex	r3, [r3]
 8005094:	623b      	str	r3, [r7, #32]
   return(result);
 8005096:	6a3b      	ldr	r3, [r7, #32]
 8005098:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800509c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	3308      	adds	r3, #8
 80050a6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80050aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80050ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050b2:	e841 2300 	strex	r3, r2, [r1]
 80050b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1e3      	bne.n	8005086 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a15      	ldr	r2, [pc, #84]	@ (8005118 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80050c2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	e853 3f00 	ldrex	r3, [r3]
 80050d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f043 0320 	orr.w	r3, r3, #32
 80050d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	461a      	mov	r2, r3
 80050e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80050e6:	61fb      	str	r3, [r7, #28]
 80050e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ea:	69b9      	ldr	r1, [r7, #24]
 80050ec:	69fa      	ldr	r2, [r7, #28]
 80050ee:	e841 2300 	strex	r3, r2, [r1]
 80050f2:	617b      	str	r3, [r7, #20]
   return(result);
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1e4      	bne.n	80050c4 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80050fa:	e007      	b.n	800510c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	699a      	ldr	r2, [r3, #24]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f042 0208 	orr.w	r2, r2, #8
 800510a:	619a      	str	r2, [r3, #24]
}
 800510c:	bf00      	nop
 800510e:	37b8      	adds	r7, #184	@ 0xb8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	40008000 	.word	0x40008000
 8005118:	0800489d 	.word	0x0800489d

0800511c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	bc80      	pop	{r7}
 800512c:	4770      	bx	lr

0800512e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800512e:	b480      	push	{r7}
 8005130:	b083      	sub	sp, #12
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005136:	bf00      	nop
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	bc80      	pop	{r7}
 800513e:	4770      	bx	lr

08005140 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	bc80      	pop	{r7}
 8005150:	4770      	bx	lr

08005152 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005152:	b480      	push	{r7}
 8005154:	b085      	sub	sp, #20
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005160:	2b01      	cmp	r3, #1
 8005162:	d101      	bne.n	8005168 <HAL_UARTEx_DisableFifoMode+0x16>
 8005164:	2302      	movs	r3, #2
 8005166:	e027      	b.n	80051b8 <HAL_UARTEx_DisableFifoMode+0x66>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2224      	movs	r2, #36	@ 0x24
 8005174:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 0201 	bic.w	r2, r2, #1
 800518e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005196:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2220      	movs	r2, #32
 80051aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3714      	adds	r7, #20
 80051bc:	46bd      	mov	sp, r7
 80051be:	bc80      	pop	{r7}
 80051c0:	4770      	bx	lr

080051c2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b084      	sub	sp, #16
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
 80051ca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d101      	bne.n	80051da <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80051d6:	2302      	movs	r3, #2
 80051d8:	e02d      	b.n	8005236 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2224      	movs	r2, #36	@ 0x24
 80051e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f022 0201 	bic.w	r2, r2, #1
 8005200:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	683a      	ldr	r2, [r7, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f850 	bl	80052bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2220      	movs	r2, #32
 8005228:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3710      	adds	r7, #16
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b084      	sub	sp, #16
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
 8005246:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800524e:	2b01      	cmp	r3, #1
 8005250:	d101      	bne.n	8005256 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005252:	2302      	movs	r3, #2
 8005254:	e02d      	b.n	80052b2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2224      	movs	r2, #36	@ 0x24
 8005262:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f022 0201 	bic.w	r2, r2, #1
 800527c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	683a      	ldr	r2, [r7, #0]
 800528e:	430a      	orrs	r2, r1
 8005290:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f812 	bl	80052bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2220      	movs	r2, #32
 80052a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3710      	adds	r7, #16
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
	...

080052bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d108      	bne.n	80052de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80052dc:	e031      	b.n	8005342 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80052de:	2308      	movs	r3, #8
 80052e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80052e2:	2308      	movs	r3, #8
 80052e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	0e5b      	lsrs	r3, r3, #25
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	f003 0307 	and.w	r3, r3, #7
 80052f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	0f5b      	lsrs	r3, r3, #29
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	f003 0307 	and.w	r3, r3, #7
 8005304:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005306:	7bbb      	ldrb	r3, [r7, #14]
 8005308:	7b3a      	ldrb	r2, [r7, #12]
 800530a:	4910      	ldr	r1, [pc, #64]	@ (800534c <UARTEx_SetNbDataToProcess+0x90>)
 800530c:	5c8a      	ldrb	r2, [r1, r2]
 800530e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005312:	7b3a      	ldrb	r2, [r7, #12]
 8005314:	490e      	ldr	r1, [pc, #56]	@ (8005350 <UARTEx_SetNbDataToProcess+0x94>)
 8005316:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005318:	fb93 f3f2 	sdiv	r3, r3, r2
 800531c:	b29a      	uxth	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005324:	7bfb      	ldrb	r3, [r7, #15]
 8005326:	7b7a      	ldrb	r2, [r7, #13]
 8005328:	4908      	ldr	r1, [pc, #32]	@ (800534c <UARTEx_SetNbDataToProcess+0x90>)
 800532a:	5c8a      	ldrb	r2, [r1, r2]
 800532c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005330:	7b7a      	ldrb	r2, [r7, #13]
 8005332:	4907      	ldr	r1, [pc, #28]	@ (8005350 <UARTEx_SetNbDataToProcess+0x94>)
 8005334:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005336:	fb93 f3f2 	sdiv	r3, r3, r2
 800533a:	b29a      	uxth	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005342:	bf00      	nop
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	bc80      	pop	{r7}
 800534a:	4770      	bx	lr
 800534c:	08005e44 	.word	0x08005e44
 8005350:	08005e4c 	.word	0x08005e4c

08005354 <sniprintf>:
 8005354:	b40c      	push	{r2, r3}
 8005356:	b530      	push	{r4, r5, lr}
 8005358:	4b18      	ldr	r3, [pc, #96]	@ (80053bc <sniprintf+0x68>)
 800535a:	1e0c      	subs	r4, r1, #0
 800535c:	681d      	ldr	r5, [r3, #0]
 800535e:	b09d      	sub	sp, #116	@ 0x74
 8005360:	da08      	bge.n	8005374 <sniprintf+0x20>
 8005362:	238b      	movs	r3, #139	@ 0x8b
 8005364:	602b      	str	r3, [r5, #0]
 8005366:	f04f 30ff 	mov.w	r0, #4294967295
 800536a:	b01d      	add	sp, #116	@ 0x74
 800536c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005370:	b002      	add	sp, #8
 8005372:	4770      	bx	lr
 8005374:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005378:	f8ad 3014 	strh.w	r3, [sp, #20]
 800537c:	f04f 0300 	mov.w	r3, #0
 8005380:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005382:	bf14      	ite	ne
 8005384:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005388:	4623      	moveq	r3, r4
 800538a:	9304      	str	r3, [sp, #16]
 800538c:	9307      	str	r3, [sp, #28]
 800538e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005392:	9002      	str	r0, [sp, #8]
 8005394:	9006      	str	r0, [sp, #24]
 8005396:	f8ad 3016 	strh.w	r3, [sp, #22]
 800539a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800539c:	ab21      	add	r3, sp, #132	@ 0x84
 800539e:	a902      	add	r1, sp, #8
 80053a0:	4628      	mov	r0, r5
 80053a2:	9301      	str	r3, [sp, #4]
 80053a4:	f000 f9b6 	bl	8005714 <_svfiprintf_r>
 80053a8:	1c43      	adds	r3, r0, #1
 80053aa:	bfbc      	itt	lt
 80053ac:	238b      	movlt	r3, #139	@ 0x8b
 80053ae:	602b      	strlt	r3, [r5, #0]
 80053b0:	2c00      	cmp	r4, #0
 80053b2:	d0da      	beq.n	800536a <sniprintf+0x16>
 80053b4:	9b02      	ldr	r3, [sp, #8]
 80053b6:	2200      	movs	r2, #0
 80053b8:	701a      	strb	r2, [r3, #0]
 80053ba:	e7d6      	b.n	800536a <sniprintf+0x16>
 80053bc:	2000001c 	.word	0x2000001c

080053c0 <siprintf>:
 80053c0:	b40e      	push	{r1, r2, r3}
 80053c2:	b510      	push	{r4, lr}
 80053c4:	b09d      	sub	sp, #116	@ 0x74
 80053c6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80053c8:	9002      	str	r0, [sp, #8]
 80053ca:	9006      	str	r0, [sp, #24]
 80053cc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80053d0:	480a      	ldr	r0, [pc, #40]	@ (80053fc <siprintf+0x3c>)
 80053d2:	9107      	str	r1, [sp, #28]
 80053d4:	9104      	str	r1, [sp, #16]
 80053d6:	490a      	ldr	r1, [pc, #40]	@ (8005400 <siprintf+0x40>)
 80053d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80053dc:	9105      	str	r1, [sp, #20]
 80053de:	2400      	movs	r4, #0
 80053e0:	a902      	add	r1, sp, #8
 80053e2:	6800      	ldr	r0, [r0, #0]
 80053e4:	9301      	str	r3, [sp, #4]
 80053e6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80053e8:	f000 f994 	bl	8005714 <_svfiprintf_r>
 80053ec:	9b02      	ldr	r3, [sp, #8]
 80053ee:	701c      	strb	r4, [r3, #0]
 80053f0:	b01d      	add	sp, #116	@ 0x74
 80053f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053f6:	b003      	add	sp, #12
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	2000001c 	.word	0x2000001c
 8005400:	ffff0208 	.word	0xffff0208

08005404 <memset>:
 8005404:	4402      	add	r2, r0
 8005406:	4603      	mov	r3, r0
 8005408:	4293      	cmp	r3, r2
 800540a:	d100      	bne.n	800540e <memset+0xa>
 800540c:	4770      	bx	lr
 800540e:	f803 1b01 	strb.w	r1, [r3], #1
 8005412:	e7f9      	b.n	8005408 <memset+0x4>

08005414 <__errno>:
 8005414:	4b01      	ldr	r3, [pc, #4]	@ (800541c <__errno+0x8>)
 8005416:	6818      	ldr	r0, [r3, #0]
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	2000001c 	.word	0x2000001c

08005420 <__libc_init_array>:
 8005420:	b570      	push	{r4, r5, r6, lr}
 8005422:	4d0d      	ldr	r5, [pc, #52]	@ (8005458 <__libc_init_array+0x38>)
 8005424:	4c0d      	ldr	r4, [pc, #52]	@ (800545c <__libc_init_array+0x3c>)
 8005426:	1b64      	subs	r4, r4, r5
 8005428:	10a4      	asrs	r4, r4, #2
 800542a:	2600      	movs	r6, #0
 800542c:	42a6      	cmp	r6, r4
 800542e:	d109      	bne.n	8005444 <__libc_init_array+0x24>
 8005430:	4d0b      	ldr	r5, [pc, #44]	@ (8005460 <__libc_init_array+0x40>)
 8005432:	4c0c      	ldr	r4, [pc, #48]	@ (8005464 <__libc_init_array+0x44>)
 8005434:	f000 fc64 	bl	8005d00 <_init>
 8005438:	1b64      	subs	r4, r4, r5
 800543a:	10a4      	asrs	r4, r4, #2
 800543c:	2600      	movs	r6, #0
 800543e:	42a6      	cmp	r6, r4
 8005440:	d105      	bne.n	800544e <__libc_init_array+0x2e>
 8005442:	bd70      	pop	{r4, r5, r6, pc}
 8005444:	f855 3b04 	ldr.w	r3, [r5], #4
 8005448:	4798      	blx	r3
 800544a:	3601      	adds	r6, #1
 800544c:	e7ee      	b.n	800542c <__libc_init_array+0xc>
 800544e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005452:	4798      	blx	r3
 8005454:	3601      	adds	r6, #1
 8005456:	e7f2      	b.n	800543e <__libc_init_array+0x1e>
 8005458:	08005e90 	.word	0x08005e90
 800545c:	08005e90 	.word	0x08005e90
 8005460:	08005e90 	.word	0x08005e90
 8005464:	08005e94 	.word	0x08005e94

08005468 <__retarget_lock_acquire_recursive>:
 8005468:	4770      	bx	lr

0800546a <__retarget_lock_release_recursive>:
 800546a:	4770      	bx	lr

0800546c <_free_r>:
 800546c:	b538      	push	{r3, r4, r5, lr}
 800546e:	4605      	mov	r5, r0
 8005470:	2900      	cmp	r1, #0
 8005472:	d041      	beq.n	80054f8 <_free_r+0x8c>
 8005474:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005478:	1f0c      	subs	r4, r1, #4
 800547a:	2b00      	cmp	r3, #0
 800547c:	bfb8      	it	lt
 800547e:	18e4      	addlt	r4, r4, r3
 8005480:	f000 f8e0 	bl	8005644 <__malloc_lock>
 8005484:	4a1d      	ldr	r2, [pc, #116]	@ (80054fc <_free_r+0x90>)
 8005486:	6813      	ldr	r3, [r2, #0]
 8005488:	b933      	cbnz	r3, 8005498 <_free_r+0x2c>
 800548a:	6063      	str	r3, [r4, #4]
 800548c:	6014      	str	r4, [r2, #0]
 800548e:	4628      	mov	r0, r5
 8005490:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005494:	f000 b8dc 	b.w	8005650 <__malloc_unlock>
 8005498:	42a3      	cmp	r3, r4
 800549a:	d908      	bls.n	80054ae <_free_r+0x42>
 800549c:	6820      	ldr	r0, [r4, #0]
 800549e:	1821      	adds	r1, r4, r0
 80054a0:	428b      	cmp	r3, r1
 80054a2:	bf01      	itttt	eq
 80054a4:	6819      	ldreq	r1, [r3, #0]
 80054a6:	685b      	ldreq	r3, [r3, #4]
 80054a8:	1809      	addeq	r1, r1, r0
 80054aa:	6021      	streq	r1, [r4, #0]
 80054ac:	e7ed      	b.n	800548a <_free_r+0x1e>
 80054ae:	461a      	mov	r2, r3
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	b10b      	cbz	r3, 80054b8 <_free_r+0x4c>
 80054b4:	42a3      	cmp	r3, r4
 80054b6:	d9fa      	bls.n	80054ae <_free_r+0x42>
 80054b8:	6811      	ldr	r1, [r2, #0]
 80054ba:	1850      	adds	r0, r2, r1
 80054bc:	42a0      	cmp	r0, r4
 80054be:	d10b      	bne.n	80054d8 <_free_r+0x6c>
 80054c0:	6820      	ldr	r0, [r4, #0]
 80054c2:	4401      	add	r1, r0
 80054c4:	1850      	adds	r0, r2, r1
 80054c6:	4283      	cmp	r3, r0
 80054c8:	6011      	str	r1, [r2, #0]
 80054ca:	d1e0      	bne.n	800548e <_free_r+0x22>
 80054cc:	6818      	ldr	r0, [r3, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	6053      	str	r3, [r2, #4]
 80054d2:	4408      	add	r0, r1
 80054d4:	6010      	str	r0, [r2, #0]
 80054d6:	e7da      	b.n	800548e <_free_r+0x22>
 80054d8:	d902      	bls.n	80054e0 <_free_r+0x74>
 80054da:	230c      	movs	r3, #12
 80054dc:	602b      	str	r3, [r5, #0]
 80054de:	e7d6      	b.n	800548e <_free_r+0x22>
 80054e0:	6820      	ldr	r0, [r4, #0]
 80054e2:	1821      	adds	r1, r4, r0
 80054e4:	428b      	cmp	r3, r1
 80054e6:	bf04      	itt	eq
 80054e8:	6819      	ldreq	r1, [r3, #0]
 80054ea:	685b      	ldreq	r3, [r3, #4]
 80054ec:	6063      	str	r3, [r4, #4]
 80054ee:	bf04      	itt	eq
 80054f0:	1809      	addeq	r1, r1, r0
 80054f2:	6021      	streq	r1, [r4, #0]
 80054f4:	6054      	str	r4, [r2, #4]
 80054f6:	e7ca      	b.n	800548e <_free_r+0x22>
 80054f8:	bd38      	pop	{r3, r4, r5, pc}
 80054fa:	bf00      	nop
 80054fc:	20000580 	.word	0x20000580

08005500 <sbrk_aligned>:
 8005500:	b570      	push	{r4, r5, r6, lr}
 8005502:	4e0f      	ldr	r6, [pc, #60]	@ (8005540 <sbrk_aligned+0x40>)
 8005504:	460c      	mov	r4, r1
 8005506:	6831      	ldr	r1, [r6, #0]
 8005508:	4605      	mov	r5, r0
 800550a:	b911      	cbnz	r1, 8005512 <sbrk_aligned+0x12>
 800550c:	f000 fba4 	bl	8005c58 <_sbrk_r>
 8005510:	6030      	str	r0, [r6, #0]
 8005512:	4621      	mov	r1, r4
 8005514:	4628      	mov	r0, r5
 8005516:	f000 fb9f 	bl	8005c58 <_sbrk_r>
 800551a:	1c43      	adds	r3, r0, #1
 800551c:	d103      	bne.n	8005526 <sbrk_aligned+0x26>
 800551e:	f04f 34ff 	mov.w	r4, #4294967295
 8005522:	4620      	mov	r0, r4
 8005524:	bd70      	pop	{r4, r5, r6, pc}
 8005526:	1cc4      	adds	r4, r0, #3
 8005528:	f024 0403 	bic.w	r4, r4, #3
 800552c:	42a0      	cmp	r0, r4
 800552e:	d0f8      	beq.n	8005522 <sbrk_aligned+0x22>
 8005530:	1a21      	subs	r1, r4, r0
 8005532:	4628      	mov	r0, r5
 8005534:	f000 fb90 	bl	8005c58 <_sbrk_r>
 8005538:	3001      	adds	r0, #1
 800553a:	d1f2      	bne.n	8005522 <sbrk_aligned+0x22>
 800553c:	e7ef      	b.n	800551e <sbrk_aligned+0x1e>
 800553e:	bf00      	nop
 8005540:	2000057c 	.word	0x2000057c

08005544 <_malloc_r>:
 8005544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005548:	1ccd      	adds	r5, r1, #3
 800554a:	f025 0503 	bic.w	r5, r5, #3
 800554e:	3508      	adds	r5, #8
 8005550:	2d0c      	cmp	r5, #12
 8005552:	bf38      	it	cc
 8005554:	250c      	movcc	r5, #12
 8005556:	2d00      	cmp	r5, #0
 8005558:	4606      	mov	r6, r0
 800555a:	db01      	blt.n	8005560 <_malloc_r+0x1c>
 800555c:	42a9      	cmp	r1, r5
 800555e:	d904      	bls.n	800556a <_malloc_r+0x26>
 8005560:	230c      	movs	r3, #12
 8005562:	6033      	str	r3, [r6, #0]
 8005564:	2000      	movs	r0, #0
 8005566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800556a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005640 <_malloc_r+0xfc>
 800556e:	f000 f869 	bl	8005644 <__malloc_lock>
 8005572:	f8d8 3000 	ldr.w	r3, [r8]
 8005576:	461c      	mov	r4, r3
 8005578:	bb44      	cbnz	r4, 80055cc <_malloc_r+0x88>
 800557a:	4629      	mov	r1, r5
 800557c:	4630      	mov	r0, r6
 800557e:	f7ff ffbf 	bl	8005500 <sbrk_aligned>
 8005582:	1c43      	adds	r3, r0, #1
 8005584:	4604      	mov	r4, r0
 8005586:	d158      	bne.n	800563a <_malloc_r+0xf6>
 8005588:	f8d8 4000 	ldr.w	r4, [r8]
 800558c:	4627      	mov	r7, r4
 800558e:	2f00      	cmp	r7, #0
 8005590:	d143      	bne.n	800561a <_malloc_r+0xd6>
 8005592:	2c00      	cmp	r4, #0
 8005594:	d04b      	beq.n	800562e <_malloc_r+0xea>
 8005596:	6823      	ldr	r3, [r4, #0]
 8005598:	4639      	mov	r1, r7
 800559a:	4630      	mov	r0, r6
 800559c:	eb04 0903 	add.w	r9, r4, r3
 80055a0:	f000 fb5a 	bl	8005c58 <_sbrk_r>
 80055a4:	4581      	cmp	r9, r0
 80055a6:	d142      	bne.n	800562e <_malloc_r+0xea>
 80055a8:	6821      	ldr	r1, [r4, #0]
 80055aa:	1a6d      	subs	r5, r5, r1
 80055ac:	4629      	mov	r1, r5
 80055ae:	4630      	mov	r0, r6
 80055b0:	f7ff ffa6 	bl	8005500 <sbrk_aligned>
 80055b4:	3001      	adds	r0, #1
 80055b6:	d03a      	beq.n	800562e <_malloc_r+0xea>
 80055b8:	6823      	ldr	r3, [r4, #0]
 80055ba:	442b      	add	r3, r5
 80055bc:	6023      	str	r3, [r4, #0]
 80055be:	f8d8 3000 	ldr.w	r3, [r8]
 80055c2:	685a      	ldr	r2, [r3, #4]
 80055c4:	bb62      	cbnz	r2, 8005620 <_malloc_r+0xdc>
 80055c6:	f8c8 7000 	str.w	r7, [r8]
 80055ca:	e00f      	b.n	80055ec <_malloc_r+0xa8>
 80055cc:	6822      	ldr	r2, [r4, #0]
 80055ce:	1b52      	subs	r2, r2, r5
 80055d0:	d420      	bmi.n	8005614 <_malloc_r+0xd0>
 80055d2:	2a0b      	cmp	r2, #11
 80055d4:	d917      	bls.n	8005606 <_malloc_r+0xc2>
 80055d6:	1961      	adds	r1, r4, r5
 80055d8:	42a3      	cmp	r3, r4
 80055da:	6025      	str	r5, [r4, #0]
 80055dc:	bf18      	it	ne
 80055de:	6059      	strne	r1, [r3, #4]
 80055e0:	6863      	ldr	r3, [r4, #4]
 80055e2:	bf08      	it	eq
 80055e4:	f8c8 1000 	streq.w	r1, [r8]
 80055e8:	5162      	str	r2, [r4, r5]
 80055ea:	604b      	str	r3, [r1, #4]
 80055ec:	4630      	mov	r0, r6
 80055ee:	f000 f82f 	bl	8005650 <__malloc_unlock>
 80055f2:	f104 000b 	add.w	r0, r4, #11
 80055f6:	1d23      	adds	r3, r4, #4
 80055f8:	f020 0007 	bic.w	r0, r0, #7
 80055fc:	1ac2      	subs	r2, r0, r3
 80055fe:	bf1c      	itt	ne
 8005600:	1a1b      	subne	r3, r3, r0
 8005602:	50a3      	strne	r3, [r4, r2]
 8005604:	e7af      	b.n	8005566 <_malloc_r+0x22>
 8005606:	6862      	ldr	r2, [r4, #4]
 8005608:	42a3      	cmp	r3, r4
 800560a:	bf0c      	ite	eq
 800560c:	f8c8 2000 	streq.w	r2, [r8]
 8005610:	605a      	strne	r2, [r3, #4]
 8005612:	e7eb      	b.n	80055ec <_malloc_r+0xa8>
 8005614:	4623      	mov	r3, r4
 8005616:	6864      	ldr	r4, [r4, #4]
 8005618:	e7ae      	b.n	8005578 <_malloc_r+0x34>
 800561a:	463c      	mov	r4, r7
 800561c:	687f      	ldr	r7, [r7, #4]
 800561e:	e7b6      	b.n	800558e <_malloc_r+0x4a>
 8005620:	461a      	mov	r2, r3
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	42a3      	cmp	r3, r4
 8005626:	d1fb      	bne.n	8005620 <_malloc_r+0xdc>
 8005628:	2300      	movs	r3, #0
 800562a:	6053      	str	r3, [r2, #4]
 800562c:	e7de      	b.n	80055ec <_malloc_r+0xa8>
 800562e:	230c      	movs	r3, #12
 8005630:	6033      	str	r3, [r6, #0]
 8005632:	4630      	mov	r0, r6
 8005634:	f000 f80c 	bl	8005650 <__malloc_unlock>
 8005638:	e794      	b.n	8005564 <_malloc_r+0x20>
 800563a:	6005      	str	r5, [r0, #0]
 800563c:	e7d6      	b.n	80055ec <_malloc_r+0xa8>
 800563e:	bf00      	nop
 8005640:	20000580 	.word	0x20000580

08005644 <__malloc_lock>:
 8005644:	4801      	ldr	r0, [pc, #4]	@ (800564c <__malloc_lock+0x8>)
 8005646:	f7ff bf0f 	b.w	8005468 <__retarget_lock_acquire_recursive>
 800564a:	bf00      	nop
 800564c:	20000578 	.word	0x20000578

08005650 <__malloc_unlock>:
 8005650:	4801      	ldr	r0, [pc, #4]	@ (8005658 <__malloc_unlock+0x8>)
 8005652:	f7ff bf0a 	b.w	800546a <__retarget_lock_release_recursive>
 8005656:	bf00      	nop
 8005658:	20000578 	.word	0x20000578

0800565c <__ssputs_r>:
 800565c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005660:	688e      	ldr	r6, [r1, #8]
 8005662:	461f      	mov	r7, r3
 8005664:	42be      	cmp	r6, r7
 8005666:	680b      	ldr	r3, [r1, #0]
 8005668:	4682      	mov	sl, r0
 800566a:	460c      	mov	r4, r1
 800566c:	4690      	mov	r8, r2
 800566e:	d82d      	bhi.n	80056cc <__ssputs_r+0x70>
 8005670:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005674:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005678:	d026      	beq.n	80056c8 <__ssputs_r+0x6c>
 800567a:	6965      	ldr	r5, [r4, #20]
 800567c:	6909      	ldr	r1, [r1, #16]
 800567e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005682:	eba3 0901 	sub.w	r9, r3, r1
 8005686:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800568a:	1c7b      	adds	r3, r7, #1
 800568c:	444b      	add	r3, r9
 800568e:	106d      	asrs	r5, r5, #1
 8005690:	429d      	cmp	r5, r3
 8005692:	bf38      	it	cc
 8005694:	461d      	movcc	r5, r3
 8005696:	0553      	lsls	r3, r2, #21
 8005698:	d527      	bpl.n	80056ea <__ssputs_r+0x8e>
 800569a:	4629      	mov	r1, r5
 800569c:	f7ff ff52 	bl	8005544 <_malloc_r>
 80056a0:	4606      	mov	r6, r0
 80056a2:	b360      	cbz	r0, 80056fe <__ssputs_r+0xa2>
 80056a4:	6921      	ldr	r1, [r4, #16]
 80056a6:	464a      	mov	r2, r9
 80056a8:	f000 fae6 	bl	8005c78 <memcpy>
 80056ac:	89a3      	ldrh	r3, [r4, #12]
 80056ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80056b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056b6:	81a3      	strh	r3, [r4, #12]
 80056b8:	6126      	str	r6, [r4, #16]
 80056ba:	6165      	str	r5, [r4, #20]
 80056bc:	444e      	add	r6, r9
 80056be:	eba5 0509 	sub.w	r5, r5, r9
 80056c2:	6026      	str	r6, [r4, #0]
 80056c4:	60a5      	str	r5, [r4, #8]
 80056c6:	463e      	mov	r6, r7
 80056c8:	42be      	cmp	r6, r7
 80056ca:	d900      	bls.n	80056ce <__ssputs_r+0x72>
 80056cc:	463e      	mov	r6, r7
 80056ce:	6820      	ldr	r0, [r4, #0]
 80056d0:	4632      	mov	r2, r6
 80056d2:	4641      	mov	r1, r8
 80056d4:	f000 faa6 	bl	8005c24 <memmove>
 80056d8:	68a3      	ldr	r3, [r4, #8]
 80056da:	1b9b      	subs	r3, r3, r6
 80056dc:	60a3      	str	r3, [r4, #8]
 80056de:	6823      	ldr	r3, [r4, #0]
 80056e0:	4433      	add	r3, r6
 80056e2:	6023      	str	r3, [r4, #0]
 80056e4:	2000      	movs	r0, #0
 80056e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ea:	462a      	mov	r2, r5
 80056ec:	f000 fad2 	bl	8005c94 <_realloc_r>
 80056f0:	4606      	mov	r6, r0
 80056f2:	2800      	cmp	r0, #0
 80056f4:	d1e0      	bne.n	80056b8 <__ssputs_r+0x5c>
 80056f6:	6921      	ldr	r1, [r4, #16]
 80056f8:	4650      	mov	r0, sl
 80056fa:	f7ff feb7 	bl	800546c <_free_r>
 80056fe:	230c      	movs	r3, #12
 8005700:	f8ca 3000 	str.w	r3, [sl]
 8005704:	89a3      	ldrh	r3, [r4, #12]
 8005706:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800570a:	81a3      	strh	r3, [r4, #12]
 800570c:	f04f 30ff 	mov.w	r0, #4294967295
 8005710:	e7e9      	b.n	80056e6 <__ssputs_r+0x8a>
	...

08005714 <_svfiprintf_r>:
 8005714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005718:	4698      	mov	r8, r3
 800571a:	898b      	ldrh	r3, [r1, #12]
 800571c:	061b      	lsls	r3, r3, #24
 800571e:	b09d      	sub	sp, #116	@ 0x74
 8005720:	4607      	mov	r7, r0
 8005722:	460d      	mov	r5, r1
 8005724:	4614      	mov	r4, r2
 8005726:	d510      	bpl.n	800574a <_svfiprintf_r+0x36>
 8005728:	690b      	ldr	r3, [r1, #16]
 800572a:	b973      	cbnz	r3, 800574a <_svfiprintf_r+0x36>
 800572c:	2140      	movs	r1, #64	@ 0x40
 800572e:	f7ff ff09 	bl	8005544 <_malloc_r>
 8005732:	6028      	str	r0, [r5, #0]
 8005734:	6128      	str	r0, [r5, #16]
 8005736:	b930      	cbnz	r0, 8005746 <_svfiprintf_r+0x32>
 8005738:	230c      	movs	r3, #12
 800573a:	603b      	str	r3, [r7, #0]
 800573c:	f04f 30ff 	mov.w	r0, #4294967295
 8005740:	b01d      	add	sp, #116	@ 0x74
 8005742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005746:	2340      	movs	r3, #64	@ 0x40
 8005748:	616b      	str	r3, [r5, #20]
 800574a:	2300      	movs	r3, #0
 800574c:	9309      	str	r3, [sp, #36]	@ 0x24
 800574e:	2320      	movs	r3, #32
 8005750:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005754:	f8cd 800c 	str.w	r8, [sp, #12]
 8005758:	2330      	movs	r3, #48	@ 0x30
 800575a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80058f8 <_svfiprintf_r+0x1e4>
 800575e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005762:	f04f 0901 	mov.w	r9, #1
 8005766:	4623      	mov	r3, r4
 8005768:	469a      	mov	sl, r3
 800576a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800576e:	b10a      	cbz	r2, 8005774 <_svfiprintf_r+0x60>
 8005770:	2a25      	cmp	r2, #37	@ 0x25
 8005772:	d1f9      	bne.n	8005768 <_svfiprintf_r+0x54>
 8005774:	ebba 0b04 	subs.w	fp, sl, r4
 8005778:	d00b      	beq.n	8005792 <_svfiprintf_r+0x7e>
 800577a:	465b      	mov	r3, fp
 800577c:	4622      	mov	r2, r4
 800577e:	4629      	mov	r1, r5
 8005780:	4638      	mov	r0, r7
 8005782:	f7ff ff6b 	bl	800565c <__ssputs_r>
 8005786:	3001      	adds	r0, #1
 8005788:	f000 80a7 	beq.w	80058da <_svfiprintf_r+0x1c6>
 800578c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800578e:	445a      	add	r2, fp
 8005790:	9209      	str	r2, [sp, #36]	@ 0x24
 8005792:	f89a 3000 	ldrb.w	r3, [sl]
 8005796:	2b00      	cmp	r3, #0
 8005798:	f000 809f 	beq.w	80058da <_svfiprintf_r+0x1c6>
 800579c:	2300      	movs	r3, #0
 800579e:	f04f 32ff 	mov.w	r2, #4294967295
 80057a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057a6:	f10a 0a01 	add.w	sl, sl, #1
 80057aa:	9304      	str	r3, [sp, #16]
 80057ac:	9307      	str	r3, [sp, #28]
 80057ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80057b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80057b4:	4654      	mov	r4, sl
 80057b6:	2205      	movs	r2, #5
 80057b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057bc:	484e      	ldr	r0, [pc, #312]	@ (80058f8 <_svfiprintf_r+0x1e4>)
 80057be:	f7fa fce7 	bl	8000190 <memchr>
 80057c2:	9a04      	ldr	r2, [sp, #16]
 80057c4:	b9d8      	cbnz	r0, 80057fe <_svfiprintf_r+0xea>
 80057c6:	06d0      	lsls	r0, r2, #27
 80057c8:	bf44      	itt	mi
 80057ca:	2320      	movmi	r3, #32
 80057cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80057d0:	0711      	lsls	r1, r2, #28
 80057d2:	bf44      	itt	mi
 80057d4:	232b      	movmi	r3, #43	@ 0x2b
 80057d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80057da:	f89a 3000 	ldrb.w	r3, [sl]
 80057de:	2b2a      	cmp	r3, #42	@ 0x2a
 80057e0:	d015      	beq.n	800580e <_svfiprintf_r+0xfa>
 80057e2:	9a07      	ldr	r2, [sp, #28]
 80057e4:	4654      	mov	r4, sl
 80057e6:	2000      	movs	r0, #0
 80057e8:	f04f 0c0a 	mov.w	ip, #10
 80057ec:	4621      	mov	r1, r4
 80057ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057f2:	3b30      	subs	r3, #48	@ 0x30
 80057f4:	2b09      	cmp	r3, #9
 80057f6:	d94b      	bls.n	8005890 <_svfiprintf_r+0x17c>
 80057f8:	b1b0      	cbz	r0, 8005828 <_svfiprintf_r+0x114>
 80057fa:	9207      	str	r2, [sp, #28]
 80057fc:	e014      	b.n	8005828 <_svfiprintf_r+0x114>
 80057fe:	eba0 0308 	sub.w	r3, r0, r8
 8005802:	fa09 f303 	lsl.w	r3, r9, r3
 8005806:	4313      	orrs	r3, r2
 8005808:	9304      	str	r3, [sp, #16]
 800580a:	46a2      	mov	sl, r4
 800580c:	e7d2      	b.n	80057b4 <_svfiprintf_r+0xa0>
 800580e:	9b03      	ldr	r3, [sp, #12]
 8005810:	1d19      	adds	r1, r3, #4
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	9103      	str	r1, [sp, #12]
 8005816:	2b00      	cmp	r3, #0
 8005818:	bfbb      	ittet	lt
 800581a:	425b      	neglt	r3, r3
 800581c:	f042 0202 	orrlt.w	r2, r2, #2
 8005820:	9307      	strge	r3, [sp, #28]
 8005822:	9307      	strlt	r3, [sp, #28]
 8005824:	bfb8      	it	lt
 8005826:	9204      	strlt	r2, [sp, #16]
 8005828:	7823      	ldrb	r3, [r4, #0]
 800582a:	2b2e      	cmp	r3, #46	@ 0x2e
 800582c:	d10a      	bne.n	8005844 <_svfiprintf_r+0x130>
 800582e:	7863      	ldrb	r3, [r4, #1]
 8005830:	2b2a      	cmp	r3, #42	@ 0x2a
 8005832:	d132      	bne.n	800589a <_svfiprintf_r+0x186>
 8005834:	9b03      	ldr	r3, [sp, #12]
 8005836:	1d1a      	adds	r2, r3, #4
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	9203      	str	r2, [sp, #12]
 800583c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005840:	3402      	adds	r4, #2
 8005842:	9305      	str	r3, [sp, #20]
 8005844:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80058fc <_svfiprintf_r+0x1e8>
 8005848:	7821      	ldrb	r1, [r4, #0]
 800584a:	2203      	movs	r2, #3
 800584c:	4650      	mov	r0, sl
 800584e:	f7fa fc9f 	bl	8000190 <memchr>
 8005852:	b138      	cbz	r0, 8005864 <_svfiprintf_r+0x150>
 8005854:	9b04      	ldr	r3, [sp, #16]
 8005856:	eba0 000a 	sub.w	r0, r0, sl
 800585a:	2240      	movs	r2, #64	@ 0x40
 800585c:	4082      	lsls	r2, r0
 800585e:	4313      	orrs	r3, r2
 8005860:	3401      	adds	r4, #1
 8005862:	9304      	str	r3, [sp, #16]
 8005864:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005868:	4825      	ldr	r0, [pc, #148]	@ (8005900 <_svfiprintf_r+0x1ec>)
 800586a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800586e:	2206      	movs	r2, #6
 8005870:	f7fa fc8e 	bl	8000190 <memchr>
 8005874:	2800      	cmp	r0, #0
 8005876:	d036      	beq.n	80058e6 <_svfiprintf_r+0x1d2>
 8005878:	4b22      	ldr	r3, [pc, #136]	@ (8005904 <_svfiprintf_r+0x1f0>)
 800587a:	bb1b      	cbnz	r3, 80058c4 <_svfiprintf_r+0x1b0>
 800587c:	9b03      	ldr	r3, [sp, #12]
 800587e:	3307      	adds	r3, #7
 8005880:	f023 0307 	bic.w	r3, r3, #7
 8005884:	3308      	adds	r3, #8
 8005886:	9303      	str	r3, [sp, #12]
 8005888:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800588a:	4433      	add	r3, r6
 800588c:	9309      	str	r3, [sp, #36]	@ 0x24
 800588e:	e76a      	b.n	8005766 <_svfiprintf_r+0x52>
 8005890:	fb0c 3202 	mla	r2, ip, r2, r3
 8005894:	460c      	mov	r4, r1
 8005896:	2001      	movs	r0, #1
 8005898:	e7a8      	b.n	80057ec <_svfiprintf_r+0xd8>
 800589a:	2300      	movs	r3, #0
 800589c:	3401      	adds	r4, #1
 800589e:	9305      	str	r3, [sp, #20]
 80058a0:	4619      	mov	r1, r3
 80058a2:	f04f 0c0a 	mov.w	ip, #10
 80058a6:	4620      	mov	r0, r4
 80058a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058ac:	3a30      	subs	r2, #48	@ 0x30
 80058ae:	2a09      	cmp	r2, #9
 80058b0:	d903      	bls.n	80058ba <_svfiprintf_r+0x1a6>
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d0c6      	beq.n	8005844 <_svfiprintf_r+0x130>
 80058b6:	9105      	str	r1, [sp, #20]
 80058b8:	e7c4      	b.n	8005844 <_svfiprintf_r+0x130>
 80058ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80058be:	4604      	mov	r4, r0
 80058c0:	2301      	movs	r3, #1
 80058c2:	e7f0      	b.n	80058a6 <_svfiprintf_r+0x192>
 80058c4:	ab03      	add	r3, sp, #12
 80058c6:	9300      	str	r3, [sp, #0]
 80058c8:	462a      	mov	r2, r5
 80058ca:	4b0f      	ldr	r3, [pc, #60]	@ (8005908 <_svfiprintf_r+0x1f4>)
 80058cc:	a904      	add	r1, sp, #16
 80058ce:	4638      	mov	r0, r7
 80058d0:	f3af 8000 	nop.w
 80058d4:	1c42      	adds	r2, r0, #1
 80058d6:	4606      	mov	r6, r0
 80058d8:	d1d6      	bne.n	8005888 <_svfiprintf_r+0x174>
 80058da:	89ab      	ldrh	r3, [r5, #12]
 80058dc:	065b      	lsls	r3, r3, #25
 80058de:	f53f af2d 	bmi.w	800573c <_svfiprintf_r+0x28>
 80058e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80058e4:	e72c      	b.n	8005740 <_svfiprintf_r+0x2c>
 80058e6:	ab03      	add	r3, sp, #12
 80058e8:	9300      	str	r3, [sp, #0]
 80058ea:	462a      	mov	r2, r5
 80058ec:	4b06      	ldr	r3, [pc, #24]	@ (8005908 <_svfiprintf_r+0x1f4>)
 80058ee:	a904      	add	r1, sp, #16
 80058f0:	4638      	mov	r0, r7
 80058f2:	f000 f879 	bl	80059e8 <_printf_i>
 80058f6:	e7ed      	b.n	80058d4 <_svfiprintf_r+0x1c0>
 80058f8:	08005e54 	.word	0x08005e54
 80058fc:	08005e5a 	.word	0x08005e5a
 8005900:	08005e5e 	.word	0x08005e5e
 8005904:	00000000 	.word	0x00000000
 8005908:	0800565d 	.word	0x0800565d

0800590c <_printf_common>:
 800590c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005910:	4616      	mov	r6, r2
 8005912:	4698      	mov	r8, r3
 8005914:	688a      	ldr	r2, [r1, #8]
 8005916:	690b      	ldr	r3, [r1, #16]
 8005918:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800591c:	4293      	cmp	r3, r2
 800591e:	bfb8      	it	lt
 8005920:	4613      	movlt	r3, r2
 8005922:	6033      	str	r3, [r6, #0]
 8005924:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005928:	4607      	mov	r7, r0
 800592a:	460c      	mov	r4, r1
 800592c:	b10a      	cbz	r2, 8005932 <_printf_common+0x26>
 800592e:	3301      	adds	r3, #1
 8005930:	6033      	str	r3, [r6, #0]
 8005932:	6823      	ldr	r3, [r4, #0]
 8005934:	0699      	lsls	r1, r3, #26
 8005936:	bf42      	ittt	mi
 8005938:	6833      	ldrmi	r3, [r6, #0]
 800593a:	3302      	addmi	r3, #2
 800593c:	6033      	strmi	r3, [r6, #0]
 800593e:	6825      	ldr	r5, [r4, #0]
 8005940:	f015 0506 	ands.w	r5, r5, #6
 8005944:	d106      	bne.n	8005954 <_printf_common+0x48>
 8005946:	f104 0a19 	add.w	sl, r4, #25
 800594a:	68e3      	ldr	r3, [r4, #12]
 800594c:	6832      	ldr	r2, [r6, #0]
 800594e:	1a9b      	subs	r3, r3, r2
 8005950:	42ab      	cmp	r3, r5
 8005952:	dc26      	bgt.n	80059a2 <_printf_common+0x96>
 8005954:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005958:	6822      	ldr	r2, [r4, #0]
 800595a:	3b00      	subs	r3, #0
 800595c:	bf18      	it	ne
 800595e:	2301      	movne	r3, #1
 8005960:	0692      	lsls	r2, r2, #26
 8005962:	d42b      	bmi.n	80059bc <_printf_common+0xb0>
 8005964:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005968:	4641      	mov	r1, r8
 800596a:	4638      	mov	r0, r7
 800596c:	47c8      	blx	r9
 800596e:	3001      	adds	r0, #1
 8005970:	d01e      	beq.n	80059b0 <_printf_common+0xa4>
 8005972:	6823      	ldr	r3, [r4, #0]
 8005974:	6922      	ldr	r2, [r4, #16]
 8005976:	f003 0306 	and.w	r3, r3, #6
 800597a:	2b04      	cmp	r3, #4
 800597c:	bf02      	ittt	eq
 800597e:	68e5      	ldreq	r5, [r4, #12]
 8005980:	6833      	ldreq	r3, [r6, #0]
 8005982:	1aed      	subeq	r5, r5, r3
 8005984:	68a3      	ldr	r3, [r4, #8]
 8005986:	bf0c      	ite	eq
 8005988:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800598c:	2500      	movne	r5, #0
 800598e:	4293      	cmp	r3, r2
 8005990:	bfc4      	itt	gt
 8005992:	1a9b      	subgt	r3, r3, r2
 8005994:	18ed      	addgt	r5, r5, r3
 8005996:	2600      	movs	r6, #0
 8005998:	341a      	adds	r4, #26
 800599a:	42b5      	cmp	r5, r6
 800599c:	d11a      	bne.n	80059d4 <_printf_common+0xc8>
 800599e:	2000      	movs	r0, #0
 80059a0:	e008      	b.n	80059b4 <_printf_common+0xa8>
 80059a2:	2301      	movs	r3, #1
 80059a4:	4652      	mov	r2, sl
 80059a6:	4641      	mov	r1, r8
 80059a8:	4638      	mov	r0, r7
 80059aa:	47c8      	blx	r9
 80059ac:	3001      	adds	r0, #1
 80059ae:	d103      	bne.n	80059b8 <_printf_common+0xac>
 80059b0:	f04f 30ff 	mov.w	r0, #4294967295
 80059b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059b8:	3501      	adds	r5, #1
 80059ba:	e7c6      	b.n	800594a <_printf_common+0x3e>
 80059bc:	18e1      	adds	r1, r4, r3
 80059be:	1c5a      	adds	r2, r3, #1
 80059c0:	2030      	movs	r0, #48	@ 0x30
 80059c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80059c6:	4422      	add	r2, r4
 80059c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80059cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80059d0:	3302      	adds	r3, #2
 80059d2:	e7c7      	b.n	8005964 <_printf_common+0x58>
 80059d4:	2301      	movs	r3, #1
 80059d6:	4622      	mov	r2, r4
 80059d8:	4641      	mov	r1, r8
 80059da:	4638      	mov	r0, r7
 80059dc:	47c8      	blx	r9
 80059de:	3001      	adds	r0, #1
 80059e0:	d0e6      	beq.n	80059b0 <_printf_common+0xa4>
 80059e2:	3601      	adds	r6, #1
 80059e4:	e7d9      	b.n	800599a <_printf_common+0x8e>
	...

080059e8 <_printf_i>:
 80059e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059ec:	7e0f      	ldrb	r7, [r1, #24]
 80059ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80059f0:	2f78      	cmp	r7, #120	@ 0x78
 80059f2:	4691      	mov	r9, r2
 80059f4:	4680      	mov	r8, r0
 80059f6:	460c      	mov	r4, r1
 80059f8:	469a      	mov	sl, r3
 80059fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80059fe:	d807      	bhi.n	8005a10 <_printf_i+0x28>
 8005a00:	2f62      	cmp	r7, #98	@ 0x62
 8005a02:	d80a      	bhi.n	8005a1a <_printf_i+0x32>
 8005a04:	2f00      	cmp	r7, #0
 8005a06:	f000 80d1 	beq.w	8005bac <_printf_i+0x1c4>
 8005a0a:	2f58      	cmp	r7, #88	@ 0x58
 8005a0c:	f000 80b8 	beq.w	8005b80 <_printf_i+0x198>
 8005a10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005a18:	e03a      	b.n	8005a90 <_printf_i+0xa8>
 8005a1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005a1e:	2b15      	cmp	r3, #21
 8005a20:	d8f6      	bhi.n	8005a10 <_printf_i+0x28>
 8005a22:	a101      	add	r1, pc, #4	@ (adr r1, 8005a28 <_printf_i+0x40>)
 8005a24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a28:	08005a81 	.word	0x08005a81
 8005a2c:	08005a95 	.word	0x08005a95
 8005a30:	08005a11 	.word	0x08005a11
 8005a34:	08005a11 	.word	0x08005a11
 8005a38:	08005a11 	.word	0x08005a11
 8005a3c:	08005a11 	.word	0x08005a11
 8005a40:	08005a95 	.word	0x08005a95
 8005a44:	08005a11 	.word	0x08005a11
 8005a48:	08005a11 	.word	0x08005a11
 8005a4c:	08005a11 	.word	0x08005a11
 8005a50:	08005a11 	.word	0x08005a11
 8005a54:	08005b93 	.word	0x08005b93
 8005a58:	08005abf 	.word	0x08005abf
 8005a5c:	08005b4d 	.word	0x08005b4d
 8005a60:	08005a11 	.word	0x08005a11
 8005a64:	08005a11 	.word	0x08005a11
 8005a68:	08005bb5 	.word	0x08005bb5
 8005a6c:	08005a11 	.word	0x08005a11
 8005a70:	08005abf 	.word	0x08005abf
 8005a74:	08005a11 	.word	0x08005a11
 8005a78:	08005a11 	.word	0x08005a11
 8005a7c:	08005b55 	.word	0x08005b55
 8005a80:	6833      	ldr	r3, [r6, #0]
 8005a82:	1d1a      	adds	r2, r3, #4
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	6032      	str	r2, [r6, #0]
 8005a88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005a90:	2301      	movs	r3, #1
 8005a92:	e09c      	b.n	8005bce <_printf_i+0x1e6>
 8005a94:	6833      	ldr	r3, [r6, #0]
 8005a96:	6820      	ldr	r0, [r4, #0]
 8005a98:	1d19      	adds	r1, r3, #4
 8005a9a:	6031      	str	r1, [r6, #0]
 8005a9c:	0606      	lsls	r6, r0, #24
 8005a9e:	d501      	bpl.n	8005aa4 <_printf_i+0xbc>
 8005aa0:	681d      	ldr	r5, [r3, #0]
 8005aa2:	e003      	b.n	8005aac <_printf_i+0xc4>
 8005aa4:	0645      	lsls	r5, r0, #25
 8005aa6:	d5fb      	bpl.n	8005aa0 <_printf_i+0xb8>
 8005aa8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005aac:	2d00      	cmp	r5, #0
 8005aae:	da03      	bge.n	8005ab8 <_printf_i+0xd0>
 8005ab0:	232d      	movs	r3, #45	@ 0x2d
 8005ab2:	426d      	negs	r5, r5
 8005ab4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ab8:	4858      	ldr	r0, [pc, #352]	@ (8005c1c <_printf_i+0x234>)
 8005aba:	230a      	movs	r3, #10
 8005abc:	e011      	b.n	8005ae2 <_printf_i+0xfa>
 8005abe:	6821      	ldr	r1, [r4, #0]
 8005ac0:	6833      	ldr	r3, [r6, #0]
 8005ac2:	0608      	lsls	r0, r1, #24
 8005ac4:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ac8:	d402      	bmi.n	8005ad0 <_printf_i+0xe8>
 8005aca:	0649      	lsls	r1, r1, #25
 8005acc:	bf48      	it	mi
 8005ace:	b2ad      	uxthmi	r5, r5
 8005ad0:	2f6f      	cmp	r7, #111	@ 0x6f
 8005ad2:	4852      	ldr	r0, [pc, #328]	@ (8005c1c <_printf_i+0x234>)
 8005ad4:	6033      	str	r3, [r6, #0]
 8005ad6:	bf14      	ite	ne
 8005ad8:	230a      	movne	r3, #10
 8005ada:	2308      	moveq	r3, #8
 8005adc:	2100      	movs	r1, #0
 8005ade:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005ae2:	6866      	ldr	r6, [r4, #4]
 8005ae4:	60a6      	str	r6, [r4, #8]
 8005ae6:	2e00      	cmp	r6, #0
 8005ae8:	db05      	blt.n	8005af6 <_printf_i+0x10e>
 8005aea:	6821      	ldr	r1, [r4, #0]
 8005aec:	432e      	orrs	r6, r5
 8005aee:	f021 0104 	bic.w	r1, r1, #4
 8005af2:	6021      	str	r1, [r4, #0]
 8005af4:	d04b      	beq.n	8005b8e <_printf_i+0x1a6>
 8005af6:	4616      	mov	r6, r2
 8005af8:	fbb5 f1f3 	udiv	r1, r5, r3
 8005afc:	fb03 5711 	mls	r7, r3, r1, r5
 8005b00:	5dc7      	ldrb	r7, [r0, r7]
 8005b02:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b06:	462f      	mov	r7, r5
 8005b08:	42bb      	cmp	r3, r7
 8005b0a:	460d      	mov	r5, r1
 8005b0c:	d9f4      	bls.n	8005af8 <_printf_i+0x110>
 8005b0e:	2b08      	cmp	r3, #8
 8005b10:	d10b      	bne.n	8005b2a <_printf_i+0x142>
 8005b12:	6823      	ldr	r3, [r4, #0]
 8005b14:	07df      	lsls	r7, r3, #31
 8005b16:	d508      	bpl.n	8005b2a <_printf_i+0x142>
 8005b18:	6923      	ldr	r3, [r4, #16]
 8005b1a:	6861      	ldr	r1, [r4, #4]
 8005b1c:	4299      	cmp	r1, r3
 8005b1e:	bfde      	ittt	le
 8005b20:	2330      	movle	r3, #48	@ 0x30
 8005b22:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b26:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005b2a:	1b92      	subs	r2, r2, r6
 8005b2c:	6122      	str	r2, [r4, #16]
 8005b2e:	f8cd a000 	str.w	sl, [sp]
 8005b32:	464b      	mov	r3, r9
 8005b34:	aa03      	add	r2, sp, #12
 8005b36:	4621      	mov	r1, r4
 8005b38:	4640      	mov	r0, r8
 8005b3a:	f7ff fee7 	bl	800590c <_printf_common>
 8005b3e:	3001      	adds	r0, #1
 8005b40:	d14a      	bne.n	8005bd8 <_printf_i+0x1f0>
 8005b42:	f04f 30ff 	mov.w	r0, #4294967295
 8005b46:	b004      	add	sp, #16
 8005b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b4c:	6823      	ldr	r3, [r4, #0]
 8005b4e:	f043 0320 	orr.w	r3, r3, #32
 8005b52:	6023      	str	r3, [r4, #0]
 8005b54:	4832      	ldr	r0, [pc, #200]	@ (8005c20 <_printf_i+0x238>)
 8005b56:	2778      	movs	r7, #120	@ 0x78
 8005b58:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005b5c:	6823      	ldr	r3, [r4, #0]
 8005b5e:	6831      	ldr	r1, [r6, #0]
 8005b60:	061f      	lsls	r7, r3, #24
 8005b62:	f851 5b04 	ldr.w	r5, [r1], #4
 8005b66:	d402      	bmi.n	8005b6e <_printf_i+0x186>
 8005b68:	065f      	lsls	r7, r3, #25
 8005b6a:	bf48      	it	mi
 8005b6c:	b2ad      	uxthmi	r5, r5
 8005b6e:	6031      	str	r1, [r6, #0]
 8005b70:	07d9      	lsls	r1, r3, #31
 8005b72:	bf44      	itt	mi
 8005b74:	f043 0320 	orrmi.w	r3, r3, #32
 8005b78:	6023      	strmi	r3, [r4, #0]
 8005b7a:	b11d      	cbz	r5, 8005b84 <_printf_i+0x19c>
 8005b7c:	2310      	movs	r3, #16
 8005b7e:	e7ad      	b.n	8005adc <_printf_i+0xf4>
 8005b80:	4826      	ldr	r0, [pc, #152]	@ (8005c1c <_printf_i+0x234>)
 8005b82:	e7e9      	b.n	8005b58 <_printf_i+0x170>
 8005b84:	6823      	ldr	r3, [r4, #0]
 8005b86:	f023 0320 	bic.w	r3, r3, #32
 8005b8a:	6023      	str	r3, [r4, #0]
 8005b8c:	e7f6      	b.n	8005b7c <_printf_i+0x194>
 8005b8e:	4616      	mov	r6, r2
 8005b90:	e7bd      	b.n	8005b0e <_printf_i+0x126>
 8005b92:	6833      	ldr	r3, [r6, #0]
 8005b94:	6825      	ldr	r5, [r4, #0]
 8005b96:	6961      	ldr	r1, [r4, #20]
 8005b98:	1d18      	adds	r0, r3, #4
 8005b9a:	6030      	str	r0, [r6, #0]
 8005b9c:	062e      	lsls	r6, r5, #24
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	d501      	bpl.n	8005ba6 <_printf_i+0x1be>
 8005ba2:	6019      	str	r1, [r3, #0]
 8005ba4:	e002      	b.n	8005bac <_printf_i+0x1c4>
 8005ba6:	0668      	lsls	r0, r5, #25
 8005ba8:	d5fb      	bpl.n	8005ba2 <_printf_i+0x1ba>
 8005baa:	8019      	strh	r1, [r3, #0]
 8005bac:	2300      	movs	r3, #0
 8005bae:	6123      	str	r3, [r4, #16]
 8005bb0:	4616      	mov	r6, r2
 8005bb2:	e7bc      	b.n	8005b2e <_printf_i+0x146>
 8005bb4:	6833      	ldr	r3, [r6, #0]
 8005bb6:	1d1a      	adds	r2, r3, #4
 8005bb8:	6032      	str	r2, [r6, #0]
 8005bba:	681e      	ldr	r6, [r3, #0]
 8005bbc:	6862      	ldr	r2, [r4, #4]
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	4630      	mov	r0, r6
 8005bc2:	f7fa fae5 	bl	8000190 <memchr>
 8005bc6:	b108      	cbz	r0, 8005bcc <_printf_i+0x1e4>
 8005bc8:	1b80      	subs	r0, r0, r6
 8005bca:	6060      	str	r0, [r4, #4]
 8005bcc:	6863      	ldr	r3, [r4, #4]
 8005bce:	6123      	str	r3, [r4, #16]
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bd6:	e7aa      	b.n	8005b2e <_printf_i+0x146>
 8005bd8:	6923      	ldr	r3, [r4, #16]
 8005bda:	4632      	mov	r2, r6
 8005bdc:	4649      	mov	r1, r9
 8005bde:	4640      	mov	r0, r8
 8005be0:	47d0      	blx	sl
 8005be2:	3001      	adds	r0, #1
 8005be4:	d0ad      	beq.n	8005b42 <_printf_i+0x15a>
 8005be6:	6823      	ldr	r3, [r4, #0]
 8005be8:	079b      	lsls	r3, r3, #30
 8005bea:	d413      	bmi.n	8005c14 <_printf_i+0x22c>
 8005bec:	68e0      	ldr	r0, [r4, #12]
 8005bee:	9b03      	ldr	r3, [sp, #12]
 8005bf0:	4298      	cmp	r0, r3
 8005bf2:	bfb8      	it	lt
 8005bf4:	4618      	movlt	r0, r3
 8005bf6:	e7a6      	b.n	8005b46 <_printf_i+0x15e>
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	4632      	mov	r2, r6
 8005bfc:	4649      	mov	r1, r9
 8005bfe:	4640      	mov	r0, r8
 8005c00:	47d0      	blx	sl
 8005c02:	3001      	adds	r0, #1
 8005c04:	d09d      	beq.n	8005b42 <_printf_i+0x15a>
 8005c06:	3501      	adds	r5, #1
 8005c08:	68e3      	ldr	r3, [r4, #12]
 8005c0a:	9903      	ldr	r1, [sp, #12]
 8005c0c:	1a5b      	subs	r3, r3, r1
 8005c0e:	42ab      	cmp	r3, r5
 8005c10:	dcf2      	bgt.n	8005bf8 <_printf_i+0x210>
 8005c12:	e7eb      	b.n	8005bec <_printf_i+0x204>
 8005c14:	2500      	movs	r5, #0
 8005c16:	f104 0619 	add.w	r6, r4, #25
 8005c1a:	e7f5      	b.n	8005c08 <_printf_i+0x220>
 8005c1c:	08005e65 	.word	0x08005e65
 8005c20:	08005e76 	.word	0x08005e76

08005c24 <memmove>:
 8005c24:	4288      	cmp	r0, r1
 8005c26:	b510      	push	{r4, lr}
 8005c28:	eb01 0402 	add.w	r4, r1, r2
 8005c2c:	d902      	bls.n	8005c34 <memmove+0x10>
 8005c2e:	4284      	cmp	r4, r0
 8005c30:	4623      	mov	r3, r4
 8005c32:	d807      	bhi.n	8005c44 <memmove+0x20>
 8005c34:	1e43      	subs	r3, r0, #1
 8005c36:	42a1      	cmp	r1, r4
 8005c38:	d008      	beq.n	8005c4c <memmove+0x28>
 8005c3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c42:	e7f8      	b.n	8005c36 <memmove+0x12>
 8005c44:	4402      	add	r2, r0
 8005c46:	4601      	mov	r1, r0
 8005c48:	428a      	cmp	r2, r1
 8005c4a:	d100      	bne.n	8005c4e <memmove+0x2a>
 8005c4c:	bd10      	pop	{r4, pc}
 8005c4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c56:	e7f7      	b.n	8005c48 <memmove+0x24>

08005c58 <_sbrk_r>:
 8005c58:	b538      	push	{r3, r4, r5, lr}
 8005c5a:	4d06      	ldr	r5, [pc, #24]	@ (8005c74 <_sbrk_r+0x1c>)
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	4604      	mov	r4, r0
 8005c60:	4608      	mov	r0, r1
 8005c62:	602b      	str	r3, [r5, #0]
 8005c64:	f7fa fe5a 	bl	800091c <_sbrk>
 8005c68:	1c43      	adds	r3, r0, #1
 8005c6a:	d102      	bne.n	8005c72 <_sbrk_r+0x1a>
 8005c6c:	682b      	ldr	r3, [r5, #0]
 8005c6e:	b103      	cbz	r3, 8005c72 <_sbrk_r+0x1a>
 8005c70:	6023      	str	r3, [r4, #0]
 8005c72:	bd38      	pop	{r3, r4, r5, pc}
 8005c74:	20000574 	.word	0x20000574

08005c78 <memcpy>:
 8005c78:	440a      	add	r2, r1
 8005c7a:	4291      	cmp	r1, r2
 8005c7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c80:	d100      	bne.n	8005c84 <memcpy+0xc>
 8005c82:	4770      	bx	lr
 8005c84:	b510      	push	{r4, lr}
 8005c86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c8e:	4291      	cmp	r1, r2
 8005c90:	d1f9      	bne.n	8005c86 <memcpy+0xe>
 8005c92:	bd10      	pop	{r4, pc}

08005c94 <_realloc_r>:
 8005c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c98:	4607      	mov	r7, r0
 8005c9a:	4614      	mov	r4, r2
 8005c9c:	460d      	mov	r5, r1
 8005c9e:	b921      	cbnz	r1, 8005caa <_realloc_r+0x16>
 8005ca0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ca4:	4611      	mov	r1, r2
 8005ca6:	f7ff bc4d 	b.w	8005544 <_malloc_r>
 8005caa:	b92a      	cbnz	r2, 8005cb8 <_realloc_r+0x24>
 8005cac:	f7ff fbde 	bl	800546c <_free_r>
 8005cb0:	4625      	mov	r5, r4
 8005cb2:	4628      	mov	r0, r5
 8005cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cb8:	f000 f81a 	bl	8005cf0 <_malloc_usable_size_r>
 8005cbc:	4284      	cmp	r4, r0
 8005cbe:	4606      	mov	r6, r0
 8005cc0:	d802      	bhi.n	8005cc8 <_realloc_r+0x34>
 8005cc2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005cc6:	d8f4      	bhi.n	8005cb2 <_realloc_r+0x1e>
 8005cc8:	4621      	mov	r1, r4
 8005cca:	4638      	mov	r0, r7
 8005ccc:	f7ff fc3a 	bl	8005544 <_malloc_r>
 8005cd0:	4680      	mov	r8, r0
 8005cd2:	b908      	cbnz	r0, 8005cd8 <_realloc_r+0x44>
 8005cd4:	4645      	mov	r5, r8
 8005cd6:	e7ec      	b.n	8005cb2 <_realloc_r+0x1e>
 8005cd8:	42b4      	cmp	r4, r6
 8005cda:	4622      	mov	r2, r4
 8005cdc:	4629      	mov	r1, r5
 8005cde:	bf28      	it	cs
 8005ce0:	4632      	movcs	r2, r6
 8005ce2:	f7ff ffc9 	bl	8005c78 <memcpy>
 8005ce6:	4629      	mov	r1, r5
 8005ce8:	4638      	mov	r0, r7
 8005cea:	f7ff fbbf 	bl	800546c <_free_r>
 8005cee:	e7f1      	b.n	8005cd4 <_realloc_r+0x40>

08005cf0 <_malloc_usable_size_r>:
 8005cf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cf4:	1f18      	subs	r0, r3, #4
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	bfbc      	itt	lt
 8005cfa:	580b      	ldrlt	r3, [r1, r0]
 8005cfc:	18c0      	addlt	r0, r0, r3
 8005cfe:	4770      	bx	lr

08005d00 <_init>:
 8005d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d02:	bf00      	nop
 8005d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d06:	bc08      	pop	{r3}
 8005d08:	469e      	mov	lr, r3
 8005d0a:	4770      	bx	lr

08005d0c <_fini>:
 8005d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d0e:	bf00      	nop
 8005d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d12:	bc08      	pop	{r3}
 8005d14:	469e      	mov	lr, r3
 8005d16:	4770      	bx	lr
