
STM32_SubGHz_LoRa_Messenger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003934  08000138  08000138  00001138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08003a6c  08003a6c  00004a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b58  08003b58  00005018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003b58  08003b58  00004b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b60  08003b60  00005018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b60  08003b60  00004b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b64  08003b64  00004b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08003b68  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000018  08003b80  00005018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08003b80  000050dc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00005018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001279b  00000000  00000000  00005042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d7b  00000000  00000000  000177dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a0  00000000  00000000  0001a558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ed1  00000000  00000000  0001b8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001da92  00000000  00000000  0001c7c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012892  00000000  00000000  0003a25b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b5e2b  00000000  00000000  0004caed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00102918  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050c0  00000000  00000000  0010295c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00107a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000018 	.word	0x20000018
 8000154:	00000000 	.word	0x00000000
 8000158:	08003a54 	.word	0x08003a54

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000001c 	.word	0x2000001c
 8000174:	08003a54 	.word	0x08003a54

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295
 8000188:	f04f 30ff 	movne.w	r0, #4294967295
 800018c:	f000 b988 	b.w	80004a0 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9d08      	ldr	r5, [sp, #32]
 80001ae:	468e      	mov	lr, r1
 80001b0:	4604      	mov	r4, r0
 80001b2:	4688      	mov	r8, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14a      	bne.n	800024e <__udivmoddi4+0xa6>
 80001b8:	428a      	cmp	r2, r1
 80001ba:	4617      	mov	r7, r2
 80001bc:	d962      	bls.n	8000284 <__udivmoddi4+0xdc>
 80001be:	fab2 f682 	clz	r6, r2
 80001c2:	b14e      	cbz	r6, 80001d8 <__udivmoddi4+0x30>
 80001c4:	f1c6 0320 	rsb	r3, r6, #32
 80001c8:	fa01 f806 	lsl.w	r8, r1, r6
 80001cc:	fa20 f303 	lsr.w	r3, r0, r3
 80001d0:	40b7      	lsls	r7, r6
 80001d2:	ea43 0808 	orr.w	r8, r3, r8
 80001d6:	40b4      	lsls	r4, r6
 80001d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80001dc:	fa1f fc87 	uxth.w	ip, r7
 80001e0:	fbb8 f1fe 	udiv	r1, r8, lr
 80001e4:	0c23      	lsrs	r3, r4, #16
 80001e6:	fb0e 8811 	mls	r8, lr, r1, r8
 80001ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001ee:	fb01 f20c 	mul.w	r2, r1, ip
 80001f2:	429a      	cmp	r2, r3
 80001f4:	d909      	bls.n	800020a <__udivmoddi4+0x62>
 80001f6:	18fb      	adds	r3, r7, r3
 80001f8:	f101 30ff 	add.w	r0, r1, #4294967295
 80001fc:	f080 80ea 	bcs.w	80003d4 <__udivmoddi4+0x22c>
 8000200:	429a      	cmp	r2, r3
 8000202:	f240 80e7 	bls.w	80003d4 <__udivmoddi4+0x22c>
 8000206:	3902      	subs	r1, #2
 8000208:	443b      	add	r3, r7
 800020a:	1a9a      	subs	r2, r3, r2
 800020c:	b2a3      	uxth	r3, r4
 800020e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000212:	fb0e 2210 	mls	r2, lr, r0, r2
 8000216:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800021a:	fb00 fc0c 	mul.w	ip, r0, ip
 800021e:	459c      	cmp	ip, r3
 8000220:	d909      	bls.n	8000236 <__udivmoddi4+0x8e>
 8000222:	18fb      	adds	r3, r7, r3
 8000224:	f100 32ff 	add.w	r2, r0, #4294967295
 8000228:	f080 80d6 	bcs.w	80003d8 <__udivmoddi4+0x230>
 800022c:	459c      	cmp	ip, r3
 800022e:	f240 80d3 	bls.w	80003d8 <__udivmoddi4+0x230>
 8000232:	443b      	add	r3, r7
 8000234:	3802      	subs	r0, #2
 8000236:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800023a:	eba3 030c 	sub.w	r3, r3, ip
 800023e:	2100      	movs	r1, #0
 8000240:	b11d      	cbz	r5, 800024a <__udivmoddi4+0xa2>
 8000242:	40f3      	lsrs	r3, r6
 8000244:	2200      	movs	r2, #0
 8000246:	e9c5 3200 	strd	r3, r2, [r5]
 800024a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800024e:	428b      	cmp	r3, r1
 8000250:	d905      	bls.n	800025e <__udivmoddi4+0xb6>
 8000252:	b10d      	cbz	r5, 8000258 <__udivmoddi4+0xb0>
 8000254:	e9c5 0100 	strd	r0, r1, [r5]
 8000258:	2100      	movs	r1, #0
 800025a:	4608      	mov	r0, r1
 800025c:	e7f5      	b.n	800024a <__udivmoddi4+0xa2>
 800025e:	fab3 f183 	clz	r1, r3
 8000262:	2900      	cmp	r1, #0
 8000264:	d146      	bne.n	80002f4 <__udivmoddi4+0x14c>
 8000266:	4573      	cmp	r3, lr
 8000268:	d302      	bcc.n	8000270 <__udivmoddi4+0xc8>
 800026a:	4282      	cmp	r2, r0
 800026c:	f200 8105 	bhi.w	800047a <__udivmoddi4+0x2d2>
 8000270:	1a84      	subs	r4, r0, r2
 8000272:	eb6e 0203 	sbc.w	r2, lr, r3
 8000276:	2001      	movs	r0, #1
 8000278:	4690      	mov	r8, r2
 800027a:	2d00      	cmp	r5, #0
 800027c:	d0e5      	beq.n	800024a <__udivmoddi4+0xa2>
 800027e:	e9c5 4800 	strd	r4, r8, [r5]
 8000282:	e7e2      	b.n	800024a <__udivmoddi4+0xa2>
 8000284:	2a00      	cmp	r2, #0
 8000286:	f000 8090 	beq.w	80003aa <__udivmoddi4+0x202>
 800028a:	fab2 f682 	clz	r6, r2
 800028e:	2e00      	cmp	r6, #0
 8000290:	f040 80a4 	bne.w	80003dc <__udivmoddi4+0x234>
 8000294:	1a8a      	subs	r2, r1, r2
 8000296:	0c03      	lsrs	r3, r0, #16
 8000298:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800029c:	b280      	uxth	r0, r0
 800029e:	b2bc      	uxth	r4, r7
 80002a0:	2101      	movs	r1, #1
 80002a2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002a6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ae:	fb04 f20c 	mul.w	r2, r4, ip
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d907      	bls.n	80002c6 <__udivmoddi4+0x11e>
 80002b6:	18fb      	adds	r3, r7, r3
 80002b8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80002bc:	d202      	bcs.n	80002c4 <__udivmoddi4+0x11c>
 80002be:	429a      	cmp	r2, r3
 80002c0:	f200 80e0 	bhi.w	8000484 <__udivmoddi4+0x2dc>
 80002c4:	46c4      	mov	ip, r8
 80002c6:	1a9b      	subs	r3, r3, r2
 80002c8:	fbb3 f2fe 	udiv	r2, r3, lr
 80002cc:	fb0e 3312 	mls	r3, lr, r2, r3
 80002d0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80002d4:	fb02 f404 	mul.w	r4, r2, r4
 80002d8:	429c      	cmp	r4, r3
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0x144>
 80002dc:	18fb      	adds	r3, r7, r3
 80002de:	f102 30ff 	add.w	r0, r2, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0x142>
 80002e4:	429c      	cmp	r4, r3
 80002e6:	f200 80ca 	bhi.w	800047e <__udivmoddi4+0x2d6>
 80002ea:	4602      	mov	r2, r0
 80002ec:	1b1b      	subs	r3, r3, r4
 80002ee:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80002f2:	e7a5      	b.n	8000240 <__udivmoddi4+0x98>
 80002f4:	f1c1 0620 	rsb	r6, r1, #32
 80002f8:	408b      	lsls	r3, r1
 80002fa:	fa22 f706 	lsr.w	r7, r2, r6
 80002fe:	431f      	orrs	r7, r3
 8000300:	fa0e f401 	lsl.w	r4, lr, r1
 8000304:	fa20 f306 	lsr.w	r3, r0, r6
 8000308:	fa2e fe06 	lsr.w	lr, lr, r6
 800030c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000310:	4323      	orrs	r3, r4
 8000312:	fa00 f801 	lsl.w	r8, r0, r1
 8000316:	fa1f fc87 	uxth.w	ip, r7
 800031a:	fbbe f0f9 	udiv	r0, lr, r9
 800031e:	0c1c      	lsrs	r4, r3, #16
 8000320:	fb09 ee10 	mls	lr, r9, r0, lr
 8000324:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000328:	fb00 fe0c 	mul.w	lr, r0, ip
 800032c:	45a6      	cmp	lr, r4
 800032e:	fa02 f201 	lsl.w	r2, r2, r1
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x1a0>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 3aff 	add.w	sl, r0, #4294967295
 800033a:	f080 809c 	bcs.w	8000476 <__udivmoddi4+0x2ce>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f240 8099 	bls.w	8000476 <__udivmoddi4+0x2ce>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 040e 	sub.w	r4, r4, lr
 800034c:	fa1f fe83 	uxth.w	lr, r3
 8000350:	fbb4 f3f9 	udiv	r3, r4, r9
 8000354:	fb09 4413 	mls	r4, r9, r3, r4
 8000358:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800035c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000360:	45a4      	cmp	ip, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x1ce>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f103 3eff 	add.w	lr, r3, #4294967295
 800036a:	f080 8082 	bcs.w	8000472 <__udivmoddi4+0x2ca>
 800036e:	45a4      	cmp	ip, r4
 8000370:	d97f      	bls.n	8000472 <__udivmoddi4+0x2ca>
 8000372:	3b02      	subs	r3, #2
 8000374:	443c      	add	r4, r7
 8000376:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800037a:	eba4 040c 	sub.w	r4, r4, ip
 800037e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000382:	4564      	cmp	r4, ip
 8000384:	4673      	mov	r3, lr
 8000386:	46e1      	mov	r9, ip
 8000388:	d362      	bcc.n	8000450 <__udivmoddi4+0x2a8>
 800038a:	d05f      	beq.n	800044c <__udivmoddi4+0x2a4>
 800038c:	b15d      	cbz	r5, 80003a6 <__udivmoddi4+0x1fe>
 800038e:	ebb8 0203 	subs.w	r2, r8, r3
 8000392:	eb64 0409 	sbc.w	r4, r4, r9
 8000396:	fa04 f606 	lsl.w	r6, r4, r6
 800039a:	fa22 f301 	lsr.w	r3, r2, r1
 800039e:	431e      	orrs	r6, r3
 80003a0:	40cc      	lsrs	r4, r1
 80003a2:	e9c5 6400 	strd	r6, r4, [r5]
 80003a6:	2100      	movs	r1, #0
 80003a8:	e74f      	b.n	800024a <__udivmoddi4+0xa2>
 80003aa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003ae:	0c01      	lsrs	r1, r0, #16
 80003b0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80003ba:	463b      	mov	r3, r7
 80003bc:	4638      	mov	r0, r7
 80003be:	463c      	mov	r4, r7
 80003c0:	46b8      	mov	r8, r7
 80003c2:	46be      	mov	lr, r7
 80003c4:	2620      	movs	r6, #32
 80003c6:	fbb1 f1f7 	udiv	r1, r1, r7
 80003ca:	eba2 0208 	sub.w	r2, r2, r8
 80003ce:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80003d2:	e766      	b.n	80002a2 <__udivmoddi4+0xfa>
 80003d4:	4601      	mov	r1, r0
 80003d6:	e718      	b.n	800020a <__udivmoddi4+0x62>
 80003d8:	4610      	mov	r0, r2
 80003da:	e72c      	b.n	8000236 <__udivmoddi4+0x8e>
 80003dc:	f1c6 0220 	rsb	r2, r6, #32
 80003e0:	fa2e f302 	lsr.w	r3, lr, r2
 80003e4:	40b7      	lsls	r7, r6
 80003e6:	40b1      	lsls	r1, r6
 80003e8:	fa20 f202 	lsr.w	r2, r0, r2
 80003ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f0:	430a      	orrs	r2, r1
 80003f2:	fbb3 f8fe 	udiv	r8, r3, lr
 80003f6:	b2bc      	uxth	r4, r7
 80003f8:	fb0e 3318 	mls	r3, lr, r8, r3
 80003fc:	0c11      	lsrs	r1, r2, #16
 80003fe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000402:	fb08 f904 	mul.w	r9, r8, r4
 8000406:	40b0      	lsls	r0, r6
 8000408:	4589      	cmp	r9, r1
 800040a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800040e:	b280      	uxth	r0, r0
 8000410:	d93e      	bls.n	8000490 <__udivmoddi4+0x2e8>
 8000412:	1879      	adds	r1, r7, r1
 8000414:	f108 3cff 	add.w	ip, r8, #4294967295
 8000418:	d201      	bcs.n	800041e <__udivmoddi4+0x276>
 800041a:	4589      	cmp	r9, r1
 800041c:	d81f      	bhi.n	800045e <__udivmoddi4+0x2b6>
 800041e:	eba1 0109 	sub.w	r1, r1, r9
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fb09 f804 	mul.w	r8, r9, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	b292      	uxth	r2, r2
 8000430:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000434:	4542      	cmp	r2, r8
 8000436:	d229      	bcs.n	800048c <__udivmoddi4+0x2e4>
 8000438:	18ba      	adds	r2, r7, r2
 800043a:	f109 31ff 	add.w	r1, r9, #4294967295
 800043e:	d2c4      	bcs.n	80003ca <__udivmoddi4+0x222>
 8000440:	4542      	cmp	r2, r8
 8000442:	d2c2      	bcs.n	80003ca <__udivmoddi4+0x222>
 8000444:	f1a9 0102 	sub.w	r1, r9, #2
 8000448:	443a      	add	r2, r7
 800044a:	e7be      	b.n	80003ca <__udivmoddi4+0x222>
 800044c:	45f0      	cmp	r8, lr
 800044e:	d29d      	bcs.n	800038c <__udivmoddi4+0x1e4>
 8000450:	ebbe 0302 	subs.w	r3, lr, r2
 8000454:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000458:	3801      	subs	r0, #1
 800045a:	46e1      	mov	r9, ip
 800045c:	e796      	b.n	800038c <__udivmoddi4+0x1e4>
 800045e:	eba7 0909 	sub.w	r9, r7, r9
 8000462:	4449      	add	r1, r9
 8000464:	f1a8 0c02 	sub.w	ip, r8, #2
 8000468:	fbb1 f9fe 	udiv	r9, r1, lr
 800046c:	fb09 f804 	mul.w	r8, r9, r4
 8000470:	e7db      	b.n	800042a <__udivmoddi4+0x282>
 8000472:	4673      	mov	r3, lr
 8000474:	e77f      	b.n	8000376 <__udivmoddi4+0x1ce>
 8000476:	4650      	mov	r0, sl
 8000478:	e766      	b.n	8000348 <__udivmoddi4+0x1a0>
 800047a:	4608      	mov	r0, r1
 800047c:	e6fd      	b.n	800027a <__udivmoddi4+0xd2>
 800047e:	443b      	add	r3, r7
 8000480:	3a02      	subs	r2, #2
 8000482:	e733      	b.n	80002ec <__udivmoddi4+0x144>
 8000484:	f1ac 0c02 	sub.w	ip, ip, #2
 8000488:	443b      	add	r3, r7
 800048a:	e71c      	b.n	80002c6 <__udivmoddi4+0x11e>
 800048c:	4649      	mov	r1, r9
 800048e:	e79c      	b.n	80003ca <__udivmoddi4+0x222>
 8000490:	eba1 0109 	sub.w	r1, r1, r9
 8000494:	46c4      	mov	ip, r8
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	e7c4      	b.n	800042a <__udivmoddi4+0x282>

080004a0 <__aeabi_idiv0>:
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop

080004a4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80004b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	4313      	orrs	r3, r2
 80004ba:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4013      	ands	r3, r2
 80004c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004c8:	68fb      	ldr	r3, [r7, #12]
}
 80004ca:	bf00      	nop
 80004cc:	3714      	adds	r7, #20
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc80      	pop	{r7}
 80004d2:	4770      	bx	lr

080004d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b086      	sub	sp, #24
 80004d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	605a      	str	r2, [r3, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	60da      	str	r2, [r3, #12]
 80004e6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e8:	2004      	movs	r0, #4
 80004ea:	f7ff ffdb 	bl	80004a4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ee:	2001      	movs	r0, #1
 80004f0:	f7ff ffd8 	bl	80004a4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2138      	movs	r1, #56	@ 0x38
 80004f8:	4809      	ldr	r0, [pc, #36]	@ (8000520 <MX_GPIO_Init+0x4c>)
 80004fa:	f000 fe35 	bl	8001168 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 80004fe:	2338      	movs	r3, #56	@ 0x38
 8000500:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000502:	2301      	movs	r3, #1
 8000504:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000506:	2300      	movs	r3, #0
 8000508:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800050a:	2303      	movs	r3, #3
 800050c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800050e:	1d3b      	adds	r3, r7, #4
 8000510:	4619      	mov	r1, r3
 8000512:	4803      	ldr	r0, [pc, #12]	@ (8000520 <MX_GPIO_Init+0x4c>)
 8000514:	f000 fcc8 	bl	8000ea8 <HAL_GPIO_Init>

}
 8000518:	bf00      	nop
 800051a:	3718      	adds	r7, #24
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	48000800 	.word	0x48000800

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000528:	f000 fb18 	bl	8000b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052c:	f000 f82c 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000530:	f7ff ffd0 	bl	80004d4 <MX_GPIO_Init>
  MX_SUBGHZ_Init();
 8000534:	f000 f8d4 	bl	80006e0 <MX_SUBGHZ_Init>
  MX_USART2_UART_Init();
 8000538:	f000 f92e 	bl	8000798 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  BSP_LED_Init(LED_GREEN);
 800053c:	2001      	movs	r0, #1
 800053e:	f000 f9ff 	bl	8000940 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000542:	2002      	movs	r0, #2
 8000544:	f000 f9fc 	bl	8000940 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8000548:	2000      	movs	r0, #0
 800054a:	f000 f9f9 	bl	8000940 <BSP_LED_Init>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
	  BSP_LED_On(LED_GREEN);
 800054e:	2001      	movs	r0, #1
 8000550:	f000 fa30 	bl	80009b4 <BSP_LED_On>
	  BSP_LED_On(LED_RED);
 8000554:	2002      	movs	r0, #2
 8000556:	f000 fa2d 	bl	80009b4 <BSP_LED_On>
	  BSP_LED_On(LED_BLUE);
 800055a:	2000      	movs	r0, #0
 800055c:	f000 fa2a 	bl	80009b4 <BSP_LED_On>
	  HAL_Delay(1000);
 8000560:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000564:	f000 fb70 	bl	8000c48 <HAL_Delay>
	  BSP_LED_Off(LED_GREEN);
 8000568:	2001      	movs	r0, #1
 800056a:	f000 fa3d 	bl	80009e8 <BSP_LED_Off>
	  BSP_LED_Off(LED_RED);
 800056e:	2002      	movs	r0, #2
 8000570:	f000 fa3a 	bl	80009e8 <BSP_LED_Off>
	  BSP_LED_Off(LED_BLUE);
 8000574:	2000      	movs	r0, #0
 8000576:	f000 fa37 	bl	80009e8 <BSP_LED_Off>
	  HAL_Delay(1000);
 800057a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800057e:	f000 fb63 	bl	8000c48 <HAL_Delay>
	  BSP_LED_On(LED_GREEN);
 8000582:	bf00      	nop
 8000584:	e7e3      	b.n	800054e <main+0x2a>
	...

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b09a      	sub	sp, #104	@ 0x68
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0320 	add.w	r3, r7, #32
 8000592:	2248      	movs	r2, #72	@ 0x48
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f003 fa30 	bl	80039fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]
 80005aa:	615a      	str	r2, [r3, #20]
 80005ac:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000628 <SystemClock_Config+0xa0>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80005b6:	4a1c      	ldr	r2, [pc, #112]	@ (8000628 <SystemClock_Config+0xa0>)
 80005b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005bc:	6013      	str	r3, [r2, #0]
 80005be:	4b1a      	ldr	r3, [pc, #104]	@ (8000628 <SystemClock_Config+0xa0>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80005c6:	603b      	str	r3, [r7, #0]
 80005c8:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005ca:	2320      	movs	r3, #32
 80005cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005ce:	2301      	movs	r3, #1
 80005d0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80005d2:	2300      	movs	r3, #0
 80005d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80005d6:	23b0      	movs	r3, #176	@ 0xb0
 80005d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005da:	2300      	movs	r3, #0
 80005dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005de:	f107 0320 	add.w	r3, r7, #32
 80005e2:	4618      	mov	r0, r3
 80005e4:	f001 f8aa 	bl	800173c <HAL_RCC_OscConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80005ee:	f000 f81d 	bl	800062c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80005f2:	234f      	movs	r3, #79	@ 0x4f
 80005f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005f6:	2300      	movs	r3, #0
 80005f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	2102      	movs	r1, #2
 800060e:	4618      	mov	r0, r3
 8000610:	f001 fc16 	bl	8001e40 <HAL_RCC_ClockConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800061a:	f000 f807 	bl	800062c <Error_Handler>
  }
}
 800061e:	bf00      	nop
 8000620:	3768      	adds	r7, #104	@ 0x68
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	58000400 	.word	0x58000400

0800062c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000630:	b672      	cpsid	i
}
 8000632:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000634:	bf00      	nop
 8000636:	e7fd      	b.n	8000634 <Error_Handler+0x8>

08000638 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr

08000644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000648:	bf00      	nop
 800064a:	e7fd      	b.n	8000648 <NMI_Handler+0x4>

0800064c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000650:	bf00      	nop
 8000652:	e7fd      	b.n	8000650 <HardFault_Handler+0x4>

08000654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000658:	bf00      	nop
 800065a:	e7fd      	b.n	8000658 <MemManage_Handler+0x4>

0800065c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000660:	bf00      	nop
 8000662:	e7fd      	b.n	8000660 <BusFault_Handler+0x4>

08000664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000668:	bf00      	nop
 800066a:	e7fd      	b.n	8000668 <UsageFault_Handler+0x4>

0800066c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr

08000678 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr

08000684 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000688:	bf00      	nop
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr

08000690 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000694:	f000 fabc 	bl	8000c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}

0800069c <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80006a0:	4802      	ldr	r0, [pc, #8]	@ (80006ac <SUBGHZ_Radio_IRQHandler+0x10>)
 80006a2:	f002 fa58 	bl	8002b56 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000034 	.word	0x20000034

080006b0 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80006b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80006bc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80006be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4313      	orrs	r3, r2
 80006c6:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80006c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80006cc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4013      	ands	r3, r2
 80006d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006d4:	68fb      	ldr	r3, [r7, #12]
}
 80006d6:	bf00      	nop
 80006d8:	3714      	adds	r7, #20
 80006da:	46bd      	mov	sp, r7
 80006dc:	bc80      	pop	{r7}
 80006de:	4770      	bx	lr

080006e0 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80006e4:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <MX_SUBGHZ_Init+0x20>)
 80006e6:	2208      	movs	r2, #8
 80006e8:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80006ea:	4805      	ldr	r0, [pc, #20]	@ (8000700 <MX_SUBGHZ_Init+0x20>)
 80006ec:	f002 f91c 	bl	8002928 <HAL_SUBGHZ_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80006f6:	f7ff ff99 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000034 	.word	0x20000034

08000704 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 800070c:	2001      	movs	r0, #1
 800070e:	f7ff ffcf 	bl	80006b0 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8000712:	2200      	movs	r2, #0
 8000714:	2100      	movs	r1, #0
 8000716:	2032      	movs	r0, #50	@ 0x32
 8000718:	f000 fb91 	bl	8000e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 800071c:	2032      	movs	r0, #50	@ 0x32
 800071e:	f000 fba8 	bl	8000e72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}

0800072a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800072e:	bf00      	nop
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr

08000736 <LL_AHB2_GRP1_EnableClock>:
{
 8000736:	b480      	push	{r7}
 8000738:	b085      	sub	sp, #20
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800073e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000742:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000744:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	4313      	orrs	r3, r2
 800074c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800074e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000752:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4013      	ands	r3, r2
 8000758:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800075a:	68fb      	ldr	r3, [r7, #12]
}
 800075c:	bf00      	nop
 800075e:	3714      	adds	r7, #20
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr

08000766 <LL_APB1_GRP1_EnableClock>:
{
 8000766:	b480      	push	{r7}
 8000768:	b085      	sub	sp, #20
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800076e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000772:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000774:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4313      	orrs	r3, r2
 800077c:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800077e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000782:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	4013      	ands	r3, r2
 8000788:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800078a:	68fb      	ldr	r3, [r7, #12]
}
 800078c:	bf00      	nop
 800078e:	3714      	adds	r7, #20
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr
	...

08000798 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800079c:	4b22      	ldr	r3, [pc, #136]	@ (8000828 <MX_USART2_UART_Init+0x90>)
 800079e:	4a23      	ldr	r2, [pc, #140]	@ (800082c <MX_USART2_UART_Init+0x94>)
 80007a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007a2:	4b21      	ldr	r3, [pc, #132]	@ (8000828 <MX_USART2_UART_Init+0x90>)
 80007a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000828 <MX_USART2_UART_Init+0x90>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000828 <MX_USART2_UART_Init+0x90>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000828 <MX_USART2_UART_Init+0x90>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000828 <MX_USART2_UART_Init+0x90>)
 80007be:	220c      	movs	r2, #12
 80007c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c2:	4b19      	ldr	r3, [pc, #100]	@ (8000828 <MX_USART2_UART_Init+0x90>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c8:	4b17      	ldr	r3, [pc, #92]	@ (8000828 <MX_USART2_UART_Init+0x90>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ce:	4b16      	ldr	r3, [pc, #88]	@ (8000828 <MX_USART2_UART_Init+0x90>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007d4:	4b14      	ldr	r3, [pc, #80]	@ (8000828 <MX_USART2_UART_Init+0x90>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007da:	4b13      	ldr	r3, [pc, #76]	@ (8000828 <MX_USART2_UART_Init+0x90>)
 80007dc:	2200      	movs	r2, #0
 80007de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007e0:	4811      	ldr	r0, [pc, #68]	@ (8000828 <MX_USART2_UART_Init+0x90>)
 80007e2:	f002 fb88 	bl	8002ef6 <HAL_UART_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007ec:	f7ff ff1e 	bl	800062c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007f0:	2100      	movs	r1, #0
 80007f2:	480d      	ldr	r0, [pc, #52]	@ (8000828 <MX_USART2_UART_Init+0x90>)
 80007f4:	f003 f839 	bl	800386a <HAL_UARTEx_SetTxFifoThreshold>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80007fe:	f7ff ff15 	bl	800062c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000802:	2100      	movs	r1, #0
 8000804:	4808      	ldr	r0, [pc, #32]	@ (8000828 <MX_USART2_UART_Init+0x90>)
 8000806:	f003 f86e 	bl	80038e6 <HAL_UARTEx_SetRxFifoThreshold>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000810:	f7ff ff0c 	bl	800062c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000814:	4804      	ldr	r0, [pc, #16]	@ (8000828 <MX_USART2_UART_Init+0x90>)
 8000816:	f002 fff0 	bl	80037fa <HAL_UARTEx_DisableFifoMode>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000820:	f7ff ff04 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000040 	.word	0x20000040
 800082c:	40004400 	.word	0x40004400

08000830 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b096      	sub	sp, #88	@ 0x58
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000838:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000848:	f107 030c 	add.w	r3, r7, #12
 800084c:	2238      	movs	r2, #56	@ 0x38
 800084e:	2100      	movs	r1, #0
 8000850:	4618      	mov	r0, r3
 8000852:	f003 f8d3 	bl	80039fc <memset>
  if(uartHandle->Instance==USART2)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a17      	ldr	r2, [pc, #92]	@ (80008b8 <HAL_UART_MspInit+0x88>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d126      	bne.n	80008ae <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000860:	2302      	movs	r3, #2
 8000862:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000864:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8000868:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800086a:	f107 030c 	add.w	r3, r7, #12
 800086e:	4618      	mov	r0, r3
 8000870:	f001 fea6 	bl	80025c0 <HAL_RCCEx_PeriphCLKConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800087a:	f7ff fed7 	bl	800062c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800087e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000882:	f7ff ff70 	bl	8000766 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	2001      	movs	r0, #1
 8000888:	f7ff ff55 	bl	8000736 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 800088c:	230c      	movs	r3, #12
 800088e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000890:	2302      	movs	r3, #2
 8000892:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800089c:	2307      	movs	r3, #7
 800089e:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80008a4:	4619      	mov	r1, r3
 80008a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008aa:	f000 fafd 	bl	8000ea8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80008ae:	bf00      	nop
 80008b0:	3758      	adds	r7, #88	@ 0x58
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40004400 	.word	0x40004400

080008bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008bc:	480d      	ldr	r0, [pc, #52]	@ (80008f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008be:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80008c0:	f7ff ff33 	bl	800072a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008c4:	480c      	ldr	r0, [pc, #48]	@ (80008f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80008c6:	490d      	ldr	r1, [pc, #52]	@ (80008fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80008c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000900 <LoopForever+0xe>)
  movs r3, #0
 80008ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008cc:	e002      	b.n	80008d4 <LoopCopyDataInit>

080008ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008d2:	3304      	adds	r3, #4

080008d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008d8:	d3f9      	bcc.n	80008ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008da:	4a0a      	ldr	r2, [pc, #40]	@ (8000904 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008dc:	4c0a      	ldr	r4, [pc, #40]	@ (8000908 <LoopForever+0x16>)
  movs r3, #0
 80008de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e0:	e001      	b.n	80008e6 <LoopFillZerobss>

080008e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e4:	3204      	adds	r2, #4

080008e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008e8:	d3fb      	bcc.n	80008e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008ea:	f003 f88f 	bl	8003a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ee:	f7ff fe19 	bl	8000524 <main>

080008f2 <LoopForever>:

LoopForever:
    b LoopForever
 80008f2:	e7fe      	b.n	80008f2 <LoopForever>
  ldr   r0, =_estack
 80008f4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80008f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008fc:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000900:	08003b68 	.word	0x08003b68
  ldr r2, =_sbss
 8000904:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000908:	200000dc 	.word	0x200000dc

0800090c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800090c:	e7fe      	b.n	800090c <ADC_IRQHandler>

0800090e <LL_AHB2_GRP1_EnableClock>:
{
 800090e:	b480      	push	{r7}
 8000910:	b085      	sub	sp, #20
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000916:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800091a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800091c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4313      	orrs	r3, r2
 8000924:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000926:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800092a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4013      	ands	r3, r2
 8000930:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000932:	68fb      	ldr	r3, [r7, #12]
}
 8000934:	bf00      	nop
 8000936:	3714      	adds	r7, #20
 8000938:	46bd      	mov	sp, r7
 800093a:	bc80      	pop	{r7}
 800093c:	4770      	bx	lr
	...

08000940 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b088      	sub	sp, #32
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800095a:	2002      	movs	r0, #2
 800095c:	f7ff ffd7 	bl	800090e <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	4a12      	ldr	r2, [pc, #72]	@ (80009ac <BSP_LED_Init+0x6c>)
 8000964:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000968:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 800096a:	2301      	movs	r3, #1
 800096c:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000972:	2302      	movs	r3, #2
 8000974:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	4a0d      	ldr	r2, [pc, #52]	@ (80009b0 <BSP_LED_Init+0x70>)
 800097a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800097e:	f107 020c 	add.w	r2, r7, #12
 8000982:	4611      	mov	r1, r2
 8000984:	4618      	mov	r0, r3
 8000986:	f000 fa8f 	bl	8000ea8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	4a08      	ldr	r2, [pc, #32]	@ (80009b0 <BSP_LED_Init+0x70>)
 800098e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	4a05      	ldr	r2, [pc, #20]	@ (80009ac <BSP_LED_Init+0x6c>)
 8000996:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800099a:	2200      	movs	r2, #0
 800099c:	4619      	mov	r1, r3
 800099e:	f000 fbe3 	bl	8001168 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80009a2:	2300      	movs	r3, #0
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3720      	adds	r7, #32
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	08003b28 	.word	0x08003b28
 80009b0:	20000004 	.word	0x20000004

080009b4 <BSP_LED_On>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	4a07      	ldr	r2, [pc, #28]	@ (80009e0 <BSP_LED_On+0x2c>)
 80009c2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	4a06      	ldr	r2, [pc, #24]	@ (80009e4 <BSP_LED_On+0x30>)
 80009ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009ce:	2201      	movs	r2, #1
 80009d0:	4619      	mov	r1, r3
 80009d2:	f000 fbc9 	bl	8001168 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80009d6:	2300      	movs	r3, #0
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000004 	.word	0x20000004
 80009e4:	08003b28 	.word	0x08003b28

080009e8 <BSP_LED_Off>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	4a07      	ldr	r2, [pc, #28]	@ (8000a14 <BSP_LED_Off+0x2c>)
 80009f6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	4a06      	ldr	r2, [pc, #24]	@ (8000a18 <BSP_LED_Off+0x30>)
 80009fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a02:	2200      	movs	r2, #0
 8000a04:	4619      	mov	r1, r3
 8000a06:	f000 fbaf 	bl	8001168 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000a0a:	2300      	movs	r3, #0
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000004 	.word	0x20000004
 8000a18:	08003b28 	.word	0x08003b28

08000a1c <HAL_SUBGHZ_TxCpltCallback>:
    return RF_WAKEUP_TIME;
}

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8000a24:	4b03      	ldr	r3, [pc, #12]	@ (8000a34 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2001      	movs	r0, #1
 8000a2a:	4798      	blx	r3
}
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	200000d4 	.word	0x200000d4

08000a38 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8000a40:	4b03      	ldr	r3, [pc, #12]	@ (8000a50 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2002      	movs	r0, #2
 8000a46:	4798      	blx	r3
}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	200000d4 	.word	0x200000d4

08000a54 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8000a5c:	4b03      	ldr	r3, [pc, #12]	@ (8000a6c <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2040      	movs	r0, #64	@ 0x40
 8000a62:	4798      	blx	r3
}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	200000d4 	.word	0x200000d4

08000a70 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8000a7c:	78fb      	ldrb	r3, [r7, #3]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d002      	beq.n	8000a88 <HAL_SUBGHZ_CADStatusCallback+0x18>
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d005      	beq.n	8000a92 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8000a86:	e00a      	b.n	8000a9e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8000a88:	4b07      	ldr	r3, [pc, #28]	@ (8000aa8 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2080      	movs	r0, #128	@ 0x80
 8000a8e:	4798      	blx	r3
            break;
 8000a90:	e005      	b.n	8000a9e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8000a92:	4b05      	ldr	r3, [pc, #20]	@ (8000aa8 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000a9a:	4798      	blx	r3
            break;
 8000a9c:	bf00      	nop
    }
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200000d4 	.word	0x200000d4

08000aac <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8000ab4:	4b04      	ldr	r3, [pc, #16]	@ (8000ac8 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000abc:	4798      	blx	r3
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	200000d4 	.word	0x200000d4

08000acc <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8000ad4:	4b03      	ldr	r3, [pc, #12]	@ (8000ae4 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2020      	movs	r0, #32
 8000ada:	4798      	blx	r3
}
 8000adc:	bf00      	nop
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	200000d4 	.word	0x200000d4

08000ae8 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8000af0:	4b03      	ldr	r3, [pc, #12]	@ (8000b00 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2004      	movs	r0, #4
 8000af6:	4798      	blx	r3
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	200000d4 	.word	0x200000d4

08000b04 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8000b0c:	4b03      	ldr	r3, [pc, #12]	@ (8000b1c <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2008      	movs	r0, #8
 8000b12:	4798      	blx	r3
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	200000d4 	.word	0x200000d4

08000b20 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8000b28:	4b03      	ldr	r3, [pc, #12]	@ (8000b38 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2010      	movs	r0, #16
 8000b2e:	4798      	blx	r3
}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	200000d4 	.word	0x200000d4

08000b3c <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8000b44:	4b04      	ldr	r3, [pc, #16]	@ (8000b58 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000b4c:	4798      	blx	r3
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200000d4 	.word	0x200000d4

08000b5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b62:	2300      	movs	r3, #0
 8000b64:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b66:	2003      	movs	r0, #3
 8000b68:	f000 f95e 	bl	8000e28 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000b6c:	f001 fb4a 	bl	8002204 <HAL_RCC_GetHCLKFreq>
 8000b70:	4603      	mov	r3, r0
 8000b72:	4a09      	ldr	r2, [pc, #36]	@ (8000b98 <HAL_Init+0x3c>)
 8000b74:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b76:	2000      	movs	r0, #0
 8000b78:	f000 f810 	bl	8000b9c <HAL_InitTick>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d002      	beq.n	8000b88 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
 8000b84:	71fb      	strb	r3, [r7, #7]
 8000b86:	e001      	b.n	8000b8c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b88:	f7ff fd56 	bl	8000638 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000000 	.word	0x20000000

08000b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ba8:	4b17      	ldr	r3, [pc, #92]	@ (8000c08 <HAL_InitTick+0x6c>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d024      	beq.n	8000bfa <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bb0:	f001 fb28 	bl	8002204 <HAL_RCC_GetHCLKFreq>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	4b14      	ldr	r3, [pc, #80]	@ (8000c08 <HAL_InitTick+0x6c>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	4619      	mov	r1, r3
 8000bbc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bc0:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f000 f960 	bl	8000e8e <HAL_SYSTICK_Config>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d10f      	bne.n	8000bf4 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2b0f      	cmp	r3, #15
 8000bd8:	d809      	bhi.n	8000bee <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	6879      	ldr	r1, [r7, #4]
 8000bde:	f04f 30ff 	mov.w	r0, #4294967295
 8000be2:	f000 f92c 	bl	8000e3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000be6:	4a09      	ldr	r2, [pc, #36]	@ (8000c0c <HAL_InitTick+0x70>)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6013      	str	r3, [r2, #0]
 8000bec:	e007      	b.n	8000bfe <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	73fb      	strb	r3, [r7, #15]
 8000bf2:	e004      	b.n	8000bfe <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	73fb      	strb	r3, [r7, #15]
 8000bf8:	e001      	b.n	8000bfe <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000014 	.word	0x20000014
 8000c0c:	20000010 	.word	0x20000010

08000c10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c14:	4b05      	ldr	r3, [pc, #20]	@ (8000c2c <HAL_IncTick+0x1c>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b05      	ldr	r3, [pc, #20]	@ (8000c30 <HAL_IncTick+0x20>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4413      	add	r3, r2
 8000c20:	4a03      	ldr	r2, [pc, #12]	@ (8000c30 <HAL_IncTick+0x20>)
 8000c22:	6013      	str	r3, [r2, #0]
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr
 8000c2c:	20000014 	.word	0x20000014
 8000c30:	200000d8 	.word	0x200000d8

08000c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return uwTick;
 8000c38:	4b02      	ldr	r3, [pc, #8]	@ (8000c44 <HAL_GetTick+0x10>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr
 8000c44:	200000d8 	.word	0x200000d8

08000c48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c50:	f7ff fff0 	bl	8000c34 <HAL_GetTick>
 8000c54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c60:	d005      	beq.n	8000c6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c62:	4b0a      	ldr	r3, [pc, #40]	@ (8000c8c <HAL_Delay+0x44>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	461a      	mov	r2, r3
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c6e:	bf00      	nop
 8000c70:	f7ff ffe0 	bl	8000c34 <HAL_GetTick>
 8000c74:	4602      	mov	r2, r0
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d8f7      	bhi.n	8000c70 <HAL_Delay+0x28>
  {
  }
}
 8000c80:	bf00      	nop
 8000c82:	bf00      	nop
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000014 	.word	0x20000014

08000c90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f003 0307 	and.w	r3, r3, #7
 8000c9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ca6:	68ba      	ldr	r2, [r7, #8]
 8000ca8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cac:	4013      	ands	r3, r2
 8000cae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cc2:	4a04      	ldr	r2, [pc, #16]	@ (8000cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	60d3      	str	r3, [r2, #12]
}
 8000cc8:	bf00      	nop
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cdc:	4b04      	ldr	r3, [pc, #16]	@ (8000cf0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	0a1b      	lsrs	r3, r3, #8
 8000ce2:	f003 0307 	and.w	r3, r3, #7
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bc80      	pop	{r7}
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	db0b      	blt.n	8000d1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	f003 021f 	and.w	r2, r3, #31
 8000d0c:	4906      	ldr	r1, [pc, #24]	@ (8000d28 <__NVIC_EnableIRQ+0x34>)
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	095b      	lsrs	r3, r3, #5
 8000d14:	2001      	movs	r0, #1
 8000d16:	fa00 f202 	lsl.w	r2, r0, r2
 8000d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr
 8000d28:	e000e100 	.word	0xe000e100

08000d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	6039      	str	r1, [r7, #0]
 8000d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	db0a      	blt.n	8000d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	490c      	ldr	r1, [pc, #48]	@ (8000d78 <__NVIC_SetPriority+0x4c>)
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	0112      	lsls	r2, r2, #4
 8000d4c:	b2d2      	uxtb	r2, r2
 8000d4e:	440b      	add	r3, r1
 8000d50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d54:	e00a      	b.n	8000d6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	4908      	ldr	r1, [pc, #32]	@ (8000d7c <__NVIC_SetPriority+0x50>)
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	f003 030f 	and.w	r3, r3, #15
 8000d62:	3b04      	subs	r3, #4
 8000d64:	0112      	lsls	r2, r2, #4
 8000d66:	b2d2      	uxtb	r2, r2
 8000d68:	440b      	add	r3, r1
 8000d6a:	761a      	strb	r2, [r3, #24]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000e100 	.word	0xe000e100
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b089      	sub	sp, #36	@ 0x24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	f1c3 0307 	rsb	r3, r3, #7
 8000d9a:	2b04      	cmp	r3, #4
 8000d9c:	bf28      	it	cs
 8000d9e:	2304      	movcs	r3, #4
 8000da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3304      	adds	r3, #4
 8000da6:	2b06      	cmp	r3, #6
 8000da8:	d902      	bls.n	8000db0 <NVIC_EncodePriority+0x30>
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3b03      	subs	r3, #3
 8000dae:	e000      	b.n	8000db2 <NVIC_EncodePriority+0x32>
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db4:	f04f 32ff 	mov.w	r2, #4294967295
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	43da      	mvns	r2, r3
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	401a      	ands	r2, r3
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd2:	43d9      	mvns	r1, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd8:	4313      	orrs	r3, r2
         );
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3724      	adds	r7, #36	@ 0x24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr

08000de4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000df4:	d301      	bcc.n	8000dfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000df6:	2301      	movs	r3, #1
 8000df8:	e00f      	b.n	8000e1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000e24 <SysTick_Config+0x40>)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e02:	210f      	movs	r1, #15
 8000e04:	f04f 30ff 	mov.w	r0, #4294967295
 8000e08:	f7ff ff90 	bl	8000d2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e0c:	4b05      	ldr	r3, [pc, #20]	@ (8000e24 <SysTick_Config+0x40>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e12:	4b04      	ldr	r3, [pc, #16]	@ (8000e24 <SysTick_Config+0x40>)
 8000e14:	2207      	movs	r2, #7
 8000e16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	e000e010 	.word	0xe000e010

08000e28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f7ff ff2d 	bl	8000c90 <__NVIC_SetPriorityGrouping>
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b086      	sub	sp, #24
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	4603      	mov	r3, r0
 8000e46:	60b9      	str	r1, [r7, #8]
 8000e48:	607a      	str	r2, [r7, #4]
 8000e4a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e4c:	f7ff ff44 	bl	8000cd8 <__NVIC_GetPriorityGrouping>
 8000e50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	68b9      	ldr	r1, [r7, #8]
 8000e56:	6978      	ldr	r0, [r7, #20]
 8000e58:	f7ff ff92 	bl	8000d80 <NVIC_EncodePriority>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e62:	4611      	mov	r1, r2
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff ff61 	bl	8000d2c <__NVIC_SetPriority>
}
 8000e6a:	bf00      	nop
 8000e6c:	3718      	adds	r7, #24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	4603      	mov	r3, r0
 8000e7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff ff37 	bl	8000cf4 <__NVIC_EnableIRQ>
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b082      	sub	sp, #8
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f7ff ffa4 	bl	8000de4 <SysTick_Config>
 8000e9c:	4603      	mov	r3, r0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
	...

08000ea8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b087      	sub	sp, #28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb6:	e140      	b.n	800113a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	f000 8132 	beq.w	8001134 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0303 	and.w	r3, r3, #3
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d005      	beq.n	8000ee8 <HAL_GPIO_Init+0x40>
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 0303 	and.w	r3, r3, #3
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d130      	bne.n	8000f4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	2203      	movs	r2, #3
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4013      	ands	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	68da      	ldr	r2, [r3, #12]
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f1e:	2201      	movs	r2, #1
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	091b      	lsrs	r3, r3, #4
 8000f34:	f003 0201 	and.w	r2, r3, #1
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
 8000f52:	2b03      	cmp	r3, #3
 8000f54:	d017      	beq.n	8000f86 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	2203      	movs	r2, #3
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	689a      	ldr	r2, [r3, #8]
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 0303 	and.w	r3, r3, #3
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d123      	bne.n	8000fda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	08da      	lsrs	r2, r3, #3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3208      	adds	r2, #8
 8000f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	220f      	movs	r2, #15
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	691a      	ldr	r2, [r3, #16]
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	f003 0307 	and.w	r3, r3, #7
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	08da      	lsrs	r2, r3, #3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3208      	adds	r2, #8
 8000fd4:	6939      	ldr	r1, [r7, #16]
 8000fd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f003 0203 	and.w	r2, r3, #3
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001016:	2b00      	cmp	r3, #0
 8001018:	f000 808c 	beq.w	8001134 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800101c:	4a4e      	ldr	r2, [pc, #312]	@ (8001158 <HAL_GPIO_Init+0x2b0>)
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	089b      	lsrs	r3, r3, #2
 8001022:	3302      	adds	r3, #2
 8001024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001028:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	f003 0303 	and.w	r3, r3, #3
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	2207      	movs	r2, #7
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001046:	d00d      	beq.n	8001064 <HAL_GPIO_Init+0x1bc>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a44      	ldr	r2, [pc, #272]	@ (800115c <HAL_GPIO_Init+0x2b4>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d007      	beq.n	8001060 <HAL_GPIO_Init+0x1b8>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4a43      	ldr	r2, [pc, #268]	@ (8001160 <HAL_GPIO_Init+0x2b8>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d101      	bne.n	800105c <HAL_GPIO_Init+0x1b4>
 8001058:	2302      	movs	r3, #2
 800105a:	e004      	b.n	8001066 <HAL_GPIO_Init+0x1be>
 800105c:	2307      	movs	r3, #7
 800105e:	e002      	b.n	8001066 <HAL_GPIO_Init+0x1be>
 8001060:	2301      	movs	r3, #1
 8001062:	e000      	b.n	8001066 <HAL_GPIO_Init+0x1be>
 8001064:	2300      	movs	r3, #0
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	f002 0203 	and.w	r2, r2, #3
 800106c:	0092      	lsls	r2, r2, #2
 800106e:	4093      	lsls	r3, r2
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	4313      	orrs	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001076:	4938      	ldr	r1, [pc, #224]	@ (8001158 <HAL_GPIO_Init+0x2b0>)
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	089b      	lsrs	r3, r3, #2
 800107c:	3302      	adds	r3, #2
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001084:	4b37      	ldr	r3, [pc, #220]	@ (8001164 <HAL_GPIO_Init+0x2bc>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	43db      	mvns	r3, r3
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d003      	beq.n	80010a8 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010a8:	4a2e      	ldr	r2, [pc, #184]	@ (8001164 <HAL_GPIO_Init+0x2bc>)
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80010ae:	4b2d      	ldr	r3, [pc, #180]	@ (8001164 <HAL_GPIO_Init+0x2bc>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	43db      	mvns	r3, r3
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	4013      	ands	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010d2:	4a24      	ldr	r2, [pc, #144]	@ (8001164 <HAL_GPIO_Init+0x2bc>)
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80010d8:	4b22      	ldr	r3, [pc, #136]	@ (8001164 <HAL_GPIO_Init+0x2bc>)
 80010da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010de:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	43db      	mvns	r3, r3
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4013      	ands	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80010fe:	4a19      	ldr	r2, [pc, #100]	@ (8001164 <HAL_GPIO_Init+0x2bc>)
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001106:	4b17      	ldr	r3, [pc, #92]	@ (8001164 <HAL_GPIO_Init+0x2bc>)
 8001108:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800110c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	43db      	mvns	r3, r3
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d003      	beq.n	800112c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	4313      	orrs	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 800112c:	4a0d      	ldr	r2, [pc, #52]	@ (8001164 <HAL_GPIO_Init+0x2bc>)
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	3301      	adds	r3, #1
 8001138:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	fa22 f303 	lsr.w	r3, r2, r3
 8001144:	2b00      	cmp	r3, #0
 8001146:	f47f aeb7 	bne.w	8000eb8 <HAL_GPIO_Init+0x10>
  }
}
 800114a:	bf00      	nop
 800114c:	bf00      	nop
 800114e:	371c      	adds	r7, #28
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40010000 	.word	0x40010000
 800115c:	48000400 	.word	0x48000400
 8001160:	48000800 	.word	0x48000800
 8001164:	58000800 	.word	0x58000800

08001168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	807b      	strh	r3, [r7, #2]
 8001174:	4613      	mov	r3, r2
 8001176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001178:	787b      	ldrb	r3, [r7, #1]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800117e:	887a      	ldrh	r2, [r7, #2]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001184:	e002      	b.n	800118c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001186:	887a      	ldrh	r2, [r7, #2]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	bc80      	pop	{r7}
 8001194:	4770      	bx	lr
	...

08001198 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800119c:	4b04      	ldr	r3, [pc, #16]	@ (80011b0 <HAL_PWR_EnableBkUpAccess+0x18>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a03      	ldr	r2, [pc, #12]	@ (80011b0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80011a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011a6:	6013      	str	r3, [r2, #0]
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr
 80011b0:	58000400 	.word	0x58000400

080011b4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80011b8:	4b03      	ldr	r3, [pc, #12]	@ (80011c8 <HAL_PWREx_GetVoltageRange+0x14>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr
 80011c8:	58000400 	.word	0x58000400

080011cc <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80011d0:	4b06      	ldr	r3, [pc, #24]	@ (80011ec <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80011dc:	d101      	bne.n	80011e2 <LL_PWR_IsEnabledBkUpAccess+0x16>
 80011de:	2301      	movs	r3, #1
 80011e0:	e000      	b.n	80011e4 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr
 80011ec:	58000400 	.word	0x58000400

080011f0 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80011f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80011fe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001202:	6013      	str	r3, [r2, #0]
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr

0800120c <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001210:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800121a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800121e:	6013      	str	r3, [r2, #0]
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr

08001228 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800122c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001236:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800123a:	d101      	bne.n	8001240 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800123c:	2301      	movs	r3, #1
 800123e:	e000      	b.n	8001242 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	bc80      	pop	{r7}
 8001248:	4770      	bx	lr

0800124a <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800124e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001258:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800125c:	6013      	str	r3, [r2, #0]
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr

08001266 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800126a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001274:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001278:	6013      	str	r3, [r2, #0]
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr

08001282 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001286:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001290:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001294:	d101      	bne.n	800129a <LL_RCC_HSE_IsReady+0x18>
 8001296:	2301      	movs	r3, #1
 8001298:	e000      	b.n	800129c <LL_RCC_HSE_IsReady+0x1a>
 800129a:	2300      	movs	r3, #0
}
 800129c:	4618      	mov	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr

080012a4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80012a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80012b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012b6:	6013      	str	r3, [r2, #0]
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr

080012c0 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80012c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80012ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80012d2:	6013      	str	r3, [r2, #0]
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr

080012dc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80012e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012ee:	d101      	bne.n	80012f4 <LL_RCC_HSI_IsReady+0x18>
 80012f0:	2301      	movs	r3, #1
 80012f2:	e000      	b.n	80012f6 <LL_RCC_HSI_IsReady+0x1a>
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr

080012fe <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001306:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	061b      	lsls	r3, r3, #24
 8001314:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001318:	4313      	orrs	r3, r2
 800131a:	604b      	str	r3, [r1, #4]
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr

08001326 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800132a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800132e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	2b02      	cmp	r3, #2
 8001338:	d101      	bne.n	800133e <LL_RCC_LSE_IsReady+0x18>
 800133a:	2301      	movs	r3, #1
 800133c:	e000      	b.n	8001340 <LL_RCC_LSE_IsReady+0x1a>
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr

08001348 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800134c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001350:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001354:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr

08001368 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800136c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001370:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001374:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001378:	f023 0301 	bic.w	r3, r3, #1
 800137c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr

08001388 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800138c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001390:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	2b02      	cmp	r3, #2
 800139a:	d101      	bne.n	80013a0 <LL_RCC_LSI_IsReady+0x18>
 800139c:	2301      	movs	r3, #1
 800139e:	e000      	b.n	80013a2 <LL_RCC_LSI_IsReady+0x1a>
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr

080013aa <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80013ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	6013      	str	r3, [r2, #0]
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr

080013c6 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80013ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80013d4:	f023 0301 	bic.w	r3, r3, #1
 80013d8:	6013      	str	r3, [r2, #0]
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr

080013e2 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80013e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d101      	bne.n	80013f8 <LL_RCC_MSI_IsReady+0x16>
 80013f4:	2301      	movs	r3, #1
 80013f6:	e000      	b.n	80013fa <LL_RCC_MSI_IsReady+0x18>
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr

08001402 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001406:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0308 	and.w	r3, r3, #8
 8001410:	2b08      	cmp	r3, #8
 8001412:	d101      	bne.n	8001418 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001414:	2301      	movs	r3, #1
 8001416:	e000      	b.n	800141a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr

08001422 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001426:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001430:	4618      	mov	r0, r3
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr

08001438 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800143c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001440:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001444:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8001448:	4618      	mov	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr

08001450 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001458:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	021b      	lsls	r3, r3, #8
 8001466:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800146a:	4313      	orrs	r3, r2
 800146c:	604b      	str	r3, [r1, #4]
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr

08001478 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001480:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f023 0203 	bic.w	r2, r3, #3
 800148a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4313      	orrs	r3, r2
 8001492:	608b      	str	r3, [r1, #8]
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr

0800149e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80014a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f003 030c 	and.w	r3, r3, #12
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr

080014b4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80014bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	608b      	str	r3, [r1, #8]
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr

080014da <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80014da:	b480      	push	{r7}
 80014dc:	b083      	sub	sp, #12
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80014e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014e6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80014ea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr

08001504 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800150c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001510:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001514:	f023 020f 	bic.w	r2, r3, #15
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	091b      	lsrs	r3, r3, #4
 800151c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001520:	4313      	orrs	r3, r2
 8001522:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr

08001530 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001538:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001542:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4313      	orrs	r3, r2
 800154a:	608b      	str	r3, [r1, #8]
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	bc80      	pop	{r7}
 8001554:	4770      	bx	lr

08001556 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001556:	b480      	push	{r7}
 8001558:	b083      	sub	sp, #12
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800155e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001568:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4313      	orrs	r3, r2
 8001570:	608b      	str	r3, [r1, #8]
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr

0800157c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001580:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800158a:	4618      	mov	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	bc80      	pop	{r7}
 8001590:	4770      	bx	lr

08001592 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001596:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800159a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800159e:	011b      	lsls	r3, r3, #4
 80015a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr

080015ac <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80015b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr

080015c2 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80015c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr

080015d8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80015dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80015ea:	6013      	str	r3, [r2, #0]
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr

080015f4 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80015f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001602:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001606:	6013      	str	r3, [r2, #0]
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr

08001610 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001614:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800161e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001622:	d101      	bne.n	8001628 <LL_RCC_PLL_IsReady+0x18>
 8001624:	2301      	movs	r3, #1
 8001626:	e000      	b.n	800162a <LL_RCC_PLL_IsReady+0x1a>
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr

08001632 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001636:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	0a1b      	lsrs	r3, r3, #8
 800163e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8001642:	4618      	mov	r0, r3
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr

0800164a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800164e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8001658:	4618      	mov	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr

08001660 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001664:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800166e:	4618      	mov	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr

08001676 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800167a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	f003 0303 	and.w	r3, r3, #3
}
 8001684:	4618      	mov	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr

0800168c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001690:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800169a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800169e:	d101      	bne.n	80016a4 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80016a0:	2301      	movs	r3, #1
 80016a2:	e000      	b.n	80016a6 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr

080016ae <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80016b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80016ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80016c2:	d101      	bne.n	80016c8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80016c4:	2301      	movs	r3, #1
 80016c6:	e000      	b.n	80016ca <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr

080016d2 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80016d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016da:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80016de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016e6:	d101      	bne.n	80016ec <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80016e8:	2301      	movs	r3, #1
 80016ea:	e000      	b.n	80016ee <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr

080016f6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80016fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001704:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001708:	d101      	bne.n	800170e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800170a:	2301      	movs	r3, #1
 800170c:	e000      	b.n	8001710 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr

08001718 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800171c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001726:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800172a:	d101      	bne.n	8001730 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800172c:	2301      	movs	r3, #1
 800172e:	e000      	b.n	8001732 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr
	...

0800173c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b088      	sub	sp, #32
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e36f      	b.n	8001e2e <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800174e:	f7ff fea6 	bl	800149e <LL_RCC_GetSysClkSource>
 8001752:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001754:	f7ff ff8f 	bl	8001676 <LL_RCC_PLL_GetMainSource>
 8001758:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0320 	and.w	r3, r3, #32
 8001762:	2b00      	cmp	r3, #0
 8001764:	f000 80c4 	beq.w	80018f0 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d005      	beq.n	800177a <HAL_RCC_OscConfig+0x3e>
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	2b0c      	cmp	r3, #12
 8001772:	d176      	bne.n	8001862 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d173      	bne.n	8001862 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a1b      	ldr	r3, [r3, #32]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e353      	b.n	8001e2e <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800178a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0308 	and.w	r3, r3, #8
 8001794:	2b00      	cmp	r3, #0
 8001796:	d005      	beq.n	80017a4 <HAL_RCC_OscConfig+0x68>
 8001798:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017a2:	e006      	b.n	80017b2 <HAL_RCC_OscConfig+0x76>
 80017a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017ac:	091b      	lsrs	r3, r3, #4
 80017ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d222      	bcs.n	80017fc <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 fd5a 	bl	8002274 <RCC_SetFlashLatencyFromMSIRange>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e331      	b.n	8001e2e <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017d4:	f043 0308 	orr.w	r3, r3, #8
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80017ec:	4313      	orrs	r3, r2
 80017ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff fe2b 	bl	8001450 <LL_RCC_MSI_SetCalibTrimming>
 80017fa:	e021      	b.n	8001840 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001806:	f043 0308 	orr.w	r3, r3, #8
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800181a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800181e:	4313      	orrs	r3, r2
 8001820:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff fe12 	bl	8001450 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001830:	4618      	mov	r0, r3
 8001832:	f000 fd1f 	bl	8002274 <RCC_SetFlashLatencyFromMSIRange>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e2f6      	b.n	8001e2e <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001840:	f000 fce0 	bl	8002204 <HAL_RCC_GetHCLKFreq>
 8001844:	4603      	mov	r3, r0
 8001846:	4aa7      	ldr	r2, [pc, #668]	@ (8001ae4 <HAL_RCC_OscConfig+0x3a8>)
 8001848:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800184a:	4ba7      	ldr	r3, [pc, #668]	@ (8001ae8 <HAL_RCC_OscConfig+0x3ac>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff f9a4 	bl	8000b9c <HAL_InitTick>
 8001854:	4603      	mov	r3, r0
 8001856:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001858:	7cfb      	ldrb	r3, [r7, #19]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d047      	beq.n	80018ee <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800185e:	7cfb      	ldrb	r3, [r7, #19]
 8001860:	e2e5      	b.n	8001e2e <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a1b      	ldr	r3, [r3, #32]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d02c      	beq.n	80018c4 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800186a:	f7ff fd9e 	bl	80013aa <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800186e:	f7ff f9e1 	bl	8000c34 <HAL_GetTick>
 8001872:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001876:	f7ff f9dd 	bl	8000c34 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e2d2      	b.n	8001e2e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001888:	f7ff fdab 	bl	80013e2 <LL_RCC_MSI_IsReady>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d0f1      	beq.n	8001876 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001892:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800189c:	f043 0308 	orr.w	r3, r3, #8
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018b4:	4313      	orrs	r3, r2
 80018b6:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fdc7 	bl	8001450 <LL_RCC_MSI_SetCalibTrimming>
 80018c2:	e015      	b.n	80018f0 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018c4:	f7ff fd7f 	bl	80013c6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018c8:	f7ff f9b4 	bl	8000c34 <HAL_GetTick>
 80018cc:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018d0:	f7ff f9b0 	bl	8000c34 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e2a5      	b.n	8001e2e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80018e2:	f7ff fd7e 	bl	80013e2 <LL_RCC_MSI_IsReady>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1f1      	bne.n	80018d0 <HAL_RCC_OscConfig+0x194>
 80018ec:	e000      	b.n	80018f0 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80018ee:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d058      	beq.n	80019ae <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	2b08      	cmp	r3, #8
 8001900:	d005      	beq.n	800190e <HAL_RCC_OscConfig+0x1d2>
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	2b0c      	cmp	r3, #12
 8001906:	d108      	bne.n	800191a <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	2b03      	cmp	r3, #3
 800190c:	d105      	bne.n	800191a <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d14b      	bne.n	80019ae <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e289      	b.n	8001e2e <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800191a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800192c:	4313      	orrs	r3, r2
 800192e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001938:	d102      	bne.n	8001940 <HAL_RCC_OscConfig+0x204>
 800193a:	f7ff fc86 	bl	800124a <LL_RCC_HSE_Enable>
 800193e:	e00d      	b.n	800195c <HAL_RCC_OscConfig+0x220>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8001948:	d104      	bne.n	8001954 <HAL_RCC_OscConfig+0x218>
 800194a:	f7ff fc51 	bl	80011f0 <LL_RCC_HSE_EnableTcxo>
 800194e:	f7ff fc7c 	bl	800124a <LL_RCC_HSE_Enable>
 8001952:	e003      	b.n	800195c <HAL_RCC_OscConfig+0x220>
 8001954:	f7ff fc87 	bl	8001266 <LL_RCC_HSE_Disable>
 8001958:	f7ff fc58 	bl	800120c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d012      	beq.n	800198a <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001964:	f7ff f966 	bl	8000c34 <HAL_GetTick>
 8001968:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800196c:	f7ff f962 	bl	8000c34 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b64      	cmp	r3, #100	@ 0x64
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e257      	b.n	8001e2e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800197e:	f7ff fc80 	bl	8001282 <LL_RCC_HSE_IsReady>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d0f1      	beq.n	800196c <HAL_RCC_OscConfig+0x230>
 8001988:	e011      	b.n	80019ae <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198a:	f7ff f953 	bl	8000c34 <HAL_GetTick>
 800198e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001992:	f7ff f94f 	bl	8000c34 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b64      	cmp	r3, #100	@ 0x64
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e244      	b.n	8001e2e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80019a4:	f7ff fc6d 	bl	8001282 <LL_RCC_HSE_IsReady>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1f1      	bne.n	8001992 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d046      	beq.n	8001a48 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	2b04      	cmp	r3, #4
 80019be:	d005      	beq.n	80019cc <HAL_RCC_OscConfig+0x290>
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	2b0c      	cmp	r3, #12
 80019c4:	d10e      	bne.n	80019e4 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d10b      	bne.n	80019e4 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d101      	bne.n	80019d8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e22a      	b.n	8001e2e <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff fc8e 	bl	80012fe <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80019e2:	e031      	b.n	8001a48 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d019      	beq.n	8001a20 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019ec:	f7ff fc5a 	bl	80012a4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f0:	f7ff f920 	bl	8000c34 <HAL_GetTick>
 80019f4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019f8:	f7ff f91c 	bl	8000c34 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e211      	b.n	8001e2e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001a0a:	f7ff fc67 	bl	80012dc <LL_RCC_HSI_IsReady>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0f1      	beq.n	80019f8 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff fc70 	bl	80012fe <LL_RCC_HSI_SetCalibTrimming>
 8001a1e:	e013      	b.n	8001a48 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a20:	f7ff fc4e 	bl	80012c0 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a24:	f7ff f906 	bl	8000c34 <HAL_GetTick>
 8001a28:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a2c:	f7ff f902 	bl	8000c34 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e1f7      	b.n	8001e2e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001a3e:	f7ff fc4d 	bl	80012dc <LL_RCC_HSI_IsReady>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1f1      	bne.n	8001a2c <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0308 	and.w	r3, r3, #8
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d06e      	beq.n	8001b32 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d056      	beq.n	8001b0a <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001a5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a64:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69da      	ldr	r2, [r3, #28]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f003 0310 	and.w	r3, r3, #16
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d031      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d006      	beq.n	8001a8c <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d101      	bne.n	8001a8c <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e1d0      	b.n	8001e2e <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d013      	beq.n	8001abe <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8001a96:	f7ff fc67 	bl	8001368 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a9a:	f7ff f8cb 	bl	8000c34 <HAL_GetTick>
 8001a9e:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa2:	f7ff f8c7 	bl	8000c34 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b11      	cmp	r3, #17
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e1bc      	b.n	8001e2e <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001ab4:	f7ff fc68 	bl	8001388 <LL_RCC_LSI_IsReady>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1f1      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001abe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ac6:	f023 0210 	bic.w	r2, r3, #16
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ad8:	f7ff fc36 	bl	8001348 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001adc:	f7ff f8aa 	bl	8000c34 <HAL_GetTick>
 8001ae0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001ae2:	e00c      	b.n	8001afe <HAL_RCC_OscConfig+0x3c2>
 8001ae4:	20000000 	.word	0x20000000
 8001ae8:	20000010 	.word	0x20000010
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aec:	f7ff f8a2 	bl	8000c34 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b11      	cmp	r3, #17
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e197      	b.n	8001e2e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001afe:	f7ff fc43 	bl	8001388 <LL_RCC_LSI_IsReady>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0f1      	beq.n	8001aec <HAL_RCC_OscConfig+0x3b0>
 8001b08:	e013      	b.n	8001b32 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b0a:	f7ff fc2d 	bl	8001368 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b0e:	f7ff f891 	bl	8000c34 <HAL_GetTick>
 8001b12:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b16:	f7ff f88d 	bl	8000c34 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b11      	cmp	r3, #17
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e182      	b.n	8001e2e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001b28:	f7ff fc2e 	bl	8001388 <LL_RCC_LSI_IsReady>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1f1      	bne.n	8001b16 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0304 	and.w	r3, r3, #4
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 80d8 	beq.w	8001cf0 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001b40:	f7ff fb44 	bl	80011cc <LL_PWR_IsEnabledBkUpAccess>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d113      	bne.n	8001b72 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001b4a:	f7ff fb25 	bl	8001198 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b4e:	f7ff f871 	bl	8000c34 <HAL_GetTick>
 8001b52:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b56:	f7ff f86d 	bl	8000c34 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e162      	b.n	8001e2e <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001b68:	f7ff fb30 	bl	80011cc <LL_PWR_IsEnabledBkUpAccess>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d0f1      	beq.n	8001b56 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d07b      	beq.n	8001c72 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	2b85      	cmp	r3, #133	@ 0x85
 8001b80:	d003      	beq.n	8001b8a <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	2b05      	cmp	r3, #5
 8001b88:	d109      	bne.n	8001b9e <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001b8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b92:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b96:	f043 0304 	orr.w	r3, r3, #4
 8001b9a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b9e:	f7ff f849 	bl	8000c34 <HAL_GetTick>
 8001ba2:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001ba4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001bb8:	e00a      	b.n	8001bd0 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bba:	f7ff f83b 	bl	8000c34 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e12e      	b.n	8001e2e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001bd0:	f7ff fba9 	bl	8001326 <LL_RCC_LSE_IsReady>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0ef      	beq.n	8001bba <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	2b81      	cmp	r3, #129	@ 0x81
 8001be0:	d003      	beq.n	8001bea <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	2b85      	cmp	r3, #133	@ 0x85
 8001be8:	d121      	bne.n	8001c2e <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bea:	f7ff f823 	bl	8000c34 <HAL_GetTick>
 8001bee:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001bf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bf8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001c04:	e00a      	b.n	8001c1c <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c06:	f7ff f815 	bl	8000c34 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e108      	b.n	8001e2e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001c1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0ec      	beq.n	8001c06 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001c2c:	e060      	b.n	8001cf0 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2e:	f7ff f801 	bl	8000c34 <HAL_GetTick>
 8001c32:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001c34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001c44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001c48:	e00a      	b.n	8001c60 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c4a:	f7fe fff3 	bl	8000c34 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e0e6      	b.n	8001e2e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001c60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1ec      	bne.n	8001c4a <HAL_RCC_OscConfig+0x50e>
 8001c70:	e03e      	b.n	8001cf0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c72:	f7fe ffdf 	bl	8000c34 <HAL_GetTick>
 8001c76:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001c78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001c88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001c8c:	e00a      	b.n	8001ca4 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c8e:	f7fe ffd1 	bl	8000c34 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e0c4      	b.n	8001e2e <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001ca4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1ec      	bne.n	8001c8e <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb4:	f7fe ffbe 	bl	8000c34 <HAL_GetTick>
 8001cb8:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001cba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cc2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001cc6:	f023 0301 	bic.w	r3, r3, #1
 8001cca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001cce:	e00a      	b.n	8001ce6 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd0:	f7fe ffb0 	bl	8000c34 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e0a3      	b.n	8001e2e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001ce6:	f7ff fb1e 	bl	8001326 <LL_RCC_LSE_IsReady>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1ef      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f000 8099 	beq.w	8001e2c <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	2b0c      	cmp	r3, #12
 8001cfe:	d06c      	beq.n	8001dda <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d14b      	bne.n	8001da0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d08:	f7ff fc74 	bl	80015f4 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0c:	f7fe ff92 	bl	8000c34 <HAL_GetTick>
 8001d10:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d14:	f7fe ff8e 	bl	8000c34 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b0a      	cmp	r3, #10
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e083      	b.n	8001e2e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001d26:	f7ff fc73 	bl	8001610 <LL_RCC_PLL_IsReady>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1f1      	bne.n	8001d14 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d34:	68da      	ldr	r2, [r3, #12]
 8001d36:	4b40      	ldr	r3, [pc, #256]	@ (8001e38 <HAL_RCC_OscConfig+0x6fc>)
 8001d38:	4013      	ands	r3, r2
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001d42:	4311      	orrs	r1, r2
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001d48:	0212      	lsls	r2, r2, #8
 8001d4a:	4311      	orrs	r1, r2
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001d50:	4311      	orrs	r1, r2
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001d56:	4311      	orrs	r1, r2
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d62:	4313      	orrs	r3, r2
 8001d64:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d66:	f7ff fc37 	bl	80015d8 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d78:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7a:	f7fe ff5b 	bl	8000c34 <HAL_GetTick>
 8001d7e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d82:	f7fe ff57 	bl	8000c34 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b0a      	cmp	r3, #10
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e04c      	b.n	8001e2e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8001d94:	f7ff fc3c 	bl	8001610 <LL_RCC_PLL_IsReady>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0f1      	beq.n	8001d82 <HAL_RCC_OscConfig+0x646>
 8001d9e:	e045      	b.n	8001e2c <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da0:	f7ff fc28 	bl	80015f4 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da4:	f7fe ff46 	bl	8000c34 <HAL_GetTick>
 8001da8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dac:	f7fe ff42 	bl	8000c34 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b0a      	cmp	r3, #10
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e037      	b.n	8001e2e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001dbe:	f7ff fc27 	bl	8001610 <LL_RCC_PLL_IsReady>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1f1      	bne.n	8001dac <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8001dc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dcc:	68da      	ldr	r2, [r3, #12]
 8001dce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001dd2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e3c <HAL_RCC_OscConfig+0x700>)
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	60cb      	str	r3, [r1, #12]
 8001dd8:	e028      	b.n	8001e2c <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d101      	bne.n	8001de6 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e023      	b.n	8001e2e <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001de6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	f003 0203 	and.w	r2, r3, #3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d115      	bne.n	8001e28 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d10e      	bne.n	8001e28 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e14:	021b      	lsls	r3, r3, #8
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d106      	bne.n	8001e28 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d001      	beq.n	8001e2c <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e000      	b.n	8001e2e <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3720      	adds	r7, #32
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	11c1808c 	.word	0x11c1808c
 8001e3c:	eefefffc 	.word	0xeefefffc

08001e40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d101      	bne.n	8001e54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e12c      	b.n	80020ae <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e54:	4b98      	ldr	r3, [pc, #608]	@ (80020b8 <HAL_RCC_ClockConfig+0x278>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d91b      	bls.n	8001e9a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e62:	4b95      	ldr	r3, [pc, #596]	@ (80020b8 <HAL_RCC_ClockConfig+0x278>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f023 0207 	bic.w	r2, r3, #7
 8001e6a:	4993      	ldr	r1, [pc, #588]	@ (80020b8 <HAL_RCC_ClockConfig+0x278>)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e72:	f7fe fedf 	bl	8000c34 <HAL_GetTick>
 8001e76:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e78:	e008      	b.n	8001e8c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001e7a:	f7fe fedb 	bl	8000c34 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e110      	b.n	80020ae <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8c:	4b8a      	ldr	r3, [pc, #552]	@ (80020b8 <HAL_RCC_ClockConfig+0x278>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d1ef      	bne.n	8001e7a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d016      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff fb02 	bl	80014b4 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001eb0:	f7fe fec0 	bl	8000c34 <HAL_GetTick>
 8001eb4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001eb8:	f7fe febc 	bl	8000c34 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e0f1      	b.n	80020ae <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001eca:	f7ff fbdf 	bl	800168c <LL_RCC_IsActiveFlag_HPRE>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0f1      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0320 	and.w	r3, r3, #32
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d016      	beq.n	8001f0e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff faf8 	bl	80014da <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001eea:	f7fe fea3 	bl	8000c34 <HAL_GetTick>
 8001eee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001ef2:	f7fe fe9f 	bl	8000c34 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e0d4      	b.n	80020ae <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001f04:	f7ff fbd3 	bl	80016ae <LL_RCC_IsActiveFlag_C2HPRE>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0f1      	beq.n	8001ef2 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d016      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff faf0 	bl	8001504 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001f24:	f7fe fe86 	bl	8000c34 <HAL_GetTick>
 8001f28:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001f2c:	f7fe fe82 	bl	8000c34 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e0b7      	b.n	80020ae <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001f3e:	f7ff fbc8 	bl	80016d2 <LL_RCC_IsActiveFlag_SHDHPRE>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0f1      	beq.n	8001f2c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d016      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff fae9 	bl	8001530 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001f5e:	f7fe fe69 	bl	8000c34 <HAL_GetTick>
 8001f62:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001f66:	f7fe fe65 	bl	8000c34 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e09a      	b.n	80020ae <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001f78:	f7ff fbbd 	bl	80016f6 <LL_RCC_IsActiveFlag_PPRE1>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0f1      	beq.n	8001f66 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0308 	and.w	r3, r3, #8
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d017      	beq.n	8001fbe <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff fade 	bl	8001556 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001f9a:	f7fe fe4b 	bl	8000c34 <HAL_GetTick>
 8001f9e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001fa2:	f7fe fe47 	bl	8000c34 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e07c      	b.n	80020ae <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001fb4:	f7ff fbb0 	bl	8001718 <LL_RCC_IsActiveFlag_PPRE2>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0f1      	beq.n	8001fa2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d043      	beq.n	8002052 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d106      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001fd2:	f7ff f956 	bl	8001282 <LL_RCC_HSE_IsReady>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d11e      	bne.n	800201a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e066      	b.n	80020ae <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2b03      	cmp	r3, #3
 8001fe6:	d106      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001fe8:	f7ff fb12 	bl	8001610 <LL_RCC_PLL_IsReady>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d113      	bne.n	800201a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e05b      	b.n	80020ae <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d106      	bne.n	800200c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001ffe:	f7ff f9f0 	bl	80013e2 <LL_RCC_MSI_IsReady>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d108      	bne.n	800201a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e050      	b.n	80020ae <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800200c:	f7ff f966 	bl	80012dc <LL_RCC_HSI_IsReady>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e049      	b.n	80020ae <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff fa2a 	bl	8001478 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002024:	f7fe fe06 	bl	8000c34 <HAL_GetTick>
 8002028:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800202a:	e00a      	b.n	8002042 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800202c:	f7fe fe02 	bl	8000c34 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	f241 3288 	movw	r2, #5000	@ 0x1388
 800203a:	4293      	cmp	r3, r2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e035      	b.n	80020ae <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002042:	f7ff fa2c 	bl	800149e <LL_RCC_GetSysClkSource>
 8002046:	4602      	mov	r2, r0
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	429a      	cmp	r2, r3
 8002050:	d1ec      	bne.n	800202c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002052:	4b19      	ldr	r3, [pc, #100]	@ (80020b8 <HAL_RCC_ClockConfig+0x278>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	429a      	cmp	r2, r3
 800205e:	d21b      	bcs.n	8002098 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002060:	4b15      	ldr	r3, [pc, #84]	@ (80020b8 <HAL_RCC_ClockConfig+0x278>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f023 0207 	bic.w	r2, r3, #7
 8002068:	4913      	ldr	r1, [pc, #76]	@ (80020b8 <HAL_RCC_ClockConfig+0x278>)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	4313      	orrs	r3, r2
 800206e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002070:	f7fe fde0 	bl	8000c34 <HAL_GetTick>
 8002074:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002076:	e008      	b.n	800208a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002078:	f7fe fddc 	bl	8000c34 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e011      	b.n	80020ae <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800208a:	4b0b      	ldr	r3, [pc, #44]	@ (80020b8 <HAL_RCC_ClockConfig+0x278>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	429a      	cmp	r2, r3
 8002096:	d1ef      	bne.n	8002078 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002098:	f000 f8b4 	bl	8002204 <HAL_RCC_GetHCLKFreq>
 800209c:	4603      	mov	r3, r0
 800209e:	4a07      	ldr	r2, [pc, #28]	@ (80020bc <HAL_RCC_ClockConfig+0x27c>)
 80020a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80020a2:	4b07      	ldr	r3, [pc, #28]	@ (80020c0 <HAL_RCC_ClockConfig+0x280>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7fe fd78 	bl	8000b9c <HAL_InitTick>
 80020ac:	4603      	mov	r3, r0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	58004000 	.word	0x58004000
 80020bc:	20000000 	.word	0x20000000
 80020c0:	20000010 	.word	0x20000010

080020c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020c4:	b590      	push	{r4, r7, lr}
 80020c6:	b087      	sub	sp, #28
 80020c8:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020d2:	f7ff f9e4 	bl	800149e <LL_RCC_GetSysClkSource>
 80020d6:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020d8:	f7ff facd 	bl	8001676 <LL_RCC_PLL_GetMainSource>
 80020dc:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d005      	beq.n	80020f0 <HAL_RCC_GetSysClockFreq+0x2c>
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	2b0c      	cmp	r3, #12
 80020e8:	d139      	bne.n	800215e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d136      	bne.n	800215e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80020f0:	f7ff f987 	bl	8001402 <LL_RCC_MSI_IsEnabledRangeSelect>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d115      	bne.n	8002126 <HAL_RCC_GetSysClockFreq+0x62>
 80020fa:	f7ff f982 	bl	8001402 <LL_RCC_MSI_IsEnabledRangeSelect>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b01      	cmp	r3, #1
 8002102:	d106      	bne.n	8002112 <HAL_RCC_GetSysClockFreq+0x4e>
 8002104:	f7ff f98d 	bl	8001422 <LL_RCC_MSI_GetRange>
 8002108:	4603      	mov	r3, r0
 800210a:	0a1b      	lsrs	r3, r3, #8
 800210c:	f003 030f 	and.w	r3, r3, #15
 8002110:	e005      	b.n	800211e <HAL_RCC_GetSysClockFreq+0x5a>
 8002112:	f7ff f991 	bl	8001438 <LL_RCC_MSI_GetRangeAfterStandby>
 8002116:	4603      	mov	r3, r0
 8002118:	0a1b      	lsrs	r3, r3, #8
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	4a36      	ldr	r2, [pc, #216]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x134>)
 8002120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002124:	e014      	b.n	8002150 <HAL_RCC_GetSysClockFreq+0x8c>
 8002126:	f7ff f96c 	bl	8001402 <LL_RCC_MSI_IsEnabledRangeSelect>
 800212a:	4603      	mov	r3, r0
 800212c:	2b01      	cmp	r3, #1
 800212e:	d106      	bne.n	800213e <HAL_RCC_GetSysClockFreq+0x7a>
 8002130:	f7ff f977 	bl	8001422 <LL_RCC_MSI_GetRange>
 8002134:	4603      	mov	r3, r0
 8002136:	091b      	lsrs	r3, r3, #4
 8002138:	f003 030f 	and.w	r3, r3, #15
 800213c:	e005      	b.n	800214a <HAL_RCC_GetSysClockFreq+0x86>
 800213e:	f7ff f97b 	bl	8001438 <LL_RCC_MSI_GetRangeAfterStandby>
 8002142:	4603      	mov	r3, r0
 8002144:	091b      	lsrs	r3, r3, #4
 8002146:	f003 030f 	and.w	r3, r3, #15
 800214a:	4a2b      	ldr	r2, [pc, #172]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x134>)
 800214c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002150:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d115      	bne.n	8002184 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800215c:	e012      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	2b04      	cmp	r3, #4
 8002162:	d102      	bne.n	800216a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002164:	4b25      	ldr	r3, [pc, #148]	@ (80021fc <HAL_RCC_GetSysClockFreq+0x138>)
 8002166:	617b      	str	r3, [r7, #20]
 8002168:	e00c      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	2b08      	cmp	r3, #8
 800216e:	d109      	bne.n	8002184 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002170:	f7ff f85a 	bl	8001228 <LL_RCC_HSE_IsEnabledDiv2>
 8002174:	4603      	mov	r3, r0
 8002176:	2b01      	cmp	r3, #1
 8002178:	d102      	bne.n	8002180 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800217a:	4b20      	ldr	r3, [pc, #128]	@ (80021fc <HAL_RCC_GetSysClockFreq+0x138>)
 800217c:	617b      	str	r3, [r7, #20]
 800217e:	e001      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002180:	4b1f      	ldr	r3, [pc, #124]	@ (8002200 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002182:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002184:	f7ff f98b 	bl	800149e <LL_RCC_GetSysClkSource>
 8002188:	4603      	mov	r3, r0
 800218a:	2b0c      	cmp	r3, #12
 800218c:	d12f      	bne.n	80021ee <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800218e:	f7ff fa72 	bl	8001676 <LL_RCC_PLL_GetMainSource>
 8002192:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b02      	cmp	r3, #2
 8002198:	d003      	beq.n	80021a2 <HAL_RCC_GetSysClockFreq+0xde>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b03      	cmp	r3, #3
 800219e:	d003      	beq.n	80021a8 <HAL_RCC_GetSysClockFreq+0xe4>
 80021a0:	e00d      	b.n	80021be <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80021a2:	4b16      	ldr	r3, [pc, #88]	@ (80021fc <HAL_RCC_GetSysClockFreq+0x138>)
 80021a4:	60fb      	str	r3, [r7, #12]
        break;
 80021a6:	e00d      	b.n	80021c4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80021a8:	f7ff f83e 	bl	8001228 <LL_RCC_HSE_IsEnabledDiv2>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d102      	bne.n	80021b8 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80021b2:	4b12      	ldr	r3, [pc, #72]	@ (80021fc <HAL_RCC_GetSysClockFreq+0x138>)
 80021b4:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80021b6:	e005      	b.n	80021c4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80021b8:	4b11      	ldr	r3, [pc, #68]	@ (8002200 <HAL_RCC_GetSysClockFreq+0x13c>)
 80021ba:	60fb      	str	r3, [r7, #12]
        break;
 80021bc:	e002      	b.n	80021c4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	60fb      	str	r3, [r7, #12]
        break;
 80021c2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80021c4:	f7ff fa35 	bl	8001632 <LL_RCC_PLL_GetN>
 80021c8:	4602      	mov	r2, r0
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	fb03 f402 	mul.w	r4, r3, r2
 80021d0:	f7ff fa46 	bl	8001660 <LL_RCC_PLL_GetDivider>
 80021d4:	4603      	mov	r3, r0
 80021d6:	091b      	lsrs	r3, r3, #4
 80021d8:	3301      	adds	r3, #1
 80021da:	fbb4 f4f3 	udiv	r4, r4, r3
 80021de:	f7ff fa34 	bl	800164a <LL_RCC_PLL_GetR>
 80021e2:	4603      	mov	r3, r0
 80021e4:	0f5b      	lsrs	r3, r3, #29
 80021e6:	3301      	adds	r3, #1
 80021e8:	fbb4 f3f3 	udiv	r3, r4, r3
 80021ec:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80021ee:	697b      	ldr	r3, [r7, #20]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	371c      	adds	r7, #28
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd90      	pop	{r4, r7, pc}
 80021f8:	08003ae8 	.word	0x08003ae8
 80021fc:	00f42400 	.word	0x00f42400
 8002200:	01e84800 	.word	0x01e84800

08002204 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002204:	b598      	push	{r3, r4, r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002208:	f7ff ff5c 	bl	80020c4 <HAL_RCC_GetSysClockFreq>
 800220c:	4604      	mov	r4, r0
 800220e:	f7ff f9b5 	bl	800157c <LL_RCC_GetAHBPrescaler>
 8002212:	4603      	mov	r3, r0
 8002214:	091b      	lsrs	r3, r3, #4
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	4a03      	ldr	r2, [pc, #12]	@ (8002228 <HAL_RCC_GetHCLKFreq+0x24>)
 800221c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002220:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002224:	4618      	mov	r0, r3
 8002226:	bd98      	pop	{r3, r4, r7, pc}
 8002228:	08003a88 	.word	0x08003a88

0800222c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800222c:	b598      	push	{r3, r4, r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002230:	f7ff ffe8 	bl	8002204 <HAL_RCC_GetHCLKFreq>
 8002234:	4604      	mov	r4, r0
 8002236:	f7ff f9b9 	bl	80015ac <LL_RCC_GetAPB1Prescaler>
 800223a:	4603      	mov	r3, r0
 800223c:	0a1b      	lsrs	r3, r3, #8
 800223e:	4a03      	ldr	r2, [pc, #12]	@ (800224c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002244:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002248:	4618      	mov	r0, r3
 800224a:	bd98      	pop	{r3, r4, r7, pc}
 800224c:	08003ac8 	.word	0x08003ac8

08002250 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002250:	b598      	push	{r3, r4, r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002254:	f7ff ffd6 	bl	8002204 <HAL_RCC_GetHCLKFreq>
 8002258:	4604      	mov	r4, r0
 800225a:	f7ff f9b2 	bl	80015c2 <LL_RCC_GetAPB2Prescaler>
 800225e:	4603      	mov	r3, r0
 8002260:	0adb      	lsrs	r3, r3, #11
 8002262:	4a03      	ldr	r2, [pc, #12]	@ (8002270 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002268:	fa24 f303 	lsr.w	r3, r4, r3
}
 800226c:	4618      	mov	r0, r3
 800226e:	bd98      	pop	{r3, r4, r7, pc}
 8002270:	08003ac8 	.word	0x08003ac8

08002274 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002274:	b590      	push	{r4, r7, lr}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	091b      	lsrs	r3, r3, #4
 8002280:	f003 030f 	and.w	r3, r3, #15
 8002284:	4a10      	ldr	r2, [pc, #64]	@ (80022c8 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8002286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800228a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800228c:	f7ff f981 	bl	8001592 <LL_RCC_GetAHB3Prescaler>
 8002290:	4603      	mov	r3, r0
 8002292:	091b      	lsrs	r3, r3, #4
 8002294:	f003 030f 	and.w	r3, r3, #15
 8002298:	4a0c      	ldr	r2, [pc, #48]	@ (80022cc <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800229a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a4:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	4a09      	ldr	r2, [pc, #36]	@ (80022d0 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80022aa:	fba2 2303 	umull	r2, r3, r2, r3
 80022ae:	0c9c      	lsrs	r4, r3, #18
 80022b0:	f7fe ff80 	bl	80011b4 <HAL_PWREx_GetVoltageRange>
 80022b4:	4603      	mov	r3, r0
 80022b6:	4619      	mov	r1, r3
 80022b8:	4620      	mov	r0, r4
 80022ba:	f000 f80b 	bl	80022d4 <RCC_SetFlashLatency>
 80022be:	4603      	mov	r3, r0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd90      	pop	{r4, r7, pc}
 80022c8:	08003ae8 	.word	0x08003ae8
 80022cc:	08003a88 	.word	0x08003a88
 80022d0:	431bde83 	.word	0x431bde83

080022d4 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b08e      	sub	sp, #56	@ 0x38
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80022de:	4a3a      	ldr	r2, [pc, #232]	@ (80023c8 <RCC_SetFlashLatency+0xf4>)
 80022e0:	f107 0320 	add.w	r3, r7, #32
 80022e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022e8:	6018      	str	r0, [r3, #0]
 80022ea:	3304      	adds	r3, #4
 80022ec:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80022ee:	4a37      	ldr	r2, [pc, #220]	@ (80023cc <RCC_SetFlashLatency+0xf8>)
 80022f0:	f107 0318 	add.w	r3, r7, #24
 80022f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022f8:	6018      	str	r0, [r3, #0]
 80022fa:	3304      	adds	r3, #4
 80022fc:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80022fe:	4a34      	ldr	r2, [pc, #208]	@ (80023d0 <RCC_SetFlashLatency+0xfc>)
 8002300:	f107 030c 	add.w	r3, r7, #12
 8002304:	ca07      	ldmia	r2, {r0, r1, r2}
 8002306:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800230a:	2300      	movs	r3, #0
 800230c:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002314:	d11b      	bne.n	800234e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002316:	2300      	movs	r3, #0
 8002318:	633b      	str	r3, [r7, #48]	@ 0x30
 800231a:	e014      	b.n	8002346 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800231c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	3338      	adds	r3, #56	@ 0x38
 8002322:	443b      	add	r3, r7
 8002324:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002328:	461a      	mov	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4293      	cmp	r3, r2
 800232e:	d807      	bhi.n	8002340 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	3338      	adds	r3, #56	@ 0x38
 8002336:	443b      	add	r3, r7
 8002338:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800233c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800233e:	e021      	b.n	8002384 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002342:	3301      	adds	r3, #1
 8002344:	633b      	str	r3, [r7, #48]	@ 0x30
 8002346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002348:	2b02      	cmp	r3, #2
 800234a:	d9e7      	bls.n	800231c <RCC_SetFlashLatency+0x48>
 800234c:	e01a      	b.n	8002384 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800234e:	2300      	movs	r3, #0
 8002350:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002352:	e014      	b.n	800237e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	3338      	adds	r3, #56	@ 0x38
 800235a:	443b      	add	r3, r7
 800235c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002360:	461a      	mov	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4293      	cmp	r3, r2
 8002366:	d807      	bhi.n	8002378 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	3338      	adds	r3, #56	@ 0x38
 800236e:	443b      	add	r3, r7
 8002370:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002374:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002376:	e005      	b.n	8002384 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800237a:	3301      	adds	r3, #1
 800237c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800237e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002380:	2b02      	cmp	r3, #2
 8002382:	d9e7      	bls.n	8002354 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002384:	4b13      	ldr	r3, [pc, #76]	@ (80023d4 <RCC_SetFlashLatency+0x100>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f023 0207 	bic.w	r2, r3, #7
 800238c:	4911      	ldr	r1, [pc, #68]	@ (80023d4 <RCC_SetFlashLatency+0x100>)
 800238e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002390:	4313      	orrs	r3, r2
 8002392:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002394:	f7fe fc4e 	bl	8000c34 <HAL_GetTick>
 8002398:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800239a:	e008      	b.n	80023ae <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800239c:	f7fe fc4a 	bl	8000c34 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e007      	b.n	80023be <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80023ae:	4b09      	ldr	r3, [pc, #36]	@ (80023d4 <RCC_SetFlashLatency+0x100>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d1ef      	bne.n	800239c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3738      	adds	r7, #56	@ 0x38
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	08003a6c 	.word	0x08003a6c
 80023cc:	08003a74 	.word	0x08003a74
 80023d0:	08003a7c 	.word	0x08003a7c
 80023d4:	58004000 	.word	0x58004000

080023d8 <LL_RCC_LSE_IsReady>:
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80023dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d101      	bne.n	80023f0 <LL_RCC_LSE_IsReady+0x18>
 80023ec:	2301      	movs	r3, #1
 80023ee:	e000      	b.n	80023f2 <LL_RCC_LSE_IsReady+0x1a>
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bc80      	pop	{r7}
 80023f8:	4770      	bx	lr

080023fa <LL_RCC_SetUSARTClockSource>:
{
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002402:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002406:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	0c1b      	lsrs	r3, r3, #16
 800240e:	43db      	mvns	r3, r3
 8002410:	401a      	ands	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	b29b      	uxth	r3, r3
 8002416:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800241a:	4313      	orrs	r3, r2
 800241c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	bc80      	pop	{r7}
 8002428:	4770      	bx	lr

0800242a <LL_RCC_SetI2SClockSource>:
{
 800242a:	b480      	push	{r7}
 800242c:	b083      	sub	sp, #12
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002432:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800243a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800243e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4313      	orrs	r3, r2
 8002446:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr

08002454 <LL_RCC_SetLPUARTClockSource>:
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800245c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002464:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002468:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4313      	orrs	r3, r2
 8002470:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	bc80      	pop	{r7}
 800247c:	4770      	bx	lr

0800247e <LL_RCC_SetI2CClockSource>:
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002486:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800248a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	091b      	lsrs	r3, r3, #4
 8002492:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002496:	43db      	mvns	r3, r3
 8002498:	401a      	ands	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	011b      	lsls	r3, r3, #4
 800249e:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80024a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024a6:	4313      	orrs	r3, r2
 80024a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr

080024b6 <LL_RCC_SetLPTIMClockSource>:
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80024be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024c2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	0c1b      	lsrs	r3, r3, #16
 80024ca:	041b      	lsls	r3, r3, #16
 80024cc:	43db      	mvns	r3, r3
 80024ce:	401a      	ands	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	041b      	lsls	r3, r3, #16
 80024d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024d8:	4313      	orrs	r3, r2
 80024da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr

080024e8 <LL_RCC_SetRNGClockSource>:
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80024f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024f8:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80024fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4313      	orrs	r3, r2
 8002504:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	bc80      	pop	{r7}
 8002510:	4770      	bx	lr

08002512 <LL_RCC_SetADCClockSource>:
{
 8002512:	b480      	push	{r7}
 8002514:	b083      	sub	sp, #12
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800251a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800251e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002522:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002526:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4313      	orrs	r3, r2
 800252e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr

0800253c <LL_RCC_SetRTCClockSource>:
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002544:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002548:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800254c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002550:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4313      	orrs	r3, r2
 8002558:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr

08002566 <LL_RCC_GetRTCClockSource>:
{
 8002566:	b480      	push	{r7}
 8002568:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800256a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800256e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002572:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8002576:	4618      	mov	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr

0800257e <LL_RCC_ForceBackupDomainReset>:
{
 800257e:	b480      	push	{r7}
 8002580:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002582:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800258a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800258e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002592:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002596:	bf00      	nop
 8002598:	46bd      	mov	sp, r7
 800259a:	bc80      	pop	{r7}
 800259c:	4770      	bx	lr

0800259e <LL_RCC_ReleaseBackupDomainReset>:
{
 800259e:	b480      	push	{r7}
 80025a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80025a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80025b6:	bf00      	nop
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr
	...

080025c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80025c8:	2300      	movs	r3, #0
 80025ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80025cc:	2300      	movs	r3, #0
 80025ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80025d0:	2300      	movs	r3, #0
 80025d2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d058      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80025e0:	f7fe fdda 	bl	8001198 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025e4:	f7fe fb26 	bl	8000c34 <HAL_GetTick>
 80025e8:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80025ea:	e009      	b.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ec:	f7fe fb22 	bl	8000c34 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d902      	bls.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	74fb      	strb	r3, [r7, #19]
        break;
 80025fe:	e006      	b.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002600:	4b7b      	ldr	r3, [pc, #492]	@ (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002608:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800260c:	d1ee      	bne.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800260e:	7cfb      	ldrb	r3, [r7, #19]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d13c      	bne.n	800268e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002614:	f7ff ffa7 	bl	8002566 <LL_RCC_GetRTCClockSource>
 8002618:	4602      	mov	r2, r0
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800261e:	429a      	cmp	r2, r3
 8002620:	d00f      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002622:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800262a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800262e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002630:	f7ff ffa5 	bl	800257e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002634:	f7ff ffb3 	bl	800259e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002638:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d014      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264c:	f7fe faf2 	bl	8000c34 <HAL_GetTick>
 8002650:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002652:	e00b      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002654:	f7fe faee 	bl	8000c34 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002662:	4293      	cmp	r3, r2
 8002664:	d902      	bls.n	800266c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	74fb      	strb	r3, [r7, #19]
            break;
 800266a:	e004      	b.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 800266c:	f7ff feb4 	bl	80023d8 <LL_RCC_LSE_IsReady>
 8002670:	4603      	mov	r3, r0
 8002672:	2b01      	cmp	r3, #1
 8002674:	d1ee      	bne.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002676:	7cfb      	ldrb	r3, [r7, #19]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d105      	bne.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff ff5b 	bl	800253c <LL_RCC_SetRTCClockSource>
 8002686:	e004      	b.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002688:	7cfb      	ldrb	r3, [r7, #19]
 800268a:	74bb      	strb	r3, [r7, #18]
 800268c:	e001      	b.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800268e:	7cfb      	ldrb	r3, [r7, #19]
 8002690:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d004      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff fea9 	bl	80023fa <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d004      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff fe9e 	bl	80023fa <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0320 	and.w	r3, r3, #32
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d004      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff fec0 	bl	8002454 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d004      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff fee6 	bl	80024b6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d004      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff fedb 	bl	80024b6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002708:	2b00      	cmp	r3, #0
 800270a:	d004      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff fed0 	bl	80024b6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800271e:	2b00      	cmp	r3, #0
 8002720:	d004      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff fea9 	bl	800247e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002734:	2b00      	cmp	r3, #0
 8002736:	d004      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff fe9e 	bl	800247e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800274a:	2b00      	cmp	r3, #0
 800274c:	d004      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff fe93 	bl	800247e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0310 	and.w	r3, r3, #16
 8002760:	2b00      	cmp	r3, #0
 8002762:	d011      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff fe5e 	bl	800242a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002776:	d107      	bne.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002778:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002782:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002786:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d010      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff fea5 	bl	80024e8 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d107      	bne.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80027a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027b4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d011      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff fea3 	bl	8002512 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027d4:	d107      	bne.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80027e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027e4:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80027e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3718      	adds	r7, #24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	58000400 	.word	0x58000400

080027f4 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80027fc:	4b06      	ldr	r3, [pc, #24]	@ (8002818 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002804:	4904      	ldr	r1, [pc, #16]	@ (8002818 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4313      	orrs	r3, r2
 800280a:	608b      	str	r3, [r1, #8]
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	bc80      	pop	{r7}
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	58000400 	.word	0x58000400

0800281c <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8002820:	4b05      	ldr	r3, [pc, #20]	@ (8002838 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8002822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002826:	4a04      	ldr	r2, [pc, #16]	@ (8002838 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8002828:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800282c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002830:	bf00      	nop
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr
 8002838:	58000400 	.word	0x58000400

0800283c <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8002840:	4b05      	ldr	r3, [pc, #20]	@ (8002858 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8002842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002846:	4a04      	ldr	r2, [pc, #16]	@ (8002858 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8002848:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800284c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002850:	bf00      	nop
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr
 8002858:	58000400 	.word	0x58000400

0800285c <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8002860:	4b03      	ldr	r3, [pc, #12]	@ (8002870 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8002862:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002866:	619a      	str	r2, [r3, #24]
}
 8002868:	bf00      	nop
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr
 8002870:	58000400 	.word	0x58000400

08002874 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8002878:	4b06      	ldr	r3, [pc, #24]	@ (8002894 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b02      	cmp	r3, #2
 8002882:	d101      	bne.n	8002888 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8002884:	2301      	movs	r3, #1
 8002886:	e000      	b.n	800288a <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	46bd      	mov	sp, r7
 800288e:	bc80      	pop	{r7}
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	58000400 	.word	0x58000400

08002898 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800289c:	4b06      	ldr	r3, [pc, #24]	@ (80028b8 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b04      	cmp	r3, #4
 80028a6:	d101      	bne.n	80028ac <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80028a8:	2301      	movs	r3, #1
 80028aa:	e000      	b.n	80028ae <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc80      	pop	{r7}
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	58000400 	.word	0x58000400

080028bc <LL_RCC_RF_DisableReset>:
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80028c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028cc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80028d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80028d4:	bf00      	nop
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr

080028dc <LL_RCC_IsRFUnderReset>:
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80028e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80028f0:	d101      	bne.n	80028f6 <LL_RCC_IsRFUnderReset+0x1a>
 80028f2:	2301      	movs	r3, #1
 80028f4:	e000      	b.n	80028f8 <LL_RCC_IsRFUnderReset+0x1c>
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr

08002900 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002908:	4b06      	ldr	r3, [pc, #24]	@ (8002924 <LL_EXTI_EnableIT_32_63+0x24>)
 800290a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800290e:	4905      	ldr	r1, [pc, #20]	@ (8002924 <LL_EXTI_EnableIT_32_63+0x24>)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4313      	orrs	r3, r2
 8002914:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	bc80      	pop	{r7}
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	58000800 	.word	0x58000800

08002928 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d103      	bne.n	800293e <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	73fb      	strb	r3, [r7, #15]
    return status;
 800293a:	7bfb      	ldrb	r3, [r7, #15]
 800293c:	e052      	b.n	80029e4 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	799b      	ldrb	r3, [r3, #6]
 8002946:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8002948:	7bbb      	ldrb	r3, [r7, #14]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d002      	beq.n	8002954 <HAL_SUBGHZ_Init+0x2c>
 800294e:	7bbb      	ldrb	r3, [r7, #14]
 8002950:	2b03      	cmp	r3, #3
 8002952:	d109      	bne.n	8002968 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7fd fed2 	bl	8000704 <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8002960:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002964:	f7ff ffcc 	bl	8002900 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8002968:	7bbb      	ldrb	r3, [r7, #14]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d126      	bne.n	80029bc <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2202      	movs	r2, #2
 8002972:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8002974:	f7ff ffa2 	bl	80028bc <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8002978:	4b1c      	ldr	r3, [pc, #112]	@ (80029ec <HAL_SUBGHZ_Init+0xc4>)
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	4613      	mov	r3, r2
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	1a9b      	subs	r3, r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	0cdb      	lsrs	r3, r3, #19
 8002986:	2264      	movs	r2, #100	@ 0x64
 8002988:	fb02 f303 	mul.w	r3, r2, r3
 800298c:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d105      	bne.n	80029a0 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	609a      	str	r2, [r3, #8]
        break;
 800299e:	e007      	b.n	80029b0 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 80029a6:	f7ff ff99 	bl	80028dc <LL_RCC_IsRFUnderReset>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1ee      	bne.n	800298e <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80029b0:	f7ff ff34 	bl	800281c <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80029b4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80029b8:	f7ff ff1c 	bl	80027f4 <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80029bc:	f7ff ff4e 	bl	800285c <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10a      	bne.n	80029dc <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 f952 	bl	8002c74 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	719a      	strb	r2, [r3, #6]

  return status;
 80029e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	20000000 	.word	0x20000000

080029f0 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	607a      	str	r2, [r7, #4]
 80029fa:	461a      	mov	r2, r3
 80029fc:	460b      	mov	r3, r1
 80029fe:	72fb      	strb	r3, [r7, #11]
 8002a00:	4613      	mov	r3, r2
 8002a02:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	799b      	ldrb	r3, [r3, #6]
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d14a      	bne.n	8002aa4 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	795b      	ldrb	r3, [r3, #5]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d101      	bne.n	8002a1a <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8002a16:	2302      	movs	r3, #2
 8002a18:	e045      	b.n	8002aa6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f000 f9f5 	bl	8002e10 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8002a26:	7afb      	ldrb	r3, [r7, #11]
 8002a28:	2b84      	cmp	r3, #132	@ 0x84
 8002a2a:	d002      	beq.n	8002a32 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8002a2c:	7afb      	ldrb	r3, [r7, #11]
 8002a2e:	2b94      	cmp	r3, #148	@ 0x94
 8002a30:	d103      	bne.n	8002a3a <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2201      	movs	r2, #1
 8002a36:	711a      	strb	r2, [r3, #4]
 8002a38:	e002      	b.n	8002a40 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002a40:	f7ff fefc 	bl	800283c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8002a44:	7afb      	ldrb	r3, [r7, #11]
 8002a46:	4619      	mov	r1, r3
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f000 f933 	bl	8002cb4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8002a4e:	2300      	movs	r3, #0
 8002a50:	82bb      	strh	r3, [r7, #20]
 8002a52:	e00a      	b.n	8002a6a <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8002a54:	8abb      	ldrh	r3, [r7, #20]
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	4413      	add	r3, r2
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f000 f928 	bl	8002cb4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8002a64:	8abb      	ldrh	r3, [r7, #20]
 8002a66:	3301      	adds	r3, #1
 8002a68:	82bb      	strh	r3, [r7, #20]
 8002a6a:	8aba      	ldrh	r2, [r7, #20]
 8002a6c:	893b      	ldrh	r3, [r7, #8]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d3f0      	bcc.n	8002a54 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002a72:	f7ff fed3 	bl	800281c <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8002a76:	7afb      	ldrb	r3, [r7, #11]
 8002a78:	2b84      	cmp	r3, #132	@ 0x84
 8002a7a:	d002      	beq.n	8002a82 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f000 f9eb 	bl	8002e58 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d002      	beq.n	8002a90 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	75fb      	strb	r3, [r7, #23]
 8002a8e:	e001      	b.n	8002a94 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8002a90:	2300      	movs	r3, #0
 8002a92:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2201      	movs	r2, #1
 8002a98:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	715a      	strb	r2, [r3, #5]

    return status;
 8002aa0:	7dfb      	ldrb	r3, [r7, #23]
 8002aa2:	e000      	b.n	8002aa6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8002aa4:	2302      	movs	r3, #2
  }
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b088      	sub	sp, #32
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	60f8      	str	r0, [r7, #12]
 8002ab6:	607a      	str	r2, [r7, #4]
 8002ab8:	461a      	mov	r2, r3
 8002aba:	460b      	mov	r3, r1
 8002abc:	72fb      	strb	r3, [r7, #11]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	799b      	ldrb	r3, [r3, #6]
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d13d      	bne.n	8002b4c <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	795b      	ldrb	r3, [r3, #5]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d101      	bne.n	8002adc <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8002ad8:	2302      	movs	r3, #2
 8002ada:	e038      	b.n	8002b4e <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 f994 	bl	8002e10 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002ae8:	f7ff fea8 	bl	800283c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8002aec:	7afb      	ldrb	r3, [r7, #11]
 8002aee:	4619      	mov	r1, r3
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f000 f8df 	bl	8002cb4 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8002af6:	2100      	movs	r1, #0
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 f8db 	bl	8002cb4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8002afe:	2300      	movs	r3, #0
 8002b00:	82fb      	strh	r3, [r7, #22]
 8002b02:	e009      	b.n	8002b18 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8002b04:	69b9      	ldr	r1, [r7, #24]
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 f92a 	bl	8002d60 <SUBGHZSPI_Receive>
      pData++;
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8002b12:	8afb      	ldrh	r3, [r7, #22]
 8002b14:	3301      	adds	r3, #1
 8002b16:	82fb      	strh	r3, [r7, #22]
 8002b18:	8afa      	ldrh	r2, [r7, #22]
 8002b1a:	893b      	ldrh	r3, [r7, #8]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d3f1      	bcc.n	8002b04 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002b20:	f7ff fe7c 	bl	800281c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f000 f997 	bl	8002e58 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d002      	beq.n	8002b38 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	77fb      	strb	r3, [r7, #31]
 8002b36:	e001      	b.n	8002b3c <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	715a      	strb	r2, [r3, #5]

    return status;
 8002b48:	7ffb      	ldrb	r3, [r7, #31]
 8002b4a:	e000      	b.n	8002b4e <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002b4c:	2302      	movs	r3, #2
  }
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3720      	adds	r7, #32
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b084      	sub	sp, #16
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8002b5e:	2300      	movs	r3, #0
 8002b60:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8002b62:	f107 020c 	add.w	r2, r7, #12
 8002b66:	2302      	movs	r3, #2
 8002b68:	2112      	movs	r1, #18
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7ff ff9f 	bl	8002aae <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8002b70:	7b3b      	ldrb	r3, [r7, #12]
 8002b72:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8002b74:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b78:	021b      	lsls	r3, r3, #8
 8002b7a:	b21a      	sxth	r2, r3
 8002b7c:	7b7b      	ldrb	r3, [r7, #13]
 8002b7e:	b21b      	sxth	r3, r3
 8002b80:	4313      	orrs	r3, r2
 8002b82:	b21b      	sxth	r3, r3
 8002b84:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8002b86:	f107 020c 	add.w	r2, r7, #12
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	2102      	movs	r1, #2
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7ff ff2e 	bl	80029f0 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8002b94:	89fb      	ldrh	r3, [r7, #14]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d002      	beq.n	8002ba4 <HAL_SUBGHZ_IRQHandler+0x4e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7fd ff3c 	bl	8000a1c <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8002ba4:	89fb      	ldrh	r3, [r7, #14]
 8002ba6:	085b      	lsrs	r3, r3, #1
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d008      	beq.n	8002bc2 <HAL_SUBGHZ_IRQHandler+0x6c>
      (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) == RESET))
 8002bb0:	89fb      	ldrh	r3, [r7, #14]
 8002bb2:	099b      	lsrs	r3, r3, #6
 8002bb4:	f003 0301 	and.w	r3, r3, #1
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d102      	bne.n	8002bc2 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7fd ff3b 	bl	8000a38 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8002bc2:	89fb      	ldrh	r3, [r7, #14]
 8002bc4:	089b      	lsrs	r3, r3, #2
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d002      	beq.n	8002bd4 <HAL_SUBGHZ_IRQHandler+0x7e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7fd ff8a 	bl	8000ae8 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8002bd4:	89fb      	ldrh	r3, [r7, #14]
 8002bd6:	08db      	lsrs	r3, r3, #3
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d002      	beq.n	8002be6 <HAL_SUBGHZ_IRQHandler+0x90>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7fd ff8f 	bl	8000b04 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8002be6:	89fb      	ldrh	r3, [r7, #14]
 8002be8:	091b      	lsrs	r3, r3, #4
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d002      	beq.n	8002bf8 <HAL_SUBGHZ_IRQHandler+0xa2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7fd ff94 	bl	8000b20 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8002bf8:	89fb      	ldrh	r3, [r7, #14]
 8002bfa:	095b      	lsrs	r3, r3, #5
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d002      	beq.n	8002c0a <HAL_SUBGHZ_IRQHandler+0xb4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f7fd ff61 	bl	8000acc <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8002c0a:	89fb      	ldrh	r3, [r7, #14]
 8002c0c:	099b      	lsrs	r3, r3, #6
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d002      	beq.n	8002c1c <HAL_SUBGHZ_IRQHandler+0xc6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7fd ff1c 	bl	8000a54 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8002c1c:	89fb      	ldrh	r3, [r7, #14]
 8002c1e:	09db      	lsrs	r3, r3, #7
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00e      	beq.n	8002c46 <HAL_SUBGHZ_IRQHandler+0xf0>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8002c28:	89fb      	ldrh	r3, [r7, #14]
 8002c2a:	0a1b      	lsrs	r3, r3, #8
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d004      	beq.n	8002c3e <HAL_SUBGHZ_IRQHandler+0xe8>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8002c34:	2101      	movs	r1, #1
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7fd ff1a 	bl	8000a70 <HAL_SUBGHZ_CADStatusCallback>
 8002c3c:	e003      	b.n	8002c46 <HAL_SUBGHZ_IRQHandler+0xf0>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8002c3e:	2100      	movs	r1, #0
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f7fd ff15 	bl	8000a70 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8002c46:	89fb      	ldrh	r3, [r7, #14]
 8002c48:	0a5b      	lsrs	r3, r3, #9
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d002      	beq.n	8002c58 <HAL_SUBGHZ_IRQHandler+0x102>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7fd ff2a 	bl	8000aac <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8002c58:	89fb      	ldrh	r3, [r7, #14]
 8002c5a:	0b9b      	lsrs	r3, r3, #14
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d002      	beq.n	8002c6a <HAL_SUBGHZ_IRQHandler+0x114>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f7fd ff69 	bl	8000b3c <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8002c6a:	bf00      	nop
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
	...

08002c74 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8002c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002cb0 <SUBGHZSPI_Init+0x3c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a0b      	ldr	r2, [pc, #44]	@ (8002cb0 <SUBGHZSPI_Init+0x3c>)
 8002c82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c86:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8002c88:	4a09      	ldr	r2, [pc, #36]	@ (8002cb0 <SUBGHZSPI_Init+0x3c>)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8002c90:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8002c92:	4b07      	ldr	r3, [pc, #28]	@ (8002cb0 <SUBGHZSPI_Init+0x3c>)
 8002c94:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8002c98:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8002c9a:	4b05      	ldr	r3, [pc, #20]	@ (8002cb0 <SUBGHZSPI_Init+0x3c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a04      	ldr	r2, [pc, #16]	@ (8002cb0 <SUBGHZSPI_Init+0x3c>)
 8002ca0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ca4:	6013      	str	r3, [r2, #0]
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bc80      	pop	{r7}
 8002cae:	4770      	bx	lr
 8002cb0:	58010000 	.word	0x58010000

08002cb4 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b087      	sub	sp, #28
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8002cc4:	4b23      	ldr	r3, [pc, #140]	@ (8002d54 <SUBGHZSPI_Transmit+0xa0>)
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	1a9b      	subs	r3, r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	0cdb      	lsrs	r3, r3, #19
 8002cd2:	2264      	movs	r2, #100	@ 0x64
 8002cd4:	fb02 f303 	mul.w	r3, r2, r3
 8002cd8:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d105      	bne.n	8002cec <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	609a      	str	r2, [r3, #8]
      break;
 8002cea:	e008      	b.n	8002cfe <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8002cf2:	4b19      	ldr	r3, [pc, #100]	@ (8002d58 <SUBGHZSPI_Transmit+0xa4>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d1ed      	bne.n	8002cda <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8002cfe:	4b17      	ldr	r3, [pc, #92]	@ (8002d5c <SUBGHZSPI_Transmit+0xa8>)
 8002d00:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	78fa      	ldrb	r2, [r7, #3]
 8002d06:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8002d08:	4b12      	ldr	r3, [pc, #72]	@ (8002d54 <SUBGHZSPI_Transmit+0xa0>)
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	1a9b      	subs	r3, r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	0cdb      	lsrs	r3, r3, #19
 8002d16:	2264      	movs	r2, #100	@ 0x64
 8002d18:	fb02 f303 	mul.w	r3, r2, r3
 8002d1c:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d105      	bne.n	8002d30 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	609a      	str	r2, [r3, #8]
      break;
 8002d2e:	e008      	b.n	8002d42 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8002d36:	4b08      	ldr	r3, [pc, #32]	@ (8002d58 <SUBGHZSPI_Transmit+0xa4>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d1ed      	bne.n	8002d1e <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8002d42:	4b05      	ldr	r3, [pc, #20]	@ (8002d58 <SUBGHZSPI_Transmit+0xa4>)
 8002d44:	68db      	ldr	r3, [r3, #12]

  return status;
 8002d46:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	371c      	adds	r7, #28
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bc80      	pop	{r7}
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	20000000 	.word	0x20000000
 8002d58:	58010000 	.word	0x58010000
 8002d5c:	5801000c 	.word	0x5801000c

08002d60 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b087      	sub	sp, #28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8002d6e:	4b25      	ldr	r3, [pc, #148]	@ (8002e04 <SUBGHZSPI_Receive+0xa4>)
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	4613      	mov	r3, r2
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	1a9b      	subs	r3, r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	0cdb      	lsrs	r3, r3, #19
 8002d7c:	2264      	movs	r2, #100	@ 0x64
 8002d7e:	fb02 f303 	mul.w	r3, r2, r3
 8002d82:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d105      	bne.n	8002d96 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	609a      	str	r2, [r3, #8]
      break;
 8002d94:	e008      	b.n	8002da8 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8002d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8002e08 <SUBGHZSPI_Receive+0xa8>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d1ed      	bne.n	8002d84 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8002da8:	4b18      	ldr	r3, [pc, #96]	@ (8002e0c <SUBGHZSPI_Receive+0xac>)
 8002daa:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	22ff      	movs	r2, #255	@ 0xff
 8002db0:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8002db2:	4b14      	ldr	r3, [pc, #80]	@ (8002e04 <SUBGHZSPI_Receive+0xa4>)
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	4613      	mov	r3, r2
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	1a9b      	subs	r3, r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	0cdb      	lsrs	r3, r3, #19
 8002dc0:	2264      	movs	r2, #100	@ 0x64
 8002dc2:	fb02 f303 	mul.w	r3, r2, r3
 8002dc6:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d105      	bne.n	8002dda <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	609a      	str	r2, [r3, #8]
      break;
 8002dd8:	e008      	b.n	8002dec <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8002de0:	4b09      	ldr	r3, [pc, #36]	@ (8002e08 <SUBGHZSPI_Receive+0xa8>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d1ed      	bne.n	8002dc8 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8002dec:	4b06      	ldr	r3, [pc, #24]	@ (8002e08 <SUBGHZSPI_Receive+0xa8>)
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	701a      	strb	r2, [r3, #0]

  return status;
 8002df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	371c      	adds	r7, #28
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bc80      	pop	{r7}
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	20000000 	.word	0x20000000
 8002e08:	58010000 	.word	0x58010000
 8002e0c:	5801000c 	.word	0x5801000c

08002e10 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	791b      	ldrb	r3, [r3, #4]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d111      	bne.n	8002e44 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8002e20:	4b0c      	ldr	r3, [pc, #48]	@ (8002e54 <SUBGHZ_CheckDeviceReady+0x44>)
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	4613      	mov	r3, r2
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	4413      	add	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	0c1b      	lsrs	r3, r3, #16
 8002e2e:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002e30:	f7ff fd04 	bl	800283c <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	3b01      	subs	r3, #1
 8002e38:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1f9      	bne.n	8002e34 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002e40:	f7ff fcec 	bl	800281c <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 f807 	bl	8002e58 <SUBGHZ_WaitOnBusy>
 8002e4a:	4603      	mov	r3, r0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20000000 	.word	0x20000000

08002e58 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8002e60:	2300      	movs	r3, #0
 8002e62:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8002e64:	4b12      	ldr	r3, [pc, #72]	@ (8002eb0 <SUBGHZ_WaitOnBusy+0x58>)
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	4413      	add	r3, r2
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	0d1b      	lsrs	r3, r3, #20
 8002e72:	2264      	movs	r2, #100	@ 0x64
 8002e74:	fb02 f303 	mul.w	r3, r2, r3
 8002e78:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8002e7a:	f7ff fd0d 	bl	8002898 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8002e7e:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d105      	bne.n	8002e92 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	609a      	str	r2, [r3, #8]
      break;
 8002e90:	e009      	b.n	8002ea6 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	3b01      	subs	r3, #1
 8002e96:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8002e98:	f7ff fcec 	bl	8002874 <LL_PWR_IsActiveFlag_RFBUSYS>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d0e9      	beq.n	8002e7a <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8002ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	20000000 	.word	0x20000000

08002eb4 <LL_RCC_GetUSARTClockSource>:
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8002ebc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ec0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	401a      	ands	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	041b      	lsls	r3, r3, #16
 8002ecc:	4313      	orrs	r3, r2
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bc80      	pop	{r7}
 8002ed6:	4770      	bx	lr

08002ed8 <LL_RCC_GetLPUARTClockSource>:
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002ee0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ee4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4013      	ands	r3, r2
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bc80      	pop	{r7}
 8002ef4:	4770      	bx	lr

08002ef6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b082      	sub	sp, #8
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e042      	b.n	8002f8e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d106      	bne.n	8002f20 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7fd fc88 	bl	8000830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2224      	movs	r2, #36	@ 0x24
 8002f24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 0201 	bic.w	r2, r2, #1
 8002f36:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d002      	beq.n	8002f46 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 fa9d 	bl	8003480 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f826 	bl	8002f98 <UART_SetConfig>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d101      	bne.n	8002f56 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e01b      	b.n	8002f8e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f64:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f74:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f042 0201 	orr.w	r2, r2, #1
 8002f84:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 fb1b 	bl	80035c2 <UART_CheckIdleState>
 8002f8c:	4603      	mov	r3, r0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
	...

08002f98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f9c:	b08c      	sub	sp, #48	@ 0x30
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	69db      	ldr	r3, [r3, #28]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	4b94      	ldr	r3, [pc, #592]	@ (8003218 <UART_SetConfig+0x280>)
 8002fc8:	4013      	ands	r3, r2
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	6812      	ldr	r2, [r2, #0]
 8002fce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002fd0:	430b      	orrs	r3, r1
 8002fd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a89      	ldr	r2, [pc, #548]	@ (800321c <UART_SetConfig+0x284>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d004      	beq.n	8003004 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003000:	4313      	orrs	r3, r2
 8003002:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800300e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	6812      	ldr	r2, [r2, #0]
 8003016:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003018:	430b      	orrs	r3, r1
 800301a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003022:	f023 010f 	bic.w	r1, r3, #15
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a7a      	ldr	r2, [pc, #488]	@ (8003220 <UART_SetConfig+0x288>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d127      	bne.n	800308c <UART_SetConfig+0xf4>
 800303c:	2003      	movs	r0, #3
 800303e:	f7ff ff39 	bl	8002eb4 <LL_RCC_GetUSARTClockSource>
 8003042:	4603      	mov	r3, r0
 8003044:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8003048:	2b03      	cmp	r3, #3
 800304a:	d81b      	bhi.n	8003084 <UART_SetConfig+0xec>
 800304c:	a201      	add	r2, pc, #4	@ (adr r2, 8003054 <UART_SetConfig+0xbc>)
 800304e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003052:	bf00      	nop
 8003054:	08003065 	.word	0x08003065
 8003058:	08003075 	.word	0x08003075
 800305c:	0800306d 	.word	0x0800306d
 8003060:	0800307d 	.word	0x0800307d
 8003064:	2301      	movs	r3, #1
 8003066:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800306a:	e080      	b.n	800316e <UART_SetConfig+0x1d6>
 800306c:	2302      	movs	r3, #2
 800306e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003072:	e07c      	b.n	800316e <UART_SetConfig+0x1d6>
 8003074:	2304      	movs	r3, #4
 8003076:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800307a:	e078      	b.n	800316e <UART_SetConfig+0x1d6>
 800307c:	2308      	movs	r3, #8
 800307e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003082:	e074      	b.n	800316e <UART_SetConfig+0x1d6>
 8003084:	2310      	movs	r3, #16
 8003086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800308a:	e070      	b.n	800316e <UART_SetConfig+0x1d6>
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a64      	ldr	r2, [pc, #400]	@ (8003224 <UART_SetConfig+0x28c>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d138      	bne.n	8003108 <UART_SetConfig+0x170>
 8003096:	200c      	movs	r0, #12
 8003098:	f7ff ff0c 	bl	8002eb4 <LL_RCC_GetUSARTClockSource>
 800309c:	4603      	mov	r3, r0
 800309e:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 80030a2:	2b0c      	cmp	r3, #12
 80030a4:	d82c      	bhi.n	8003100 <UART_SetConfig+0x168>
 80030a6:	a201      	add	r2, pc, #4	@ (adr r2, 80030ac <UART_SetConfig+0x114>)
 80030a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ac:	080030e1 	.word	0x080030e1
 80030b0:	08003101 	.word	0x08003101
 80030b4:	08003101 	.word	0x08003101
 80030b8:	08003101 	.word	0x08003101
 80030bc:	080030f1 	.word	0x080030f1
 80030c0:	08003101 	.word	0x08003101
 80030c4:	08003101 	.word	0x08003101
 80030c8:	08003101 	.word	0x08003101
 80030cc:	080030e9 	.word	0x080030e9
 80030d0:	08003101 	.word	0x08003101
 80030d4:	08003101 	.word	0x08003101
 80030d8:	08003101 	.word	0x08003101
 80030dc:	080030f9 	.word	0x080030f9
 80030e0:	2300      	movs	r3, #0
 80030e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030e6:	e042      	b.n	800316e <UART_SetConfig+0x1d6>
 80030e8:	2302      	movs	r3, #2
 80030ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030ee:	e03e      	b.n	800316e <UART_SetConfig+0x1d6>
 80030f0:	2304      	movs	r3, #4
 80030f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030f6:	e03a      	b.n	800316e <UART_SetConfig+0x1d6>
 80030f8:	2308      	movs	r3, #8
 80030fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030fe:	e036      	b.n	800316e <UART_SetConfig+0x1d6>
 8003100:	2310      	movs	r3, #16
 8003102:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003106:	e032      	b.n	800316e <UART_SetConfig+0x1d6>
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a43      	ldr	r2, [pc, #268]	@ (800321c <UART_SetConfig+0x284>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d12a      	bne.n	8003168 <UART_SetConfig+0x1d0>
 8003112:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8003116:	f7ff fedf 	bl	8002ed8 <LL_RCC_GetLPUARTClockSource>
 800311a:	4603      	mov	r3, r0
 800311c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003120:	d01a      	beq.n	8003158 <UART_SetConfig+0x1c0>
 8003122:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003126:	d81b      	bhi.n	8003160 <UART_SetConfig+0x1c8>
 8003128:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800312c:	d00c      	beq.n	8003148 <UART_SetConfig+0x1b0>
 800312e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003132:	d815      	bhi.n	8003160 <UART_SetConfig+0x1c8>
 8003134:	2b00      	cmp	r3, #0
 8003136:	d003      	beq.n	8003140 <UART_SetConfig+0x1a8>
 8003138:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800313c:	d008      	beq.n	8003150 <UART_SetConfig+0x1b8>
 800313e:	e00f      	b.n	8003160 <UART_SetConfig+0x1c8>
 8003140:	2300      	movs	r3, #0
 8003142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003146:	e012      	b.n	800316e <UART_SetConfig+0x1d6>
 8003148:	2302      	movs	r3, #2
 800314a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800314e:	e00e      	b.n	800316e <UART_SetConfig+0x1d6>
 8003150:	2304      	movs	r3, #4
 8003152:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003156:	e00a      	b.n	800316e <UART_SetConfig+0x1d6>
 8003158:	2308      	movs	r3, #8
 800315a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800315e:	e006      	b.n	800316e <UART_SetConfig+0x1d6>
 8003160:	2310      	movs	r3, #16
 8003162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003166:	e002      	b.n	800316e <UART_SetConfig+0x1d6>
 8003168:	2310      	movs	r3, #16
 800316a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a2a      	ldr	r2, [pc, #168]	@ (800321c <UART_SetConfig+0x284>)
 8003174:	4293      	cmp	r3, r2
 8003176:	f040 80a4 	bne.w	80032c2 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800317a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800317e:	2b08      	cmp	r3, #8
 8003180:	d823      	bhi.n	80031ca <UART_SetConfig+0x232>
 8003182:	a201      	add	r2, pc, #4	@ (adr r2, 8003188 <UART_SetConfig+0x1f0>)
 8003184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003188:	080031ad 	.word	0x080031ad
 800318c:	080031cb 	.word	0x080031cb
 8003190:	080031b5 	.word	0x080031b5
 8003194:	080031cb 	.word	0x080031cb
 8003198:	080031bb 	.word	0x080031bb
 800319c:	080031cb 	.word	0x080031cb
 80031a0:	080031cb 	.word	0x080031cb
 80031a4:	080031cb 	.word	0x080031cb
 80031a8:	080031c3 	.word	0x080031c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031ac:	f7ff f83e 	bl	800222c <HAL_RCC_GetPCLK1Freq>
 80031b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80031b2:	e010      	b.n	80031d6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031b4:	4b1c      	ldr	r3, [pc, #112]	@ (8003228 <UART_SetConfig+0x290>)
 80031b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80031b8:	e00d      	b.n	80031d6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ba:	f7fe ff83 	bl	80020c4 <HAL_RCC_GetSysClockFreq>
 80031be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80031c0:	e009      	b.n	80031d6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80031c8:	e005      	b.n	80031d6 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80031d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80031d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 8137 	beq.w	800344c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e2:	4a12      	ldr	r2, [pc, #72]	@ (800322c <UART_SetConfig+0x294>)
 80031e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031e8:	461a      	mov	r2, r3
 80031ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80031f0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	4413      	add	r3, r2
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d305      	bcc.n	800320e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	429a      	cmp	r2, r3
 800320c:	d910      	bls.n	8003230 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003214:	e11a      	b.n	800344c <UART_SetConfig+0x4b4>
 8003216:	bf00      	nop
 8003218:	cfff69f3 	.word	0xcfff69f3
 800321c:	40008000 	.word	0x40008000
 8003220:	40013800 	.word	0x40013800
 8003224:	40004400 	.word	0x40004400
 8003228:	00f42400 	.word	0x00f42400
 800322c:	08003b30 	.word	0x08003b30
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003232:	2200      	movs	r2, #0
 8003234:	60bb      	str	r3, [r7, #8]
 8003236:	60fa      	str	r2, [r7, #12]
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323c:	4a8e      	ldr	r2, [pc, #568]	@ (8003478 <UART_SetConfig+0x4e0>)
 800323e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003242:	b29b      	uxth	r3, r3
 8003244:	2200      	movs	r2, #0
 8003246:	603b      	str	r3, [r7, #0]
 8003248:	607a      	str	r2, [r7, #4]
 800324a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800324e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003252:	f7fc ff91 	bl	8000178 <__aeabi_uldivmod>
 8003256:	4602      	mov	r2, r0
 8003258:	460b      	mov	r3, r1
 800325a:	4610      	mov	r0, r2
 800325c:	4619      	mov	r1, r3
 800325e:	f04f 0200 	mov.w	r2, #0
 8003262:	f04f 0300 	mov.w	r3, #0
 8003266:	020b      	lsls	r3, r1, #8
 8003268:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800326c:	0202      	lsls	r2, r0, #8
 800326e:	6979      	ldr	r1, [r7, #20]
 8003270:	6849      	ldr	r1, [r1, #4]
 8003272:	0849      	lsrs	r1, r1, #1
 8003274:	2000      	movs	r0, #0
 8003276:	460c      	mov	r4, r1
 8003278:	4605      	mov	r5, r0
 800327a:	eb12 0804 	adds.w	r8, r2, r4
 800327e:	eb43 0905 	adc.w	r9, r3, r5
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	469a      	mov	sl, r3
 800328a:	4693      	mov	fp, r2
 800328c:	4652      	mov	r2, sl
 800328e:	465b      	mov	r3, fp
 8003290:	4640      	mov	r0, r8
 8003292:	4649      	mov	r1, r9
 8003294:	f7fc ff70 	bl	8000178 <__aeabi_uldivmod>
 8003298:	4602      	mov	r2, r0
 800329a:	460b      	mov	r3, r1
 800329c:	4613      	mov	r3, r2
 800329e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80032a0:	6a3b      	ldr	r3, [r7, #32]
 80032a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032a6:	d308      	bcc.n	80032ba <UART_SetConfig+0x322>
 80032a8:	6a3b      	ldr	r3, [r7, #32]
 80032aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032ae:	d204      	bcs.n	80032ba <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6a3a      	ldr	r2, [r7, #32]
 80032b6:	60da      	str	r2, [r3, #12]
 80032b8:	e0c8      	b.n	800344c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80032c0:	e0c4      	b.n	800344c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032ca:	d167      	bne.n	800339c <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80032cc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80032d0:	2b08      	cmp	r3, #8
 80032d2:	d828      	bhi.n	8003326 <UART_SetConfig+0x38e>
 80032d4:	a201      	add	r2, pc, #4	@ (adr r2, 80032dc <UART_SetConfig+0x344>)
 80032d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032da:	bf00      	nop
 80032dc:	08003301 	.word	0x08003301
 80032e0:	08003309 	.word	0x08003309
 80032e4:	08003311 	.word	0x08003311
 80032e8:	08003327 	.word	0x08003327
 80032ec:	08003317 	.word	0x08003317
 80032f0:	08003327 	.word	0x08003327
 80032f4:	08003327 	.word	0x08003327
 80032f8:	08003327 	.word	0x08003327
 80032fc:	0800331f 	.word	0x0800331f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003300:	f7fe ff94 	bl	800222c <HAL_RCC_GetPCLK1Freq>
 8003304:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003306:	e014      	b.n	8003332 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003308:	f7fe ffa2 	bl	8002250 <HAL_RCC_GetPCLK2Freq>
 800330c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800330e:	e010      	b.n	8003332 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003310:	4b5a      	ldr	r3, [pc, #360]	@ (800347c <UART_SetConfig+0x4e4>)
 8003312:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003314:	e00d      	b.n	8003332 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003316:	f7fe fed5 	bl	80020c4 <HAL_RCC_GetSysClockFreq>
 800331a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800331c:	e009      	b.n	8003332 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800331e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003322:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003324:	e005      	b.n	8003332 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8003326:	2300      	movs	r3, #0
 8003328:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003330:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 8089 	beq.w	800344c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333e:	4a4e      	ldr	r2, [pc, #312]	@ (8003478 <UART_SetConfig+0x4e0>)
 8003340:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003344:	461a      	mov	r2, r3
 8003346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003348:	fbb3 f3f2 	udiv	r3, r3, r2
 800334c:	005a      	lsls	r2, r3, #1
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	085b      	lsrs	r3, r3, #1
 8003354:	441a      	add	r2, r3
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	fbb2 f3f3 	udiv	r3, r2, r3
 800335e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003360:	6a3b      	ldr	r3, [r7, #32]
 8003362:	2b0f      	cmp	r3, #15
 8003364:	d916      	bls.n	8003394 <UART_SetConfig+0x3fc>
 8003366:	6a3b      	ldr	r3, [r7, #32]
 8003368:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800336c:	d212      	bcs.n	8003394 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800336e:	6a3b      	ldr	r3, [r7, #32]
 8003370:	b29b      	uxth	r3, r3
 8003372:	f023 030f 	bic.w	r3, r3, #15
 8003376:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	085b      	lsrs	r3, r3, #1
 800337c:	b29b      	uxth	r3, r3
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	b29a      	uxth	r2, r3
 8003384:	8bfb      	ldrh	r3, [r7, #30]
 8003386:	4313      	orrs	r3, r2
 8003388:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	8bfa      	ldrh	r2, [r7, #30]
 8003390:	60da      	str	r2, [r3, #12]
 8003392:	e05b      	b.n	800344c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800339a:	e057      	b.n	800344c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800339c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d828      	bhi.n	80033f6 <UART_SetConfig+0x45e>
 80033a4:	a201      	add	r2, pc, #4	@ (adr r2, 80033ac <UART_SetConfig+0x414>)
 80033a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033aa:	bf00      	nop
 80033ac:	080033d1 	.word	0x080033d1
 80033b0:	080033d9 	.word	0x080033d9
 80033b4:	080033e1 	.word	0x080033e1
 80033b8:	080033f7 	.word	0x080033f7
 80033bc:	080033e7 	.word	0x080033e7
 80033c0:	080033f7 	.word	0x080033f7
 80033c4:	080033f7 	.word	0x080033f7
 80033c8:	080033f7 	.word	0x080033f7
 80033cc:	080033ef 	.word	0x080033ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033d0:	f7fe ff2c 	bl	800222c <HAL_RCC_GetPCLK1Freq>
 80033d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80033d6:	e014      	b.n	8003402 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033d8:	f7fe ff3a 	bl	8002250 <HAL_RCC_GetPCLK2Freq>
 80033dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80033de:	e010      	b.n	8003402 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033e0:	4b26      	ldr	r3, [pc, #152]	@ (800347c <UART_SetConfig+0x4e4>)
 80033e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80033e4:	e00d      	b.n	8003402 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033e6:	f7fe fe6d 	bl	80020c4 <HAL_RCC_GetSysClockFreq>
 80033ea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80033ec:	e009      	b.n	8003402 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80033f4:	e005      	b.n	8003402 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003400:	bf00      	nop
    }

    if (pclk != 0U)
 8003402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003404:	2b00      	cmp	r3, #0
 8003406:	d021      	beq.n	800344c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340c:	4a1a      	ldr	r2, [pc, #104]	@ (8003478 <UART_SetConfig+0x4e0>)
 800340e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003412:	461a      	mov	r2, r3
 8003414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003416:	fbb3 f2f2 	udiv	r2, r3, r2
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	085b      	lsrs	r3, r3, #1
 8003420:	441a      	add	r2, r3
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	fbb2 f3f3 	udiv	r3, r2, r3
 800342a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800342c:	6a3b      	ldr	r3, [r7, #32]
 800342e:	2b0f      	cmp	r3, #15
 8003430:	d909      	bls.n	8003446 <UART_SetConfig+0x4ae>
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003438:	d205      	bcs.n	8003446 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800343a:	6a3b      	ldr	r3, [r7, #32]
 800343c:	b29a      	uxth	r2, r3
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	60da      	str	r2, [r3, #12]
 8003444:	e002      	b.n	800344c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	2201      	movs	r2, #1
 8003450:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	2201      	movs	r2, #1
 8003458:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	2200      	movs	r2, #0
 8003460:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	2200      	movs	r2, #0
 8003466:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003468:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800346c:	4618      	mov	r0, r3
 800346e:	3730      	adds	r7, #48	@ 0x30
 8003470:	46bd      	mov	sp, r7
 8003472:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003476:	bf00      	nop
 8003478:	08003b30 	.word	0x08003b30
 800347c:	00f42400 	.word	0x00f42400

08003480 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800348c:	f003 0308 	and.w	r3, r3, #8
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00a      	beq.n	80034aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00a      	beq.n	80034cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00a      	beq.n	80034ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f2:	f003 0304 	and.w	r3, r3, #4
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00a      	beq.n	8003510 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003514:	f003 0310 	and.w	r3, r3, #16
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00a      	beq.n	8003532 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003536:	f003 0320 	and.w	r3, r3, #32
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00a      	beq.n	8003554 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003558:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800355c:	2b00      	cmp	r3, #0
 800355e:	d01a      	beq.n	8003596 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800357a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800357e:	d10a      	bne.n	8003596 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00a      	beq.n	80035b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	605a      	str	r2, [r3, #4]
  }
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	bc80      	pop	{r7}
 80035c0:	4770      	bx	lr

080035c2 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b086      	sub	sp, #24
 80035c6:	af02      	add	r7, sp, #8
 80035c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035d2:	f7fd fb2f 	bl	8000c34 <HAL_GetTick>
 80035d6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0308 	and.w	r3, r3, #8
 80035e2:	2b08      	cmp	r3, #8
 80035e4:	d10e      	bne.n	8003604 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035e6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 f832 	bl	800365e <UART_WaitOnFlagUntilTimeout>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e028      	b.n	8003656 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0304 	and.w	r3, r3, #4
 800360e:	2b04      	cmp	r3, #4
 8003610:	d10e      	bne.n	8003630 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003612:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 f81c 	bl	800365e <UART_WaitOnFlagUntilTimeout>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e012      	b.n	8003656 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2220      	movs	r2, #32
 8003634:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2220      	movs	r2, #32
 800363c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b09c      	sub	sp, #112	@ 0x70
 8003662:	af00      	add	r7, sp, #0
 8003664:	60f8      	str	r0, [r7, #12]
 8003666:	60b9      	str	r1, [r7, #8]
 8003668:	603b      	str	r3, [r7, #0]
 800366a:	4613      	mov	r3, r2
 800366c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800366e:	e0af      	b.n	80037d0 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003670:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003676:	f000 80ab 	beq.w	80037d0 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800367a:	f7fd fadb 	bl	8000c34 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003686:	429a      	cmp	r2, r3
 8003688:	d302      	bcc.n	8003690 <UART_WaitOnFlagUntilTimeout+0x32>
 800368a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800368c:	2b00      	cmp	r3, #0
 800368e:	d140      	bne.n	8003712 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003696:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003698:	e853 3f00 	ldrex	r3, [r3]
 800369c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800369e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036a0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80036a4:	667b      	str	r3, [r7, #100]	@ 0x64
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	461a      	mov	r2, r3
 80036ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80036ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80036b0:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80036b4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80036b6:	e841 2300 	strex	r3, r2, [r1]
 80036ba:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80036bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1e6      	bne.n	8003690 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	3308      	adds	r3, #8
 80036c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036cc:	e853 3f00 	ldrex	r3, [r3]
 80036d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80036d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036d4:	f023 0301 	bic.w	r3, r3, #1
 80036d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	3308      	adds	r3, #8
 80036e0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80036e2:	64ba      	str	r2, [r7, #72]	@ 0x48
 80036e4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80036e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036ea:	e841 2300 	strex	r3, r2, [r1]
 80036ee:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80036f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1e5      	bne.n	80036c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2220      	movs	r2, #32
 80036fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2220      	movs	r2, #32
 8003702:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e06f      	b.n	80037f2 <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	2b00      	cmp	r3, #0
 800371e:	d057      	beq.n	80037d0 <UART_WaitOnFlagUntilTimeout+0x172>
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	2b80      	cmp	r3, #128	@ 0x80
 8003724:	d054      	beq.n	80037d0 <UART_WaitOnFlagUntilTimeout+0x172>
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	2b40      	cmp	r3, #64	@ 0x40
 800372a:	d051      	beq.n	80037d0 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003736:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800373a:	d149      	bne.n	80037d0 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003744:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800374e:	e853 3f00 	ldrex	r3, [r3]
 8003752:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003756:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800375a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	461a      	mov	r2, r3
 8003762:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003764:	637b      	str	r3, [r7, #52]	@ 0x34
 8003766:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003768:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800376a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800376c:	e841 2300 	strex	r3, r2, [r1]
 8003770:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1e6      	bne.n	8003746 <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	3308      	adds	r3, #8
 800377e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	e853 3f00 	ldrex	r3, [r3]
 8003786:	613b      	str	r3, [r7, #16]
   return(result);
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	f023 0301 	bic.w	r3, r3, #1
 800378e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	3308      	adds	r3, #8
 8003796:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003798:	623a      	str	r2, [r7, #32]
 800379a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379c:	69f9      	ldr	r1, [r7, #28]
 800379e:	6a3a      	ldr	r2, [r7, #32]
 80037a0:	e841 2300 	strex	r3, r2, [r1]
 80037a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1e5      	bne.n	8003778 <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2220      	movs	r2, #32
 80037b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2220      	movs	r2, #32
 80037c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e010      	b.n	80037f2 <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	69da      	ldr	r2, [r3, #28]
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	4013      	ands	r3, r2
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	429a      	cmp	r2, r3
 80037de:	bf0c      	ite	eq
 80037e0:	2301      	moveq	r3, #1
 80037e2:	2300      	movne	r3, #0
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	461a      	mov	r2, r3
 80037e8:	79fb      	ldrb	r3, [r7, #7]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	f43f af40 	beq.w	8003670 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3770      	adds	r7, #112	@ 0x70
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b085      	sub	sp, #20
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003808:	2b01      	cmp	r3, #1
 800380a:	d101      	bne.n	8003810 <HAL_UARTEx_DisableFifoMode+0x16>
 800380c:	2302      	movs	r3, #2
 800380e:	e027      	b.n	8003860 <HAL_UARTEx_DisableFifoMode+0x66>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2224      	movs	r2, #36	@ 0x24
 800381c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 0201 	bic.w	r2, r2, #1
 8003836:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800383e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2220      	movs	r2, #32
 8003852:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3714      	adds	r7, #20
 8003864:	46bd      	mov	sp, r7
 8003866:	bc80      	pop	{r7}
 8003868:	4770      	bx	lr

0800386a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b084      	sub	sp, #16
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
 8003872:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800387a:	2b01      	cmp	r3, #1
 800387c:	d101      	bne.n	8003882 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800387e:	2302      	movs	r3, #2
 8003880:	e02d      	b.n	80038de <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2224      	movs	r2, #36	@ 0x24
 800388e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 0201 	bic.w	r2, r2, #1
 80038a8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f850 	bl	8003964 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2220      	movs	r2, #32
 80038d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b084      	sub	sp, #16
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
 80038ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d101      	bne.n	80038fe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80038fa:	2302      	movs	r3, #2
 80038fc:	e02d      	b.n	800395a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2224      	movs	r2, #36	@ 0x24
 800390a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 0201 	bic.w	r2, r2, #1
 8003924:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	430a      	orrs	r2, r1
 8003938:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f812 	bl	8003964 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2220      	movs	r2, #32
 800394c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
	...

08003964 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003970:	2b00      	cmp	r3, #0
 8003972:	d108      	bne.n	8003986 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003984:	e031      	b.n	80039ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003986:	2308      	movs	r3, #8
 8003988:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800398a:	2308      	movs	r3, #8
 800398c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	0e5b      	lsrs	r3, r3, #25
 8003996:	b2db      	uxtb	r3, r3
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	0f5b      	lsrs	r3, r3, #29
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80039ae:	7bbb      	ldrb	r3, [r7, #14]
 80039b0:	7b3a      	ldrb	r2, [r7, #12]
 80039b2:	4910      	ldr	r1, [pc, #64]	@ (80039f4 <UARTEx_SetNbDataToProcess+0x90>)
 80039b4:	5c8a      	ldrb	r2, [r1, r2]
 80039b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80039ba:	7b3a      	ldrb	r2, [r7, #12]
 80039bc:	490e      	ldr	r1, [pc, #56]	@ (80039f8 <UARTEx_SetNbDataToProcess+0x94>)
 80039be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80039c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80039cc:	7bfb      	ldrb	r3, [r7, #15]
 80039ce:	7b7a      	ldrb	r2, [r7, #13]
 80039d0:	4908      	ldr	r1, [pc, #32]	@ (80039f4 <UARTEx_SetNbDataToProcess+0x90>)
 80039d2:	5c8a      	ldrb	r2, [r1, r2]
 80039d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80039d8:	7b7a      	ldrb	r2, [r7, #13]
 80039da:	4907      	ldr	r1, [pc, #28]	@ (80039f8 <UARTEx_SetNbDataToProcess+0x94>)
 80039dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80039de:	fb93 f3f2 	sdiv	r3, r3, r2
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80039ea:	bf00      	nop
 80039ec:	3714      	adds	r7, #20
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bc80      	pop	{r7}
 80039f2:	4770      	bx	lr
 80039f4:	08003b48 	.word	0x08003b48
 80039f8:	08003b50 	.word	0x08003b50

080039fc <memset>:
 80039fc:	4402      	add	r2, r0
 80039fe:	4603      	mov	r3, r0
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d100      	bne.n	8003a06 <memset+0xa>
 8003a04:	4770      	bx	lr
 8003a06:	f803 1b01 	strb.w	r1, [r3], #1
 8003a0a:	e7f9      	b.n	8003a00 <memset+0x4>

08003a0c <__libc_init_array>:
 8003a0c:	b570      	push	{r4, r5, r6, lr}
 8003a0e:	4d0d      	ldr	r5, [pc, #52]	@ (8003a44 <__libc_init_array+0x38>)
 8003a10:	4c0d      	ldr	r4, [pc, #52]	@ (8003a48 <__libc_init_array+0x3c>)
 8003a12:	1b64      	subs	r4, r4, r5
 8003a14:	10a4      	asrs	r4, r4, #2
 8003a16:	2600      	movs	r6, #0
 8003a18:	42a6      	cmp	r6, r4
 8003a1a:	d109      	bne.n	8003a30 <__libc_init_array+0x24>
 8003a1c:	4d0b      	ldr	r5, [pc, #44]	@ (8003a4c <__libc_init_array+0x40>)
 8003a1e:	4c0c      	ldr	r4, [pc, #48]	@ (8003a50 <__libc_init_array+0x44>)
 8003a20:	f000 f818 	bl	8003a54 <_init>
 8003a24:	1b64      	subs	r4, r4, r5
 8003a26:	10a4      	asrs	r4, r4, #2
 8003a28:	2600      	movs	r6, #0
 8003a2a:	42a6      	cmp	r6, r4
 8003a2c:	d105      	bne.n	8003a3a <__libc_init_array+0x2e>
 8003a2e:	bd70      	pop	{r4, r5, r6, pc}
 8003a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a34:	4798      	blx	r3
 8003a36:	3601      	adds	r6, #1
 8003a38:	e7ee      	b.n	8003a18 <__libc_init_array+0xc>
 8003a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a3e:	4798      	blx	r3
 8003a40:	3601      	adds	r6, #1
 8003a42:	e7f2      	b.n	8003a2a <__libc_init_array+0x1e>
 8003a44:	08003b60 	.word	0x08003b60
 8003a48:	08003b60 	.word	0x08003b60
 8003a4c:	08003b60 	.word	0x08003b60
 8003a50:	08003b64 	.word	0x08003b64

08003a54 <_init>:
 8003a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a56:	bf00      	nop
 8003a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a5a:	bc08      	pop	{r3}
 8003a5c:	469e      	mov	lr, r3
 8003a5e:	4770      	bx	lr

08003a60 <_fini>:
 8003a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a62:	bf00      	nop
 8003a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a66:	bc08      	pop	{r3}
 8003a68:	469e      	mov	lr, r3
 8003a6a:	4770      	bx	lr
