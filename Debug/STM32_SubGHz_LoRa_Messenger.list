
STM32_SubGHz_LoRa_Messenger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043cc  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  0800450c  0800450c  0000550c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800464c  0800464c  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800464c  0800464c  0000564c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004654  08004654  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004654  08004654  00005654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004658  08004658  00005658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800465c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  20000068  080046c4  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  080046c4  00006378  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000130c3  00000000  00000000  00006092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e95  00000000  00000000  00019155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c8  00000000  00000000  0001bff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eea  00000000  00000000  0001d3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dde6  00000000  00000000  0001e2a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012e2b  00000000  00000000  0003c088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6332  00000000  00000000  0004eeb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001051e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005660  00000000  00000000  00105228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0010a888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000068 	.word	0x20000068
 800015c:	00000000 	.word	0x00000000
 8000160:	080044f4 	.word	0x080044f4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000006c 	.word	0x2000006c
 800017c:	080044f4 	.word	0x080044f4

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b988 	b.w	8000558 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	468e      	mov	lr, r1
 8000268:	4604      	mov	r4, r0
 800026a:	4688      	mov	r8, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14a      	bne.n	8000306 <__udivmoddi4+0xa6>
 8000270:	428a      	cmp	r2, r1
 8000272:	4617      	mov	r7, r2
 8000274:	d962      	bls.n	800033c <__udivmoddi4+0xdc>
 8000276:	fab2 f682 	clz	r6, r2
 800027a:	b14e      	cbz	r6, 8000290 <__udivmoddi4+0x30>
 800027c:	f1c6 0320 	rsb	r3, r6, #32
 8000280:	fa01 f806 	lsl.w	r8, r1, r6
 8000284:	fa20 f303 	lsr.w	r3, r0, r3
 8000288:	40b7      	lsls	r7, r6
 800028a:	ea43 0808 	orr.w	r8, r3, r8
 800028e:	40b4      	lsls	r4, r6
 8000290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000294:	fa1f fc87 	uxth.w	ip, r7
 8000298:	fbb8 f1fe 	udiv	r1, r8, lr
 800029c:	0c23      	lsrs	r3, r4, #16
 800029e:	fb0e 8811 	mls	r8, lr, r1, r8
 80002a2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a6:	fb01 f20c 	mul.w	r2, r1, ip
 80002aa:	429a      	cmp	r2, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x62>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002b4:	f080 80ea 	bcs.w	800048c <__udivmoddi4+0x22c>
 80002b8:	429a      	cmp	r2, r3
 80002ba:	f240 80e7 	bls.w	800048c <__udivmoddi4+0x22c>
 80002be:	3902      	subs	r1, #2
 80002c0:	443b      	add	r3, r7
 80002c2:	1a9a      	subs	r2, r3, r2
 80002c4:	b2a3      	uxth	r3, r4
 80002c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002d2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d6:	459c      	cmp	ip, r3
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0x8e>
 80002da:	18fb      	adds	r3, r7, r3
 80002dc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e0:	f080 80d6 	bcs.w	8000490 <__udivmoddi4+0x230>
 80002e4:	459c      	cmp	ip, r3
 80002e6:	f240 80d3 	bls.w	8000490 <__udivmoddi4+0x230>
 80002ea:	443b      	add	r3, r7
 80002ec:	3802      	subs	r0, #2
 80002ee:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f2:	eba3 030c 	sub.w	r3, r3, ip
 80002f6:	2100      	movs	r1, #0
 80002f8:	b11d      	cbz	r5, 8000302 <__udivmoddi4+0xa2>
 80002fa:	40f3      	lsrs	r3, r6
 80002fc:	2200      	movs	r2, #0
 80002fe:	e9c5 3200 	strd	r3, r2, [r5]
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	428b      	cmp	r3, r1
 8000308:	d905      	bls.n	8000316 <__udivmoddi4+0xb6>
 800030a:	b10d      	cbz	r5, 8000310 <__udivmoddi4+0xb0>
 800030c:	e9c5 0100 	strd	r0, r1, [r5]
 8000310:	2100      	movs	r1, #0
 8000312:	4608      	mov	r0, r1
 8000314:	e7f5      	b.n	8000302 <__udivmoddi4+0xa2>
 8000316:	fab3 f183 	clz	r1, r3
 800031a:	2900      	cmp	r1, #0
 800031c:	d146      	bne.n	80003ac <__udivmoddi4+0x14c>
 800031e:	4573      	cmp	r3, lr
 8000320:	d302      	bcc.n	8000328 <__udivmoddi4+0xc8>
 8000322:	4282      	cmp	r2, r0
 8000324:	f200 8105 	bhi.w	8000532 <__udivmoddi4+0x2d2>
 8000328:	1a84      	subs	r4, r0, r2
 800032a:	eb6e 0203 	sbc.w	r2, lr, r3
 800032e:	2001      	movs	r0, #1
 8000330:	4690      	mov	r8, r2
 8000332:	2d00      	cmp	r5, #0
 8000334:	d0e5      	beq.n	8000302 <__udivmoddi4+0xa2>
 8000336:	e9c5 4800 	strd	r4, r8, [r5]
 800033a:	e7e2      	b.n	8000302 <__udivmoddi4+0xa2>
 800033c:	2a00      	cmp	r2, #0
 800033e:	f000 8090 	beq.w	8000462 <__udivmoddi4+0x202>
 8000342:	fab2 f682 	clz	r6, r2
 8000346:	2e00      	cmp	r6, #0
 8000348:	f040 80a4 	bne.w	8000494 <__udivmoddi4+0x234>
 800034c:	1a8a      	subs	r2, r1, r2
 800034e:	0c03      	lsrs	r3, r0, #16
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	b280      	uxth	r0, r0
 8000356:	b2bc      	uxth	r4, r7
 8000358:	2101      	movs	r1, #1
 800035a:	fbb2 fcfe 	udiv	ip, r2, lr
 800035e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000362:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000366:	fb04 f20c 	mul.w	r2, r4, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d907      	bls.n	800037e <__udivmoddi4+0x11e>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000374:	d202      	bcs.n	800037c <__udivmoddi4+0x11c>
 8000376:	429a      	cmp	r2, r3
 8000378:	f200 80e0 	bhi.w	800053c <__udivmoddi4+0x2dc>
 800037c:	46c4      	mov	ip, r8
 800037e:	1a9b      	subs	r3, r3, r2
 8000380:	fbb3 f2fe 	udiv	r2, r3, lr
 8000384:	fb0e 3312 	mls	r3, lr, r2, r3
 8000388:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800038c:	fb02 f404 	mul.w	r4, r2, r4
 8000390:	429c      	cmp	r4, r3
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0x144>
 8000394:	18fb      	adds	r3, r7, r3
 8000396:	f102 30ff 	add.w	r0, r2, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x142>
 800039c:	429c      	cmp	r4, r3
 800039e:	f200 80ca 	bhi.w	8000536 <__udivmoddi4+0x2d6>
 80003a2:	4602      	mov	r2, r0
 80003a4:	1b1b      	subs	r3, r3, r4
 80003a6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003aa:	e7a5      	b.n	80002f8 <__udivmoddi4+0x98>
 80003ac:	f1c1 0620 	rsb	r6, r1, #32
 80003b0:	408b      	lsls	r3, r1
 80003b2:	fa22 f706 	lsr.w	r7, r2, r6
 80003b6:	431f      	orrs	r7, r3
 80003b8:	fa0e f401 	lsl.w	r4, lr, r1
 80003bc:	fa20 f306 	lsr.w	r3, r0, r6
 80003c0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003c4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003c8:	4323      	orrs	r3, r4
 80003ca:	fa00 f801 	lsl.w	r8, r0, r1
 80003ce:	fa1f fc87 	uxth.w	ip, r7
 80003d2:	fbbe f0f9 	udiv	r0, lr, r9
 80003d6:	0c1c      	lsrs	r4, r3, #16
 80003d8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003dc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003e0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ea:	d909      	bls.n	8000400 <__udivmoddi4+0x1a0>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 3aff 	add.w	sl, r0, #4294967295
 80003f2:	f080 809c 	bcs.w	800052e <__udivmoddi4+0x2ce>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f240 8099 	bls.w	800052e <__udivmoddi4+0x2ce>
 80003fc:	3802      	subs	r0, #2
 80003fe:	443c      	add	r4, r7
 8000400:	eba4 040e 	sub.w	r4, r4, lr
 8000404:	fa1f fe83 	uxth.w	lr, r3
 8000408:	fbb4 f3f9 	udiv	r3, r4, r9
 800040c:	fb09 4413 	mls	r4, r9, r3, r4
 8000410:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000414:	fb03 fc0c 	mul.w	ip, r3, ip
 8000418:	45a4      	cmp	ip, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x1ce>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000422:	f080 8082 	bcs.w	800052a <__udivmoddi4+0x2ca>
 8000426:	45a4      	cmp	ip, r4
 8000428:	d97f      	bls.n	800052a <__udivmoddi4+0x2ca>
 800042a:	3b02      	subs	r3, #2
 800042c:	443c      	add	r4, r7
 800042e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000432:	eba4 040c 	sub.w	r4, r4, ip
 8000436:	fba0 ec02 	umull	lr, ip, r0, r2
 800043a:	4564      	cmp	r4, ip
 800043c:	4673      	mov	r3, lr
 800043e:	46e1      	mov	r9, ip
 8000440:	d362      	bcc.n	8000508 <__udivmoddi4+0x2a8>
 8000442:	d05f      	beq.n	8000504 <__udivmoddi4+0x2a4>
 8000444:	b15d      	cbz	r5, 800045e <__udivmoddi4+0x1fe>
 8000446:	ebb8 0203 	subs.w	r2, r8, r3
 800044a:	eb64 0409 	sbc.w	r4, r4, r9
 800044e:	fa04 f606 	lsl.w	r6, r4, r6
 8000452:	fa22 f301 	lsr.w	r3, r2, r1
 8000456:	431e      	orrs	r6, r3
 8000458:	40cc      	lsrs	r4, r1
 800045a:	e9c5 6400 	strd	r6, r4, [r5]
 800045e:	2100      	movs	r1, #0
 8000460:	e74f      	b.n	8000302 <__udivmoddi4+0xa2>
 8000462:	fbb1 fcf2 	udiv	ip, r1, r2
 8000466:	0c01      	lsrs	r1, r0, #16
 8000468:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800046c:	b280      	uxth	r0, r0
 800046e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000472:	463b      	mov	r3, r7
 8000474:	4638      	mov	r0, r7
 8000476:	463c      	mov	r4, r7
 8000478:	46b8      	mov	r8, r7
 800047a:	46be      	mov	lr, r7
 800047c:	2620      	movs	r6, #32
 800047e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000482:	eba2 0208 	sub.w	r2, r2, r8
 8000486:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800048a:	e766      	b.n	800035a <__udivmoddi4+0xfa>
 800048c:	4601      	mov	r1, r0
 800048e:	e718      	b.n	80002c2 <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e72c      	b.n	80002ee <__udivmoddi4+0x8e>
 8000494:	f1c6 0220 	rsb	r2, r6, #32
 8000498:	fa2e f302 	lsr.w	r3, lr, r2
 800049c:	40b7      	lsls	r7, r6
 800049e:	40b1      	lsls	r1, r6
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	430a      	orrs	r2, r1
 80004aa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ae:	b2bc      	uxth	r4, r7
 80004b0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004b4:	0c11      	lsrs	r1, r2, #16
 80004b6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ba:	fb08 f904 	mul.w	r9, r8, r4
 80004be:	40b0      	lsls	r0, r6
 80004c0:	4589      	cmp	r9, r1
 80004c2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004c6:	b280      	uxth	r0, r0
 80004c8:	d93e      	bls.n	8000548 <__udivmoddi4+0x2e8>
 80004ca:	1879      	adds	r1, r7, r1
 80004cc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004d0:	d201      	bcs.n	80004d6 <__udivmoddi4+0x276>
 80004d2:	4589      	cmp	r9, r1
 80004d4:	d81f      	bhi.n	8000516 <__udivmoddi4+0x2b6>
 80004d6:	eba1 0109 	sub.w	r1, r1, r9
 80004da:	fbb1 f9fe 	udiv	r9, r1, lr
 80004de:	fb09 f804 	mul.w	r8, r9, r4
 80004e2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004e6:	b292      	uxth	r2, r2
 80004e8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004ec:	4542      	cmp	r2, r8
 80004ee:	d229      	bcs.n	8000544 <__udivmoddi4+0x2e4>
 80004f0:	18ba      	adds	r2, r7, r2
 80004f2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004f6:	d2c4      	bcs.n	8000482 <__udivmoddi4+0x222>
 80004f8:	4542      	cmp	r2, r8
 80004fa:	d2c2      	bcs.n	8000482 <__udivmoddi4+0x222>
 80004fc:	f1a9 0102 	sub.w	r1, r9, #2
 8000500:	443a      	add	r2, r7
 8000502:	e7be      	b.n	8000482 <__udivmoddi4+0x222>
 8000504:	45f0      	cmp	r8, lr
 8000506:	d29d      	bcs.n	8000444 <__udivmoddi4+0x1e4>
 8000508:	ebbe 0302 	subs.w	r3, lr, r2
 800050c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000510:	3801      	subs	r0, #1
 8000512:	46e1      	mov	r9, ip
 8000514:	e796      	b.n	8000444 <__udivmoddi4+0x1e4>
 8000516:	eba7 0909 	sub.w	r9, r7, r9
 800051a:	4449      	add	r1, r9
 800051c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000520:	fbb1 f9fe 	udiv	r9, r1, lr
 8000524:	fb09 f804 	mul.w	r8, r9, r4
 8000528:	e7db      	b.n	80004e2 <__udivmoddi4+0x282>
 800052a:	4673      	mov	r3, lr
 800052c:	e77f      	b.n	800042e <__udivmoddi4+0x1ce>
 800052e:	4650      	mov	r0, sl
 8000530:	e766      	b.n	8000400 <__udivmoddi4+0x1a0>
 8000532:	4608      	mov	r0, r1
 8000534:	e6fd      	b.n	8000332 <__udivmoddi4+0xd2>
 8000536:	443b      	add	r3, r7
 8000538:	3a02      	subs	r2, #2
 800053a:	e733      	b.n	80003a4 <__udivmoddi4+0x144>
 800053c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000540:	443b      	add	r3, r7
 8000542:	e71c      	b.n	800037e <__udivmoddi4+0x11e>
 8000544:	4649      	mov	r1, r9
 8000546:	e79c      	b.n	8000482 <__udivmoddi4+0x222>
 8000548:	eba1 0109 	sub.w	r1, r1, r9
 800054c:	46c4      	mov	ip, r8
 800054e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000552:	fb09 f804 	mul.w	r8, r9, r4
 8000556:	e7c4      	b.n	80004e2 <__udivmoddi4+0x282>

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000568:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800056a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4313      	orrs	r3, r2
 8000572:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000574:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000578:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4013      	ands	r3, r2
 800057e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000580:	68fb      	ldr	r3, [r7, #12]
}
 8000582:	bf00      	nop
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr

0800058c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a0:	2004      	movs	r0, #4
 80005a2:	f7ff ffdb 	bl	800055c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	2001      	movs	r0, #1
 80005a8:	f7ff ffd8 	bl	800055c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2138      	movs	r1, #56	@ 0x38
 80005b0:	4809      	ldr	r0, [pc, #36]	@ (80005d8 <MX_GPIO_Init+0x4c>)
 80005b2:	f000 fe1b 	bl	80011ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 80005b6:	2338      	movs	r3, #56	@ 0x38
 80005b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ba:	2301      	movs	r3, #1
 80005bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005c2:	2303      	movs	r3, #3
 80005c4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	4619      	mov	r1, r3
 80005ca:	4803      	ldr	r0, [pc, #12]	@ (80005d8 <MX_GPIO_Init+0x4c>)
 80005cc:	f000 fcae 	bl	8000f2c <HAL_GPIO_Init>

}
 80005d0:	bf00      	nop
 80005d2:	3718      	adds	r7, #24
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	48000800 	.word	0x48000800

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 fb22 	bl	8000c28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f81e 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f7ff ffd0 	bl	800058c <MX_GPIO_Init>
  MX_SUBGHZ_Init();
 80005ec:	f000 f8dc 	bl	80007a8 <MX_SUBGHZ_Init>
  MX_USART2_UART_Init();
 80005f0:	f000 f96c 	bl	80008cc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  BSP_LED_Init(LED_BLUE);
 80005f4:	2000      	movs	r0, #0
 80005f6:	f000 fa3d 	bl	8000a74 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 80005fa:	2001      	movs	r0, #1
 80005fc:	f000 fa3a 	bl	8000a74 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000600:	2002      	movs	r0, #2
 8000602:	f000 fa37 	bl	8000a74 <BSP_LED_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  snprintf((char*)buffer, MAX_BUFFER_SIZE, "\r\nSTM32 SubGHz LoRa Messenger\r\n");
 8000606:	4a05      	ldr	r2, [pc, #20]	@ (800061c <main+0x40>)
 8000608:	21ff      	movs	r1, #255	@ 0xff
 800060a:	4805      	ldr	r0, [pc, #20]	@ (8000620 <main+0x44>)
 800060c:	f003 fabe 	bl	8003b8c <sniprintf>
  UART_Transmit((char*)buffer);
 8000610:	4803      	ldr	r0, [pc, #12]	@ (8000620 <main+0x44>)
 8000612:	f000 f859 	bl	80006c8 <UART_Transmit>

  while (1)
 8000616:	bf00      	nop
 8000618:	e7fd      	b.n	8000616 <main+0x3a>
 800061a:	bf00      	nop
 800061c:	0800450c 	.word	0x0800450c
 8000620:	20000084 	.word	0x20000084

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b09a      	sub	sp, #104	@ 0x68
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 0320 	add.w	r3, r7, #32
 800062e:	2248      	movs	r2, #72	@ 0x48
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f003 fae0 	bl	8003bf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]
 8000646:	615a      	str	r2, [r3, #20]
 8000648:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800064a:	4b1e      	ldr	r3, [pc, #120]	@ (80006c4 <SystemClock_Config+0xa0>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000652:	4a1c      	ldr	r2, [pc, #112]	@ (80006c4 <SystemClock_Config+0xa0>)
 8000654:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000658:	6013      	str	r3, [r2, #0]
 800065a:	4b1a      	ldr	r3, [pc, #104]	@ (80006c4 <SystemClock_Config+0xa0>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000666:	2320      	movs	r3, #32
 8000668:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800066a:	2301      	movs	r3, #1
 800066c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800066e:	2300      	movs	r3, #0
 8000670:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000672:	23b0      	movs	r3, #176	@ 0xb0
 8000674:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000676:	2300      	movs	r3, #0
 8000678:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067a:	f107 0320 	add.w	r3, r7, #32
 800067e:	4618      	mov	r0, r3
 8000680:	f001 f89e 	bl	80017c0 <HAL_RCC_OscConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800068a:	f000 f833 	bl	80006f4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800068e:	234f      	movs	r3, #79	@ 0x4f
 8000690:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000692:	2300      	movs	r3, #0
 8000694:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	2102      	movs	r1, #2
 80006aa:	4618      	mov	r0, r3
 80006ac:	f001 fc0a 	bl	8001ec4 <HAL_RCC_ClockConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006b6:	f000 f81d 	bl	80006f4 <Error_Handler>
  }
}
 80006ba:	bf00      	nop
 80006bc:	3768      	adds	r7, #104	@ 0x68
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	58000400 	.word	0x58000400

080006c8 <UART_Transmit>:

/* USER CODE BEGIN 4 */

void UART_Transmit(const char* string){
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)string, strlen(string), HAL_MAX_DELAY);
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f7ff fd55 	bl	8000180 <strlen>
 80006d6:	4603      	mov	r3, r0
 80006d8:	b29a      	uxth	r2, r3
 80006da:	f04f 33ff 	mov.w	r3, #4294967295
 80006de:	6879      	ldr	r1, [r7, #4]
 80006e0:	4803      	ldr	r0, [pc, #12]	@ (80006f0 <UART_Transmit+0x28>)
 80006e2:	f002 fc9a 	bl	800301a <HAL_UART_Transmit>
}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000194 	.word	0x20000194

080006f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f8:	b672      	cpsid	i
}
 80006fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006fc:	bf00      	nop
 80006fe:	e7fd      	b.n	80006fc <Error_Handler+0x8>

08000700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr

0800070c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000710:	bf00      	nop
 8000712:	e7fd      	b.n	8000710 <NMI_Handler+0x4>

08000714 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000718:	bf00      	nop
 800071a:	e7fd      	b.n	8000718 <HardFault_Handler+0x4>

0800071c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000720:	bf00      	nop
 8000722:	e7fd      	b.n	8000720 <MemManage_Handler+0x4>

08000724 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000728:	bf00      	nop
 800072a:	e7fd      	b.n	8000728 <BusFault_Handler+0x4>

0800072c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000730:	bf00      	nop
 8000732:	e7fd      	b.n	8000730 <UsageFault_Handler+0x4>

08000734 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr

08000740 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr

0800074c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr

08000758 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800075c:	f000 fabe 	bl	8000cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}

08000764 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000768:	4802      	ldr	r0, [pc, #8]	@ (8000774 <SUBGHZ_Radio_IRQHandler+0x10>)
 800076a:	f002 fa36 	bl	8002bda <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000184 	.word	0x20000184

08000778 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000778:	b480      	push	{r7}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000780:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000784:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000786:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4313      	orrs	r3, r2
 800078e:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000790:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000794:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4013      	ands	r3, r2
 800079a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800079c:	68fb      	ldr	r3, [r7, #12]
}
 800079e:	bf00      	nop
 80007a0:	3714      	adds	r7, #20
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr

080007a8 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80007ac:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <MX_SUBGHZ_Init+0x20>)
 80007ae:	2208      	movs	r2, #8
 80007b0:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80007b2:	4805      	ldr	r0, [pc, #20]	@ (80007c8 <MX_SUBGHZ_Init+0x20>)
 80007b4:	f002 f8fa 	bl	80029ac <HAL_SUBGHZ_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80007be:	f7ff ff99 	bl	80006f4 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000184 	.word	0x20000184

080007cc <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80007d4:	2001      	movs	r0, #1
 80007d6:	f7ff ffcf 	bl	8000778 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80007da:	2200      	movs	r2, #0
 80007dc:	2100      	movs	r1, #0
 80007de:	2032      	movs	r0, #50	@ 0x32
 80007e0:	f000 fb6f 	bl	8000ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80007e4:	2032      	movs	r0, #50	@ 0x32
 80007e6:	f000 fb86 	bl	8000ef6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007fc:	4a14      	ldr	r2, [pc, #80]	@ (8000850 <_sbrk+0x5c>)
 80007fe:	4b15      	ldr	r3, [pc, #84]	@ (8000854 <_sbrk+0x60>)
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000808:	4b13      	ldr	r3, [pc, #76]	@ (8000858 <_sbrk+0x64>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d102      	bne.n	8000816 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000810:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <_sbrk+0x64>)
 8000812:	4a12      	ldr	r2, [pc, #72]	@ (800085c <_sbrk+0x68>)
 8000814:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000816:	4b10      	ldr	r3, [pc, #64]	@ (8000858 <_sbrk+0x64>)
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4413      	add	r3, r2
 800081e:	693a      	ldr	r2, [r7, #16]
 8000820:	429a      	cmp	r2, r3
 8000822:	d207      	bcs.n	8000834 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000824:	f003 f9f0 	bl	8003c08 <__errno>
 8000828:	4603      	mov	r3, r0
 800082a:	220c      	movs	r2, #12
 800082c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800082e:	f04f 33ff 	mov.w	r3, #4294967295
 8000832:	e009      	b.n	8000848 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000834:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <_sbrk+0x64>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800083a:	4b07      	ldr	r3, [pc, #28]	@ (8000858 <_sbrk+0x64>)
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4413      	add	r3, r2
 8000842:	4a05      	ldr	r2, [pc, #20]	@ (8000858 <_sbrk+0x64>)
 8000844:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000846:	68fb      	ldr	r3, [r7, #12]
}
 8000848:	4618      	mov	r0, r3
 800084a:	3718      	adds	r7, #24
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20010000 	.word	0x20010000
 8000854:	00000400 	.word	0x00000400
 8000858:	20000190 	.word	0x20000190
 800085c:	20000378 	.word	0x20000378

08000860 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr

0800086c <LL_AHB2_GRP1_EnableClock>:
{
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000874:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000878:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800087a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4313      	orrs	r3, r2
 8000882:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000884:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000888:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4013      	ands	r3, r2
 800088e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000890:	68fb      	ldr	r3, [r7, #12]
}
 8000892:	bf00      	nop
 8000894:	3714      	adds	r7, #20
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr

0800089c <LL_APB1_GRP1_EnableClock>:
{
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80008a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008a8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80008aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4313      	orrs	r3, r2
 80008b2:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80008b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008b8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4013      	ands	r3, r2
 80008be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008c0:	68fb      	ldr	r3, [r7, #12]
}
 80008c2:	bf00      	nop
 80008c4:	3714      	adds	r7, #20
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bc80      	pop	{r7}
 80008ca:	4770      	bx	lr

080008cc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008d0:	4b22      	ldr	r3, [pc, #136]	@ (800095c <MX_USART2_UART_Init+0x90>)
 80008d2:	4a23      	ldr	r2, [pc, #140]	@ (8000960 <MX_USART2_UART_Init+0x94>)
 80008d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008d6:	4b21      	ldr	r3, [pc, #132]	@ (800095c <MX_USART2_UART_Init+0x90>)
 80008d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008de:	4b1f      	ldr	r3, [pc, #124]	@ (800095c <MX_USART2_UART_Init+0x90>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008e4:	4b1d      	ldr	r3, [pc, #116]	@ (800095c <MX_USART2_UART_Init+0x90>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ea:	4b1c      	ldr	r3, [pc, #112]	@ (800095c <MX_USART2_UART_Init+0x90>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008f0:	4b1a      	ldr	r3, [pc, #104]	@ (800095c <MX_USART2_UART_Init+0x90>)
 80008f2:	220c      	movs	r2, #12
 80008f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f6:	4b19      	ldr	r3, [pc, #100]	@ (800095c <MX_USART2_UART_Init+0x90>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008fc:	4b17      	ldr	r3, [pc, #92]	@ (800095c <MX_USART2_UART_Init+0x90>)
 80008fe:	2200      	movs	r2, #0
 8000900:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000902:	4b16      	ldr	r3, [pc, #88]	@ (800095c <MX_USART2_UART_Init+0x90>)
 8000904:	2200      	movs	r2, #0
 8000906:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000908:	4b14      	ldr	r3, [pc, #80]	@ (800095c <MX_USART2_UART_Init+0x90>)
 800090a:	2200      	movs	r2, #0
 800090c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800090e:	4b13      	ldr	r3, [pc, #76]	@ (800095c <MX_USART2_UART_Init+0x90>)
 8000910:	2200      	movs	r2, #0
 8000912:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000914:	4811      	ldr	r0, [pc, #68]	@ (800095c <MX_USART2_UART_Init+0x90>)
 8000916:	f002 fb30 	bl	8002f7a <HAL_UART_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000920:	f7ff fee8 	bl	80006f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000924:	2100      	movs	r1, #0
 8000926:	480d      	ldr	r0, [pc, #52]	@ (800095c <MX_USART2_UART_Init+0x90>)
 8000928:	f003 f867 	bl	80039fa <HAL_UARTEx_SetTxFifoThreshold>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000932:	f7ff fedf 	bl	80006f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000936:	2100      	movs	r1, #0
 8000938:	4808      	ldr	r0, [pc, #32]	@ (800095c <MX_USART2_UART_Init+0x90>)
 800093a:	f003 f89c 	bl	8003a76 <HAL_UARTEx_SetRxFifoThreshold>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000944:	f7ff fed6 	bl	80006f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000948:	4804      	ldr	r0, [pc, #16]	@ (800095c <MX_USART2_UART_Init+0x90>)
 800094a:	f003 f81e 	bl	800398a <HAL_UARTEx_DisableFifoMode>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000954:	f7ff fece 	bl	80006f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000194 	.word	0x20000194
 8000960:	40004400 	.word	0x40004400

08000964 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b096      	sub	sp, #88	@ 0x58
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	2238      	movs	r2, #56	@ 0x38
 8000982:	2100      	movs	r1, #0
 8000984:	4618      	mov	r0, r3
 8000986:	f003 f937 	bl	8003bf8 <memset>
  if(uartHandle->Instance==USART2)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a17      	ldr	r2, [pc, #92]	@ (80009ec <HAL_UART_MspInit+0x88>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d126      	bne.n	80009e2 <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000994:	2302      	movs	r3, #2
 8000996:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000998:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 800099c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800099e:	f107 030c 	add.w	r3, r7, #12
 80009a2:	4618      	mov	r0, r3
 80009a4:	f001 fe4e 	bl	8002644 <HAL_RCCEx_PeriphCLKConfig>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009ae:	f7ff fea1 	bl	80006f4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009b2:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80009b6:	f7ff ff71 	bl	800089c <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	2001      	movs	r0, #1
 80009bc:	f7ff ff56 	bl	800086c <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 80009c0:	230c      	movs	r3, #12
 80009c2:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c4:	2302      	movs	r3, #2
 80009c6:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009d0:	2307      	movs	r3, #7
 80009d2:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80009d8:	4619      	mov	r1, r3
 80009da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009de:	f000 faa5 	bl	8000f2c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80009e2:	bf00      	nop
 80009e4:	3758      	adds	r7, #88	@ 0x58
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40004400 	.word	0x40004400

080009f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009f0:	480d      	ldr	r0, [pc, #52]	@ (8000a28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009f2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80009f4:	f7ff ff34 	bl	8000860 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009f8:	480c      	ldr	r0, [pc, #48]	@ (8000a2c <LoopForever+0x6>)
  ldr r1, =_edata
 80009fa:	490d      	ldr	r1, [pc, #52]	@ (8000a30 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000a34 <LoopForever+0xe>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a00:	e002      	b.n	8000a08 <LoopCopyDataInit>

08000a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a06:	3304      	adds	r3, #4

08000a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a0c:	d3f9      	bcc.n	8000a02 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a10:	4c0a      	ldr	r4, [pc, #40]	@ (8000a3c <LoopForever+0x16>)
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a14:	e001      	b.n	8000a1a <LoopFillZerobss>

08000a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a18:	3204      	adds	r2, #4

08000a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a1c:	d3fb      	bcc.n	8000a16 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a1e:	f003 f8f9 	bl	8003c14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a22:	f7ff fddb 	bl	80005dc <main>

08000a26 <LoopForever>:

LoopForever:
    b LoopForever
 8000a26:	e7fe      	b.n	8000a26 <LoopForever>
  ldr   r0, =_estack
 8000a28:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a30:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000a34:	0800465c 	.word	0x0800465c
  ldr r2, =_sbss
 8000a38:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a3c:	20000378 	.word	0x20000378

08000a40 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a40:	e7fe      	b.n	8000a40 <ADC_IRQHandler>

08000a42 <LL_AHB2_GRP1_EnableClock>:
{
 8000a42:	b480      	push	{r7}
 8000a44:	b085      	sub	sp, #20
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a4e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a50:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4013      	ands	r3, r2
 8000a64:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a66:	68fb      	ldr	r3, [r7, #12]
}
 8000a68:	bf00      	nop
 8000a6a:	3714      	adds	r7, #20
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr
	...

08000a74 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b088      	sub	sp, #32
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8000a7e:	f107 030c 	add.w	r3, r7, #12
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000a8e:	2002      	movs	r0, #2
 8000a90:	f7ff ffd7 	bl	8000a42 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	4a12      	ldr	r2, [pc, #72]	@ (8000ae0 <BSP_LED_Init+0x6c>)
 8000a98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a9c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae4 <BSP_LED_Init+0x70>)
 8000aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab2:	f107 020c 	add.w	r2, r7, #12
 8000ab6:	4611      	mov	r1, r2
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f000 fa37 	bl	8000f2c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	4a08      	ldr	r2, [pc, #32]	@ (8000ae4 <BSP_LED_Init+0x70>)
 8000ac2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	4a05      	ldr	r2, [pc, #20]	@ (8000ae0 <BSP_LED_Init+0x6c>)
 8000aca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	f000 fb8b 	bl	80011ec <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000ad6:	2300      	movs	r3, #0
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3720      	adds	r7, #32
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	080045e8 	.word	0x080045e8
 8000ae4:	20000004 	.word	0x20000004

08000ae8 <HAL_SUBGHZ_TxCpltCallback>:
    return RF_WAKEUP_TIME;
}

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8000af0:	4b03      	ldr	r3, [pc, #12]	@ (8000b00 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2001      	movs	r0, #1
 8000af6:	4798      	blx	r3
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000228 	.word	0x20000228

08000b04 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8000b0c:	4b03      	ldr	r3, [pc, #12]	@ (8000b1c <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2002      	movs	r0, #2
 8000b12:	4798      	blx	r3
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000228 	.word	0x20000228

08000b20 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8000b28:	4b03      	ldr	r3, [pc, #12]	@ (8000b38 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2040      	movs	r0, #64	@ 0x40
 8000b2e:	4798      	blx	r3
}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000228 	.word	0x20000228

08000b3c <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	460b      	mov	r3, r1
 8000b46:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8000b48:	78fb      	ldrb	r3, [r7, #3]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d002      	beq.n	8000b54 <HAL_SUBGHZ_CADStatusCallback+0x18>
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d005      	beq.n	8000b5e <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8000b52:	e00a      	b.n	8000b6a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8000b54:	4b07      	ldr	r3, [pc, #28]	@ (8000b74 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2080      	movs	r0, #128	@ 0x80
 8000b5a:	4798      	blx	r3
            break;
 8000b5c:	e005      	b.n	8000b6a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8000b5e:	4b05      	ldr	r3, [pc, #20]	@ (8000b74 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000b66:	4798      	blx	r3
            break;
 8000b68:	bf00      	nop
    }
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000228 	.word	0x20000228

08000b78 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8000b80:	4b04      	ldr	r3, [pc, #16]	@ (8000b94 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000b88:	4798      	blx	r3
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000228 	.word	0x20000228

08000b98 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8000ba0:	4b03      	ldr	r3, [pc, #12]	@ (8000bb0 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2020      	movs	r0, #32
 8000ba6:	4798      	blx	r3
}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000228 	.word	0x20000228

08000bb4 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8000bbc:	4b03      	ldr	r3, [pc, #12]	@ (8000bcc <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2004      	movs	r0, #4
 8000bc2:	4798      	blx	r3
}
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000228 	.word	0x20000228

08000bd0 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8000bd8:	4b03      	ldr	r3, [pc, #12]	@ (8000be8 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2008      	movs	r0, #8
 8000bde:	4798      	blx	r3
}
 8000be0:	bf00      	nop
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000228 	.word	0x20000228

08000bec <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8000bf4:	4b03      	ldr	r3, [pc, #12]	@ (8000c04 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2010      	movs	r0, #16
 8000bfa:	4798      	blx	r3
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000228 	.word	0x20000228

08000c08 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8000c10:	4b04      	ldr	r3, [pc, #16]	@ (8000c24 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000c18:	4798      	blx	r3
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000228 	.word	0x20000228

08000c28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c32:	2003      	movs	r0, #3
 8000c34:	f000 f93a 	bl	8000eac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000c38:	f001 fb26 	bl	8002288 <HAL_RCC_GetHCLKFreq>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	4a09      	ldr	r2, [pc, #36]	@ (8000c64 <HAL_Init+0x3c>)
 8000c40:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c42:	2000      	movs	r0, #0
 8000c44:	f000 f810 	bl	8000c68 <HAL_InitTick>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d002      	beq.n	8000c54 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	71fb      	strb	r3, [r7, #7]
 8000c52:	e001      	b.n	8000c58 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c54:	f7ff fd54 	bl	8000700 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c58:	79fb      	ldrb	r3, [r7, #7]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000000 	.word	0x20000000

08000c68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c70:	2300      	movs	r3, #0
 8000c72:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c74:	4b17      	ldr	r3, [pc, #92]	@ (8000cd4 <HAL_InitTick+0x6c>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d024      	beq.n	8000cc6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c7c:	f001 fb04 	bl	8002288 <HAL_RCC_GetHCLKFreq>
 8000c80:	4602      	mov	r2, r0
 8000c82:	4b14      	ldr	r3, [pc, #80]	@ (8000cd4 <HAL_InitTick+0x6c>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	4619      	mov	r1, r3
 8000c88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c8c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c94:	4618      	mov	r0, r3
 8000c96:	f000 f93c 	bl	8000f12 <HAL_SYSTICK_Config>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d10f      	bne.n	8000cc0 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b0f      	cmp	r3, #15
 8000ca4:	d809      	bhi.n	8000cba <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	6879      	ldr	r1, [r7, #4]
 8000caa:	f04f 30ff 	mov.w	r0, #4294967295
 8000cae:	f000 f908 	bl	8000ec2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cb2:	4a09      	ldr	r2, [pc, #36]	@ (8000cd8 <HAL_InitTick+0x70>)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6013      	str	r3, [r2, #0]
 8000cb8:	e007      	b.n	8000cca <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	73fb      	strb	r3, [r7, #15]
 8000cbe:	e004      	b.n	8000cca <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	73fb      	strb	r3, [r7, #15]
 8000cc4:	e001      	b.n	8000cca <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3710      	adds	r7, #16
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000014 	.word	0x20000014
 8000cd8:	20000010 	.word	0x20000010

08000cdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ce0:	4b05      	ldr	r3, [pc, #20]	@ (8000cf8 <HAL_IncTick+0x1c>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b05      	ldr	r3, [pc, #20]	@ (8000cfc <HAL_IncTick+0x20>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	4a03      	ldr	r2, [pc, #12]	@ (8000cfc <HAL_IncTick+0x20>)
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr
 8000cf8:	20000014 	.word	0x20000014
 8000cfc:	2000022c 	.word	0x2000022c

08000d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return uwTick;
 8000d04:	4b02      	ldr	r3, [pc, #8]	@ (8000d10 <HAL_GetTick+0x10>)
 8000d06:	681b      	ldr	r3, [r3, #0]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr
 8000d10:	2000022c 	.word	0x2000022c

08000d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d24:	4b0c      	ldr	r3, [pc, #48]	@ (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2a:	68ba      	ldr	r2, [r7, #8]
 8000d2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d30:	4013      	ands	r3, r2
 8000d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d46:	4a04      	ldr	r2, [pc, #16]	@ (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	60d3      	str	r3, [r2, #12]
}
 8000d4c:	bf00      	nop
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bc80      	pop	{r7}
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d60:	4b04      	ldr	r3, [pc, #16]	@ (8000d74 <__NVIC_GetPriorityGrouping+0x18>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	0a1b      	lsrs	r3, r3, #8
 8000d66:	f003 0307 	and.w	r3, r3, #7
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	db0b      	blt.n	8000da2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	f003 021f 	and.w	r2, r3, #31
 8000d90:	4906      	ldr	r1, [pc, #24]	@ (8000dac <__NVIC_EnableIRQ+0x34>)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	095b      	lsrs	r3, r3, #5
 8000d98:	2001      	movs	r0, #1
 8000d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr
 8000dac:	e000e100 	.word	0xe000e100

08000db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	6039      	str	r1, [r7, #0]
 8000dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	db0a      	blt.n	8000dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	490c      	ldr	r1, [pc, #48]	@ (8000dfc <__NVIC_SetPriority+0x4c>)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	0112      	lsls	r2, r2, #4
 8000dd0:	b2d2      	uxtb	r2, r2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd8:	e00a      	b.n	8000df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4908      	ldr	r1, [pc, #32]	@ (8000e00 <__NVIC_SetPriority+0x50>)
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	f003 030f 	and.w	r3, r3, #15
 8000de6:	3b04      	subs	r3, #4
 8000de8:	0112      	lsls	r2, r2, #4
 8000dea:	b2d2      	uxtb	r2, r2
 8000dec:	440b      	add	r3, r1
 8000dee:	761a      	strb	r2, [r3, #24]
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000e100 	.word	0xe000e100
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b089      	sub	sp, #36	@ 0x24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	f1c3 0307 	rsb	r3, r3, #7
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	bf28      	it	cs
 8000e22:	2304      	movcs	r3, #4
 8000e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3304      	adds	r3, #4
 8000e2a:	2b06      	cmp	r3, #6
 8000e2c:	d902      	bls.n	8000e34 <NVIC_EncodePriority+0x30>
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3b03      	subs	r3, #3
 8000e32:	e000      	b.n	8000e36 <NVIC_EncodePriority+0x32>
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	f04f 32ff 	mov.w	r2, #4294967295
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43da      	mvns	r2, r3
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	401a      	ands	r2, r3
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	fa01 f303 	lsl.w	r3, r1, r3
 8000e56:	43d9      	mvns	r1, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	4313      	orrs	r3, r2
         );
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3724      	adds	r7, #36	@ 0x24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr

08000e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e78:	d301      	bcc.n	8000e7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e00f      	b.n	8000e9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea8 <SysTick_Config+0x40>)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e86:	210f      	movs	r1, #15
 8000e88:	f04f 30ff 	mov.w	r0, #4294967295
 8000e8c:	f7ff ff90 	bl	8000db0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e90:	4b05      	ldr	r3, [pc, #20]	@ (8000ea8 <SysTick_Config+0x40>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e96:	4b04      	ldr	r3, [pc, #16]	@ (8000ea8 <SysTick_Config+0x40>)
 8000e98:	2207      	movs	r2, #7
 8000e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	e000e010 	.word	0xe000e010

08000eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff ff2d 	bl	8000d14 <__NVIC_SetPriorityGrouping>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b086      	sub	sp, #24
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	4603      	mov	r3, r0
 8000eca:	60b9      	str	r1, [r7, #8]
 8000ecc:	607a      	str	r2, [r7, #4]
 8000ece:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed0:	f7ff ff44 	bl	8000d5c <__NVIC_GetPriorityGrouping>
 8000ed4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	68b9      	ldr	r1, [r7, #8]
 8000eda:	6978      	ldr	r0, [r7, #20]
 8000edc:	f7ff ff92 	bl	8000e04 <NVIC_EncodePriority>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee6:	4611      	mov	r1, r2
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ff61 	bl	8000db0 <__NVIC_SetPriority>
}
 8000eee:	bf00      	nop
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	4603      	mov	r3, r0
 8000efe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff ff37 	bl	8000d78 <__NVIC_EnableIRQ>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff ffa4 	bl	8000e68 <SysTick_Config>
 8000f20:	4603      	mov	r3, r0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b087      	sub	sp, #28
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f3a:	e140      	b.n	80011be <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	2101      	movs	r1, #1
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	fa01 f303 	lsl.w	r3, r1, r3
 8000f48:	4013      	ands	r3, r2
 8000f4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f000 8132 	beq.w	80011b8 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 0303 	and.w	r3, r3, #3
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d005      	beq.n	8000f6c <HAL_GPIO_Init+0x40>
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d130      	bne.n	8000fce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	2203      	movs	r2, #3
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	68da      	ldr	r2, [r3, #12]
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43db      	mvns	r3, r3
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	091b      	lsrs	r3, r3, #4
 8000fb8:	f003 0201 	and.w	r2, r3, #1
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f003 0303 	and.w	r3, r3, #3
 8000fd6:	2b03      	cmp	r3, #3
 8000fd8:	d017      	beq.n	800100a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	689a      	ldr	r2, [r3, #8]
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4313      	orrs	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f003 0303 	and.w	r3, r3, #3
 8001012:	2b02      	cmp	r3, #2
 8001014:	d123      	bne.n	800105e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	08da      	lsrs	r2, r3, #3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	3208      	adds	r2, #8
 800101e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001022:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	220f      	movs	r2, #15
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4013      	ands	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	691a      	ldr	r2, [r3, #16]
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	f003 0307 	and.w	r3, r3, #7
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	08da      	lsrs	r2, r3, #3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3208      	adds	r2, #8
 8001058:	6939      	ldr	r1, [r7, #16]
 800105a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	2203      	movs	r2, #3
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43db      	mvns	r3, r3
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	4013      	ands	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 0203 	and.w	r2, r3, #3
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800109a:	2b00      	cmp	r3, #0
 800109c:	f000 808c 	beq.w	80011b8 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80010a0:	4a4e      	ldr	r2, [pc, #312]	@ (80011dc <HAL_GPIO_Init+0x2b0>)
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	089b      	lsrs	r3, r3, #2
 80010a6:	3302      	adds	r3, #2
 80010a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	f003 0303 	and.w	r3, r3, #3
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	2207      	movs	r2, #7
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4013      	ands	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80010ca:	d00d      	beq.n	80010e8 <HAL_GPIO_Init+0x1bc>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a44      	ldr	r2, [pc, #272]	@ (80011e0 <HAL_GPIO_Init+0x2b4>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d007      	beq.n	80010e4 <HAL_GPIO_Init+0x1b8>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a43      	ldr	r2, [pc, #268]	@ (80011e4 <HAL_GPIO_Init+0x2b8>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d101      	bne.n	80010e0 <HAL_GPIO_Init+0x1b4>
 80010dc:	2302      	movs	r3, #2
 80010de:	e004      	b.n	80010ea <HAL_GPIO_Init+0x1be>
 80010e0:	2307      	movs	r3, #7
 80010e2:	e002      	b.n	80010ea <HAL_GPIO_Init+0x1be>
 80010e4:	2301      	movs	r3, #1
 80010e6:	e000      	b.n	80010ea <HAL_GPIO_Init+0x1be>
 80010e8:	2300      	movs	r3, #0
 80010ea:	697a      	ldr	r2, [r7, #20]
 80010ec:	f002 0203 	and.w	r2, r2, #3
 80010f0:	0092      	lsls	r2, r2, #2
 80010f2:	4093      	lsls	r3, r2
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010fa:	4938      	ldr	r1, [pc, #224]	@ (80011dc <HAL_GPIO_Init+0x2b0>)
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	089b      	lsrs	r3, r3, #2
 8001100:	3302      	adds	r3, #2
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001108:	4b37      	ldr	r3, [pc, #220]	@ (80011e8 <HAL_GPIO_Init+0x2bc>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	43db      	mvns	r3, r3
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d003      	beq.n	800112c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	4313      	orrs	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800112c:	4a2e      	ldr	r2, [pc, #184]	@ (80011e8 <HAL_GPIO_Init+0x2bc>)
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001132:	4b2d      	ldr	r3, [pc, #180]	@ (80011e8 <HAL_GPIO_Init+0x2bc>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	43db      	mvns	r3, r3
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	4013      	ands	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4313      	orrs	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001156:	4a24      	ldr	r2, [pc, #144]	@ (80011e8 <HAL_GPIO_Init+0x2bc>)
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800115c:	4b22      	ldr	r3, [pc, #136]	@ (80011e8 <HAL_GPIO_Init+0x2bc>)
 800115e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001162:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	43db      	mvns	r3, r3
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	4013      	ands	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d003      	beq.n	8001182 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	4313      	orrs	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001182:	4a19      	ldr	r2, [pc, #100]	@ (80011e8 <HAL_GPIO_Init+0x2bc>)
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800118a:	4b17      	ldr	r3, [pc, #92]	@ (80011e8 <HAL_GPIO_Init+0x2bc>)
 800118c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001190:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	43db      	mvns	r3, r3
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4013      	ands	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d003      	beq.n	80011b0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80011b0:	4a0d      	ldr	r2, [pc, #52]	@ (80011e8 <HAL_GPIO_Init+0x2bc>)
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	3301      	adds	r3, #1
 80011bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	fa22 f303 	lsr.w	r3, r2, r3
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	f47f aeb7 	bne.w	8000f3c <HAL_GPIO_Init+0x10>
  }
}
 80011ce:	bf00      	nop
 80011d0:	bf00      	nop
 80011d2:	371c      	adds	r7, #28
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bc80      	pop	{r7}
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	40010000 	.word	0x40010000
 80011e0:	48000400 	.word	0x48000400
 80011e4:	48000800 	.word	0x48000800
 80011e8:	58000800 	.word	0x58000800

080011ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	807b      	strh	r3, [r7, #2]
 80011f8:	4613      	mov	r3, r2
 80011fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011fc:	787b      	ldrb	r3, [r7, #1]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001202:	887a      	ldrh	r2, [r7, #2]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001208:	e002      	b.n	8001210 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800120a:	887a      	ldrh	r2, [r7, #2]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr
	...

0800121c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001220:	4b04      	ldr	r3, [pc, #16]	@ (8001234 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a03      	ldr	r2, [pc, #12]	@ (8001234 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001226:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800122a:	6013      	str	r3, [r2, #0]
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr
 8001234:	58000400 	.word	0x58000400

08001238 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800123c:	4b03      	ldr	r3, [pc, #12]	@ (800124c <HAL_PWREx_GetVoltageRange+0x14>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8001244:	4618      	mov	r0, r3
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr
 800124c:	58000400 	.word	0x58000400

08001250 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001254:	4b06      	ldr	r3, [pc, #24]	@ (8001270 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800125c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001260:	d101      	bne.n	8001266 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001262:	2301      	movs	r3, #1
 8001264:	e000      	b.n	8001268 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001266:	2300      	movs	r3, #0
}
 8001268:	4618      	mov	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr
 8001270:	58000400 	.word	0x58000400

08001274 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001278:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001282:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001286:	6013      	str	r3, [r2, #0]
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr

08001290 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001294:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800129e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80012a2:	6013      	str	r3, [r2, #0]
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr

080012ac <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80012b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80012be:	d101      	bne.n	80012c4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80012c0:	2301      	movs	r3, #1
 80012c2:	e000      	b.n	80012c6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr

080012ce <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80012d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80012dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012e0:	6013      	str	r3, [r2, #0]
}
 80012e2:	bf00      	nop
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr

080012ea <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80012ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80012f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012fc:	6013      	str	r3, [r2, #0]
}
 80012fe:	bf00      	nop
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr

08001306 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800130a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001314:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001318:	d101      	bne.n	800131e <LL_RCC_HSE_IsReady+0x18>
 800131a:	2301      	movs	r3, #1
 800131c:	e000      	b.n	8001320 <LL_RCC_HSE_IsReady+0x1a>
 800131e:	2300      	movs	r3, #0
}
 8001320:	4618      	mov	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr

08001328 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800132c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001336:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800133a:	6013      	str	r3, [r2, #0]
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr

08001344 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001348:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001352:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001356:	6013      	str	r3, [r2, #0]
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr

08001360 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001364:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800136e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001372:	d101      	bne.n	8001378 <LL_RCC_HSI_IsReady+0x18>
 8001374:	2301      	movs	r3, #1
 8001376:	e000      	b.n	800137a <LL_RCC_HSI_IsReady+0x1a>
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr

08001382 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001382:	b480      	push	{r7}
 8001384:	b083      	sub	sp, #12
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800138a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	061b      	lsls	r3, r3, #24
 8001398:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800139c:	4313      	orrs	r3, r2
 800139e:	604b      	str	r3, [r1, #4]
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr

080013aa <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80013ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d101      	bne.n	80013c2 <LL_RCC_LSE_IsReady+0x18>
 80013be:	2301      	movs	r3, #1
 80013c0:	e000      	b.n	80013c4 <LL_RCC_LSE_IsReady+0x1a>
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr

080013cc <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80013d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr

080013ec <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80013f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80013fc:	f023 0301 	bic.w	r3, r3, #1
 8001400:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr

0800140c <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001410:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001414:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	2b02      	cmp	r3, #2
 800141e:	d101      	bne.n	8001424 <LL_RCC_LSI_IsReady+0x18>
 8001420:	2301      	movs	r3, #1
 8001422:	e000      	b.n	8001426 <LL_RCC_LSI_IsReady+0x1a>
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr

0800142e <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001432:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6013      	str	r3, [r2, #0]
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr

0800144a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800144e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001458:	f023 0301 	bic.w	r3, r3, #1
 800145c:	6013      	str	r3, [r2, #0]
}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr

08001466 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800146a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	2b02      	cmp	r3, #2
 8001476:	d101      	bne.n	800147c <LL_RCC_MSI_IsReady+0x16>
 8001478:	2301      	movs	r3, #1
 800147a:	e000      	b.n	800147e <LL_RCC_MSI_IsReady+0x18>
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	46bd      	mov	sp, r7
 8001482:	bc80      	pop	{r7}
 8001484:	4770      	bx	lr

08001486 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800148a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0308 	and.w	r3, r3, #8
 8001494:	2b08      	cmp	r3, #8
 8001496:	d101      	bne.n	800149c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001498:	2301      	movs	r3, #1
 800149a:	e000      	b.n	800149e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr

080014a6 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80014aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr

080014bc <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80014c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014c8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr

080014d4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80014dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	021b      	lsls	r3, r3, #8
 80014ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80014ee:	4313      	orrs	r3, r2
 80014f0:	604b      	str	r3, [r1, #4]
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr

080014fc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001504:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f023 0203 	bic.w	r2, r3, #3
 800150e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4313      	orrs	r3, r2
 8001516:	608b      	str	r3, [r1, #8]
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr

08001522 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001526:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f003 030c 	and.w	r3, r3, #12
}
 8001530:	4618      	mov	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr

08001538 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001540:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800154a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4313      	orrs	r3, r2
 8001552:	608b      	str	r3, [r1, #8]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr

0800155e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001566:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800156a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800156e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001572:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4313      	orrs	r3, r2
 800157a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr

08001588 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001590:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001594:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001598:	f023 020f 	bic.w	r2, r3, #15
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	091b      	lsrs	r3, r3, #4
 80015a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80015a4:	4313      	orrs	r3, r2
 80015a6:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr

080015b4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80015bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80015c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	608b      	str	r3, [r1, #8]
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr

080015da <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80015da:	b480      	push	{r7}
 80015dc:	b083      	sub	sp, #12
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80015e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80015ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	608b      	str	r3, [r1, #8]
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr

08001600 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001604:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800160e:	4618      	mov	r0, r3
 8001610:	46bd      	mov	sp, r7
 8001612:	bc80      	pop	{r7}
 8001614:	4770      	bx	lr

08001616 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800161a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800161e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001622:	011b      	lsls	r3, r3, #4
 8001624:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001628:	4618      	mov	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr

08001630 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001634:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800163e:	4618      	mov	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr

08001646 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800164a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8001654:	4618      	mov	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr

0800165c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001660:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800166a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800166e:	6013      	str	r3, [r2, #0]
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr

08001678 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800167c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001686:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800168a:	6013      	str	r3, [r2, #0]
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr

08001694 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001698:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80016a6:	d101      	bne.n	80016ac <LL_RCC_PLL_IsReady+0x18>
 80016a8:	2301      	movs	r3, #1
 80016aa:	e000      	b.n	80016ae <LL_RCC_PLL_IsReady+0x1a>
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr

080016b6 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80016ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	0a1b      	lsrs	r3, r3, #8
 80016c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr

080016ce <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80016d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80016dc:	4618      	mov	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr

080016e4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80016e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr

080016fa <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80016fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	f003 0303 	and.w	r3, r3, #3
}
 8001708:	4618      	mov	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr

08001710 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001714:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800171e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001722:	d101      	bne.n	8001728 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001724:	2301      	movs	r3, #1
 8001726:	e000      	b.n	800172a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr

08001732 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001736:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800173a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800173e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001742:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001746:	d101      	bne.n	800174c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001748:	2301      	movs	r3, #1
 800174a:	e000      	b.n	800174e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr

08001756 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800175a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800175e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001762:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001766:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800176a:	d101      	bne.n	8001770 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800176c:	2301      	movs	r3, #1
 800176e:	e000      	b.n	8001772 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr

0800177a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800177e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001788:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800178c:	d101      	bne.n	8001792 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800178e:	2301      	movs	r3, #1
 8001790:	e000      	b.n	8001794 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr

0800179c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80017a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80017ae:	d101      	bne.n	80017b4 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80017b0:	2301      	movs	r3, #1
 80017b2:	e000      	b.n	80017b6 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr
	...

080017c0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e36f      	b.n	8001eb2 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017d2:	f7ff fea6 	bl	8001522 <LL_RCC_GetSysClkSource>
 80017d6:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017d8:	f7ff ff8f 	bl	80016fa <LL_RCC_PLL_GetMainSource>
 80017dc:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0320 	and.w	r3, r3, #32
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f000 80c4 	beq.w	8001974 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d005      	beq.n	80017fe <HAL_RCC_OscConfig+0x3e>
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	2b0c      	cmp	r3, #12
 80017f6:	d176      	bne.n	80018e6 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d173      	bne.n	80018e6 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a1b      	ldr	r3, [r3, #32]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e353      	b.n	8001eb2 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800180e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0308 	and.w	r3, r3, #8
 8001818:	2b00      	cmp	r3, #0
 800181a:	d005      	beq.n	8001828 <HAL_RCC_OscConfig+0x68>
 800181c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001826:	e006      	b.n	8001836 <HAL_RCC_OscConfig+0x76>
 8001828:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800182c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001830:	091b      	lsrs	r3, r3, #4
 8001832:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001836:	4293      	cmp	r3, r2
 8001838:	d222      	bcs.n	8001880 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800183e:	4618      	mov	r0, r3
 8001840:	f000 fd5a 	bl	80022f8 <RCC_SetFlashLatencyFromMSIRange>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e331      	b.n	8001eb2 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800184e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001858:	f043 0308 	orr.w	r3, r3, #8
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800186c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001870:	4313      	orrs	r3, r2
 8001872:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff fe2b 	bl	80014d4 <LL_RCC_MSI_SetCalibTrimming>
 800187e:	e021      	b.n	80018c4 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001880:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800188a:	f043 0308 	orr.w	r3, r3, #8
 800188e:	6013      	str	r3, [r2, #0]
 8001890:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800189e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018a2:	4313      	orrs	r3, r2
 80018a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff fe12 	bl	80014d4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018b4:	4618      	mov	r0, r3
 80018b6:	f000 fd1f 	bl	80022f8 <RCC_SetFlashLatencyFromMSIRange>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e2f6      	b.n	8001eb2 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80018c4:	f000 fce0 	bl	8002288 <HAL_RCC_GetHCLKFreq>
 80018c8:	4603      	mov	r3, r0
 80018ca:	4aa7      	ldr	r2, [pc, #668]	@ (8001b68 <HAL_RCC_OscConfig+0x3a8>)
 80018cc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80018ce:	4ba7      	ldr	r3, [pc, #668]	@ (8001b6c <HAL_RCC_OscConfig+0x3ac>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff f9c8 	bl	8000c68 <HAL_InitTick>
 80018d8:	4603      	mov	r3, r0
 80018da:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80018dc:	7cfb      	ldrb	r3, [r7, #19]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d047      	beq.n	8001972 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80018e2:	7cfb      	ldrb	r3, [r7, #19]
 80018e4:	e2e5      	b.n	8001eb2 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a1b      	ldr	r3, [r3, #32]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d02c      	beq.n	8001948 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018ee:	f7ff fd9e 	bl	800142e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018f2:	f7ff fa05 	bl	8000d00 <HAL_GetTick>
 80018f6:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018fa:	f7ff fa01 	bl	8000d00 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e2d2      	b.n	8001eb2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 800190c:	f7ff fdab 	bl	8001466 <LL_RCC_MSI_IsReady>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d0f1      	beq.n	80018fa <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001916:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001920:	f043 0308 	orr.w	r3, r3, #8
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001934:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001938:	4313      	orrs	r3, r2
 800193a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff fdc7 	bl	80014d4 <LL_RCC_MSI_SetCalibTrimming>
 8001946:	e015      	b.n	8001974 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001948:	f7ff fd7f 	bl	800144a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800194c:	f7ff f9d8 	bl	8000d00 <HAL_GetTick>
 8001950:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001954:	f7ff f9d4 	bl	8000d00 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e2a5      	b.n	8001eb2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001966:	f7ff fd7e 	bl	8001466 <LL_RCC_MSI_IsReady>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1f1      	bne.n	8001954 <HAL_RCC_OscConfig+0x194>
 8001970:	e000      	b.n	8001974 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001972:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	2b00      	cmp	r3, #0
 800197e:	d058      	beq.n	8001a32 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	2b08      	cmp	r3, #8
 8001984:	d005      	beq.n	8001992 <HAL_RCC_OscConfig+0x1d2>
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	2b0c      	cmp	r3, #12
 800198a:	d108      	bne.n	800199e <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	2b03      	cmp	r3, #3
 8001990:	d105      	bne.n	800199e <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d14b      	bne.n	8001a32 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e289      	b.n	8001eb2 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800199e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019b0:	4313      	orrs	r3, r2
 80019b2:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019bc:	d102      	bne.n	80019c4 <HAL_RCC_OscConfig+0x204>
 80019be:	f7ff fc86 	bl	80012ce <LL_RCC_HSE_Enable>
 80019c2:	e00d      	b.n	80019e0 <HAL_RCC_OscConfig+0x220>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 80019cc:	d104      	bne.n	80019d8 <HAL_RCC_OscConfig+0x218>
 80019ce:	f7ff fc51 	bl	8001274 <LL_RCC_HSE_EnableTcxo>
 80019d2:	f7ff fc7c 	bl	80012ce <LL_RCC_HSE_Enable>
 80019d6:	e003      	b.n	80019e0 <HAL_RCC_OscConfig+0x220>
 80019d8:	f7ff fc87 	bl	80012ea <LL_RCC_HSE_Disable>
 80019dc:	f7ff fc58 	bl	8001290 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d012      	beq.n	8001a0e <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e8:	f7ff f98a 	bl	8000d00 <HAL_GetTick>
 80019ec:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f0:	f7ff f986 	bl	8000d00 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b64      	cmp	r3, #100	@ 0x64
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e257      	b.n	8001eb2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001a02:	f7ff fc80 	bl	8001306 <LL_RCC_HSE_IsReady>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d0f1      	beq.n	80019f0 <HAL_RCC_OscConfig+0x230>
 8001a0c:	e011      	b.n	8001a32 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0e:	f7ff f977 	bl	8000d00 <HAL_GetTick>
 8001a12:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001a14:	e008      	b.n	8001a28 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a16:	f7ff f973 	bl	8000d00 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b64      	cmp	r3, #100	@ 0x64
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e244      	b.n	8001eb2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001a28:	f7ff fc6d 	bl	8001306 <LL_RCC_HSE_IsReady>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f1      	bne.n	8001a16 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d046      	beq.n	8001acc <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	2b04      	cmp	r3, #4
 8001a42:	d005      	beq.n	8001a50 <HAL_RCC_OscConfig+0x290>
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	2b0c      	cmp	r3, #12
 8001a48:	d10e      	bne.n	8001a68 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d10b      	bne.n	8001a68 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e22a      	b.n	8001eb2 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	695b      	ldr	r3, [r3, #20]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff fc8e 	bl	8001382 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001a66:	e031      	b.n	8001acc <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d019      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a70:	f7ff fc5a 	bl	8001328 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a74:	f7ff f944 	bl	8000d00 <HAL_GetTick>
 8001a78:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a7c:	f7ff f940 	bl	8000d00 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e211      	b.n	8001eb2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001a8e:	f7ff fc67 	bl	8001360 <LL_RCC_HSI_IsReady>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0f1      	beq.n	8001a7c <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff fc70 	bl	8001382 <LL_RCC_HSI_SetCalibTrimming>
 8001aa2:	e013      	b.n	8001acc <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aa4:	f7ff fc4e 	bl	8001344 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa8:	f7ff f92a 	bl	8000d00 <HAL_GetTick>
 8001aac:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ab0:	f7ff f926 	bl	8000d00 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e1f7      	b.n	8001eb2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001ac2:	f7ff fc4d 	bl	8001360 <LL_RCC_HSI_IsReady>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1f1      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0308 	and.w	r3, r3, #8
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d06e      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d056      	beq.n	8001b8e <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001ae0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ae8:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69da      	ldr	r2, [r3, #28]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f003 0310 	and.w	r3, r3, #16
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d031      	beq.n	8001b5c <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d006      	beq.n	8001b10 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e1d0      	b.n	8001eb2 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d013      	beq.n	8001b42 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8001b1a:	f7ff fc67 	bl	80013ec <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b1e:	f7ff f8ef 	bl	8000d00 <HAL_GetTick>
 8001b22:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b26:	f7ff f8eb 	bl	8000d00 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b11      	cmp	r3, #17
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e1bc      	b.n	8001eb2 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001b38:	f7ff fc68 	bl	800140c <LL_RCC_LSI_IsReady>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f1      	bne.n	8001b26 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001b42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b4a:	f023 0210 	bic.w	r2, r3, #16
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b56:	4313      	orrs	r3, r2
 8001b58:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b5c:	f7ff fc36 	bl	80013cc <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b60:	f7ff f8ce 	bl	8000d00 <HAL_GetTick>
 8001b64:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001b66:	e00c      	b.n	8001b82 <HAL_RCC_OscConfig+0x3c2>
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	20000010 	.word	0x20000010
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b70:	f7ff f8c6 	bl	8000d00 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b11      	cmp	r3, #17
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e197      	b.n	8001eb2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001b82:	f7ff fc43 	bl	800140c <LL_RCC_LSI_IsReady>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0f1      	beq.n	8001b70 <HAL_RCC_OscConfig+0x3b0>
 8001b8c:	e013      	b.n	8001bb6 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b8e:	f7ff fc2d 	bl	80013ec <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b92:	f7ff f8b5 	bl	8000d00 <HAL_GetTick>
 8001b96:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b9a:	f7ff f8b1 	bl	8000d00 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b11      	cmp	r3, #17
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e182      	b.n	8001eb2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001bac:	f7ff fc2e 	bl	800140c <LL_RCC_LSI_IsReady>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f1      	bne.n	8001b9a <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0304 	and.w	r3, r3, #4
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 80d8 	beq.w	8001d74 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001bc4:	f7ff fb44 	bl	8001250 <LL_PWR_IsEnabledBkUpAccess>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d113      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001bce:	f7ff fb25 	bl	800121c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bd2:	f7ff f895 	bl	8000d00 <HAL_GetTick>
 8001bd6:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bda:	f7ff f891 	bl	8000d00 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e162      	b.n	8001eb2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001bec:	f7ff fb30 	bl	8001250 <LL_PWR_IsEnabledBkUpAccess>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d0f1      	beq.n	8001bda <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d07b      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	2b85      	cmp	r3, #133	@ 0x85
 8001c04:	d003      	beq.n	8001c0e <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	2b05      	cmp	r3, #5
 8001c0c:	d109      	bne.n	8001c22 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001c0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c1a:	f043 0304 	orr.w	r3, r3, #4
 8001c1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c22:	f7ff f86d 	bl	8000d00 <HAL_GetTick>
 8001c26:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001c28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001c3c:	e00a      	b.n	8001c54 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c3e:	f7ff f85f 	bl	8000d00 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e12e      	b.n	8001eb2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001c54:	f7ff fba9 	bl	80013aa <LL_RCC_LSE_IsReady>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0ef      	beq.n	8001c3e <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	2b81      	cmp	r3, #129	@ 0x81
 8001c64:	d003      	beq.n	8001c6e <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	2b85      	cmp	r3, #133	@ 0x85
 8001c6c:	d121      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6e:	f7ff f847 	bl	8000d00 <HAL_GetTick>
 8001c72:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001c74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c7c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001c88:	e00a      	b.n	8001ca0 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c8a:	f7ff f839 	bl	8000d00 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e108      	b.n	8001eb2 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001ca0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ca8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0ec      	beq.n	8001c8a <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001cb0:	e060      	b.n	8001d74 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb2:	f7ff f825 	bl	8000d00 <HAL_GetTick>
 8001cb6:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001cb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cc0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001cc4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001cc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001ccc:	e00a      	b.n	8001ce4 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cce:	f7ff f817 	bl	8000d00 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e0e6      	b.n	8001eb2 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001ce4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1ec      	bne.n	8001cce <HAL_RCC_OscConfig+0x50e>
 8001cf4:	e03e      	b.n	8001d74 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf6:	f7ff f803 	bl	8000d00 <HAL_GetTick>
 8001cfa:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001cfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001d0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001d10:	e00a      	b.n	8001d28 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d12:	f7fe fff5 	bl	8000d00 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e0c4      	b.n	8001eb2 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001d28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1ec      	bne.n	8001d12 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d38:	f7fe ffe2 	bl	8000d00 <HAL_GetTick>
 8001d3c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d4a:	f023 0301 	bic.w	r3, r3, #1
 8001d4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001d52:	e00a      	b.n	8001d6a <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d54:	f7fe ffd4 	bl	8000d00 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e0a3      	b.n	8001eb2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001d6a:	f7ff fb1e 	bl	80013aa <LL_RCC_LSE_IsReady>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1ef      	bne.n	8001d54 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f000 8099 	beq.w	8001eb0 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	2b0c      	cmp	r3, #12
 8001d82:	d06c      	beq.n	8001e5e <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d14b      	bne.n	8001e24 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d8c:	f7ff fc74 	bl	8001678 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d90:	f7fe ffb6 	bl	8000d00 <HAL_GetTick>
 8001d94:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d98:	f7fe ffb2 	bl	8000d00 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b0a      	cmp	r3, #10
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e083      	b.n	8001eb2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001daa:	f7ff fc73 	bl	8001694 <LL_RCC_PLL_IsReady>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1f1      	bne.n	8001d98 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001db4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001db8:	68da      	ldr	r2, [r3, #12]
 8001dba:	4b40      	ldr	r3, [pc, #256]	@ (8001ebc <HAL_RCC_OscConfig+0x6fc>)
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001dc6:	4311      	orrs	r1, r2
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001dcc:	0212      	lsls	r2, r2, #8
 8001dce:	4311      	orrs	r1, r2
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001dd4:	4311      	orrs	r1, r2
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001dda:	4311      	orrs	r1, r2
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001de0:	430a      	orrs	r2, r1
 8001de2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001de6:	4313      	orrs	r3, r2
 8001de8:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dea:	f7ff fc37 	bl	800165c <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001df8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dfc:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfe:	f7fe ff7f 	bl	8000d00 <HAL_GetTick>
 8001e02:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e06:	f7fe ff7b 	bl	8000d00 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b0a      	cmp	r3, #10
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e04c      	b.n	8001eb2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8001e18:	f7ff fc3c 	bl	8001694 <LL_RCC_PLL_IsReady>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0f1      	beq.n	8001e06 <HAL_RCC_OscConfig+0x646>
 8001e22:	e045      	b.n	8001eb0 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e24:	f7ff fc28 	bl	8001678 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e28:	f7fe ff6a 	bl	8000d00 <HAL_GetTick>
 8001e2c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e30:	f7fe ff66 	bl	8000d00 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b0a      	cmp	r3, #10
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e037      	b.n	8001eb2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001e42:	f7ff fc27 	bl	8001694 <LL_RCC_PLL_IsReady>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1f1      	bne.n	8001e30 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8001e4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e50:	68da      	ldr	r2, [r3, #12]
 8001e52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e56:	4b1a      	ldr	r3, [pc, #104]	@ (8001ec0 <HAL_RCC_OscConfig+0x700>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	60cb      	str	r3, [r1, #12]
 8001e5c:	e028      	b.n	8001eb0 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d101      	bne.n	8001e6a <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e023      	b.n	8001eb2 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	f003 0203 	and.w	r2, r3, #3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d115      	bne.n	8001eac <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d10e      	bne.n	8001eac <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e98:	021b      	lsls	r3, r3, #8
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d106      	bne.n	8001eac <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d001      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e000      	b.n	8001eb2 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3720      	adds	r7, #32
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	11c1808c 	.word	0x11c1808c
 8001ec0:	eefefffc 	.word	0xeefefffc

08001ec4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e12c      	b.n	8002132 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ed8:	4b98      	ldr	r3, [pc, #608]	@ (800213c <HAL_RCC_ClockConfig+0x278>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d91b      	bls.n	8001f1e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee6:	4b95      	ldr	r3, [pc, #596]	@ (800213c <HAL_RCC_ClockConfig+0x278>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f023 0207 	bic.w	r2, r3, #7
 8001eee:	4993      	ldr	r1, [pc, #588]	@ (800213c <HAL_RCC_ClockConfig+0x278>)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ef6:	f7fe ff03 	bl	8000d00 <HAL_GetTick>
 8001efa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001efe:	f7fe feff 	bl	8000d00 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e110      	b.n	8002132 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f10:	4b8a      	ldr	r3, [pc, #552]	@ (800213c <HAL_RCC_ClockConfig+0x278>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d1ef      	bne.n	8001efe <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d016      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff fb02 	bl	8001538 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001f34:	f7fe fee4 	bl	8000d00 <HAL_GetTick>
 8001f38:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001f3c:	f7fe fee0 	bl	8000d00 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e0f1      	b.n	8002132 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001f4e:	f7ff fbdf 	bl	8001710 <LL_RCC_IsActiveFlag_HPRE>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0f1      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0320 	and.w	r3, r3, #32
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d016      	beq.n	8001f92 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff faf8 	bl	800155e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001f6e:	f7fe fec7 	bl	8000d00 <HAL_GetTick>
 8001f72:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001f74:	e008      	b.n	8001f88 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001f76:	f7fe fec3 	bl	8000d00 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e0d4      	b.n	8002132 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001f88:	f7ff fbd3 	bl	8001732 <LL_RCC_IsActiveFlag_C2HPRE>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d0f1      	beq.n	8001f76 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d016      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff faf0 	bl	8001588 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001fa8:	f7fe feaa 	bl	8000d00 <HAL_GetTick>
 8001fac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001fb0:	f7fe fea6 	bl	8000d00 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e0b7      	b.n	8002132 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001fc2:	f7ff fbc8 	bl	8001756 <LL_RCC_IsActiveFlag_SHDHPRE>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0f1      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d016      	beq.n	8002006 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff fae9 	bl	80015b4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001fe2:	f7fe fe8d 	bl	8000d00 <HAL_GetTick>
 8001fe6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001fe8:	e008      	b.n	8001ffc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001fea:	f7fe fe89 	bl	8000d00 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e09a      	b.n	8002132 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001ffc:	f7ff fbbd 	bl	800177a <LL_RCC_IsActiveFlag_PPRE1>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0f1      	beq.n	8001fea <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	2b00      	cmp	r3, #0
 8002010:	d017      	beq.n	8002042 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff fade 	bl	80015da <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800201e:	f7fe fe6f 	bl	8000d00 <HAL_GetTick>
 8002022:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002024:	e008      	b.n	8002038 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002026:	f7fe fe6b 	bl	8000d00 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e07c      	b.n	8002132 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002038:	f7ff fbb0 	bl	800179c <LL_RCC_IsActiveFlag_PPRE2>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0f1      	beq.n	8002026 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d043      	beq.n	80020d6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b02      	cmp	r3, #2
 8002054:	d106      	bne.n	8002064 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002056:	f7ff f956 	bl	8001306 <LL_RCC_HSE_IsReady>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d11e      	bne.n	800209e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e066      	b.n	8002132 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	2b03      	cmp	r3, #3
 800206a:	d106      	bne.n	800207a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800206c:	f7ff fb12 	bl	8001694 <LL_RCC_PLL_IsReady>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d113      	bne.n	800209e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e05b      	b.n	8002132 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d106      	bne.n	8002090 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002082:	f7ff f9f0 	bl	8001466 <LL_RCC_MSI_IsReady>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d108      	bne.n	800209e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e050      	b.n	8002132 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002090:	f7ff f966 	bl	8001360 <LL_RCC_HSI_IsReady>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e049      	b.n	8002132 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff fa2a 	bl	80014fc <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020a8:	f7fe fe2a 	bl	8000d00 <HAL_GetTick>
 80020ac:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ae:	e00a      	b.n	80020c6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b0:	f7fe fe26 	bl	8000d00 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020be:	4293      	cmp	r3, r2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e035      	b.n	8002132 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c6:	f7ff fa2c 	bl	8001522 <LL_RCC_GetSysClkSource>
 80020ca:	4602      	mov	r2, r0
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d1ec      	bne.n	80020b0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020d6:	4b19      	ldr	r3, [pc, #100]	@ (800213c <HAL_RCC_ClockConfig+0x278>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d21b      	bcs.n	800211c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e4:	4b15      	ldr	r3, [pc, #84]	@ (800213c <HAL_RCC_ClockConfig+0x278>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f023 0207 	bic.w	r2, r3, #7
 80020ec:	4913      	ldr	r1, [pc, #76]	@ (800213c <HAL_RCC_ClockConfig+0x278>)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020f4:	f7fe fe04 	bl	8000d00 <HAL_GetTick>
 80020f8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fa:	e008      	b.n	800210e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80020fc:	f7fe fe00 	bl	8000d00 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e011      	b.n	8002132 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800210e:	4b0b      	ldr	r3, [pc, #44]	@ (800213c <HAL_RCC_ClockConfig+0x278>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	429a      	cmp	r2, r3
 800211a:	d1ef      	bne.n	80020fc <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800211c:	f000 f8b4 	bl	8002288 <HAL_RCC_GetHCLKFreq>
 8002120:	4603      	mov	r3, r0
 8002122:	4a07      	ldr	r2, [pc, #28]	@ (8002140 <HAL_RCC_ClockConfig+0x27c>)
 8002124:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8002126:	4b07      	ldr	r3, [pc, #28]	@ (8002144 <HAL_RCC_ClockConfig+0x280>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f7fe fd9c 	bl	8000c68 <HAL_InitTick>
 8002130:	4603      	mov	r3, r0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	58004000 	.word	0x58004000
 8002140:	20000000 	.word	0x20000000
 8002144:	20000010 	.word	0x20000010

08002148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002148:	b590      	push	{r4, r7, lr}
 800214a:	b087      	sub	sp, #28
 800214c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800214e:	2300      	movs	r3, #0
 8002150:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002152:	2300      	movs	r3, #0
 8002154:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002156:	f7ff f9e4 	bl	8001522 <LL_RCC_GetSysClkSource>
 800215a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800215c:	f7ff facd 	bl	80016fa <LL_RCC_PLL_GetMainSource>
 8002160:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d005      	beq.n	8002174 <HAL_RCC_GetSysClockFreq+0x2c>
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	2b0c      	cmp	r3, #12
 800216c:	d139      	bne.n	80021e2 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d136      	bne.n	80021e2 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002174:	f7ff f987 	bl	8001486 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d115      	bne.n	80021aa <HAL_RCC_GetSysClockFreq+0x62>
 800217e:	f7ff f982 	bl	8001486 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002182:	4603      	mov	r3, r0
 8002184:	2b01      	cmp	r3, #1
 8002186:	d106      	bne.n	8002196 <HAL_RCC_GetSysClockFreq+0x4e>
 8002188:	f7ff f98d 	bl	80014a6 <LL_RCC_MSI_GetRange>
 800218c:	4603      	mov	r3, r0
 800218e:	0a1b      	lsrs	r3, r3, #8
 8002190:	f003 030f 	and.w	r3, r3, #15
 8002194:	e005      	b.n	80021a2 <HAL_RCC_GetSysClockFreq+0x5a>
 8002196:	f7ff f991 	bl	80014bc <LL_RCC_MSI_GetRangeAfterStandby>
 800219a:	4603      	mov	r3, r0
 800219c:	0a1b      	lsrs	r3, r3, #8
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	4a36      	ldr	r2, [pc, #216]	@ (800227c <HAL_RCC_GetSysClockFreq+0x134>)
 80021a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a8:	e014      	b.n	80021d4 <HAL_RCC_GetSysClockFreq+0x8c>
 80021aa:	f7ff f96c 	bl	8001486 <LL_RCC_MSI_IsEnabledRangeSelect>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d106      	bne.n	80021c2 <HAL_RCC_GetSysClockFreq+0x7a>
 80021b4:	f7ff f977 	bl	80014a6 <LL_RCC_MSI_GetRange>
 80021b8:	4603      	mov	r3, r0
 80021ba:	091b      	lsrs	r3, r3, #4
 80021bc:	f003 030f 	and.w	r3, r3, #15
 80021c0:	e005      	b.n	80021ce <HAL_RCC_GetSysClockFreq+0x86>
 80021c2:	f7ff f97b 	bl	80014bc <LL_RCC_MSI_GetRangeAfterStandby>
 80021c6:	4603      	mov	r3, r0
 80021c8:	091b      	lsrs	r3, r3, #4
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	4a2b      	ldr	r2, [pc, #172]	@ (800227c <HAL_RCC_GetSysClockFreq+0x134>)
 80021d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d4:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d115      	bne.n	8002208 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80021e0:	e012      	b.n	8002208 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d102      	bne.n	80021ee <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021e8:	4b25      	ldr	r3, [pc, #148]	@ (8002280 <HAL_RCC_GetSysClockFreq+0x138>)
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	e00c      	b.n	8002208 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	2b08      	cmp	r3, #8
 80021f2:	d109      	bne.n	8002208 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80021f4:	f7ff f85a 	bl	80012ac <LL_RCC_HSE_IsEnabledDiv2>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d102      	bne.n	8002204 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80021fe:	4b20      	ldr	r3, [pc, #128]	@ (8002280 <HAL_RCC_GetSysClockFreq+0x138>)
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	e001      	b.n	8002208 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002204:	4b1f      	ldr	r3, [pc, #124]	@ (8002284 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002206:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002208:	f7ff f98b 	bl	8001522 <LL_RCC_GetSysClkSource>
 800220c:	4603      	mov	r3, r0
 800220e:	2b0c      	cmp	r3, #12
 8002210:	d12f      	bne.n	8002272 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002212:	f7ff fa72 	bl	80016fa <LL_RCC_PLL_GetMainSource>
 8002216:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b02      	cmp	r3, #2
 800221c:	d003      	beq.n	8002226 <HAL_RCC_GetSysClockFreq+0xde>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b03      	cmp	r3, #3
 8002222:	d003      	beq.n	800222c <HAL_RCC_GetSysClockFreq+0xe4>
 8002224:	e00d      	b.n	8002242 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002226:	4b16      	ldr	r3, [pc, #88]	@ (8002280 <HAL_RCC_GetSysClockFreq+0x138>)
 8002228:	60fb      	str	r3, [r7, #12]
        break;
 800222a:	e00d      	b.n	8002248 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800222c:	f7ff f83e 	bl	80012ac <LL_RCC_HSE_IsEnabledDiv2>
 8002230:	4603      	mov	r3, r0
 8002232:	2b01      	cmp	r3, #1
 8002234:	d102      	bne.n	800223c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002236:	4b12      	ldr	r3, [pc, #72]	@ (8002280 <HAL_RCC_GetSysClockFreq+0x138>)
 8002238:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800223a:	e005      	b.n	8002248 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800223c:	4b11      	ldr	r3, [pc, #68]	@ (8002284 <HAL_RCC_GetSysClockFreq+0x13c>)
 800223e:	60fb      	str	r3, [r7, #12]
        break;
 8002240:	e002      	b.n	8002248 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	60fb      	str	r3, [r7, #12]
        break;
 8002246:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002248:	f7ff fa35 	bl	80016b6 <LL_RCC_PLL_GetN>
 800224c:	4602      	mov	r2, r0
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	fb03 f402 	mul.w	r4, r3, r2
 8002254:	f7ff fa46 	bl	80016e4 <LL_RCC_PLL_GetDivider>
 8002258:	4603      	mov	r3, r0
 800225a:	091b      	lsrs	r3, r3, #4
 800225c:	3301      	adds	r3, #1
 800225e:	fbb4 f4f3 	udiv	r4, r4, r3
 8002262:	f7ff fa34 	bl	80016ce <LL_RCC_PLL_GetR>
 8002266:	4603      	mov	r3, r0
 8002268:	0f5b      	lsrs	r3, r3, #29
 800226a:	3301      	adds	r3, #1
 800226c:	fbb4 f3f3 	udiv	r3, r4, r3
 8002270:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002272:	697b      	ldr	r3, [r7, #20]
}
 8002274:	4618      	mov	r0, r3
 8002276:	371c      	adds	r7, #28
 8002278:	46bd      	mov	sp, r7
 800227a:	bd90      	pop	{r4, r7, pc}
 800227c:	080045a8 	.word	0x080045a8
 8002280:	00f42400 	.word	0x00f42400
 8002284:	01e84800 	.word	0x01e84800

08002288 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002288:	b598      	push	{r3, r4, r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800228c:	f7ff ff5c 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 8002290:	4604      	mov	r4, r0
 8002292:	f7ff f9b5 	bl	8001600 <LL_RCC_GetAHBPrescaler>
 8002296:	4603      	mov	r3, r0
 8002298:	091b      	lsrs	r3, r3, #4
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	4a03      	ldr	r2, [pc, #12]	@ (80022ac <HAL_RCC_GetHCLKFreq+0x24>)
 80022a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	bd98      	pop	{r3, r4, r7, pc}
 80022ac:	08004548 	.word	0x08004548

080022b0 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022b0:	b598      	push	{r3, r4, r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80022b4:	f7ff ffe8 	bl	8002288 <HAL_RCC_GetHCLKFreq>
 80022b8:	4604      	mov	r4, r0
 80022ba:	f7ff f9b9 	bl	8001630 <LL_RCC_GetAPB1Prescaler>
 80022be:	4603      	mov	r3, r0
 80022c0:	0a1b      	lsrs	r3, r3, #8
 80022c2:	4a03      	ldr	r2, [pc, #12]	@ (80022d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	bd98      	pop	{r3, r4, r7, pc}
 80022d0:	08004588 	.word	0x08004588

080022d4 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022d4:	b598      	push	{r3, r4, r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80022d8:	f7ff ffd6 	bl	8002288 <HAL_RCC_GetHCLKFreq>
 80022dc:	4604      	mov	r4, r0
 80022de:	f7ff f9b2 	bl	8001646 <LL_RCC_GetAPB2Prescaler>
 80022e2:	4603      	mov	r3, r0
 80022e4:	0adb      	lsrs	r3, r3, #11
 80022e6:	4a03      	ldr	r2, [pc, #12]	@ (80022f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ec:	fa24 f303 	lsr.w	r3, r4, r3
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	bd98      	pop	{r3, r4, r7, pc}
 80022f4:	08004588 	.word	0x08004588

080022f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80022f8:	b590      	push	{r4, r7, lr}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	091b      	lsrs	r3, r3, #4
 8002304:	f003 030f 	and.w	r3, r3, #15
 8002308:	4a10      	ldr	r2, [pc, #64]	@ (800234c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800230a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800230e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002310:	f7ff f981 	bl	8001616 <LL_RCC_GetAHB3Prescaler>
 8002314:	4603      	mov	r3, r0
 8002316:	091b      	lsrs	r3, r3, #4
 8002318:	f003 030f 	and.w	r3, r3, #15
 800231c:	4a0c      	ldr	r2, [pc, #48]	@ (8002350 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800231e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	fbb2 f3f3 	udiv	r3, r2, r3
 8002328:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	4a09      	ldr	r2, [pc, #36]	@ (8002354 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800232e:	fba2 2303 	umull	r2, r3, r2, r3
 8002332:	0c9c      	lsrs	r4, r3, #18
 8002334:	f7fe ff80 	bl	8001238 <HAL_PWREx_GetVoltageRange>
 8002338:	4603      	mov	r3, r0
 800233a:	4619      	mov	r1, r3
 800233c:	4620      	mov	r0, r4
 800233e:	f000 f80b 	bl	8002358 <RCC_SetFlashLatency>
 8002342:	4603      	mov	r3, r0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	bd90      	pop	{r4, r7, pc}
 800234c:	080045a8 	.word	0x080045a8
 8002350:	08004548 	.word	0x08004548
 8002354:	431bde83 	.word	0x431bde83

08002358 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b08e      	sub	sp, #56	@ 0x38
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002362:	4a3a      	ldr	r2, [pc, #232]	@ (800244c <RCC_SetFlashLatency+0xf4>)
 8002364:	f107 0320 	add.w	r3, r7, #32
 8002368:	e892 0003 	ldmia.w	r2, {r0, r1}
 800236c:	6018      	str	r0, [r3, #0]
 800236e:	3304      	adds	r3, #4
 8002370:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002372:	4a37      	ldr	r2, [pc, #220]	@ (8002450 <RCC_SetFlashLatency+0xf8>)
 8002374:	f107 0318 	add.w	r3, r7, #24
 8002378:	e892 0003 	ldmia.w	r2, {r0, r1}
 800237c:	6018      	str	r0, [r3, #0]
 800237e:	3304      	adds	r3, #4
 8002380:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002382:	4a34      	ldr	r2, [pc, #208]	@ (8002454 <RCC_SetFlashLatency+0xfc>)
 8002384:	f107 030c 	add.w	r3, r7, #12
 8002388:	ca07      	ldmia	r2, {r0, r1, r2}
 800238a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800238e:	2300      	movs	r3, #0
 8002390:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002398:	d11b      	bne.n	80023d2 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800239a:	2300      	movs	r3, #0
 800239c:	633b      	str	r3, [r7, #48]	@ 0x30
 800239e:	e014      	b.n	80023ca <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80023a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	3338      	adds	r3, #56	@ 0x38
 80023a6:	443b      	add	r3, r7
 80023a8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80023ac:	461a      	mov	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d807      	bhi.n	80023c4 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80023b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	3338      	adds	r3, #56	@ 0x38
 80023ba:	443b      	add	r3, r7
 80023bc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80023c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80023c2:	e021      	b.n	8002408 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80023c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023c6:	3301      	adds	r3, #1
 80023c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80023ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d9e7      	bls.n	80023a0 <RCC_SetFlashLatency+0x48>
 80023d0:	e01a      	b.n	8002408 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80023d2:	2300      	movs	r3, #0
 80023d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023d6:	e014      	b.n	8002402 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80023d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	3338      	adds	r3, #56	@ 0x38
 80023de:	443b      	add	r3, r7
 80023e0:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80023e4:	461a      	mov	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d807      	bhi.n	80023fc <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80023ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	3338      	adds	r3, #56	@ 0x38
 80023f2:	443b      	add	r3, r7
 80023f4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80023f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80023fa:	e005      	b.n	8002408 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80023fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023fe:	3301      	adds	r3, #1
 8002400:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002404:	2b02      	cmp	r3, #2
 8002406:	d9e7      	bls.n	80023d8 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002408:	4b13      	ldr	r3, [pc, #76]	@ (8002458 <RCC_SetFlashLatency+0x100>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f023 0207 	bic.w	r2, r3, #7
 8002410:	4911      	ldr	r1, [pc, #68]	@ (8002458 <RCC_SetFlashLatency+0x100>)
 8002412:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002414:	4313      	orrs	r3, r2
 8002416:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002418:	f7fe fc72 	bl	8000d00 <HAL_GetTick>
 800241c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800241e:	e008      	b.n	8002432 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002420:	f7fe fc6e 	bl	8000d00 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e007      	b.n	8002442 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002432:	4b09      	ldr	r3, [pc, #36]	@ (8002458 <RCC_SetFlashLatency+0x100>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800243c:	429a      	cmp	r2, r3
 800243e:	d1ef      	bne.n	8002420 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3738      	adds	r7, #56	@ 0x38
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	0800452c 	.word	0x0800452c
 8002450:	08004534 	.word	0x08004534
 8002454:	0800453c 	.word	0x0800453c
 8002458:	58004000 	.word	0x58004000

0800245c <LL_RCC_LSE_IsReady>:
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002460:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002464:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b02      	cmp	r3, #2
 800246e:	d101      	bne.n	8002474 <LL_RCC_LSE_IsReady+0x18>
 8002470:	2301      	movs	r3, #1
 8002472:	e000      	b.n	8002476 <LL_RCC_LSE_IsReady+0x1a>
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	46bd      	mov	sp, r7
 800247a:	bc80      	pop	{r7}
 800247c:	4770      	bx	lr

0800247e <LL_RCC_SetUSARTClockSource>:
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002486:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800248a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	0c1b      	lsrs	r3, r3, #16
 8002492:	43db      	mvns	r3, r3
 8002494:	401a      	ands	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	b29b      	uxth	r3, r3
 800249a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800249e:	4313      	orrs	r3, r2
 80024a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bc80      	pop	{r7}
 80024ac:	4770      	bx	lr

080024ae <LL_RCC_SetI2SClockSource>:
{
 80024ae:	b480      	push	{r7}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80024b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024be:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80024c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr

080024d8 <LL_RCC_SetLPUARTClockSource>:
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80024e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024e8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80024ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc80      	pop	{r7}
 8002500:	4770      	bx	lr

08002502 <LL_RCC_SetI2CClockSource>:
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800250a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800250e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	091b      	lsrs	r3, r3, #4
 8002516:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800251a:	43db      	mvns	r3, r3
 800251c:	401a      	ands	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002526:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800252a:	4313      	orrs	r3, r2
 800252c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr

0800253a <LL_RCC_SetLPTIMClockSource>:
{
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002542:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002546:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	0c1b      	lsrs	r3, r3, #16
 800254e:	041b      	lsls	r3, r3, #16
 8002550:	43db      	mvns	r3, r3
 8002552:	401a      	ands	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	041b      	lsls	r3, r3, #16
 8002558:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800255c:	4313      	orrs	r3, r2
 800255e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	bc80      	pop	{r7}
 800256a:	4770      	bx	lr

0800256c <LL_RCC_SetRNGClockSource>:
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002574:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800257c:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002580:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4313      	orrs	r3, r2
 8002588:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	bc80      	pop	{r7}
 8002594:	4770      	bx	lr

08002596 <LL_RCC_SetADCClockSource>:
{
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800259e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025a6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80025aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr

080025c0 <LL_RCC_SetRTCClockSource>:
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80025c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4313      	orrs	r3, r2
 80025dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr

080025ea <LL_RCC_GetRTCClockSource>:
{
 80025ea:	b480      	push	{r7}
 80025ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80025ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr

08002602 <LL_RCC_ForceBackupDomainReset>:
{
 8002602:	b480      	push	{r7}
 8002604:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002606:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800260a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800260e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002612:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002616:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800261a:	bf00      	nop
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr

08002622 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002622:	b480      	push	{r7}
 8002624:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002626:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800262a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800262e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002632:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002636:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800263a:	bf00      	nop
 800263c:	46bd      	mov	sp, r7
 800263e:	bc80      	pop	{r7}
 8002640:	4770      	bx	lr
	...

08002644 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002650:	2300      	movs	r3, #0
 8002652:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002654:	2300      	movs	r3, #0
 8002656:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d058      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002664:	f7fe fdda 	bl	800121c <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002668:	f7fe fb4a 	bl	8000d00 <HAL_GetTick>
 800266c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800266e:	e009      	b.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002670:	f7fe fb46 	bl	8000d00 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d902      	bls.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	74fb      	strb	r3, [r7, #19]
        break;
 8002682:	e006      	b.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002684:	4b7b      	ldr	r3, [pc, #492]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800268c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002690:	d1ee      	bne.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002692:	7cfb      	ldrb	r3, [r7, #19]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d13c      	bne.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002698:	f7ff ffa7 	bl	80025ea <LL_RCC_GetRTCClockSource>
 800269c:	4602      	mov	r2, r0
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d00f      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026b2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026b4:	f7ff ffa5 	bl	8002602 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026b8:	f7ff ffb3 	bl	8002622 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d014      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d0:	f7fe fb16 	bl	8000d00 <HAL_GetTick>
 80026d4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80026d6:	e00b      	b.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d8:	f7fe fb12 	bl	8000d00 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d902      	bls.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	74fb      	strb	r3, [r7, #19]
            break;
 80026ee:	e004      	b.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80026f0:	f7ff feb4 	bl	800245c <LL_RCC_LSE_IsReady>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d1ee      	bne.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80026fa:	7cfb      	ldrb	r3, [r7, #19]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d105      	bne.n	800270c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff ff5b 	bl	80025c0 <LL_RCC_SetRTCClockSource>
 800270a:	e004      	b.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800270c:	7cfb      	ldrb	r3, [r7, #19]
 800270e:	74bb      	strb	r3, [r7, #18]
 8002710:	e001      	b.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002712:	7cfb      	ldrb	r3, [r7, #19]
 8002714:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d004      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff fea9 	bl	800247e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d004      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff fe9e 	bl	800247e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0320 	and.w	r3, r3, #32
 800274a:	2b00      	cmp	r3, #0
 800274c:	d004      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff fec0 	bl	80024d8 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002760:	2b00      	cmp	r3, #0
 8002762:	d004      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff fee6 	bl	800253a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002776:	2b00      	cmp	r3, #0
 8002778:	d004      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff fedb 	bl	800253a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800278c:	2b00      	cmp	r3, #0
 800278e:	d004      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff fed0 	bl	800253a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d004      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff fea9 	bl	8002502 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d004      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff fe9e 	bl	8002502 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d004      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff fe93 	bl	8002502 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0310 	and.w	r3, r3, #16
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d011      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff fe5e 	bl	80024ae <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027fa:	d107      	bne.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80027fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002806:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800280a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d010      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff fea5 	bl	800256c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002826:	2b00      	cmp	r3, #0
 8002828:	d107      	bne.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800282a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002834:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002838:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d011      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff fea3 	bl	8002596 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002854:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002858:	d107      	bne.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800285a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002864:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002868:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800286a:	7cbb      	ldrb	r3, [r7, #18]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	58000400 	.word	0x58000400

08002878 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8002880:	4b06      	ldr	r3, [pc, #24]	@ (800289c <LL_PWR_SetRadioBusyTrigger+0x24>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002888:	4904      	ldr	r1, [pc, #16]	@ (800289c <LL_PWR_SetRadioBusyTrigger+0x24>)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4313      	orrs	r3, r2
 800288e:	608b      	str	r3, [r1, #8]
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	bc80      	pop	{r7}
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	58000400 	.word	0x58000400

080028a0 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80028a4:	4b05      	ldr	r3, [pc, #20]	@ (80028bc <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80028a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028aa:	4a04      	ldr	r2, [pc, #16]	@ (80028bc <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80028ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80028b4:	bf00      	nop
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr
 80028bc:	58000400 	.word	0x58000400

080028c0 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80028c4:	4b05      	ldr	r3, [pc, #20]	@ (80028dc <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80028c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ca:	4a04      	ldr	r2, [pc, #16]	@ (80028dc <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80028cc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80028d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80028d4:	bf00      	nop
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr
 80028dc:	58000400 	.word	0x58000400

080028e0 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80028e4:	4b03      	ldr	r3, [pc, #12]	@ (80028f4 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80028e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80028ea:	619a      	str	r2, [r3, #24]
}
 80028ec:	bf00      	nop
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr
 80028f4:	58000400 	.word	0x58000400

080028f8 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80028fc:	4b06      	ldr	r3, [pc, #24]	@ (8002918 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b02      	cmp	r3, #2
 8002906:	d101      	bne.n	800290c <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8002908:	2301      	movs	r3, #1
 800290a:	e000      	b.n	800290e <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	46bd      	mov	sp, r7
 8002912:	bc80      	pop	{r7}
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	58000400 	.word	0x58000400

0800291c <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8002920:	4b06      	ldr	r3, [pc, #24]	@ (800293c <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	f003 0304 	and.w	r3, r3, #4
 8002928:	2b04      	cmp	r3, #4
 800292a:	d101      	bne.n	8002930 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 800292c:	2301      	movs	r3, #1
 800292e:	e000      	b.n	8002932 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	58000400 	.word	0x58000400

08002940 <LL_RCC_RF_DisableReset>:
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8002944:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002948:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800294c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002950:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002954:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002958:	bf00      	nop
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr

08002960 <LL_RCC_IsRFUnderReset>:
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8002964:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002968:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800296c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002970:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002974:	d101      	bne.n	800297a <LL_RCC_IsRFUnderReset+0x1a>
 8002976:	2301      	movs	r3, #1
 8002978:	e000      	b.n	800297c <LL_RCC_IsRFUnderReset+0x1c>
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr

08002984 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800298c:	4b06      	ldr	r3, [pc, #24]	@ (80029a8 <LL_EXTI_EnableIT_32_63+0x24>)
 800298e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002992:	4905      	ldr	r1, [pc, #20]	@ (80029a8 <LL_EXTI_EnableIT_32_63+0x24>)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4313      	orrs	r3, r2
 8002998:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	58000800 	.word	0x58000800

080029ac <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d103      	bne.n	80029c2 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	73fb      	strb	r3, [r7, #15]
    return status;
 80029be:	7bfb      	ldrb	r3, [r7, #15]
 80029c0:	e052      	b.n	8002a68 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 80029c2:	2300      	movs	r3, #0
 80029c4:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	799b      	ldrb	r3, [r3, #6]
 80029ca:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 80029cc:	7bbb      	ldrb	r3, [r7, #14]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d002      	beq.n	80029d8 <HAL_SUBGHZ_Init+0x2c>
 80029d2:	7bbb      	ldrb	r3, [r7, #14]
 80029d4:	2b03      	cmp	r3, #3
 80029d6:	d109      	bne.n	80029ec <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7fd fef4 	bl	80007cc <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80029e4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80029e8:	f7ff ffcc 	bl	8002984 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 80029ec:	7bbb      	ldrb	r3, [r7, #14]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d126      	bne.n	8002a40 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2202      	movs	r2, #2
 80029f6:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 80029f8:	f7ff ffa2 	bl	8002940 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80029fc:	4b1c      	ldr	r3, [pc, #112]	@ (8002a70 <HAL_SUBGHZ_Init+0xc4>)
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	4613      	mov	r3, r2
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	1a9b      	subs	r3, r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	0cdb      	lsrs	r3, r3, #19
 8002a0a:	2264      	movs	r2, #100	@ 0x64
 8002a0c:	fb02 f303 	mul.w	r3, r2, r3
 8002a10:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d105      	bne.n	8002a24 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	609a      	str	r2, [r3, #8]
        break;
 8002a22:	e007      	b.n	8002a34 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8002a2a:	f7ff ff99 	bl	8002960 <LL_RCC_IsRFUnderReset>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1ee      	bne.n	8002a12 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002a34:	f7ff ff34 	bl	80028a0 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8002a38:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002a3c:	f7ff ff1c 	bl	8002878 <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8002a40:	f7ff ff4e 	bl	80028e0 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8002a44:	7bfb      	ldrb	r3, [r7, #15]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10a      	bne.n	8002a60 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 f952 	bl	8002cf8 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	719a      	strb	r2, [r3, #6]

  return status;
 8002a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	20000000 	.word	0x20000000

08002a74 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	607a      	str	r2, [r7, #4]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	460b      	mov	r3, r1
 8002a82:	72fb      	strb	r3, [r7, #11]
 8002a84:	4613      	mov	r3, r2
 8002a86:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	799b      	ldrb	r3, [r3, #6]
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d14a      	bne.n	8002b28 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	795b      	ldrb	r3, [r3, #5]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d101      	bne.n	8002a9e <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	e045      	b.n	8002b2a <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f000 f9f5 	bl	8002e94 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8002aaa:	7afb      	ldrb	r3, [r7, #11]
 8002aac:	2b84      	cmp	r3, #132	@ 0x84
 8002aae:	d002      	beq.n	8002ab6 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8002ab0:	7afb      	ldrb	r3, [r7, #11]
 8002ab2:	2b94      	cmp	r3, #148	@ 0x94
 8002ab4:	d103      	bne.n	8002abe <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	711a      	strb	r2, [r3, #4]
 8002abc:	e002      	b.n	8002ac4 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002ac4:	f7ff fefc 	bl	80028c0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8002ac8:	7afb      	ldrb	r3, [r7, #11]
 8002aca:	4619      	mov	r1, r3
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f000 f933 	bl	8002d38 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	82bb      	strh	r3, [r7, #20]
 8002ad6:	e00a      	b.n	8002aee <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8002ad8:	8abb      	ldrh	r3, [r7, #20]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	4413      	add	r3, r2
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 f928 	bl	8002d38 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8002ae8:	8abb      	ldrh	r3, [r7, #20]
 8002aea:	3301      	adds	r3, #1
 8002aec:	82bb      	strh	r3, [r7, #20]
 8002aee:	8aba      	ldrh	r2, [r7, #20]
 8002af0:	893b      	ldrh	r3, [r7, #8]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d3f0      	bcc.n	8002ad8 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002af6:	f7ff fed3 	bl	80028a0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8002afa:	7afb      	ldrb	r3, [r7, #11]
 8002afc:	2b84      	cmp	r3, #132	@ 0x84
 8002afe:	d002      	beq.n	8002b06 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 f9eb 	bl	8002edc <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d002      	beq.n	8002b14 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	75fb      	strb	r3, [r7, #23]
 8002b12:	e001      	b.n	8002b18 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8002b14:	2300      	movs	r3, #0
 8002b16:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	715a      	strb	r2, [r3, #5]

    return status;
 8002b24:	7dfb      	ldrb	r3, [r7, #23]
 8002b26:	e000      	b.n	8002b2a <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8002b28:	2302      	movs	r3, #2
  }
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b088      	sub	sp, #32
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	60f8      	str	r0, [r7, #12]
 8002b3a:	607a      	str	r2, [r7, #4]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	460b      	mov	r3, r1
 8002b40:	72fb      	strb	r3, [r7, #11]
 8002b42:	4613      	mov	r3, r2
 8002b44:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	799b      	ldrb	r3, [r3, #6]
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d13d      	bne.n	8002bd0 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	795b      	ldrb	r3, [r3, #5]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	e038      	b.n	8002bd2 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2201      	movs	r2, #1
 8002b64:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f000 f994 	bl	8002e94 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002b6c:	f7ff fea8 	bl	80028c0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8002b70:	7afb      	ldrb	r3, [r7, #11]
 8002b72:	4619      	mov	r1, r3
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 f8df 	bl	8002d38 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 f8db 	bl	8002d38 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8002b82:	2300      	movs	r3, #0
 8002b84:	82fb      	strh	r3, [r7, #22]
 8002b86:	e009      	b.n	8002b9c <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8002b88:	69b9      	ldr	r1, [r7, #24]
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 f92a 	bl	8002de4 <SUBGHZSPI_Receive>
      pData++;
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	3301      	adds	r3, #1
 8002b94:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8002b96:	8afb      	ldrh	r3, [r7, #22]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	82fb      	strh	r3, [r7, #22]
 8002b9c:	8afa      	ldrh	r2, [r7, #22]
 8002b9e:	893b      	ldrh	r3, [r7, #8]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d3f1      	bcc.n	8002b88 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002ba4:	f7ff fe7c 	bl	80028a0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 f997 	bl	8002edc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d002      	beq.n	8002bbc <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	77fb      	strb	r3, [r7, #31]
 8002bba:	e001      	b.n	8002bc0 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	715a      	strb	r2, [r3, #5]

    return status;
 8002bcc:	7ffb      	ldrb	r3, [r7, #31]
 8002bce:	e000      	b.n	8002bd2 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002bd0:	2302      	movs	r3, #2
  }
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3720      	adds	r7, #32
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b084      	sub	sp, #16
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8002be2:	2300      	movs	r3, #0
 8002be4:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8002be6:	f107 020c 	add.w	r2, r7, #12
 8002bea:	2302      	movs	r3, #2
 8002bec:	2112      	movs	r1, #18
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7ff ff9f 	bl	8002b32 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8002bf4:	7b3b      	ldrb	r3, [r7, #12]
 8002bf6:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8002bf8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002bfc:	021b      	lsls	r3, r3, #8
 8002bfe:	b21a      	sxth	r2, r3
 8002c00:	7b7b      	ldrb	r3, [r7, #13]
 8002c02:	b21b      	sxth	r3, r3
 8002c04:	4313      	orrs	r3, r2
 8002c06:	b21b      	sxth	r3, r3
 8002c08:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8002c0a:	f107 020c 	add.w	r2, r7, #12
 8002c0e:	2302      	movs	r3, #2
 8002c10:	2102      	movs	r1, #2
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7ff ff2e 	bl	8002a74 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8002c18:	89fb      	ldrh	r3, [r7, #14]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d002      	beq.n	8002c28 <HAL_SUBGHZ_IRQHandler+0x4e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7fd ff60 	bl	8000ae8 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8002c28:	89fb      	ldrh	r3, [r7, #14]
 8002c2a:	085b      	lsrs	r3, r3, #1
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d008      	beq.n	8002c46 <HAL_SUBGHZ_IRQHandler+0x6c>
      (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) == RESET))
 8002c34:	89fb      	ldrh	r3, [r7, #14]
 8002c36:	099b      	lsrs	r3, r3, #6
 8002c38:	f003 0301 	and.w	r3, r3, #1
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d102      	bne.n	8002c46 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f7fd ff5f 	bl	8000b04 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8002c46:	89fb      	ldrh	r3, [r7, #14]
 8002c48:	089b      	lsrs	r3, r3, #2
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d002      	beq.n	8002c58 <HAL_SUBGHZ_IRQHandler+0x7e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7fd ffae 	bl	8000bb4 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8002c58:	89fb      	ldrh	r3, [r7, #14]
 8002c5a:	08db      	lsrs	r3, r3, #3
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d002      	beq.n	8002c6a <HAL_SUBGHZ_IRQHandler+0x90>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f7fd ffb3 	bl	8000bd0 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8002c6a:	89fb      	ldrh	r3, [r7, #14]
 8002c6c:	091b      	lsrs	r3, r3, #4
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d002      	beq.n	8002c7c <HAL_SUBGHZ_IRQHandler+0xa2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7fd ffb8 	bl	8000bec <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8002c7c:	89fb      	ldrh	r3, [r7, #14]
 8002c7e:	095b      	lsrs	r3, r3, #5
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d002      	beq.n	8002c8e <HAL_SUBGHZ_IRQHandler+0xb4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f7fd ff85 	bl	8000b98 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8002c8e:	89fb      	ldrh	r3, [r7, #14]
 8002c90:	099b      	lsrs	r3, r3, #6
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d002      	beq.n	8002ca0 <HAL_SUBGHZ_IRQHandler+0xc6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7fd ff40 	bl	8000b20 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8002ca0:	89fb      	ldrh	r3, [r7, #14]
 8002ca2:	09db      	lsrs	r3, r3, #7
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00e      	beq.n	8002cca <HAL_SUBGHZ_IRQHandler+0xf0>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8002cac:	89fb      	ldrh	r3, [r7, #14]
 8002cae:	0a1b      	lsrs	r3, r3, #8
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d004      	beq.n	8002cc2 <HAL_SUBGHZ_IRQHandler+0xe8>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8002cb8:	2101      	movs	r1, #1
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7fd ff3e 	bl	8000b3c <HAL_SUBGHZ_CADStatusCallback>
 8002cc0:	e003      	b.n	8002cca <HAL_SUBGHZ_IRQHandler+0xf0>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f7fd ff39 	bl	8000b3c <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8002cca:	89fb      	ldrh	r3, [r7, #14]
 8002ccc:	0a5b      	lsrs	r3, r3, #9
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d002      	beq.n	8002cdc <HAL_SUBGHZ_IRQHandler+0x102>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7fd ff4e 	bl	8000b78 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8002cdc:	89fb      	ldrh	r3, [r7, #14]
 8002cde:	0b9b      	lsrs	r3, r3, #14
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d002      	beq.n	8002cee <HAL_SUBGHZ_IRQHandler+0x114>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f7fd ff8d 	bl	8000c08 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8002cee:	bf00      	nop
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
	...

08002cf8 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8002d00:	4b0c      	ldr	r3, [pc, #48]	@ (8002d34 <SUBGHZSPI_Init+0x3c>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a0b      	ldr	r2, [pc, #44]	@ (8002d34 <SUBGHZSPI_Init+0x3c>)
 8002d06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d0a:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8002d0c:	4a09      	ldr	r2, [pc, #36]	@ (8002d34 <SUBGHZSPI_Init+0x3c>)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8002d14:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8002d16:	4b07      	ldr	r3, [pc, #28]	@ (8002d34 <SUBGHZSPI_Init+0x3c>)
 8002d18:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8002d1c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8002d1e:	4b05      	ldr	r3, [pc, #20]	@ (8002d34 <SUBGHZSPI_Init+0x3c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a04      	ldr	r2, [pc, #16]	@ (8002d34 <SUBGHZSPI_Init+0x3c>)
 8002d24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d28:	6013      	str	r3, [r2, #0]
}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bc80      	pop	{r7}
 8002d32:	4770      	bx	lr
 8002d34:	58010000 	.word	0x58010000

08002d38 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b087      	sub	sp, #28
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	460b      	mov	r3, r1
 8002d42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002d44:	2300      	movs	r3, #0
 8002d46:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8002d48:	4b23      	ldr	r3, [pc, #140]	@ (8002dd8 <SUBGHZSPI_Transmit+0xa0>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	1a9b      	subs	r3, r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	0cdb      	lsrs	r3, r3, #19
 8002d56:	2264      	movs	r2, #100	@ 0x64
 8002d58:	fb02 f303 	mul.w	r3, r2, r3
 8002d5c:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d105      	bne.n	8002d70 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	609a      	str	r2, [r3, #8]
      break;
 8002d6e:	e008      	b.n	8002d82 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	3b01      	subs	r3, #1
 8002d74:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8002d76:	4b19      	ldr	r3, [pc, #100]	@ (8002ddc <SUBGHZSPI_Transmit+0xa4>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d1ed      	bne.n	8002d5e <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8002d82:	4b17      	ldr	r3, [pc, #92]	@ (8002de0 <SUBGHZSPI_Transmit+0xa8>)
 8002d84:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	78fa      	ldrb	r2, [r7, #3]
 8002d8a:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8002d8c:	4b12      	ldr	r3, [pc, #72]	@ (8002dd8 <SUBGHZSPI_Transmit+0xa0>)
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	4613      	mov	r3, r2
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	1a9b      	subs	r3, r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	0cdb      	lsrs	r3, r3, #19
 8002d9a:	2264      	movs	r2, #100	@ 0x64
 8002d9c:	fb02 f303 	mul.w	r3, r2, r3
 8002da0:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d105      	bne.n	8002db4 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	609a      	str	r2, [r3, #8]
      break;
 8002db2:	e008      	b.n	8002dc6 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8002dba:	4b08      	ldr	r3, [pc, #32]	@ (8002ddc <SUBGHZSPI_Transmit+0xa4>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d1ed      	bne.n	8002da2 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8002dc6:	4b05      	ldr	r3, [pc, #20]	@ (8002ddc <SUBGHZSPI_Transmit+0xa4>)
 8002dc8:	68db      	ldr	r3, [r3, #12]

  return status;
 8002dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	371c      	adds	r7, #28
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bc80      	pop	{r7}
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	20000000 	.word	0x20000000
 8002ddc:	58010000 	.word	0x58010000
 8002de0:	5801000c 	.word	0x5801000c

08002de4 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b087      	sub	sp, #28
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dee:	2300      	movs	r3, #0
 8002df0:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8002df2:	4b25      	ldr	r3, [pc, #148]	@ (8002e88 <SUBGHZSPI_Receive+0xa4>)
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	4613      	mov	r3, r2
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	1a9b      	subs	r3, r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	0cdb      	lsrs	r3, r3, #19
 8002e00:	2264      	movs	r2, #100	@ 0x64
 8002e02:	fb02 f303 	mul.w	r3, r2, r3
 8002e06:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d105      	bne.n	8002e1a <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	609a      	str	r2, [r3, #8]
      break;
 8002e18:	e008      	b.n	8002e2c <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8002e20:	4b1a      	ldr	r3, [pc, #104]	@ (8002e8c <SUBGHZSPI_Receive+0xa8>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d1ed      	bne.n	8002e08 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8002e2c:	4b18      	ldr	r3, [pc, #96]	@ (8002e90 <SUBGHZSPI_Receive+0xac>)
 8002e2e:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	22ff      	movs	r2, #255	@ 0xff
 8002e34:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8002e36:	4b14      	ldr	r3, [pc, #80]	@ (8002e88 <SUBGHZSPI_Receive+0xa4>)
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	1a9b      	subs	r3, r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	0cdb      	lsrs	r3, r3, #19
 8002e44:	2264      	movs	r2, #100	@ 0x64
 8002e46:	fb02 f303 	mul.w	r3, r2, r3
 8002e4a:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d105      	bne.n	8002e5e <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	609a      	str	r2, [r3, #8]
      break;
 8002e5c:	e008      	b.n	8002e70 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	3b01      	subs	r3, #1
 8002e62:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8002e64:	4b09      	ldr	r3, [pc, #36]	@ (8002e8c <SUBGHZSPI_Receive+0xa8>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d1ed      	bne.n	8002e4c <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8002e70:	4b06      	ldr	r3, [pc, #24]	@ (8002e8c <SUBGHZSPI_Receive+0xa8>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	701a      	strb	r2, [r3, #0]

  return status;
 8002e7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	371c      	adds	r7, #28
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bc80      	pop	{r7}
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	20000000 	.word	0x20000000
 8002e8c:	58010000 	.word	0x58010000
 8002e90:	5801000c 	.word	0x5801000c

08002e94 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	791b      	ldrb	r3, [r3, #4]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d111      	bne.n	8002ec8 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8002ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ed8 <SUBGHZ_CheckDeviceReady+0x44>)
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	4413      	add	r3, r2
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	0c1b      	lsrs	r3, r3, #16
 8002eb2:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002eb4:	f7ff fd04 	bl	80028c0 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1f9      	bne.n	8002eb8 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002ec4:	f7ff fcec 	bl	80028a0 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 f807 	bl	8002edc <SUBGHZ_WaitOnBusy>
 8002ece:	4603      	mov	r3, r0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	20000000 	.word	0x20000000

08002edc <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8002ee8:	4b12      	ldr	r3, [pc, #72]	@ (8002f34 <SUBGHZ_WaitOnBusy+0x58>)
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	4613      	mov	r3, r2
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	4413      	add	r3, r2
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	0d1b      	lsrs	r3, r3, #20
 8002ef6:	2264      	movs	r2, #100	@ 0x64
 8002ef8:	fb02 f303 	mul.w	r3, r2, r3
 8002efc:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8002efe:	f7ff fd0d 	bl	800291c <LL_PWR_IsActiveFlag_RFBUSYMS>
 8002f02:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d105      	bne.n	8002f16 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2202      	movs	r2, #2
 8002f12:	609a      	str	r2, [r3, #8]
      break;
 8002f14:	e009      	b.n	8002f2a <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8002f1c:	f7ff fcec 	bl	80028f8 <LL_PWR_IsActiveFlag_RFBUSYS>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	4013      	ands	r3, r2
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d0e9      	beq.n	8002efe <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8002f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3718      	adds	r7, #24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	20000000 	.word	0x20000000

08002f38 <LL_RCC_GetUSARTClockSource>:
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8002f40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f44:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	401a      	ands	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	041b      	lsls	r3, r3, #16
 8002f50:	4313      	orrs	r3, r2
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr

08002f5c <LL_RCC_GetLPUARTClockSource>:
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002f64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f68:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4013      	ands	r3, r2
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bc80      	pop	{r7}
 8002f78:	4770      	bx	lr

08002f7a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b082      	sub	sp, #8
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e042      	b.n	8003012 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d106      	bne.n	8002fa4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7fd fce0 	bl	8000964 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2224      	movs	r2, #36	@ 0x24
 8002fa8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0201 	bic.w	r2, r2, #1
 8002fba:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d002      	beq.n	8002fca <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 fb23 	bl	8003610 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f8ac 	bl	8003128 <UART_SetConfig>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d101      	bne.n	8002fda <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e01b      	b.n	8003012 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002fe8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ff8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f042 0201 	orr.w	r2, r2, #1
 8003008:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 fba1 	bl	8003752 <UART_CheckIdleState>
 8003010:	4603      	mov	r3, r0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b08a      	sub	sp, #40	@ 0x28
 800301e:	af02      	add	r7, sp, #8
 8003020:	60f8      	str	r0, [r7, #12]
 8003022:	60b9      	str	r1, [r7, #8]
 8003024:	603b      	str	r3, [r7, #0]
 8003026:	4613      	mov	r3, r2
 8003028:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003030:	2b20      	cmp	r3, #32
 8003032:	d173      	bne.n	800311c <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d002      	beq.n	8003040 <HAL_UART_Transmit+0x26>
 800303a:	88fb      	ldrh	r3, [r7, #6]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d101      	bne.n	8003044 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e06c      	b.n	800311e <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2221      	movs	r2, #33	@ 0x21
 8003050:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003054:	f7fd fe54 	bl	8000d00 <HAL_GetTick>
 8003058:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	88fa      	ldrh	r2, [r7, #6]
 800305e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	88fa      	ldrh	r2, [r7, #6]
 8003066:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003072:	d108      	bne.n	8003086 <HAL_UART_Transmit+0x6c>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d104      	bne.n	8003086 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800307c:	2300      	movs	r3, #0
 800307e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	61bb      	str	r3, [r7, #24]
 8003084:	e003      	b.n	800308e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800308a:	2300      	movs	r3, #0
 800308c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800308e:	e02c      	b.n	80030ea <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	2200      	movs	r2, #0
 8003098:	2180      	movs	r1, #128	@ 0x80
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 fba7 	bl	80037ee <UART_WaitOnFlagUntilTimeout>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e039      	b.n	800311e <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d10b      	bne.n	80030c8 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	461a      	mov	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030be:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	3302      	adds	r3, #2
 80030c4:	61bb      	str	r3, [r7, #24]
 80030c6:	e007      	b.n	80030d8 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	781a      	ldrb	r2, [r3, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	3301      	adds	r3, #1
 80030d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80030de:	b29b      	uxth	r3, r3
 80030e0:	3b01      	subs	r3, #1
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1cc      	bne.n	8003090 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	2200      	movs	r2, #0
 80030fe:	2140      	movs	r1, #64	@ 0x40
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 fb74 	bl	80037ee <UART_WaitOnFlagUntilTimeout>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e006      	b.n	800311e <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2220      	movs	r2, #32
 8003114:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003118:	2300      	movs	r3, #0
 800311a:	e000      	b.n	800311e <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 800311c:	2302      	movs	r3, #2
  }
}
 800311e:	4618      	mov	r0, r3
 8003120:	3720      	adds	r7, #32
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
	...

08003128 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003128:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800312c:	b08c      	sub	sp, #48	@ 0x30
 800312e:	af00      	add	r7, sp, #0
 8003130:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003132:	2300      	movs	r3, #0
 8003134:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	431a      	orrs	r2, r3
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	431a      	orrs	r2, r3
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	4313      	orrs	r3, r2
 800314e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	4b94      	ldr	r3, [pc, #592]	@ (80033a8 <UART_SetConfig+0x280>)
 8003158:	4013      	ands	r3, r2
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	6812      	ldr	r2, [r2, #0]
 800315e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003160:	430b      	orrs	r3, r1
 8003162:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a89      	ldr	r2, [pc, #548]	@ (80033ac <UART_SetConfig+0x284>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d004      	beq.n	8003194 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003190:	4313      	orrs	r3, r2
 8003192:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800319e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	6812      	ldr	r2, [r2, #0]
 80031a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80031a8:	430b      	orrs	r3, r1
 80031aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b2:	f023 010f 	bic.w	r1, r3, #15
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	430a      	orrs	r2, r1
 80031c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a7a      	ldr	r2, [pc, #488]	@ (80033b0 <UART_SetConfig+0x288>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d127      	bne.n	800321c <UART_SetConfig+0xf4>
 80031cc:	2003      	movs	r0, #3
 80031ce:	f7ff feb3 	bl	8002f38 <LL_RCC_GetUSARTClockSource>
 80031d2:	4603      	mov	r3, r0
 80031d4:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 80031d8:	2b03      	cmp	r3, #3
 80031da:	d81b      	bhi.n	8003214 <UART_SetConfig+0xec>
 80031dc:	a201      	add	r2, pc, #4	@ (adr r2, 80031e4 <UART_SetConfig+0xbc>)
 80031de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e2:	bf00      	nop
 80031e4:	080031f5 	.word	0x080031f5
 80031e8:	08003205 	.word	0x08003205
 80031ec:	080031fd 	.word	0x080031fd
 80031f0:	0800320d 	.word	0x0800320d
 80031f4:	2301      	movs	r3, #1
 80031f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031fa:	e080      	b.n	80032fe <UART_SetConfig+0x1d6>
 80031fc:	2302      	movs	r3, #2
 80031fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003202:	e07c      	b.n	80032fe <UART_SetConfig+0x1d6>
 8003204:	2304      	movs	r3, #4
 8003206:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800320a:	e078      	b.n	80032fe <UART_SetConfig+0x1d6>
 800320c:	2308      	movs	r3, #8
 800320e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003212:	e074      	b.n	80032fe <UART_SetConfig+0x1d6>
 8003214:	2310      	movs	r3, #16
 8003216:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800321a:	e070      	b.n	80032fe <UART_SetConfig+0x1d6>
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a64      	ldr	r2, [pc, #400]	@ (80033b4 <UART_SetConfig+0x28c>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d138      	bne.n	8003298 <UART_SetConfig+0x170>
 8003226:	200c      	movs	r0, #12
 8003228:	f7ff fe86 	bl	8002f38 <LL_RCC_GetUSARTClockSource>
 800322c:	4603      	mov	r3, r0
 800322e:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8003232:	2b0c      	cmp	r3, #12
 8003234:	d82c      	bhi.n	8003290 <UART_SetConfig+0x168>
 8003236:	a201      	add	r2, pc, #4	@ (adr r2, 800323c <UART_SetConfig+0x114>)
 8003238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323c:	08003271 	.word	0x08003271
 8003240:	08003291 	.word	0x08003291
 8003244:	08003291 	.word	0x08003291
 8003248:	08003291 	.word	0x08003291
 800324c:	08003281 	.word	0x08003281
 8003250:	08003291 	.word	0x08003291
 8003254:	08003291 	.word	0x08003291
 8003258:	08003291 	.word	0x08003291
 800325c:	08003279 	.word	0x08003279
 8003260:	08003291 	.word	0x08003291
 8003264:	08003291 	.word	0x08003291
 8003268:	08003291 	.word	0x08003291
 800326c:	08003289 	.word	0x08003289
 8003270:	2300      	movs	r3, #0
 8003272:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003276:	e042      	b.n	80032fe <UART_SetConfig+0x1d6>
 8003278:	2302      	movs	r3, #2
 800327a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800327e:	e03e      	b.n	80032fe <UART_SetConfig+0x1d6>
 8003280:	2304      	movs	r3, #4
 8003282:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003286:	e03a      	b.n	80032fe <UART_SetConfig+0x1d6>
 8003288:	2308      	movs	r3, #8
 800328a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800328e:	e036      	b.n	80032fe <UART_SetConfig+0x1d6>
 8003290:	2310      	movs	r3, #16
 8003292:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003296:	e032      	b.n	80032fe <UART_SetConfig+0x1d6>
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a43      	ldr	r2, [pc, #268]	@ (80033ac <UART_SetConfig+0x284>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d12a      	bne.n	80032f8 <UART_SetConfig+0x1d0>
 80032a2:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80032a6:	f7ff fe59 	bl	8002f5c <LL_RCC_GetLPUARTClockSource>
 80032aa:	4603      	mov	r3, r0
 80032ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80032b0:	d01a      	beq.n	80032e8 <UART_SetConfig+0x1c0>
 80032b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80032b6:	d81b      	bhi.n	80032f0 <UART_SetConfig+0x1c8>
 80032b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032bc:	d00c      	beq.n	80032d8 <UART_SetConfig+0x1b0>
 80032be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032c2:	d815      	bhi.n	80032f0 <UART_SetConfig+0x1c8>
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <UART_SetConfig+0x1a8>
 80032c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032cc:	d008      	beq.n	80032e0 <UART_SetConfig+0x1b8>
 80032ce:	e00f      	b.n	80032f0 <UART_SetConfig+0x1c8>
 80032d0:	2300      	movs	r3, #0
 80032d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032d6:	e012      	b.n	80032fe <UART_SetConfig+0x1d6>
 80032d8:	2302      	movs	r3, #2
 80032da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032de:	e00e      	b.n	80032fe <UART_SetConfig+0x1d6>
 80032e0:	2304      	movs	r3, #4
 80032e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032e6:	e00a      	b.n	80032fe <UART_SetConfig+0x1d6>
 80032e8:	2308      	movs	r3, #8
 80032ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032ee:	e006      	b.n	80032fe <UART_SetConfig+0x1d6>
 80032f0:	2310      	movs	r3, #16
 80032f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032f6:	e002      	b.n	80032fe <UART_SetConfig+0x1d6>
 80032f8:	2310      	movs	r3, #16
 80032fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a2a      	ldr	r2, [pc, #168]	@ (80033ac <UART_SetConfig+0x284>)
 8003304:	4293      	cmp	r3, r2
 8003306:	f040 80a4 	bne.w	8003452 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800330a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800330e:	2b08      	cmp	r3, #8
 8003310:	d823      	bhi.n	800335a <UART_SetConfig+0x232>
 8003312:	a201      	add	r2, pc, #4	@ (adr r2, 8003318 <UART_SetConfig+0x1f0>)
 8003314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003318:	0800333d 	.word	0x0800333d
 800331c:	0800335b 	.word	0x0800335b
 8003320:	08003345 	.word	0x08003345
 8003324:	0800335b 	.word	0x0800335b
 8003328:	0800334b 	.word	0x0800334b
 800332c:	0800335b 	.word	0x0800335b
 8003330:	0800335b 	.word	0x0800335b
 8003334:	0800335b 	.word	0x0800335b
 8003338:	08003353 	.word	0x08003353
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800333c:	f7fe ffb8 	bl	80022b0 <HAL_RCC_GetPCLK1Freq>
 8003340:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003342:	e010      	b.n	8003366 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003344:	4b1c      	ldr	r3, [pc, #112]	@ (80033b8 <UART_SetConfig+0x290>)
 8003346:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003348:	e00d      	b.n	8003366 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800334a:	f7fe fefd 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 800334e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003350:	e009      	b.n	8003366 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003352:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003356:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003358:	e005      	b.n	8003366 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800335a:	2300      	movs	r3, #0
 800335c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003364:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 8137 	beq.w	80035dc <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003372:	4a12      	ldr	r2, [pc, #72]	@ (80033bc <UART_SetConfig+0x294>)
 8003374:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003378:	461a      	mov	r2, r3
 800337a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003380:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	4613      	mov	r3, r2
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	4413      	add	r3, r2
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	429a      	cmp	r2, r3
 8003390:	d305      	bcc.n	800339e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	429a      	cmp	r2, r3
 800339c:	d910      	bls.n	80033c0 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80033a4:	e11a      	b.n	80035dc <UART_SetConfig+0x4b4>
 80033a6:	bf00      	nop
 80033a8:	cfff69f3 	.word	0xcfff69f3
 80033ac:	40008000 	.word	0x40008000
 80033b0:	40013800 	.word	0x40013800
 80033b4:	40004400 	.word	0x40004400
 80033b8:	00f42400 	.word	0x00f42400
 80033bc:	080045f0 	.word	0x080045f0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c2:	2200      	movs	r2, #0
 80033c4:	60bb      	str	r3, [r7, #8]
 80033c6:	60fa      	str	r2, [r7, #12]
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033cc:	4a8e      	ldr	r2, [pc, #568]	@ (8003608 <UART_SetConfig+0x4e0>)
 80033ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	2200      	movs	r2, #0
 80033d6:	603b      	str	r3, [r7, #0]
 80033d8:	607a      	str	r2, [r7, #4]
 80033da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80033e2:	f7fc ff25 	bl	8000230 <__aeabi_uldivmod>
 80033e6:	4602      	mov	r2, r0
 80033e8:	460b      	mov	r3, r1
 80033ea:	4610      	mov	r0, r2
 80033ec:	4619      	mov	r1, r3
 80033ee:	f04f 0200 	mov.w	r2, #0
 80033f2:	f04f 0300 	mov.w	r3, #0
 80033f6:	020b      	lsls	r3, r1, #8
 80033f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80033fc:	0202      	lsls	r2, r0, #8
 80033fe:	6979      	ldr	r1, [r7, #20]
 8003400:	6849      	ldr	r1, [r1, #4]
 8003402:	0849      	lsrs	r1, r1, #1
 8003404:	2000      	movs	r0, #0
 8003406:	460c      	mov	r4, r1
 8003408:	4605      	mov	r5, r0
 800340a:	eb12 0804 	adds.w	r8, r2, r4
 800340e:	eb43 0905 	adc.w	r9, r3, r5
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	469a      	mov	sl, r3
 800341a:	4693      	mov	fp, r2
 800341c:	4652      	mov	r2, sl
 800341e:	465b      	mov	r3, fp
 8003420:	4640      	mov	r0, r8
 8003422:	4649      	mov	r1, r9
 8003424:	f7fc ff04 	bl	8000230 <__aeabi_uldivmod>
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	4613      	mov	r3, r2
 800342e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003436:	d308      	bcc.n	800344a <UART_SetConfig+0x322>
 8003438:	6a3b      	ldr	r3, [r7, #32]
 800343a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800343e:	d204      	bcs.n	800344a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6a3a      	ldr	r2, [r7, #32]
 8003446:	60da      	str	r2, [r3, #12]
 8003448:	e0c8      	b.n	80035dc <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003450:	e0c4      	b.n	80035dc <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800345a:	d167      	bne.n	800352c <UART_SetConfig+0x404>
  {
    switch (clocksource)
 800345c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003460:	2b08      	cmp	r3, #8
 8003462:	d828      	bhi.n	80034b6 <UART_SetConfig+0x38e>
 8003464:	a201      	add	r2, pc, #4	@ (adr r2, 800346c <UART_SetConfig+0x344>)
 8003466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800346a:	bf00      	nop
 800346c:	08003491 	.word	0x08003491
 8003470:	08003499 	.word	0x08003499
 8003474:	080034a1 	.word	0x080034a1
 8003478:	080034b7 	.word	0x080034b7
 800347c:	080034a7 	.word	0x080034a7
 8003480:	080034b7 	.word	0x080034b7
 8003484:	080034b7 	.word	0x080034b7
 8003488:	080034b7 	.word	0x080034b7
 800348c:	080034af 	.word	0x080034af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003490:	f7fe ff0e 	bl	80022b0 <HAL_RCC_GetPCLK1Freq>
 8003494:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003496:	e014      	b.n	80034c2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003498:	f7fe ff1c 	bl	80022d4 <HAL_RCC_GetPCLK2Freq>
 800349c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800349e:	e010      	b.n	80034c2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034a0:	4b5a      	ldr	r3, [pc, #360]	@ (800360c <UART_SetConfig+0x4e4>)
 80034a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80034a4:	e00d      	b.n	80034c2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034a6:	f7fe fe4f 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 80034aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80034ac:	e009      	b.n	80034c2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80034b4:	e005      	b.n	80034c2 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80034c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 8089 	beq.w	80035dc <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ce:	4a4e      	ldr	r2, [pc, #312]	@ (8003608 <UART_SetConfig+0x4e0>)
 80034d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034d4:	461a      	mov	r2, r3
 80034d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80034dc:	005a      	lsls	r2, r3, #1
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	085b      	lsrs	r3, r3, #1
 80034e4:	441a      	add	r2, r3
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034f0:	6a3b      	ldr	r3, [r7, #32]
 80034f2:	2b0f      	cmp	r3, #15
 80034f4:	d916      	bls.n	8003524 <UART_SetConfig+0x3fc>
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034fc:	d212      	bcs.n	8003524 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034fe:	6a3b      	ldr	r3, [r7, #32]
 8003500:	b29b      	uxth	r3, r3
 8003502:	f023 030f 	bic.w	r3, r3, #15
 8003506:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	085b      	lsrs	r3, r3, #1
 800350c:	b29b      	uxth	r3, r3
 800350e:	f003 0307 	and.w	r3, r3, #7
 8003512:	b29a      	uxth	r2, r3
 8003514:	8bfb      	ldrh	r3, [r7, #30]
 8003516:	4313      	orrs	r3, r2
 8003518:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	8bfa      	ldrh	r2, [r7, #30]
 8003520:	60da      	str	r2, [r3, #12]
 8003522:	e05b      	b.n	80035dc <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800352a:	e057      	b.n	80035dc <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800352c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003530:	2b08      	cmp	r3, #8
 8003532:	d828      	bhi.n	8003586 <UART_SetConfig+0x45e>
 8003534:	a201      	add	r2, pc, #4	@ (adr r2, 800353c <UART_SetConfig+0x414>)
 8003536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800353a:	bf00      	nop
 800353c:	08003561 	.word	0x08003561
 8003540:	08003569 	.word	0x08003569
 8003544:	08003571 	.word	0x08003571
 8003548:	08003587 	.word	0x08003587
 800354c:	08003577 	.word	0x08003577
 8003550:	08003587 	.word	0x08003587
 8003554:	08003587 	.word	0x08003587
 8003558:	08003587 	.word	0x08003587
 800355c:	0800357f 	.word	0x0800357f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003560:	f7fe fea6 	bl	80022b0 <HAL_RCC_GetPCLK1Freq>
 8003564:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003566:	e014      	b.n	8003592 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003568:	f7fe feb4 	bl	80022d4 <HAL_RCC_GetPCLK2Freq>
 800356c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800356e:	e010      	b.n	8003592 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003570:	4b26      	ldr	r3, [pc, #152]	@ (800360c <UART_SetConfig+0x4e4>)
 8003572:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003574:	e00d      	b.n	8003592 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003576:	f7fe fde7 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 800357a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800357c:	e009      	b.n	8003592 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800357e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003582:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003584:	e005      	b.n	8003592 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8003586:	2300      	movs	r3, #0
 8003588:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003590:	bf00      	nop
    }

    if (pclk != 0U)
 8003592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003594:	2b00      	cmp	r3, #0
 8003596:	d021      	beq.n	80035dc <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359c:	4a1a      	ldr	r2, [pc, #104]	@ (8003608 <UART_SetConfig+0x4e0>)
 800359e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035a2:	461a      	mov	r2, r3
 80035a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	085b      	lsrs	r3, r3, #1
 80035b0:	441a      	add	r2, r3
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035bc:	6a3b      	ldr	r3, [r7, #32]
 80035be:	2b0f      	cmp	r3, #15
 80035c0:	d909      	bls.n	80035d6 <UART_SetConfig+0x4ae>
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035c8:	d205      	bcs.n	80035d6 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035ca:	6a3b      	ldr	r3, [r7, #32]
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	60da      	str	r2, [r3, #12]
 80035d4:	e002      	b.n	80035dc <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	2201      	movs	r2, #1
 80035e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	2200      	movs	r2, #0
 80035f0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2200      	movs	r2, #0
 80035f6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80035f8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3730      	adds	r7, #48	@ 0x30
 8003600:	46bd      	mov	sp, r7
 8003602:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003606:	bf00      	nop
 8003608:	080045f0 	.word	0x080045f0
 800360c:	00f42400 	.word	0x00f42400

08003610 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800361c:	f003 0308 	and.w	r3, r3, #8
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00a      	beq.n	800363a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	430a      	orrs	r2, r1
 8003638:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00a      	beq.n	800365c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00a      	beq.n	800367e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003682:	f003 0304 	and.w	r3, r3, #4
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00a      	beq.n	80036a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a4:	f003 0310 	and.w	r3, r3, #16
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00a      	beq.n	80036c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c6:	f003 0320 	and.w	r3, r3, #32
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00a      	beq.n	80036e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d01a      	beq.n	8003726 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800370a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800370e:	d10a      	bne.n	8003726 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800372a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00a      	beq.n	8003748 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	605a      	str	r2, [r3, #4]
  }
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	bc80      	pop	{r7}
 8003750:	4770      	bx	lr

08003752 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b086      	sub	sp, #24
 8003756:	af02      	add	r7, sp, #8
 8003758:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003762:	f7fd facd 	bl	8000d00 <HAL_GetTick>
 8003766:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b08      	cmp	r3, #8
 8003774:	d10e      	bne.n	8003794 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003776:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 f832 	bl	80037ee <UART_WaitOnFlagUntilTimeout>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d001      	beq.n	8003794 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e028      	b.n	80037e6 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0304 	and.w	r3, r3, #4
 800379e:	2b04      	cmp	r3, #4
 80037a0:	d10e      	bne.n	80037c0 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037a2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80037a6:	9300      	str	r3, [sp, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 f81c 	bl	80037ee <UART_WaitOnFlagUntilTimeout>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e012      	b.n	80037e6 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2220      	movs	r2, #32
 80037c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2220      	movs	r2, #32
 80037cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b09c      	sub	sp, #112	@ 0x70
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	60f8      	str	r0, [r7, #12]
 80037f6:	60b9      	str	r1, [r7, #8]
 80037f8:	603b      	str	r3, [r7, #0]
 80037fa:	4613      	mov	r3, r2
 80037fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037fe:	e0af      	b.n	8003960 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003800:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003806:	f000 80ab 	beq.w	8003960 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800380a:	f7fd fa79 	bl	8000d00 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003816:	429a      	cmp	r2, r3
 8003818:	d302      	bcc.n	8003820 <UART_WaitOnFlagUntilTimeout+0x32>
 800381a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800381c:	2b00      	cmp	r3, #0
 800381e:	d140      	bne.n	80038a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003826:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003828:	e853 3f00 	ldrex	r3, [r3]
 800382c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800382e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003830:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003834:	667b      	str	r3, [r7, #100]	@ 0x64
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	461a      	mov	r2, r3
 800383c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800383e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003840:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003842:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003844:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003846:	e841 2300 	strex	r3, r2, [r1]
 800384a:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800384c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1e6      	bne.n	8003820 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	3308      	adds	r3, #8
 8003858:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800385c:	e853 3f00 	ldrex	r3, [r3]
 8003860:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003864:	f023 0301 	bic.w	r3, r3, #1
 8003868:	663b      	str	r3, [r7, #96]	@ 0x60
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	3308      	adds	r3, #8
 8003870:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003872:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003874:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003876:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003878:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800387a:	e841 2300 	strex	r3, r2, [r1]
 800387e:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003880:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1e5      	bne.n	8003852 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2220      	movs	r2, #32
 800388a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2220      	movs	r2, #32
 8003892:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e06f      	b.n	8003982 <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d057      	beq.n	8003960 <UART_WaitOnFlagUntilTimeout+0x172>
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	2b80      	cmp	r3, #128	@ 0x80
 80038b4:	d054      	beq.n	8003960 <UART_WaitOnFlagUntilTimeout+0x172>
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	2b40      	cmp	r3, #64	@ 0x40
 80038ba:	d051      	beq.n	8003960 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038ca:	d149      	bne.n	8003960 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80038d4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038de:	e853 3f00 	ldrex	r3, [r3]
 80038e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80038e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e6:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80038ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	461a      	mov	r2, r3
 80038f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80038f6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80038fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80038fc:	e841 2300 	strex	r3, r2, [r1]
 8003900:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1e6      	bne.n	80038d6 <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	3308      	adds	r3, #8
 800390e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	e853 3f00 	ldrex	r3, [r3]
 8003916:	613b      	str	r3, [r7, #16]
   return(result);
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	f023 0301 	bic.w	r3, r3, #1
 800391e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	3308      	adds	r3, #8
 8003926:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003928:	623a      	str	r2, [r7, #32]
 800392a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392c:	69f9      	ldr	r1, [r7, #28]
 800392e:	6a3a      	ldr	r2, [r7, #32]
 8003930:	e841 2300 	strex	r3, r2, [r1]
 8003934:	61bb      	str	r3, [r7, #24]
   return(result);
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1e5      	bne.n	8003908 <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2220      	movs	r2, #32
 8003940:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2220      	movs	r2, #32
 8003948:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2220      	movs	r2, #32
 8003950:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e010      	b.n	8003982 <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	69da      	ldr	r2, [r3, #28]
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	4013      	ands	r3, r2
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	429a      	cmp	r2, r3
 800396e:	bf0c      	ite	eq
 8003970:	2301      	moveq	r3, #1
 8003972:	2300      	movne	r3, #0
 8003974:	b2db      	uxtb	r3, r3
 8003976:	461a      	mov	r2, r3
 8003978:	79fb      	ldrb	r3, [r7, #7]
 800397a:	429a      	cmp	r2, r3
 800397c:	f43f af40 	beq.w	8003800 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3770      	adds	r7, #112	@ 0x70
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800398a:	b480      	push	{r7}
 800398c:	b085      	sub	sp, #20
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003998:	2b01      	cmp	r3, #1
 800399a:	d101      	bne.n	80039a0 <HAL_UARTEx_DisableFifoMode+0x16>
 800399c:	2302      	movs	r3, #2
 800399e:	e027      	b.n	80039f0 <HAL_UARTEx_DisableFifoMode+0x66>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2224      	movs	r2, #36	@ 0x24
 80039ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 0201 	bic.w	r2, r2, #1
 80039c6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80039ce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2220      	movs	r2, #32
 80039e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3714      	adds	r7, #20
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bc80      	pop	{r7}
 80039f8:	4770      	bx	lr

080039fa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b084      	sub	sp, #16
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
 8003a02:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d101      	bne.n	8003a12 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	e02d      	b.n	8003a6e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2224      	movs	r2, #36	@ 0x24
 8003a1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0201 	bic.w	r2, r2, #1
 8003a38:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f850 	bl	8003af4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b084      	sub	sp, #16
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
 8003a7e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d101      	bne.n	8003a8e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	e02d      	b.n	8003aea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2224      	movs	r2, #36	@ 0x24
 8003a9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 0201 	bic.w	r2, r2, #1
 8003ab4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f812 	bl	8003af4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2220      	movs	r2, #32
 8003adc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
	...

08003af4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d108      	bne.n	8003b16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003b14:	e031      	b.n	8003b7a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003b16:	2308      	movs	r3, #8
 8003b18:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003b1a:	2308      	movs	r3, #8
 8003b1c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	0e5b      	lsrs	r3, r3, #25
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	f003 0307 	and.w	r3, r3, #7
 8003b2c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	0f5b      	lsrs	r3, r3, #29
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b3e:	7bbb      	ldrb	r3, [r7, #14]
 8003b40:	7b3a      	ldrb	r2, [r7, #12]
 8003b42:	4910      	ldr	r1, [pc, #64]	@ (8003b84 <UARTEx_SetNbDataToProcess+0x90>)
 8003b44:	5c8a      	ldrb	r2, [r1, r2]
 8003b46:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003b4a:	7b3a      	ldrb	r2, [r7, #12]
 8003b4c:	490e      	ldr	r1, [pc, #56]	@ (8003b88 <UARTEx_SetNbDataToProcess+0x94>)
 8003b4e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b50:	fb93 f3f2 	sdiv	r3, r3, r2
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b5c:	7bfb      	ldrb	r3, [r7, #15]
 8003b5e:	7b7a      	ldrb	r2, [r7, #13]
 8003b60:	4908      	ldr	r1, [pc, #32]	@ (8003b84 <UARTEx_SetNbDataToProcess+0x90>)
 8003b62:	5c8a      	ldrb	r2, [r1, r2]
 8003b64:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003b68:	7b7a      	ldrb	r2, [r7, #13]
 8003b6a:	4907      	ldr	r1, [pc, #28]	@ (8003b88 <UARTEx_SetNbDataToProcess+0x94>)
 8003b6c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003b7a:	bf00      	nop
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bc80      	pop	{r7}
 8003b82:	4770      	bx	lr
 8003b84:	08004608 	.word	0x08004608
 8003b88:	08004610 	.word	0x08004610

08003b8c <sniprintf>:
 8003b8c:	b40c      	push	{r2, r3}
 8003b8e:	b530      	push	{r4, r5, lr}
 8003b90:	4b18      	ldr	r3, [pc, #96]	@ (8003bf4 <sniprintf+0x68>)
 8003b92:	1e0c      	subs	r4, r1, #0
 8003b94:	681d      	ldr	r5, [r3, #0]
 8003b96:	b09d      	sub	sp, #116	@ 0x74
 8003b98:	da08      	bge.n	8003bac <sniprintf+0x20>
 8003b9a:	238b      	movs	r3, #139	@ 0x8b
 8003b9c:	602b      	str	r3, [r5, #0]
 8003b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba2:	b01d      	add	sp, #116	@ 0x74
 8003ba4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ba8:	b002      	add	sp, #8
 8003baa:	4770      	bx	lr
 8003bac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003bb0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003bb4:	f04f 0300 	mov.w	r3, #0
 8003bb8:	931b      	str	r3, [sp, #108]	@ 0x6c
 8003bba:	bf14      	ite	ne
 8003bbc:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003bc0:	4623      	moveq	r3, r4
 8003bc2:	9304      	str	r3, [sp, #16]
 8003bc4:	9307      	str	r3, [sp, #28]
 8003bc6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003bca:	9002      	str	r0, [sp, #8]
 8003bcc:	9006      	str	r0, [sp, #24]
 8003bce:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003bd2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003bd4:	ab21      	add	r3, sp, #132	@ 0x84
 8003bd6:	a902      	add	r1, sp, #8
 8003bd8:	4628      	mov	r0, r5
 8003bda:	9301      	str	r3, [sp, #4]
 8003bdc:	f000 f994 	bl	8003f08 <_svfiprintf_r>
 8003be0:	1c43      	adds	r3, r0, #1
 8003be2:	bfbc      	itt	lt
 8003be4:	238b      	movlt	r3, #139	@ 0x8b
 8003be6:	602b      	strlt	r3, [r5, #0]
 8003be8:	2c00      	cmp	r4, #0
 8003bea:	d0da      	beq.n	8003ba2 <sniprintf+0x16>
 8003bec:	9b02      	ldr	r3, [sp, #8]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	701a      	strb	r2, [r3, #0]
 8003bf2:	e7d6      	b.n	8003ba2 <sniprintf+0x16>
 8003bf4:	20000018 	.word	0x20000018

08003bf8 <memset>:
 8003bf8:	4402      	add	r2, r0
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d100      	bne.n	8003c02 <memset+0xa>
 8003c00:	4770      	bx	lr
 8003c02:	f803 1b01 	strb.w	r1, [r3], #1
 8003c06:	e7f9      	b.n	8003bfc <memset+0x4>

08003c08 <__errno>:
 8003c08:	4b01      	ldr	r3, [pc, #4]	@ (8003c10 <__errno+0x8>)
 8003c0a:	6818      	ldr	r0, [r3, #0]
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	20000018 	.word	0x20000018

08003c14 <__libc_init_array>:
 8003c14:	b570      	push	{r4, r5, r6, lr}
 8003c16:	4d0d      	ldr	r5, [pc, #52]	@ (8003c4c <__libc_init_array+0x38>)
 8003c18:	4c0d      	ldr	r4, [pc, #52]	@ (8003c50 <__libc_init_array+0x3c>)
 8003c1a:	1b64      	subs	r4, r4, r5
 8003c1c:	10a4      	asrs	r4, r4, #2
 8003c1e:	2600      	movs	r6, #0
 8003c20:	42a6      	cmp	r6, r4
 8003c22:	d109      	bne.n	8003c38 <__libc_init_array+0x24>
 8003c24:	4d0b      	ldr	r5, [pc, #44]	@ (8003c54 <__libc_init_array+0x40>)
 8003c26:	4c0c      	ldr	r4, [pc, #48]	@ (8003c58 <__libc_init_array+0x44>)
 8003c28:	f000 fc64 	bl	80044f4 <_init>
 8003c2c:	1b64      	subs	r4, r4, r5
 8003c2e:	10a4      	asrs	r4, r4, #2
 8003c30:	2600      	movs	r6, #0
 8003c32:	42a6      	cmp	r6, r4
 8003c34:	d105      	bne.n	8003c42 <__libc_init_array+0x2e>
 8003c36:	bd70      	pop	{r4, r5, r6, pc}
 8003c38:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c3c:	4798      	blx	r3
 8003c3e:	3601      	adds	r6, #1
 8003c40:	e7ee      	b.n	8003c20 <__libc_init_array+0xc>
 8003c42:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c46:	4798      	blx	r3
 8003c48:	3601      	adds	r6, #1
 8003c4a:	e7f2      	b.n	8003c32 <__libc_init_array+0x1e>
 8003c4c:	08004654 	.word	0x08004654
 8003c50:	08004654 	.word	0x08004654
 8003c54:	08004654 	.word	0x08004654
 8003c58:	08004658 	.word	0x08004658

08003c5c <__retarget_lock_acquire_recursive>:
 8003c5c:	4770      	bx	lr

08003c5e <__retarget_lock_release_recursive>:
 8003c5e:	4770      	bx	lr

08003c60 <_free_r>:
 8003c60:	b538      	push	{r3, r4, r5, lr}
 8003c62:	4605      	mov	r5, r0
 8003c64:	2900      	cmp	r1, #0
 8003c66:	d041      	beq.n	8003cec <_free_r+0x8c>
 8003c68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c6c:	1f0c      	subs	r4, r1, #4
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	bfb8      	it	lt
 8003c72:	18e4      	addlt	r4, r4, r3
 8003c74:	f000 f8e0 	bl	8003e38 <__malloc_lock>
 8003c78:	4a1d      	ldr	r2, [pc, #116]	@ (8003cf0 <_free_r+0x90>)
 8003c7a:	6813      	ldr	r3, [r2, #0]
 8003c7c:	b933      	cbnz	r3, 8003c8c <_free_r+0x2c>
 8003c7e:	6063      	str	r3, [r4, #4]
 8003c80:	6014      	str	r4, [r2, #0]
 8003c82:	4628      	mov	r0, r5
 8003c84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c88:	f000 b8dc 	b.w	8003e44 <__malloc_unlock>
 8003c8c:	42a3      	cmp	r3, r4
 8003c8e:	d908      	bls.n	8003ca2 <_free_r+0x42>
 8003c90:	6820      	ldr	r0, [r4, #0]
 8003c92:	1821      	adds	r1, r4, r0
 8003c94:	428b      	cmp	r3, r1
 8003c96:	bf01      	itttt	eq
 8003c98:	6819      	ldreq	r1, [r3, #0]
 8003c9a:	685b      	ldreq	r3, [r3, #4]
 8003c9c:	1809      	addeq	r1, r1, r0
 8003c9e:	6021      	streq	r1, [r4, #0]
 8003ca0:	e7ed      	b.n	8003c7e <_free_r+0x1e>
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	b10b      	cbz	r3, 8003cac <_free_r+0x4c>
 8003ca8:	42a3      	cmp	r3, r4
 8003caa:	d9fa      	bls.n	8003ca2 <_free_r+0x42>
 8003cac:	6811      	ldr	r1, [r2, #0]
 8003cae:	1850      	adds	r0, r2, r1
 8003cb0:	42a0      	cmp	r0, r4
 8003cb2:	d10b      	bne.n	8003ccc <_free_r+0x6c>
 8003cb4:	6820      	ldr	r0, [r4, #0]
 8003cb6:	4401      	add	r1, r0
 8003cb8:	1850      	adds	r0, r2, r1
 8003cba:	4283      	cmp	r3, r0
 8003cbc:	6011      	str	r1, [r2, #0]
 8003cbe:	d1e0      	bne.n	8003c82 <_free_r+0x22>
 8003cc0:	6818      	ldr	r0, [r3, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	6053      	str	r3, [r2, #4]
 8003cc6:	4408      	add	r0, r1
 8003cc8:	6010      	str	r0, [r2, #0]
 8003cca:	e7da      	b.n	8003c82 <_free_r+0x22>
 8003ccc:	d902      	bls.n	8003cd4 <_free_r+0x74>
 8003cce:	230c      	movs	r3, #12
 8003cd0:	602b      	str	r3, [r5, #0]
 8003cd2:	e7d6      	b.n	8003c82 <_free_r+0x22>
 8003cd4:	6820      	ldr	r0, [r4, #0]
 8003cd6:	1821      	adds	r1, r4, r0
 8003cd8:	428b      	cmp	r3, r1
 8003cda:	bf04      	itt	eq
 8003cdc:	6819      	ldreq	r1, [r3, #0]
 8003cde:	685b      	ldreq	r3, [r3, #4]
 8003ce0:	6063      	str	r3, [r4, #4]
 8003ce2:	bf04      	itt	eq
 8003ce4:	1809      	addeq	r1, r1, r0
 8003ce6:	6021      	streq	r1, [r4, #0]
 8003ce8:	6054      	str	r4, [r2, #4]
 8003cea:	e7ca      	b.n	8003c82 <_free_r+0x22>
 8003cec:	bd38      	pop	{r3, r4, r5, pc}
 8003cee:	bf00      	nop
 8003cf0:	20000374 	.word	0x20000374

08003cf4 <sbrk_aligned>:
 8003cf4:	b570      	push	{r4, r5, r6, lr}
 8003cf6:	4e0f      	ldr	r6, [pc, #60]	@ (8003d34 <sbrk_aligned+0x40>)
 8003cf8:	460c      	mov	r4, r1
 8003cfa:	6831      	ldr	r1, [r6, #0]
 8003cfc:	4605      	mov	r5, r0
 8003cfe:	b911      	cbnz	r1, 8003d06 <sbrk_aligned+0x12>
 8003d00:	f000 fba4 	bl	800444c <_sbrk_r>
 8003d04:	6030      	str	r0, [r6, #0]
 8003d06:	4621      	mov	r1, r4
 8003d08:	4628      	mov	r0, r5
 8003d0a:	f000 fb9f 	bl	800444c <_sbrk_r>
 8003d0e:	1c43      	adds	r3, r0, #1
 8003d10:	d103      	bne.n	8003d1a <sbrk_aligned+0x26>
 8003d12:	f04f 34ff 	mov.w	r4, #4294967295
 8003d16:	4620      	mov	r0, r4
 8003d18:	bd70      	pop	{r4, r5, r6, pc}
 8003d1a:	1cc4      	adds	r4, r0, #3
 8003d1c:	f024 0403 	bic.w	r4, r4, #3
 8003d20:	42a0      	cmp	r0, r4
 8003d22:	d0f8      	beq.n	8003d16 <sbrk_aligned+0x22>
 8003d24:	1a21      	subs	r1, r4, r0
 8003d26:	4628      	mov	r0, r5
 8003d28:	f000 fb90 	bl	800444c <_sbrk_r>
 8003d2c:	3001      	adds	r0, #1
 8003d2e:	d1f2      	bne.n	8003d16 <sbrk_aligned+0x22>
 8003d30:	e7ef      	b.n	8003d12 <sbrk_aligned+0x1e>
 8003d32:	bf00      	nop
 8003d34:	20000370 	.word	0x20000370

08003d38 <_malloc_r>:
 8003d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d3c:	1ccd      	adds	r5, r1, #3
 8003d3e:	f025 0503 	bic.w	r5, r5, #3
 8003d42:	3508      	adds	r5, #8
 8003d44:	2d0c      	cmp	r5, #12
 8003d46:	bf38      	it	cc
 8003d48:	250c      	movcc	r5, #12
 8003d4a:	2d00      	cmp	r5, #0
 8003d4c:	4606      	mov	r6, r0
 8003d4e:	db01      	blt.n	8003d54 <_malloc_r+0x1c>
 8003d50:	42a9      	cmp	r1, r5
 8003d52:	d904      	bls.n	8003d5e <_malloc_r+0x26>
 8003d54:	230c      	movs	r3, #12
 8003d56:	6033      	str	r3, [r6, #0]
 8003d58:	2000      	movs	r0, #0
 8003d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003e34 <_malloc_r+0xfc>
 8003d62:	f000 f869 	bl	8003e38 <__malloc_lock>
 8003d66:	f8d8 3000 	ldr.w	r3, [r8]
 8003d6a:	461c      	mov	r4, r3
 8003d6c:	bb44      	cbnz	r4, 8003dc0 <_malloc_r+0x88>
 8003d6e:	4629      	mov	r1, r5
 8003d70:	4630      	mov	r0, r6
 8003d72:	f7ff ffbf 	bl	8003cf4 <sbrk_aligned>
 8003d76:	1c43      	adds	r3, r0, #1
 8003d78:	4604      	mov	r4, r0
 8003d7a:	d158      	bne.n	8003e2e <_malloc_r+0xf6>
 8003d7c:	f8d8 4000 	ldr.w	r4, [r8]
 8003d80:	4627      	mov	r7, r4
 8003d82:	2f00      	cmp	r7, #0
 8003d84:	d143      	bne.n	8003e0e <_malloc_r+0xd6>
 8003d86:	2c00      	cmp	r4, #0
 8003d88:	d04b      	beq.n	8003e22 <_malloc_r+0xea>
 8003d8a:	6823      	ldr	r3, [r4, #0]
 8003d8c:	4639      	mov	r1, r7
 8003d8e:	4630      	mov	r0, r6
 8003d90:	eb04 0903 	add.w	r9, r4, r3
 8003d94:	f000 fb5a 	bl	800444c <_sbrk_r>
 8003d98:	4581      	cmp	r9, r0
 8003d9a:	d142      	bne.n	8003e22 <_malloc_r+0xea>
 8003d9c:	6821      	ldr	r1, [r4, #0]
 8003d9e:	1a6d      	subs	r5, r5, r1
 8003da0:	4629      	mov	r1, r5
 8003da2:	4630      	mov	r0, r6
 8003da4:	f7ff ffa6 	bl	8003cf4 <sbrk_aligned>
 8003da8:	3001      	adds	r0, #1
 8003daa:	d03a      	beq.n	8003e22 <_malloc_r+0xea>
 8003dac:	6823      	ldr	r3, [r4, #0]
 8003dae:	442b      	add	r3, r5
 8003db0:	6023      	str	r3, [r4, #0]
 8003db2:	f8d8 3000 	ldr.w	r3, [r8]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	bb62      	cbnz	r2, 8003e14 <_malloc_r+0xdc>
 8003dba:	f8c8 7000 	str.w	r7, [r8]
 8003dbe:	e00f      	b.n	8003de0 <_malloc_r+0xa8>
 8003dc0:	6822      	ldr	r2, [r4, #0]
 8003dc2:	1b52      	subs	r2, r2, r5
 8003dc4:	d420      	bmi.n	8003e08 <_malloc_r+0xd0>
 8003dc6:	2a0b      	cmp	r2, #11
 8003dc8:	d917      	bls.n	8003dfa <_malloc_r+0xc2>
 8003dca:	1961      	adds	r1, r4, r5
 8003dcc:	42a3      	cmp	r3, r4
 8003dce:	6025      	str	r5, [r4, #0]
 8003dd0:	bf18      	it	ne
 8003dd2:	6059      	strne	r1, [r3, #4]
 8003dd4:	6863      	ldr	r3, [r4, #4]
 8003dd6:	bf08      	it	eq
 8003dd8:	f8c8 1000 	streq.w	r1, [r8]
 8003ddc:	5162      	str	r2, [r4, r5]
 8003dde:	604b      	str	r3, [r1, #4]
 8003de0:	4630      	mov	r0, r6
 8003de2:	f000 f82f 	bl	8003e44 <__malloc_unlock>
 8003de6:	f104 000b 	add.w	r0, r4, #11
 8003dea:	1d23      	adds	r3, r4, #4
 8003dec:	f020 0007 	bic.w	r0, r0, #7
 8003df0:	1ac2      	subs	r2, r0, r3
 8003df2:	bf1c      	itt	ne
 8003df4:	1a1b      	subne	r3, r3, r0
 8003df6:	50a3      	strne	r3, [r4, r2]
 8003df8:	e7af      	b.n	8003d5a <_malloc_r+0x22>
 8003dfa:	6862      	ldr	r2, [r4, #4]
 8003dfc:	42a3      	cmp	r3, r4
 8003dfe:	bf0c      	ite	eq
 8003e00:	f8c8 2000 	streq.w	r2, [r8]
 8003e04:	605a      	strne	r2, [r3, #4]
 8003e06:	e7eb      	b.n	8003de0 <_malloc_r+0xa8>
 8003e08:	4623      	mov	r3, r4
 8003e0a:	6864      	ldr	r4, [r4, #4]
 8003e0c:	e7ae      	b.n	8003d6c <_malloc_r+0x34>
 8003e0e:	463c      	mov	r4, r7
 8003e10:	687f      	ldr	r7, [r7, #4]
 8003e12:	e7b6      	b.n	8003d82 <_malloc_r+0x4a>
 8003e14:	461a      	mov	r2, r3
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	42a3      	cmp	r3, r4
 8003e1a:	d1fb      	bne.n	8003e14 <_malloc_r+0xdc>
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	6053      	str	r3, [r2, #4]
 8003e20:	e7de      	b.n	8003de0 <_malloc_r+0xa8>
 8003e22:	230c      	movs	r3, #12
 8003e24:	6033      	str	r3, [r6, #0]
 8003e26:	4630      	mov	r0, r6
 8003e28:	f000 f80c 	bl	8003e44 <__malloc_unlock>
 8003e2c:	e794      	b.n	8003d58 <_malloc_r+0x20>
 8003e2e:	6005      	str	r5, [r0, #0]
 8003e30:	e7d6      	b.n	8003de0 <_malloc_r+0xa8>
 8003e32:	bf00      	nop
 8003e34:	20000374 	.word	0x20000374

08003e38 <__malloc_lock>:
 8003e38:	4801      	ldr	r0, [pc, #4]	@ (8003e40 <__malloc_lock+0x8>)
 8003e3a:	f7ff bf0f 	b.w	8003c5c <__retarget_lock_acquire_recursive>
 8003e3e:	bf00      	nop
 8003e40:	2000036c 	.word	0x2000036c

08003e44 <__malloc_unlock>:
 8003e44:	4801      	ldr	r0, [pc, #4]	@ (8003e4c <__malloc_unlock+0x8>)
 8003e46:	f7ff bf0a 	b.w	8003c5e <__retarget_lock_release_recursive>
 8003e4a:	bf00      	nop
 8003e4c:	2000036c 	.word	0x2000036c

08003e50 <__ssputs_r>:
 8003e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e54:	688e      	ldr	r6, [r1, #8]
 8003e56:	461f      	mov	r7, r3
 8003e58:	42be      	cmp	r6, r7
 8003e5a:	680b      	ldr	r3, [r1, #0]
 8003e5c:	4682      	mov	sl, r0
 8003e5e:	460c      	mov	r4, r1
 8003e60:	4690      	mov	r8, r2
 8003e62:	d82d      	bhi.n	8003ec0 <__ssputs_r+0x70>
 8003e64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003e68:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003e6c:	d026      	beq.n	8003ebc <__ssputs_r+0x6c>
 8003e6e:	6965      	ldr	r5, [r4, #20]
 8003e70:	6909      	ldr	r1, [r1, #16]
 8003e72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e76:	eba3 0901 	sub.w	r9, r3, r1
 8003e7a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e7e:	1c7b      	adds	r3, r7, #1
 8003e80:	444b      	add	r3, r9
 8003e82:	106d      	asrs	r5, r5, #1
 8003e84:	429d      	cmp	r5, r3
 8003e86:	bf38      	it	cc
 8003e88:	461d      	movcc	r5, r3
 8003e8a:	0553      	lsls	r3, r2, #21
 8003e8c:	d527      	bpl.n	8003ede <__ssputs_r+0x8e>
 8003e8e:	4629      	mov	r1, r5
 8003e90:	f7ff ff52 	bl	8003d38 <_malloc_r>
 8003e94:	4606      	mov	r6, r0
 8003e96:	b360      	cbz	r0, 8003ef2 <__ssputs_r+0xa2>
 8003e98:	6921      	ldr	r1, [r4, #16]
 8003e9a:	464a      	mov	r2, r9
 8003e9c:	f000 fae6 	bl	800446c <memcpy>
 8003ea0:	89a3      	ldrh	r3, [r4, #12]
 8003ea2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003ea6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003eaa:	81a3      	strh	r3, [r4, #12]
 8003eac:	6126      	str	r6, [r4, #16]
 8003eae:	6165      	str	r5, [r4, #20]
 8003eb0:	444e      	add	r6, r9
 8003eb2:	eba5 0509 	sub.w	r5, r5, r9
 8003eb6:	6026      	str	r6, [r4, #0]
 8003eb8:	60a5      	str	r5, [r4, #8]
 8003eba:	463e      	mov	r6, r7
 8003ebc:	42be      	cmp	r6, r7
 8003ebe:	d900      	bls.n	8003ec2 <__ssputs_r+0x72>
 8003ec0:	463e      	mov	r6, r7
 8003ec2:	6820      	ldr	r0, [r4, #0]
 8003ec4:	4632      	mov	r2, r6
 8003ec6:	4641      	mov	r1, r8
 8003ec8:	f000 faa6 	bl	8004418 <memmove>
 8003ecc:	68a3      	ldr	r3, [r4, #8]
 8003ece:	1b9b      	subs	r3, r3, r6
 8003ed0:	60a3      	str	r3, [r4, #8]
 8003ed2:	6823      	ldr	r3, [r4, #0]
 8003ed4:	4433      	add	r3, r6
 8003ed6:	6023      	str	r3, [r4, #0]
 8003ed8:	2000      	movs	r0, #0
 8003eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ede:	462a      	mov	r2, r5
 8003ee0:	f000 fad2 	bl	8004488 <_realloc_r>
 8003ee4:	4606      	mov	r6, r0
 8003ee6:	2800      	cmp	r0, #0
 8003ee8:	d1e0      	bne.n	8003eac <__ssputs_r+0x5c>
 8003eea:	6921      	ldr	r1, [r4, #16]
 8003eec:	4650      	mov	r0, sl
 8003eee:	f7ff feb7 	bl	8003c60 <_free_r>
 8003ef2:	230c      	movs	r3, #12
 8003ef4:	f8ca 3000 	str.w	r3, [sl]
 8003ef8:	89a3      	ldrh	r3, [r4, #12]
 8003efa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003efe:	81a3      	strh	r3, [r4, #12]
 8003f00:	f04f 30ff 	mov.w	r0, #4294967295
 8003f04:	e7e9      	b.n	8003eda <__ssputs_r+0x8a>
	...

08003f08 <_svfiprintf_r>:
 8003f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f0c:	4698      	mov	r8, r3
 8003f0e:	898b      	ldrh	r3, [r1, #12]
 8003f10:	061b      	lsls	r3, r3, #24
 8003f12:	b09d      	sub	sp, #116	@ 0x74
 8003f14:	4607      	mov	r7, r0
 8003f16:	460d      	mov	r5, r1
 8003f18:	4614      	mov	r4, r2
 8003f1a:	d510      	bpl.n	8003f3e <_svfiprintf_r+0x36>
 8003f1c:	690b      	ldr	r3, [r1, #16]
 8003f1e:	b973      	cbnz	r3, 8003f3e <_svfiprintf_r+0x36>
 8003f20:	2140      	movs	r1, #64	@ 0x40
 8003f22:	f7ff ff09 	bl	8003d38 <_malloc_r>
 8003f26:	6028      	str	r0, [r5, #0]
 8003f28:	6128      	str	r0, [r5, #16]
 8003f2a:	b930      	cbnz	r0, 8003f3a <_svfiprintf_r+0x32>
 8003f2c:	230c      	movs	r3, #12
 8003f2e:	603b      	str	r3, [r7, #0]
 8003f30:	f04f 30ff 	mov.w	r0, #4294967295
 8003f34:	b01d      	add	sp, #116	@ 0x74
 8003f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f3a:	2340      	movs	r3, #64	@ 0x40
 8003f3c:	616b      	str	r3, [r5, #20]
 8003f3e:	2300      	movs	r3, #0
 8003f40:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f42:	2320      	movs	r3, #32
 8003f44:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003f48:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f4c:	2330      	movs	r3, #48	@ 0x30
 8003f4e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80040ec <_svfiprintf_r+0x1e4>
 8003f52:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003f56:	f04f 0901 	mov.w	r9, #1
 8003f5a:	4623      	mov	r3, r4
 8003f5c:	469a      	mov	sl, r3
 8003f5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f62:	b10a      	cbz	r2, 8003f68 <_svfiprintf_r+0x60>
 8003f64:	2a25      	cmp	r2, #37	@ 0x25
 8003f66:	d1f9      	bne.n	8003f5c <_svfiprintf_r+0x54>
 8003f68:	ebba 0b04 	subs.w	fp, sl, r4
 8003f6c:	d00b      	beq.n	8003f86 <_svfiprintf_r+0x7e>
 8003f6e:	465b      	mov	r3, fp
 8003f70:	4622      	mov	r2, r4
 8003f72:	4629      	mov	r1, r5
 8003f74:	4638      	mov	r0, r7
 8003f76:	f7ff ff6b 	bl	8003e50 <__ssputs_r>
 8003f7a:	3001      	adds	r0, #1
 8003f7c:	f000 80a7 	beq.w	80040ce <_svfiprintf_r+0x1c6>
 8003f80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003f82:	445a      	add	r2, fp
 8003f84:	9209      	str	r2, [sp, #36]	@ 0x24
 8003f86:	f89a 3000 	ldrb.w	r3, [sl]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f000 809f 	beq.w	80040ce <_svfiprintf_r+0x1c6>
 8003f90:	2300      	movs	r3, #0
 8003f92:	f04f 32ff 	mov.w	r2, #4294967295
 8003f96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f9a:	f10a 0a01 	add.w	sl, sl, #1
 8003f9e:	9304      	str	r3, [sp, #16]
 8003fa0:	9307      	str	r3, [sp, #28]
 8003fa2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003fa6:	931a      	str	r3, [sp, #104]	@ 0x68
 8003fa8:	4654      	mov	r4, sl
 8003faa:	2205      	movs	r2, #5
 8003fac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fb0:	484e      	ldr	r0, [pc, #312]	@ (80040ec <_svfiprintf_r+0x1e4>)
 8003fb2:	f7fc f8ed 	bl	8000190 <memchr>
 8003fb6:	9a04      	ldr	r2, [sp, #16]
 8003fb8:	b9d8      	cbnz	r0, 8003ff2 <_svfiprintf_r+0xea>
 8003fba:	06d0      	lsls	r0, r2, #27
 8003fbc:	bf44      	itt	mi
 8003fbe:	2320      	movmi	r3, #32
 8003fc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003fc4:	0711      	lsls	r1, r2, #28
 8003fc6:	bf44      	itt	mi
 8003fc8:	232b      	movmi	r3, #43	@ 0x2b
 8003fca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003fce:	f89a 3000 	ldrb.w	r3, [sl]
 8003fd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8003fd4:	d015      	beq.n	8004002 <_svfiprintf_r+0xfa>
 8003fd6:	9a07      	ldr	r2, [sp, #28]
 8003fd8:	4654      	mov	r4, sl
 8003fda:	2000      	movs	r0, #0
 8003fdc:	f04f 0c0a 	mov.w	ip, #10
 8003fe0:	4621      	mov	r1, r4
 8003fe2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fe6:	3b30      	subs	r3, #48	@ 0x30
 8003fe8:	2b09      	cmp	r3, #9
 8003fea:	d94b      	bls.n	8004084 <_svfiprintf_r+0x17c>
 8003fec:	b1b0      	cbz	r0, 800401c <_svfiprintf_r+0x114>
 8003fee:	9207      	str	r2, [sp, #28]
 8003ff0:	e014      	b.n	800401c <_svfiprintf_r+0x114>
 8003ff2:	eba0 0308 	sub.w	r3, r0, r8
 8003ff6:	fa09 f303 	lsl.w	r3, r9, r3
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	9304      	str	r3, [sp, #16]
 8003ffe:	46a2      	mov	sl, r4
 8004000:	e7d2      	b.n	8003fa8 <_svfiprintf_r+0xa0>
 8004002:	9b03      	ldr	r3, [sp, #12]
 8004004:	1d19      	adds	r1, r3, #4
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	9103      	str	r1, [sp, #12]
 800400a:	2b00      	cmp	r3, #0
 800400c:	bfbb      	ittet	lt
 800400e:	425b      	neglt	r3, r3
 8004010:	f042 0202 	orrlt.w	r2, r2, #2
 8004014:	9307      	strge	r3, [sp, #28]
 8004016:	9307      	strlt	r3, [sp, #28]
 8004018:	bfb8      	it	lt
 800401a:	9204      	strlt	r2, [sp, #16]
 800401c:	7823      	ldrb	r3, [r4, #0]
 800401e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004020:	d10a      	bne.n	8004038 <_svfiprintf_r+0x130>
 8004022:	7863      	ldrb	r3, [r4, #1]
 8004024:	2b2a      	cmp	r3, #42	@ 0x2a
 8004026:	d132      	bne.n	800408e <_svfiprintf_r+0x186>
 8004028:	9b03      	ldr	r3, [sp, #12]
 800402a:	1d1a      	adds	r2, r3, #4
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	9203      	str	r2, [sp, #12]
 8004030:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004034:	3402      	adds	r4, #2
 8004036:	9305      	str	r3, [sp, #20]
 8004038:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80040f0 <_svfiprintf_r+0x1e8>
 800403c:	7821      	ldrb	r1, [r4, #0]
 800403e:	2203      	movs	r2, #3
 8004040:	4650      	mov	r0, sl
 8004042:	f7fc f8a5 	bl	8000190 <memchr>
 8004046:	b138      	cbz	r0, 8004058 <_svfiprintf_r+0x150>
 8004048:	9b04      	ldr	r3, [sp, #16]
 800404a:	eba0 000a 	sub.w	r0, r0, sl
 800404e:	2240      	movs	r2, #64	@ 0x40
 8004050:	4082      	lsls	r2, r0
 8004052:	4313      	orrs	r3, r2
 8004054:	3401      	adds	r4, #1
 8004056:	9304      	str	r3, [sp, #16]
 8004058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800405c:	4825      	ldr	r0, [pc, #148]	@ (80040f4 <_svfiprintf_r+0x1ec>)
 800405e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004062:	2206      	movs	r2, #6
 8004064:	f7fc f894 	bl	8000190 <memchr>
 8004068:	2800      	cmp	r0, #0
 800406a:	d036      	beq.n	80040da <_svfiprintf_r+0x1d2>
 800406c:	4b22      	ldr	r3, [pc, #136]	@ (80040f8 <_svfiprintf_r+0x1f0>)
 800406e:	bb1b      	cbnz	r3, 80040b8 <_svfiprintf_r+0x1b0>
 8004070:	9b03      	ldr	r3, [sp, #12]
 8004072:	3307      	adds	r3, #7
 8004074:	f023 0307 	bic.w	r3, r3, #7
 8004078:	3308      	adds	r3, #8
 800407a:	9303      	str	r3, [sp, #12]
 800407c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800407e:	4433      	add	r3, r6
 8004080:	9309      	str	r3, [sp, #36]	@ 0x24
 8004082:	e76a      	b.n	8003f5a <_svfiprintf_r+0x52>
 8004084:	fb0c 3202 	mla	r2, ip, r2, r3
 8004088:	460c      	mov	r4, r1
 800408a:	2001      	movs	r0, #1
 800408c:	e7a8      	b.n	8003fe0 <_svfiprintf_r+0xd8>
 800408e:	2300      	movs	r3, #0
 8004090:	3401      	adds	r4, #1
 8004092:	9305      	str	r3, [sp, #20]
 8004094:	4619      	mov	r1, r3
 8004096:	f04f 0c0a 	mov.w	ip, #10
 800409a:	4620      	mov	r0, r4
 800409c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040a0:	3a30      	subs	r2, #48	@ 0x30
 80040a2:	2a09      	cmp	r2, #9
 80040a4:	d903      	bls.n	80040ae <_svfiprintf_r+0x1a6>
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0c6      	beq.n	8004038 <_svfiprintf_r+0x130>
 80040aa:	9105      	str	r1, [sp, #20]
 80040ac:	e7c4      	b.n	8004038 <_svfiprintf_r+0x130>
 80040ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80040b2:	4604      	mov	r4, r0
 80040b4:	2301      	movs	r3, #1
 80040b6:	e7f0      	b.n	800409a <_svfiprintf_r+0x192>
 80040b8:	ab03      	add	r3, sp, #12
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	462a      	mov	r2, r5
 80040be:	4b0f      	ldr	r3, [pc, #60]	@ (80040fc <_svfiprintf_r+0x1f4>)
 80040c0:	a904      	add	r1, sp, #16
 80040c2:	4638      	mov	r0, r7
 80040c4:	f3af 8000 	nop.w
 80040c8:	1c42      	adds	r2, r0, #1
 80040ca:	4606      	mov	r6, r0
 80040cc:	d1d6      	bne.n	800407c <_svfiprintf_r+0x174>
 80040ce:	89ab      	ldrh	r3, [r5, #12]
 80040d0:	065b      	lsls	r3, r3, #25
 80040d2:	f53f af2d 	bmi.w	8003f30 <_svfiprintf_r+0x28>
 80040d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80040d8:	e72c      	b.n	8003f34 <_svfiprintf_r+0x2c>
 80040da:	ab03      	add	r3, sp, #12
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	462a      	mov	r2, r5
 80040e0:	4b06      	ldr	r3, [pc, #24]	@ (80040fc <_svfiprintf_r+0x1f4>)
 80040e2:	a904      	add	r1, sp, #16
 80040e4:	4638      	mov	r0, r7
 80040e6:	f000 f879 	bl	80041dc <_printf_i>
 80040ea:	e7ed      	b.n	80040c8 <_svfiprintf_r+0x1c0>
 80040ec:	08004618 	.word	0x08004618
 80040f0:	0800461e 	.word	0x0800461e
 80040f4:	08004622 	.word	0x08004622
 80040f8:	00000000 	.word	0x00000000
 80040fc:	08003e51 	.word	0x08003e51

08004100 <_printf_common>:
 8004100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004104:	4616      	mov	r6, r2
 8004106:	4698      	mov	r8, r3
 8004108:	688a      	ldr	r2, [r1, #8]
 800410a:	690b      	ldr	r3, [r1, #16]
 800410c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004110:	4293      	cmp	r3, r2
 8004112:	bfb8      	it	lt
 8004114:	4613      	movlt	r3, r2
 8004116:	6033      	str	r3, [r6, #0]
 8004118:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800411c:	4607      	mov	r7, r0
 800411e:	460c      	mov	r4, r1
 8004120:	b10a      	cbz	r2, 8004126 <_printf_common+0x26>
 8004122:	3301      	adds	r3, #1
 8004124:	6033      	str	r3, [r6, #0]
 8004126:	6823      	ldr	r3, [r4, #0]
 8004128:	0699      	lsls	r1, r3, #26
 800412a:	bf42      	ittt	mi
 800412c:	6833      	ldrmi	r3, [r6, #0]
 800412e:	3302      	addmi	r3, #2
 8004130:	6033      	strmi	r3, [r6, #0]
 8004132:	6825      	ldr	r5, [r4, #0]
 8004134:	f015 0506 	ands.w	r5, r5, #6
 8004138:	d106      	bne.n	8004148 <_printf_common+0x48>
 800413a:	f104 0a19 	add.w	sl, r4, #25
 800413e:	68e3      	ldr	r3, [r4, #12]
 8004140:	6832      	ldr	r2, [r6, #0]
 8004142:	1a9b      	subs	r3, r3, r2
 8004144:	42ab      	cmp	r3, r5
 8004146:	dc26      	bgt.n	8004196 <_printf_common+0x96>
 8004148:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800414c:	6822      	ldr	r2, [r4, #0]
 800414e:	3b00      	subs	r3, #0
 8004150:	bf18      	it	ne
 8004152:	2301      	movne	r3, #1
 8004154:	0692      	lsls	r2, r2, #26
 8004156:	d42b      	bmi.n	80041b0 <_printf_common+0xb0>
 8004158:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800415c:	4641      	mov	r1, r8
 800415e:	4638      	mov	r0, r7
 8004160:	47c8      	blx	r9
 8004162:	3001      	adds	r0, #1
 8004164:	d01e      	beq.n	80041a4 <_printf_common+0xa4>
 8004166:	6823      	ldr	r3, [r4, #0]
 8004168:	6922      	ldr	r2, [r4, #16]
 800416a:	f003 0306 	and.w	r3, r3, #6
 800416e:	2b04      	cmp	r3, #4
 8004170:	bf02      	ittt	eq
 8004172:	68e5      	ldreq	r5, [r4, #12]
 8004174:	6833      	ldreq	r3, [r6, #0]
 8004176:	1aed      	subeq	r5, r5, r3
 8004178:	68a3      	ldr	r3, [r4, #8]
 800417a:	bf0c      	ite	eq
 800417c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004180:	2500      	movne	r5, #0
 8004182:	4293      	cmp	r3, r2
 8004184:	bfc4      	itt	gt
 8004186:	1a9b      	subgt	r3, r3, r2
 8004188:	18ed      	addgt	r5, r5, r3
 800418a:	2600      	movs	r6, #0
 800418c:	341a      	adds	r4, #26
 800418e:	42b5      	cmp	r5, r6
 8004190:	d11a      	bne.n	80041c8 <_printf_common+0xc8>
 8004192:	2000      	movs	r0, #0
 8004194:	e008      	b.n	80041a8 <_printf_common+0xa8>
 8004196:	2301      	movs	r3, #1
 8004198:	4652      	mov	r2, sl
 800419a:	4641      	mov	r1, r8
 800419c:	4638      	mov	r0, r7
 800419e:	47c8      	blx	r9
 80041a0:	3001      	adds	r0, #1
 80041a2:	d103      	bne.n	80041ac <_printf_common+0xac>
 80041a4:	f04f 30ff 	mov.w	r0, #4294967295
 80041a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041ac:	3501      	adds	r5, #1
 80041ae:	e7c6      	b.n	800413e <_printf_common+0x3e>
 80041b0:	18e1      	adds	r1, r4, r3
 80041b2:	1c5a      	adds	r2, r3, #1
 80041b4:	2030      	movs	r0, #48	@ 0x30
 80041b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80041ba:	4422      	add	r2, r4
 80041bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80041c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80041c4:	3302      	adds	r3, #2
 80041c6:	e7c7      	b.n	8004158 <_printf_common+0x58>
 80041c8:	2301      	movs	r3, #1
 80041ca:	4622      	mov	r2, r4
 80041cc:	4641      	mov	r1, r8
 80041ce:	4638      	mov	r0, r7
 80041d0:	47c8      	blx	r9
 80041d2:	3001      	adds	r0, #1
 80041d4:	d0e6      	beq.n	80041a4 <_printf_common+0xa4>
 80041d6:	3601      	adds	r6, #1
 80041d8:	e7d9      	b.n	800418e <_printf_common+0x8e>
	...

080041dc <_printf_i>:
 80041dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041e0:	7e0f      	ldrb	r7, [r1, #24]
 80041e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80041e4:	2f78      	cmp	r7, #120	@ 0x78
 80041e6:	4691      	mov	r9, r2
 80041e8:	4680      	mov	r8, r0
 80041ea:	460c      	mov	r4, r1
 80041ec:	469a      	mov	sl, r3
 80041ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80041f2:	d807      	bhi.n	8004204 <_printf_i+0x28>
 80041f4:	2f62      	cmp	r7, #98	@ 0x62
 80041f6:	d80a      	bhi.n	800420e <_printf_i+0x32>
 80041f8:	2f00      	cmp	r7, #0
 80041fa:	f000 80d1 	beq.w	80043a0 <_printf_i+0x1c4>
 80041fe:	2f58      	cmp	r7, #88	@ 0x58
 8004200:	f000 80b8 	beq.w	8004374 <_printf_i+0x198>
 8004204:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004208:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800420c:	e03a      	b.n	8004284 <_printf_i+0xa8>
 800420e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004212:	2b15      	cmp	r3, #21
 8004214:	d8f6      	bhi.n	8004204 <_printf_i+0x28>
 8004216:	a101      	add	r1, pc, #4	@ (adr r1, 800421c <_printf_i+0x40>)
 8004218:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800421c:	08004275 	.word	0x08004275
 8004220:	08004289 	.word	0x08004289
 8004224:	08004205 	.word	0x08004205
 8004228:	08004205 	.word	0x08004205
 800422c:	08004205 	.word	0x08004205
 8004230:	08004205 	.word	0x08004205
 8004234:	08004289 	.word	0x08004289
 8004238:	08004205 	.word	0x08004205
 800423c:	08004205 	.word	0x08004205
 8004240:	08004205 	.word	0x08004205
 8004244:	08004205 	.word	0x08004205
 8004248:	08004387 	.word	0x08004387
 800424c:	080042b3 	.word	0x080042b3
 8004250:	08004341 	.word	0x08004341
 8004254:	08004205 	.word	0x08004205
 8004258:	08004205 	.word	0x08004205
 800425c:	080043a9 	.word	0x080043a9
 8004260:	08004205 	.word	0x08004205
 8004264:	080042b3 	.word	0x080042b3
 8004268:	08004205 	.word	0x08004205
 800426c:	08004205 	.word	0x08004205
 8004270:	08004349 	.word	0x08004349
 8004274:	6833      	ldr	r3, [r6, #0]
 8004276:	1d1a      	adds	r2, r3, #4
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6032      	str	r2, [r6, #0]
 800427c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004280:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004284:	2301      	movs	r3, #1
 8004286:	e09c      	b.n	80043c2 <_printf_i+0x1e6>
 8004288:	6833      	ldr	r3, [r6, #0]
 800428a:	6820      	ldr	r0, [r4, #0]
 800428c:	1d19      	adds	r1, r3, #4
 800428e:	6031      	str	r1, [r6, #0]
 8004290:	0606      	lsls	r6, r0, #24
 8004292:	d501      	bpl.n	8004298 <_printf_i+0xbc>
 8004294:	681d      	ldr	r5, [r3, #0]
 8004296:	e003      	b.n	80042a0 <_printf_i+0xc4>
 8004298:	0645      	lsls	r5, r0, #25
 800429a:	d5fb      	bpl.n	8004294 <_printf_i+0xb8>
 800429c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80042a0:	2d00      	cmp	r5, #0
 80042a2:	da03      	bge.n	80042ac <_printf_i+0xd0>
 80042a4:	232d      	movs	r3, #45	@ 0x2d
 80042a6:	426d      	negs	r5, r5
 80042a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042ac:	4858      	ldr	r0, [pc, #352]	@ (8004410 <_printf_i+0x234>)
 80042ae:	230a      	movs	r3, #10
 80042b0:	e011      	b.n	80042d6 <_printf_i+0xfa>
 80042b2:	6821      	ldr	r1, [r4, #0]
 80042b4:	6833      	ldr	r3, [r6, #0]
 80042b6:	0608      	lsls	r0, r1, #24
 80042b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80042bc:	d402      	bmi.n	80042c4 <_printf_i+0xe8>
 80042be:	0649      	lsls	r1, r1, #25
 80042c0:	bf48      	it	mi
 80042c2:	b2ad      	uxthmi	r5, r5
 80042c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80042c6:	4852      	ldr	r0, [pc, #328]	@ (8004410 <_printf_i+0x234>)
 80042c8:	6033      	str	r3, [r6, #0]
 80042ca:	bf14      	ite	ne
 80042cc:	230a      	movne	r3, #10
 80042ce:	2308      	moveq	r3, #8
 80042d0:	2100      	movs	r1, #0
 80042d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80042d6:	6866      	ldr	r6, [r4, #4]
 80042d8:	60a6      	str	r6, [r4, #8]
 80042da:	2e00      	cmp	r6, #0
 80042dc:	db05      	blt.n	80042ea <_printf_i+0x10e>
 80042de:	6821      	ldr	r1, [r4, #0]
 80042e0:	432e      	orrs	r6, r5
 80042e2:	f021 0104 	bic.w	r1, r1, #4
 80042e6:	6021      	str	r1, [r4, #0]
 80042e8:	d04b      	beq.n	8004382 <_printf_i+0x1a6>
 80042ea:	4616      	mov	r6, r2
 80042ec:	fbb5 f1f3 	udiv	r1, r5, r3
 80042f0:	fb03 5711 	mls	r7, r3, r1, r5
 80042f4:	5dc7      	ldrb	r7, [r0, r7]
 80042f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80042fa:	462f      	mov	r7, r5
 80042fc:	42bb      	cmp	r3, r7
 80042fe:	460d      	mov	r5, r1
 8004300:	d9f4      	bls.n	80042ec <_printf_i+0x110>
 8004302:	2b08      	cmp	r3, #8
 8004304:	d10b      	bne.n	800431e <_printf_i+0x142>
 8004306:	6823      	ldr	r3, [r4, #0]
 8004308:	07df      	lsls	r7, r3, #31
 800430a:	d508      	bpl.n	800431e <_printf_i+0x142>
 800430c:	6923      	ldr	r3, [r4, #16]
 800430e:	6861      	ldr	r1, [r4, #4]
 8004310:	4299      	cmp	r1, r3
 8004312:	bfde      	ittt	le
 8004314:	2330      	movle	r3, #48	@ 0x30
 8004316:	f806 3c01 	strble.w	r3, [r6, #-1]
 800431a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800431e:	1b92      	subs	r2, r2, r6
 8004320:	6122      	str	r2, [r4, #16]
 8004322:	f8cd a000 	str.w	sl, [sp]
 8004326:	464b      	mov	r3, r9
 8004328:	aa03      	add	r2, sp, #12
 800432a:	4621      	mov	r1, r4
 800432c:	4640      	mov	r0, r8
 800432e:	f7ff fee7 	bl	8004100 <_printf_common>
 8004332:	3001      	adds	r0, #1
 8004334:	d14a      	bne.n	80043cc <_printf_i+0x1f0>
 8004336:	f04f 30ff 	mov.w	r0, #4294967295
 800433a:	b004      	add	sp, #16
 800433c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004340:	6823      	ldr	r3, [r4, #0]
 8004342:	f043 0320 	orr.w	r3, r3, #32
 8004346:	6023      	str	r3, [r4, #0]
 8004348:	4832      	ldr	r0, [pc, #200]	@ (8004414 <_printf_i+0x238>)
 800434a:	2778      	movs	r7, #120	@ 0x78
 800434c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004350:	6823      	ldr	r3, [r4, #0]
 8004352:	6831      	ldr	r1, [r6, #0]
 8004354:	061f      	lsls	r7, r3, #24
 8004356:	f851 5b04 	ldr.w	r5, [r1], #4
 800435a:	d402      	bmi.n	8004362 <_printf_i+0x186>
 800435c:	065f      	lsls	r7, r3, #25
 800435e:	bf48      	it	mi
 8004360:	b2ad      	uxthmi	r5, r5
 8004362:	6031      	str	r1, [r6, #0]
 8004364:	07d9      	lsls	r1, r3, #31
 8004366:	bf44      	itt	mi
 8004368:	f043 0320 	orrmi.w	r3, r3, #32
 800436c:	6023      	strmi	r3, [r4, #0]
 800436e:	b11d      	cbz	r5, 8004378 <_printf_i+0x19c>
 8004370:	2310      	movs	r3, #16
 8004372:	e7ad      	b.n	80042d0 <_printf_i+0xf4>
 8004374:	4826      	ldr	r0, [pc, #152]	@ (8004410 <_printf_i+0x234>)
 8004376:	e7e9      	b.n	800434c <_printf_i+0x170>
 8004378:	6823      	ldr	r3, [r4, #0]
 800437a:	f023 0320 	bic.w	r3, r3, #32
 800437e:	6023      	str	r3, [r4, #0]
 8004380:	e7f6      	b.n	8004370 <_printf_i+0x194>
 8004382:	4616      	mov	r6, r2
 8004384:	e7bd      	b.n	8004302 <_printf_i+0x126>
 8004386:	6833      	ldr	r3, [r6, #0]
 8004388:	6825      	ldr	r5, [r4, #0]
 800438a:	6961      	ldr	r1, [r4, #20]
 800438c:	1d18      	adds	r0, r3, #4
 800438e:	6030      	str	r0, [r6, #0]
 8004390:	062e      	lsls	r6, r5, #24
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	d501      	bpl.n	800439a <_printf_i+0x1be>
 8004396:	6019      	str	r1, [r3, #0]
 8004398:	e002      	b.n	80043a0 <_printf_i+0x1c4>
 800439a:	0668      	lsls	r0, r5, #25
 800439c:	d5fb      	bpl.n	8004396 <_printf_i+0x1ba>
 800439e:	8019      	strh	r1, [r3, #0]
 80043a0:	2300      	movs	r3, #0
 80043a2:	6123      	str	r3, [r4, #16]
 80043a4:	4616      	mov	r6, r2
 80043a6:	e7bc      	b.n	8004322 <_printf_i+0x146>
 80043a8:	6833      	ldr	r3, [r6, #0]
 80043aa:	1d1a      	adds	r2, r3, #4
 80043ac:	6032      	str	r2, [r6, #0]
 80043ae:	681e      	ldr	r6, [r3, #0]
 80043b0:	6862      	ldr	r2, [r4, #4]
 80043b2:	2100      	movs	r1, #0
 80043b4:	4630      	mov	r0, r6
 80043b6:	f7fb feeb 	bl	8000190 <memchr>
 80043ba:	b108      	cbz	r0, 80043c0 <_printf_i+0x1e4>
 80043bc:	1b80      	subs	r0, r0, r6
 80043be:	6060      	str	r0, [r4, #4]
 80043c0:	6863      	ldr	r3, [r4, #4]
 80043c2:	6123      	str	r3, [r4, #16]
 80043c4:	2300      	movs	r3, #0
 80043c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043ca:	e7aa      	b.n	8004322 <_printf_i+0x146>
 80043cc:	6923      	ldr	r3, [r4, #16]
 80043ce:	4632      	mov	r2, r6
 80043d0:	4649      	mov	r1, r9
 80043d2:	4640      	mov	r0, r8
 80043d4:	47d0      	blx	sl
 80043d6:	3001      	adds	r0, #1
 80043d8:	d0ad      	beq.n	8004336 <_printf_i+0x15a>
 80043da:	6823      	ldr	r3, [r4, #0]
 80043dc:	079b      	lsls	r3, r3, #30
 80043de:	d413      	bmi.n	8004408 <_printf_i+0x22c>
 80043e0:	68e0      	ldr	r0, [r4, #12]
 80043e2:	9b03      	ldr	r3, [sp, #12]
 80043e4:	4298      	cmp	r0, r3
 80043e6:	bfb8      	it	lt
 80043e8:	4618      	movlt	r0, r3
 80043ea:	e7a6      	b.n	800433a <_printf_i+0x15e>
 80043ec:	2301      	movs	r3, #1
 80043ee:	4632      	mov	r2, r6
 80043f0:	4649      	mov	r1, r9
 80043f2:	4640      	mov	r0, r8
 80043f4:	47d0      	blx	sl
 80043f6:	3001      	adds	r0, #1
 80043f8:	d09d      	beq.n	8004336 <_printf_i+0x15a>
 80043fa:	3501      	adds	r5, #1
 80043fc:	68e3      	ldr	r3, [r4, #12]
 80043fe:	9903      	ldr	r1, [sp, #12]
 8004400:	1a5b      	subs	r3, r3, r1
 8004402:	42ab      	cmp	r3, r5
 8004404:	dcf2      	bgt.n	80043ec <_printf_i+0x210>
 8004406:	e7eb      	b.n	80043e0 <_printf_i+0x204>
 8004408:	2500      	movs	r5, #0
 800440a:	f104 0619 	add.w	r6, r4, #25
 800440e:	e7f5      	b.n	80043fc <_printf_i+0x220>
 8004410:	08004629 	.word	0x08004629
 8004414:	0800463a 	.word	0x0800463a

08004418 <memmove>:
 8004418:	4288      	cmp	r0, r1
 800441a:	b510      	push	{r4, lr}
 800441c:	eb01 0402 	add.w	r4, r1, r2
 8004420:	d902      	bls.n	8004428 <memmove+0x10>
 8004422:	4284      	cmp	r4, r0
 8004424:	4623      	mov	r3, r4
 8004426:	d807      	bhi.n	8004438 <memmove+0x20>
 8004428:	1e43      	subs	r3, r0, #1
 800442a:	42a1      	cmp	r1, r4
 800442c:	d008      	beq.n	8004440 <memmove+0x28>
 800442e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004432:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004436:	e7f8      	b.n	800442a <memmove+0x12>
 8004438:	4402      	add	r2, r0
 800443a:	4601      	mov	r1, r0
 800443c:	428a      	cmp	r2, r1
 800443e:	d100      	bne.n	8004442 <memmove+0x2a>
 8004440:	bd10      	pop	{r4, pc}
 8004442:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004446:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800444a:	e7f7      	b.n	800443c <memmove+0x24>

0800444c <_sbrk_r>:
 800444c:	b538      	push	{r3, r4, r5, lr}
 800444e:	4d06      	ldr	r5, [pc, #24]	@ (8004468 <_sbrk_r+0x1c>)
 8004450:	2300      	movs	r3, #0
 8004452:	4604      	mov	r4, r0
 8004454:	4608      	mov	r0, r1
 8004456:	602b      	str	r3, [r5, #0]
 8004458:	f7fc f9cc 	bl	80007f4 <_sbrk>
 800445c:	1c43      	adds	r3, r0, #1
 800445e:	d102      	bne.n	8004466 <_sbrk_r+0x1a>
 8004460:	682b      	ldr	r3, [r5, #0]
 8004462:	b103      	cbz	r3, 8004466 <_sbrk_r+0x1a>
 8004464:	6023      	str	r3, [r4, #0]
 8004466:	bd38      	pop	{r3, r4, r5, pc}
 8004468:	20000368 	.word	0x20000368

0800446c <memcpy>:
 800446c:	440a      	add	r2, r1
 800446e:	4291      	cmp	r1, r2
 8004470:	f100 33ff 	add.w	r3, r0, #4294967295
 8004474:	d100      	bne.n	8004478 <memcpy+0xc>
 8004476:	4770      	bx	lr
 8004478:	b510      	push	{r4, lr}
 800447a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800447e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004482:	4291      	cmp	r1, r2
 8004484:	d1f9      	bne.n	800447a <memcpy+0xe>
 8004486:	bd10      	pop	{r4, pc}

08004488 <_realloc_r>:
 8004488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800448c:	4607      	mov	r7, r0
 800448e:	4614      	mov	r4, r2
 8004490:	460d      	mov	r5, r1
 8004492:	b921      	cbnz	r1, 800449e <_realloc_r+0x16>
 8004494:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004498:	4611      	mov	r1, r2
 800449a:	f7ff bc4d 	b.w	8003d38 <_malloc_r>
 800449e:	b92a      	cbnz	r2, 80044ac <_realloc_r+0x24>
 80044a0:	f7ff fbde 	bl	8003c60 <_free_r>
 80044a4:	4625      	mov	r5, r4
 80044a6:	4628      	mov	r0, r5
 80044a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044ac:	f000 f81a 	bl	80044e4 <_malloc_usable_size_r>
 80044b0:	4284      	cmp	r4, r0
 80044b2:	4606      	mov	r6, r0
 80044b4:	d802      	bhi.n	80044bc <_realloc_r+0x34>
 80044b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80044ba:	d8f4      	bhi.n	80044a6 <_realloc_r+0x1e>
 80044bc:	4621      	mov	r1, r4
 80044be:	4638      	mov	r0, r7
 80044c0:	f7ff fc3a 	bl	8003d38 <_malloc_r>
 80044c4:	4680      	mov	r8, r0
 80044c6:	b908      	cbnz	r0, 80044cc <_realloc_r+0x44>
 80044c8:	4645      	mov	r5, r8
 80044ca:	e7ec      	b.n	80044a6 <_realloc_r+0x1e>
 80044cc:	42b4      	cmp	r4, r6
 80044ce:	4622      	mov	r2, r4
 80044d0:	4629      	mov	r1, r5
 80044d2:	bf28      	it	cs
 80044d4:	4632      	movcs	r2, r6
 80044d6:	f7ff ffc9 	bl	800446c <memcpy>
 80044da:	4629      	mov	r1, r5
 80044dc:	4638      	mov	r0, r7
 80044de:	f7ff fbbf 	bl	8003c60 <_free_r>
 80044e2:	e7f1      	b.n	80044c8 <_realloc_r+0x40>

080044e4 <_malloc_usable_size_r>:
 80044e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044e8:	1f18      	subs	r0, r3, #4
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	bfbc      	itt	lt
 80044ee:	580b      	ldrlt	r3, [r1, r0]
 80044f0:	18c0      	addlt	r0, r0, r3
 80044f2:	4770      	bx	lr

080044f4 <_init>:
 80044f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044f6:	bf00      	nop
 80044f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044fa:	bc08      	pop	{r3}
 80044fc:	469e      	mov	lr, r3
 80044fe:	4770      	bx	lr

08004500 <_fini>:
 8004500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004502:	bf00      	nop
 8004504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004506:	bc08      	pop	{r3}
 8004508:	469e      	mov	lr, r3
 800450a:	4770      	bx	lr
