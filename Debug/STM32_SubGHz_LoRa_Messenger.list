
STM32_SubGHz_LoRa_Messenger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cd0  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08005e10  08005e10  00006e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f80  08005f80  0000716c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005f80  08005f80  00006f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f88  08005f88  0000716c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f88  08005f88  00006f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f8c  08005f8c  00006f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000016c  20000000  08005f90  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000418  2000016c  080060fc  0000716c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000584  080060fc  00007584  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000716c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000145b6  00000000  00000000  00007196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003175  00000000  00000000  0001b74c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001480  00000000  00000000  0001e8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f7c  00000000  00000000  0001fd48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e004  00000000  00000000  00020cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013e92  00000000  00000000  0003ecc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b662e  00000000  00000000  00052b5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00109188  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059cc  00000000  00000000  001091cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0010eb98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000016c 	.word	0x2000016c
 800015c:	00000000 	.word	0x00000000
 8000160:	08005df8 	.word	0x08005df8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000170 	.word	0x20000170
 800017c:	08005df8 	.word	0x08005df8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b988 	b.w	8000558 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	468e      	mov	lr, r1
 8000268:	4604      	mov	r4, r0
 800026a:	4688      	mov	r8, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14a      	bne.n	8000306 <__udivmoddi4+0xa6>
 8000270:	428a      	cmp	r2, r1
 8000272:	4617      	mov	r7, r2
 8000274:	d962      	bls.n	800033c <__udivmoddi4+0xdc>
 8000276:	fab2 f682 	clz	r6, r2
 800027a:	b14e      	cbz	r6, 8000290 <__udivmoddi4+0x30>
 800027c:	f1c6 0320 	rsb	r3, r6, #32
 8000280:	fa01 f806 	lsl.w	r8, r1, r6
 8000284:	fa20 f303 	lsr.w	r3, r0, r3
 8000288:	40b7      	lsls	r7, r6
 800028a:	ea43 0808 	orr.w	r8, r3, r8
 800028e:	40b4      	lsls	r4, r6
 8000290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000294:	fa1f fc87 	uxth.w	ip, r7
 8000298:	fbb8 f1fe 	udiv	r1, r8, lr
 800029c:	0c23      	lsrs	r3, r4, #16
 800029e:	fb0e 8811 	mls	r8, lr, r1, r8
 80002a2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a6:	fb01 f20c 	mul.w	r2, r1, ip
 80002aa:	429a      	cmp	r2, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x62>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002b4:	f080 80ea 	bcs.w	800048c <__udivmoddi4+0x22c>
 80002b8:	429a      	cmp	r2, r3
 80002ba:	f240 80e7 	bls.w	800048c <__udivmoddi4+0x22c>
 80002be:	3902      	subs	r1, #2
 80002c0:	443b      	add	r3, r7
 80002c2:	1a9a      	subs	r2, r3, r2
 80002c4:	b2a3      	uxth	r3, r4
 80002c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002d2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d6:	459c      	cmp	ip, r3
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0x8e>
 80002da:	18fb      	adds	r3, r7, r3
 80002dc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e0:	f080 80d6 	bcs.w	8000490 <__udivmoddi4+0x230>
 80002e4:	459c      	cmp	ip, r3
 80002e6:	f240 80d3 	bls.w	8000490 <__udivmoddi4+0x230>
 80002ea:	443b      	add	r3, r7
 80002ec:	3802      	subs	r0, #2
 80002ee:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f2:	eba3 030c 	sub.w	r3, r3, ip
 80002f6:	2100      	movs	r1, #0
 80002f8:	b11d      	cbz	r5, 8000302 <__udivmoddi4+0xa2>
 80002fa:	40f3      	lsrs	r3, r6
 80002fc:	2200      	movs	r2, #0
 80002fe:	e9c5 3200 	strd	r3, r2, [r5]
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	428b      	cmp	r3, r1
 8000308:	d905      	bls.n	8000316 <__udivmoddi4+0xb6>
 800030a:	b10d      	cbz	r5, 8000310 <__udivmoddi4+0xb0>
 800030c:	e9c5 0100 	strd	r0, r1, [r5]
 8000310:	2100      	movs	r1, #0
 8000312:	4608      	mov	r0, r1
 8000314:	e7f5      	b.n	8000302 <__udivmoddi4+0xa2>
 8000316:	fab3 f183 	clz	r1, r3
 800031a:	2900      	cmp	r1, #0
 800031c:	d146      	bne.n	80003ac <__udivmoddi4+0x14c>
 800031e:	4573      	cmp	r3, lr
 8000320:	d302      	bcc.n	8000328 <__udivmoddi4+0xc8>
 8000322:	4282      	cmp	r2, r0
 8000324:	f200 8105 	bhi.w	8000532 <__udivmoddi4+0x2d2>
 8000328:	1a84      	subs	r4, r0, r2
 800032a:	eb6e 0203 	sbc.w	r2, lr, r3
 800032e:	2001      	movs	r0, #1
 8000330:	4690      	mov	r8, r2
 8000332:	2d00      	cmp	r5, #0
 8000334:	d0e5      	beq.n	8000302 <__udivmoddi4+0xa2>
 8000336:	e9c5 4800 	strd	r4, r8, [r5]
 800033a:	e7e2      	b.n	8000302 <__udivmoddi4+0xa2>
 800033c:	2a00      	cmp	r2, #0
 800033e:	f000 8090 	beq.w	8000462 <__udivmoddi4+0x202>
 8000342:	fab2 f682 	clz	r6, r2
 8000346:	2e00      	cmp	r6, #0
 8000348:	f040 80a4 	bne.w	8000494 <__udivmoddi4+0x234>
 800034c:	1a8a      	subs	r2, r1, r2
 800034e:	0c03      	lsrs	r3, r0, #16
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	b280      	uxth	r0, r0
 8000356:	b2bc      	uxth	r4, r7
 8000358:	2101      	movs	r1, #1
 800035a:	fbb2 fcfe 	udiv	ip, r2, lr
 800035e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000362:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000366:	fb04 f20c 	mul.w	r2, r4, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d907      	bls.n	800037e <__udivmoddi4+0x11e>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000374:	d202      	bcs.n	800037c <__udivmoddi4+0x11c>
 8000376:	429a      	cmp	r2, r3
 8000378:	f200 80e0 	bhi.w	800053c <__udivmoddi4+0x2dc>
 800037c:	46c4      	mov	ip, r8
 800037e:	1a9b      	subs	r3, r3, r2
 8000380:	fbb3 f2fe 	udiv	r2, r3, lr
 8000384:	fb0e 3312 	mls	r3, lr, r2, r3
 8000388:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800038c:	fb02 f404 	mul.w	r4, r2, r4
 8000390:	429c      	cmp	r4, r3
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0x144>
 8000394:	18fb      	adds	r3, r7, r3
 8000396:	f102 30ff 	add.w	r0, r2, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x142>
 800039c:	429c      	cmp	r4, r3
 800039e:	f200 80ca 	bhi.w	8000536 <__udivmoddi4+0x2d6>
 80003a2:	4602      	mov	r2, r0
 80003a4:	1b1b      	subs	r3, r3, r4
 80003a6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003aa:	e7a5      	b.n	80002f8 <__udivmoddi4+0x98>
 80003ac:	f1c1 0620 	rsb	r6, r1, #32
 80003b0:	408b      	lsls	r3, r1
 80003b2:	fa22 f706 	lsr.w	r7, r2, r6
 80003b6:	431f      	orrs	r7, r3
 80003b8:	fa0e f401 	lsl.w	r4, lr, r1
 80003bc:	fa20 f306 	lsr.w	r3, r0, r6
 80003c0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003c4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003c8:	4323      	orrs	r3, r4
 80003ca:	fa00 f801 	lsl.w	r8, r0, r1
 80003ce:	fa1f fc87 	uxth.w	ip, r7
 80003d2:	fbbe f0f9 	udiv	r0, lr, r9
 80003d6:	0c1c      	lsrs	r4, r3, #16
 80003d8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003dc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003e0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ea:	d909      	bls.n	8000400 <__udivmoddi4+0x1a0>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 3aff 	add.w	sl, r0, #4294967295
 80003f2:	f080 809c 	bcs.w	800052e <__udivmoddi4+0x2ce>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f240 8099 	bls.w	800052e <__udivmoddi4+0x2ce>
 80003fc:	3802      	subs	r0, #2
 80003fe:	443c      	add	r4, r7
 8000400:	eba4 040e 	sub.w	r4, r4, lr
 8000404:	fa1f fe83 	uxth.w	lr, r3
 8000408:	fbb4 f3f9 	udiv	r3, r4, r9
 800040c:	fb09 4413 	mls	r4, r9, r3, r4
 8000410:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000414:	fb03 fc0c 	mul.w	ip, r3, ip
 8000418:	45a4      	cmp	ip, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x1ce>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000422:	f080 8082 	bcs.w	800052a <__udivmoddi4+0x2ca>
 8000426:	45a4      	cmp	ip, r4
 8000428:	d97f      	bls.n	800052a <__udivmoddi4+0x2ca>
 800042a:	3b02      	subs	r3, #2
 800042c:	443c      	add	r4, r7
 800042e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000432:	eba4 040c 	sub.w	r4, r4, ip
 8000436:	fba0 ec02 	umull	lr, ip, r0, r2
 800043a:	4564      	cmp	r4, ip
 800043c:	4673      	mov	r3, lr
 800043e:	46e1      	mov	r9, ip
 8000440:	d362      	bcc.n	8000508 <__udivmoddi4+0x2a8>
 8000442:	d05f      	beq.n	8000504 <__udivmoddi4+0x2a4>
 8000444:	b15d      	cbz	r5, 800045e <__udivmoddi4+0x1fe>
 8000446:	ebb8 0203 	subs.w	r2, r8, r3
 800044a:	eb64 0409 	sbc.w	r4, r4, r9
 800044e:	fa04 f606 	lsl.w	r6, r4, r6
 8000452:	fa22 f301 	lsr.w	r3, r2, r1
 8000456:	431e      	orrs	r6, r3
 8000458:	40cc      	lsrs	r4, r1
 800045a:	e9c5 6400 	strd	r6, r4, [r5]
 800045e:	2100      	movs	r1, #0
 8000460:	e74f      	b.n	8000302 <__udivmoddi4+0xa2>
 8000462:	fbb1 fcf2 	udiv	ip, r1, r2
 8000466:	0c01      	lsrs	r1, r0, #16
 8000468:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800046c:	b280      	uxth	r0, r0
 800046e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000472:	463b      	mov	r3, r7
 8000474:	4638      	mov	r0, r7
 8000476:	463c      	mov	r4, r7
 8000478:	46b8      	mov	r8, r7
 800047a:	46be      	mov	lr, r7
 800047c:	2620      	movs	r6, #32
 800047e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000482:	eba2 0208 	sub.w	r2, r2, r8
 8000486:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800048a:	e766      	b.n	800035a <__udivmoddi4+0xfa>
 800048c:	4601      	mov	r1, r0
 800048e:	e718      	b.n	80002c2 <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e72c      	b.n	80002ee <__udivmoddi4+0x8e>
 8000494:	f1c6 0220 	rsb	r2, r6, #32
 8000498:	fa2e f302 	lsr.w	r3, lr, r2
 800049c:	40b7      	lsls	r7, r6
 800049e:	40b1      	lsls	r1, r6
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	430a      	orrs	r2, r1
 80004aa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ae:	b2bc      	uxth	r4, r7
 80004b0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004b4:	0c11      	lsrs	r1, r2, #16
 80004b6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ba:	fb08 f904 	mul.w	r9, r8, r4
 80004be:	40b0      	lsls	r0, r6
 80004c0:	4589      	cmp	r9, r1
 80004c2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004c6:	b280      	uxth	r0, r0
 80004c8:	d93e      	bls.n	8000548 <__udivmoddi4+0x2e8>
 80004ca:	1879      	adds	r1, r7, r1
 80004cc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004d0:	d201      	bcs.n	80004d6 <__udivmoddi4+0x276>
 80004d2:	4589      	cmp	r9, r1
 80004d4:	d81f      	bhi.n	8000516 <__udivmoddi4+0x2b6>
 80004d6:	eba1 0109 	sub.w	r1, r1, r9
 80004da:	fbb1 f9fe 	udiv	r9, r1, lr
 80004de:	fb09 f804 	mul.w	r8, r9, r4
 80004e2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004e6:	b292      	uxth	r2, r2
 80004e8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004ec:	4542      	cmp	r2, r8
 80004ee:	d229      	bcs.n	8000544 <__udivmoddi4+0x2e4>
 80004f0:	18ba      	adds	r2, r7, r2
 80004f2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004f6:	d2c4      	bcs.n	8000482 <__udivmoddi4+0x222>
 80004f8:	4542      	cmp	r2, r8
 80004fa:	d2c2      	bcs.n	8000482 <__udivmoddi4+0x222>
 80004fc:	f1a9 0102 	sub.w	r1, r9, #2
 8000500:	443a      	add	r2, r7
 8000502:	e7be      	b.n	8000482 <__udivmoddi4+0x222>
 8000504:	45f0      	cmp	r8, lr
 8000506:	d29d      	bcs.n	8000444 <__udivmoddi4+0x1e4>
 8000508:	ebbe 0302 	subs.w	r3, lr, r2
 800050c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000510:	3801      	subs	r0, #1
 8000512:	46e1      	mov	r9, ip
 8000514:	e796      	b.n	8000444 <__udivmoddi4+0x1e4>
 8000516:	eba7 0909 	sub.w	r9, r7, r9
 800051a:	4449      	add	r1, r9
 800051c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000520:	fbb1 f9fe 	udiv	r9, r1, lr
 8000524:	fb09 f804 	mul.w	r8, r9, r4
 8000528:	e7db      	b.n	80004e2 <__udivmoddi4+0x282>
 800052a:	4673      	mov	r3, lr
 800052c:	e77f      	b.n	800042e <__udivmoddi4+0x1ce>
 800052e:	4650      	mov	r0, sl
 8000530:	e766      	b.n	8000400 <__udivmoddi4+0x1a0>
 8000532:	4608      	mov	r0, r1
 8000534:	e6fd      	b.n	8000332 <__udivmoddi4+0xd2>
 8000536:	443b      	add	r3, r7
 8000538:	3a02      	subs	r2, #2
 800053a:	e733      	b.n	80003a4 <__udivmoddi4+0x144>
 800053c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000540:	443b      	add	r3, r7
 8000542:	e71c      	b.n	800037e <__udivmoddi4+0x11e>
 8000544:	4649      	mov	r1, r9
 8000546:	e79c      	b.n	8000482 <__udivmoddi4+0x222>
 8000548:	eba1 0109 	sub.w	r1, r1, r9
 800054c:	46c4      	mov	ip, r8
 800054e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000552:	fb09 f804 	mul.w	r8, r9, r4
 8000556:	e7c4      	b.n	80004e2 <__udivmoddi4+0x282>

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000568:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800056a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4313      	orrs	r3, r2
 8000572:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000574:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000578:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4013      	ands	r3, r2
 800057e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000580:	68fb      	ldr	r3, [r7, #12]
}
 8000582:	bf00      	nop
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr

0800058c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a0:	2004      	movs	r0, #4
 80005a2:	f7ff ffdb 	bl	800055c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	2001      	movs	r0, #1
 80005a8:	f7ff ffd8 	bl	800055c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2138      	movs	r1, #56	@ 0x38
 80005b0:	4809      	ldr	r0, [pc, #36]	@ (80005d8 <MX_GPIO_Init+0x4c>)
 80005b2:	f000 ffef 	bl	8001594 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 80005b6:	2338      	movs	r3, #56	@ 0x38
 80005b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ba:	2301      	movs	r3, #1
 80005bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005c2:	2303      	movs	r3, #3
 80005c4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	4619      	mov	r1, r3
 80005ca:	4803      	ldr	r0, [pc, #12]	@ (80005d8 <MX_GPIO_Init+0x4c>)
 80005cc:	f000 fe82 	bl	80012d4 <HAL_GPIO_Init>

}
 80005d0:	bf00      	nop
 80005d2:	3718      	adds	r7, #24
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	48000800 	.word	0x48000800

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 fbe4 	bl	8000dac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f856 	bl	8000694 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  HAL_Delay(1000);
 80005e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005ec:	f000 fc54 	bl	8000e98 <HAL_Delay>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f0:	f7ff ffcc 	bl	800058c <MX_GPIO_Init>
  MX_SUBGHZ_Init();
 80005f4:	f000 f992 	bl	800091c <MX_SUBGHZ_Init>
  MX_USART2_UART_Init();
 80005f8:	f000 fa22 	bl	8000a40 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  BSP_LED_Init(LED_BLUE);
 80005fc:	2000      	movs	r0, #0
 80005fe:	f000 fafb 	bl	8000bf8 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8000602:	2001      	movs	r0, #1
 8000604:	f000 faf8 	bl	8000bf8 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000608:	2002      	movs	r0, #2
 800060a:	f000 faf5 	bl	8000bf8 <BSP_LED_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  snprintf((char*)buffer, MAX_BUFFER_SIZE, "\r\nSTM32 SubGHz LoRa Messenger\r\n\r\nPlease Enter an ID: ");
 800060e:	4a17      	ldr	r2, [pc, #92]	@ (800066c <main+0x90>)
 8000610:	21ff      	movs	r1, #255	@ 0xff
 8000612:	4817      	ldr	r0, [pc, #92]	@ (8000670 <main+0x94>)
 8000614:	f004 ff1a 	bl	800544c <sniprintf>
  UART_Transmit((char*)buffer);
 8000618:	4815      	ldr	r0, [pc, #84]	@ (8000670 <main+0x94>)
 800061a:	f000 f88d 	bl	8000738 <UART_Transmit>
  while(!messageReady)HAL_UART_Receive_IT(&huart2, input, 1);
 800061e:	e004      	b.n	800062a <main+0x4e>
 8000620:	2201      	movs	r2, #1
 8000622:	4914      	ldr	r1, [pc, #80]	@ (8000674 <main+0x98>)
 8000624:	4814      	ldr	r0, [pc, #80]	@ (8000678 <main+0x9c>)
 8000626:	f002 ff53 	bl	80034d0 <HAL_UART_Receive_IT>
 800062a:	4b14      	ldr	r3, [pc, #80]	@ (800067c <main+0xa0>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	f083 0301 	eor.w	r3, r3, #1
 8000632:	b2db      	uxtb	r3, r3
 8000634:	2b00      	cmp	r3, #0
 8000636:	d1f3      	bne.n	8000620 <main+0x44>
  messageReady = false;
 8000638:	4b10      	ldr	r3, [pc, #64]	@ (800067c <main+0xa0>)
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
  HAL_NVIC_DisableIRQ(USART2_IRQn);
 800063e:	2025      	movs	r0, #37	@ 0x25
 8000640:	f000 fd71 	bl	8001126 <HAL_NVIC_DisableIRQ>
  idLen = snprintf(id, MAX_BUFFER_SIZE, "%s", (char*)output);
 8000644:	4b0e      	ldr	r3, [pc, #56]	@ (8000680 <main+0xa4>)
 8000646:	4a0f      	ldr	r2, [pc, #60]	@ (8000684 <main+0xa8>)
 8000648:	21ff      	movs	r1, #255	@ 0xff
 800064a:	480f      	ldr	r0, [pc, #60]	@ (8000688 <main+0xac>)
 800064c:	f004 fefe 	bl	800544c <sniprintf>
 8000650:	4603      	mov	r3, r0
 8000652:	4a0e      	ldr	r2, [pc, #56]	@ (800068c <main+0xb0>)
 8000654:	6013      	str	r3, [r2, #0]
  UART_Transmit(id);
 8000656:	480c      	ldr	r0, [pc, #48]	@ (8000688 <main+0xac>)
 8000658:	f000 f86e 	bl	8000738 <UART_Transmit>
  UART_Transmit("\r\n\r\n");
 800065c:	480c      	ldr	r0, [pc, #48]	@ (8000690 <main+0xb4>)
 800065e:	f000 f86b 	bl	8000738 <UART_Transmit>
  resetTerminal();
 8000662:	f000 f8dd 	bl	8000820 <resetTerminal>

  while (1)
 8000666:	bf00      	nop
 8000668:	e7fd      	b.n	8000666 <main+0x8a>
 800066a:	bf00      	nop
 800066c:	08005e10 	.word	0x08005e10
 8000670:	20000188 	.word	0x20000188
 8000674:	20000388 	.word	0x20000388
 8000678:	200003a0 	.word	0x200003a0
 800067c:	2000038c 	.word	0x2000038c
 8000680:	20000288 	.word	0x20000288
 8000684:	08005e48 	.word	0x08005e48
 8000688:	20000000 	.word	0x20000000
 800068c:	20000100 	.word	0x20000100
 8000690:	08005e4c 	.word	0x08005e4c

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b09a      	sub	sp, #104	@ 0x68
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	2248      	movs	r2, #72	@ 0x48
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f004 ff2a 	bl	80054fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]
 80006b6:	615a      	str	r2, [r3, #20]
 80006b8:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000734 <SystemClock_Config+0xa0>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80006c2:	4a1c      	ldr	r2, [pc, #112]	@ (8000734 <SystemClock_Config+0xa0>)
 80006c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006c8:	6013      	str	r3, [r2, #0]
 80006ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000734 <SystemClock_Config+0xa0>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006d6:	2320      	movs	r3, #32
 80006d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006da:	2301      	movs	r3, #1
 80006dc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006de:	2300      	movs	r3, #0
 80006e0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80006e2:	23b0      	movs	r3, #176	@ 0xb0
 80006e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006e6:	2300      	movs	r3, #0
 80006e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ea:	f107 0320 	add.w	r3, r7, #32
 80006ee:	4618      	mov	r0, r3
 80006f0:	f001 fa3a 	bl	8001b68 <HAL_RCC_OscConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80006fa:	f000 f8ab 	bl	8000854 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80006fe:	234f      	movs	r3, #79	@ 0x4f
 8000700:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000702:	2300      	movs	r3, #0
 8000704:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	2102      	movs	r1, #2
 800071a:	4618      	mov	r0, r3
 800071c:	f001 fda6 	bl	800226c <HAL_RCC_ClockConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000726:	f000 f895 	bl	8000854 <Error_Handler>
  }
}
 800072a:	bf00      	nop
 800072c:	3768      	adds	r7, #104	@ 0x68
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	58000400 	.word	0x58000400

08000738 <UART_Transmit>:

/* USER CODE BEGIN 4 */

void UART_Transmit(const char* string){
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)string, strlen(string), HAL_MAX_DELAY);
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f7ff fd1d 	bl	8000180 <strlen>
 8000746:	4603      	mov	r3, r0
 8000748:	b29a      	uxth	r2, r3
 800074a:	f04f 33ff 	mov.w	r3, #4294967295
 800074e:	6879      	ldr	r1, [r7, #4]
 8000750:	4803      	ldr	r0, [pc, #12]	@ (8000760 <UART_Transmit+0x28>)
 8000752:	f002 fe36 	bl	80033c2 <HAL_UART_Transmit>
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200003a0 	.word	0x200003a0

08000764 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	switch(input[0]){
 800076c:	4b23      	ldr	r3, [pc, #140]	@ (80007fc <HAL_UART_RxCpltCallback+0x98>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b08      	cmp	r3, #8
 8000772:	d015      	beq.n	80007a0 <HAL_UART_RxCpltCallback+0x3c>
 8000774:	2b0d      	cmp	r3, #13
 8000776:	d125      	bne.n	80007c4 <HAL_UART_RxCpltCallback+0x60>
		case 0xd:
			UART_Transmit("\r\n");
 8000778:	4821      	ldr	r0, [pc, #132]	@ (8000800 <HAL_UART_RxCpltCallback+0x9c>)
 800077a:	f7ff ffdd 	bl	8000738 <UART_Transmit>
			sprintf((char*)output, "%s", (char*)buffer);
 800077e:	4a21      	ldr	r2, [pc, #132]	@ (8000804 <HAL_UART_RxCpltCallback+0xa0>)
 8000780:	4921      	ldr	r1, [pc, #132]	@ (8000808 <HAL_UART_RxCpltCallback+0xa4>)
 8000782:	4822      	ldr	r0, [pc, #136]	@ (800080c <HAL_UART_RxCpltCallback+0xa8>)
 8000784:	f004 fe98 	bl	80054b8 <siprintf>
			output[count] = '\0';
 8000788:	4b21      	ldr	r3, [pc, #132]	@ (8000810 <HAL_UART_RxCpltCallback+0xac>)
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	461a      	mov	r2, r3
 800078e:	4b1f      	ldr	r3, [pc, #124]	@ (800080c <HAL_UART_RxCpltCallback+0xa8>)
 8000790:	2100      	movs	r1, #0
 8000792:	5499      	strb	r1, [r3, r2]
			messageReady = true;
 8000794:	4b1f      	ldr	r3, [pc, #124]	@ (8000814 <HAL_UART_RxCpltCallback+0xb0>)
 8000796:	2201      	movs	r2, #1
 8000798:	701a      	strb	r2, [r3, #0]
			resetTerminal();
 800079a:	f000 f841 	bl	8000820 <resetTerminal>
			break;
 800079e:	e029      	b.n	80007f4 <HAL_UART_RxCpltCallback+0x90>

		case 0x8:
			if(count > (idLen + 2)){
 80007a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000810 <HAL_UART_RxCpltCallback+0xac>)
 80007a2:	881b      	ldrh	r3, [r3, #0]
 80007a4:	461a      	mov	r2, r3
 80007a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000818 <HAL_UART_RxCpltCallback+0xb4>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	3302      	adds	r3, #2
 80007ac:	429a      	cmp	r2, r3
 80007ae:	dd20      	ble.n	80007f2 <HAL_UART_RxCpltCallback+0x8e>
				count--;
 80007b0:	4b17      	ldr	r3, [pc, #92]	@ (8000810 <HAL_UART_RxCpltCallback+0xac>)
 80007b2:	881b      	ldrh	r3, [r3, #0]
 80007b4:	3b01      	subs	r3, #1
 80007b6:	b29a      	uxth	r2, r3
 80007b8:	4b15      	ldr	r3, [pc, #84]	@ (8000810 <HAL_UART_RxCpltCallback+0xac>)
 80007ba:	801a      	strh	r2, [r3, #0]
				UART_Transmit("\b \b");
 80007bc:	4817      	ldr	r0, [pc, #92]	@ (800081c <HAL_UART_RxCpltCallback+0xb8>)
 80007be:	f7ff ffbb 	bl	8000738 <UART_Transmit>
			}
			break;
 80007c2:	e016      	b.n	80007f2 <HAL_UART_RxCpltCallback+0x8e>

		default:
			if(count < MAX_BUFFER_SIZE){
 80007c4:	4b12      	ldr	r3, [pc, #72]	@ (8000810 <HAL_UART_RxCpltCallback+0xac>)
 80007c6:	881b      	ldrh	r3, [r3, #0]
 80007c8:	2bfe      	cmp	r3, #254	@ 0xfe
 80007ca:	d813      	bhi.n	80007f4 <HAL_UART_RxCpltCallback+0x90>
				buffer[count++] = input[0];
 80007cc:	4b10      	ldr	r3, [pc, #64]	@ (8000810 <HAL_UART_RxCpltCallback+0xac>)
 80007ce:	881b      	ldrh	r3, [r3, #0]
 80007d0:	1c5a      	adds	r2, r3, #1
 80007d2:	b291      	uxth	r1, r2
 80007d4:	4a0e      	ldr	r2, [pc, #56]	@ (8000810 <HAL_UART_RxCpltCallback+0xac>)
 80007d6:	8011      	strh	r1, [r2, #0]
 80007d8:	461a      	mov	r2, r3
 80007da:	4b08      	ldr	r3, [pc, #32]	@ (80007fc <HAL_UART_RxCpltCallback+0x98>)
 80007dc:	7819      	ldrb	r1, [r3, #0]
 80007de:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <HAL_UART_RxCpltCallback+0xa0>)
 80007e0:	5499      	strb	r1, [r3, r2]
				HAL_UART_Transmit(huart, input, 1, HAL_MAX_DELAY);
 80007e2:	f04f 33ff 	mov.w	r3, #4294967295
 80007e6:	2201      	movs	r2, #1
 80007e8:	4904      	ldr	r1, [pc, #16]	@ (80007fc <HAL_UART_RxCpltCallback+0x98>)
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f002 fde9 	bl	80033c2 <HAL_UART_Transmit>
			}
	}
}
 80007f0:	e000      	b.n	80007f4 <HAL_UART_RxCpltCallback+0x90>
			break;
 80007f2:	bf00      	nop
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000388 	.word	0x20000388
 8000800:	08005e54 	.word	0x08005e54
 8000804:	20000188 	.word	0x20000188
 8000808:	08005e48 	.word	0x08005e48
 800080c:	20000288 	.word	0x20000288
 8000810:	2000038a 	.word	0x2000038a
 8000814:	2000038c 	.word	0x2000038c
 8000818:	20000100 	.word	0x20000100
 800081c:	08005e58 	.word	0x08005e58

08000820 <resetTerminal>:

void resetTerminal(){
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
	UART_Transmit(id);
 8000824:	4807      	ldr	r0, [pc, #28]	@ (8000844 <resetTerminal+0x24>)
 8000826:	f7ff ff87 	bl	8000738 <UART_Transmit>
	UART_Transmit(": ");
 800082a:	4807      	ldr	r0, [pc, #28]	@ (8000848 <resetTerminal+0x28>)
 800082c:	f7ff ff84 	bl	8000738 <UART_Transmit>
	count = idLen + 2;
 8000830:	4b06      	ldr	r3, [pc, #24]	@ (800084c <resetTerminal+0x2c>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	b29b      	uxth	r3, r3
 8000836:	3302      	adds	r3, #2
 8000838:	b29a      	uxth	r2, r3
 800083a:	4b05      	ldr	r3, [pc, #20]	@ (8000850 <resetTerminal+0x30>)
 800083c:	801a      	strh	r2, [r3, #0]
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000000 	.word	0x20000000
 8000848:	08005e5c 	.word	0x08005e5c
 800084c:	20000100 	.word	0x20000100
 8000850:	2000038a 	.word	0x2000038a

08000854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000858:	b672      	cpsid	i
}
 800085a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800085c:	bf00      	nop
 800085e:	e7fd      	b.n	800085c <Error_Handler+0x8>

08000860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr

0800086c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <NMI_Handler+0x4>

08000874 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <HardFault_Handler+0x4>

0800087c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <MemManage_Handler+0x4>

08000884 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <BusFault_Handler+0x4>

0800088c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <UsageFault_Handler+0x4>

08000894 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr

080008a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr

080008ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr

080008b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008bc:	f000 fad0 	bl	8000e60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008c8:	4802      	ldr	r0, [pc, #8]	@ (80008d4 <USART2_IRQHandler+0x10>)
 80008ca:	f002 fe4d 	bl	8003568 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	200003a0 	.word	0x200003a0

080008d8 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80008dc:	4802      	ldr	r0, [pc, #8]	@ (80008e8 <SUBGHZ_Radio_IRQHandler+0x10>)
 80008de:	f002 fb50 	bl	8002f82 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000390 	.word	0x20000390

080008ec <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80008f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008f8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80008fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4313      	orrs	r3, r2
 8000902:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000904:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000908:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4013      	ands	r3, r2
 800090e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000910:	68fb      	ldr	r3, [r7, #12]
}
 8000912:	bf00      	nop
 8000914:	3714      	adds	r7, #20
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr

0800091c <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8000920:	4b06      	ldr	r3, [pc, #24]	@ (800093c <MX_SUBGHZ_Init+0x20>)
 8000922:	2208      	movs	r2, #8
 8000924:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	@ (800093c <MX_SUBGHZ_Init+0x20>)
 8000928:	f002 fa14 	bl	8002d54 <HAL_SUBGHZ_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8000932:	f7ff ff8f 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000390 	.word	0x20000390

08000940 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000948:	2001      	movs	r0, #1
 800094a:	f7ff ffcf 	bl	80008ec <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	2100      	movs	r1, #0
 8000952:	2032      	movs	r0, #50	@ 0x32
 8000954:	f000 fbbf 	bl	80010d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000958:	2032      	movs	r0, #50	@ 0x32
 800095a:	f000 fbd6 	bl	800110a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000970:	4a14      	ldr	r2, [pc, #80]	@ (80009c4 <_sbrk+0x5c>)
 8000972:	4b15      	ldr	r3, [pc, #84]	@ (80009c8 <_sbrk+0x60>)
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800097c:	4b13      	ldr	r3, [pc, #76]	@ (80009cc <_sbrk+0x64>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d102      	bne.n	800098a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000984:	4b11      	ldr	r3, [pc, #68]	@ (80009cc <_sbrk+0x64>)
 8000986:	4a12      	ldr	r2, [pc, #72]	@ (80009d0 <_sbrk+0x68>)
 8000988:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800098a:	4b10      	ldr	r3, [pc, #64]	@ (80009cc <_sbrk+0x64>)
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4413      	add	r3, r2
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	429a      	cmp	r2, r3
 8000996:	d207      	bcs.n	80009a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000998:	f004 fdb8 	bl	800550c <__errno>
 800099c:	4603      	mov	r3, r0
 800099e:	220c      	movs	r2, #12
 80009a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009a2:	f04f 33ff 	mov.w	r3, #4294967295
 80009a6:	e009      	b.n	80009bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009a8:	4b08      	ldr	r3, [pc, #32]	@ (80009cc <_sbrk+0x64>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ae:	4b07      	ldr	r3, [pc, #28]	@ (80009cc <_sbrk+0x64>)
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4413      	add	r3, r2
 80009b6:	4a05      	ldr	r2, [pc, #20]	@ (80009cc <_sbrk+0x64>)
 80009b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ba:	68fb      	ldr	r3, [r7, #12]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3718      	adds	r7, #24
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20010000 	.word	0x20010000
 80009c8:	00000400 	.word	0x00000400
 80009cc:	2000039c 	.word	0x2000039c
 80009d0:	20000588 	.word	0x20000588

080009d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr

080009e0 <LL_AHB2_GRP1_EnableClock>:
{
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80009e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80009ec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80009ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80009f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80009fc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4013      	ands	r3, r2
 8000a02:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a04:	68fb      	ldr	r3, [r7, #12]
}
 8000a06:	bf00      	nop
 8000a08:	3714      	adds	r7, #20
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr

08000a10 <LL_APB1_GRP1_EnableClock>:
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000a18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a1c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000a1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000a28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a2c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4013      	ands	r3, r2
 8000a32:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a34:	68fb      	ldr	r3, [r7, #12]
}
 8000a36:	bf00      	nop
 8000a38:	3714      	adds	r7, #20
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr

08000a40 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a44:	4b22      	ldr	r3, [pc, #136]	@ (8000ad0 <MX_USART2_UART_Init+0x90>)
 8000a46:	4a23      	ldr	r2, [pc, #140]	@ (8000ad4 <MX_USART2_UART_Init+0x94>)
 8000a48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a4a:	4b21      	ldr	r3, [pc, #132]	@ (8000ad0 <MX_USART2_UART_Init+0x90>)
 8000a4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a52:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad0 <MX_USART2_UART_Init+0x90>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a58:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad0 <MX_USART2_UART_Init+0x90>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad0 <MX_USART2_UART_Init+0x90>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a64:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad0 <MX_USART2_UART_Init+0x90>)
 8000a66:	220c      	movs	r2, #12
 8000a68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6a:	4b19      	ldr	r3, [pc, #100]	@ (8000ad0 <MX_USART2_UART_Init+0x90>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a70:	4b17      	ldr	r3, [pc, #92]	@ (8000ad0 <MX_USART2_UART_Init+0x90>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a76:	4b16      	ldr	r3, [pc, #88]	@ (8000ad0 <MX_USART2_UART_Init+0x90>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a7c:	4b14      	ldr	r3, [pc, #80]	@ (8000ad0 <MX_USART2_UART_Init+0x90>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a82:	4b13      	ldr	r3, [pc, #76]	@ (8000ad0 <MX_USART2_UART_Init+0x90>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a88:	4811      	ldr	r0, [pc, #68]	@ (8000ad0 <MX_USART2_UART_Init+0x90>)
 8000a8a:	f002 fc4a 	bl	8003322 <HAL_UART_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a94:	f7ff fede 	bl	8000854 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a98:	2100      	movs	r1, #0
 8000a9a:	480d      	ldr	r0, [pc, #52]	@ (8000ad0 <MX_USART2_UART_Init+0x90>)
 8000a9c:	f004 fc0d 	bl	80052ba <HAL_UARTEx_SetTxFifoThreshold>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000aa6:	f7ff fed5 	bl	8000854 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4808      	ldr	r0, [pc, #32]	@ (8000ad0 <MX_USART2_UART_Init+0x90>)
 8000aae:	f004 fc42 	bl	8005336 <HAL_UARTEx_SetRxFifoThreshold>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000ab8:	f7ff fecc 	bl	8000854 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000abc:	4804      	ldr	r0, [pc, #16]	@ (8000ad0 <MX_USART2_UART_Init+0x90>)
 8000abe:	f004 fbc4 	bl	800524a <HAL_UARTEx_DisableFifoMode>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ac8:	f7ff fec4 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	200003a0 	.word	0x200003a0
 8000ad4:	40004400 	.word	0x40004400

08000ad8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b096      	sub	sp, #88	@ 0x58
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000af0:	f107 030c 	add.w	r3, r7, #12
 8000af4:	2238      	movs	r2, #56	@ 0x38
 8000af6:	2100      	movs	r1, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f004 fcff 	bl	80054fc <memset>
  if(uartHandle->Instance==USART2)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a1b      	ldr	r2, [pc, #108]	@ (8000b70 <HAL_UART_MspInit+0x98>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d12e      	bne.n	8000b66 <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b0c:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8000b10:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b12:	f107 030c 	add.w	r3, r7, #12
 8000b16:	4618      	mov	r0, r3
 8000b18:	f001 ff68 	bl	80029ec <HAL_RCCEx_PeriphCLKConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b22:	f7ff fe97 	bl	8000854 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b26:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000b2a:	f7ff ff71 	bl	8000a10 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f7ff ff56 	bl	80009e0 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000b34:	230c      	movs	r3, #12
 8000b36:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b44:	2307      	movs	r3, #7
 8000b46:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b48:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b52:	f000 fbbf 	bl	80012d4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2100      	movs	r1, #0
 8000b5a:	2025      	movs	r0, #37	@ 0x25
 8000b5c:	f000 fabb 	bl	80010d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b60:	2025      	movs	r0, #37	@ 0x25
 8000b62:	f000 fad2 	bl	800110a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b66:	bf00      	nop
 8000b68:	3758      	adds	r7, #88	@ 0x58
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40004400 	.word	0x40004400

08000b74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b74:	480d      	ldr	r0, [pc, #52]	@ (8000bac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b76:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b78:	f7ff ff2c 	bl	80009d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b7c:	480c      	ldr	r0, [pc, #48]	@ (8000bb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b7e:	490d      	ldr	r1, [pc, #52]	@ (8000bb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b80:	4a0d      	ldr	r2, [pc, #52]	@ (8000bb8 <LoopForever+0xe>)
  movs r3, #0
 8000b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b84:	e002      	b.n	8000b8c <LoopCopyDataInit>

08000b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8a:	3304      	adds	r3, #4

08000b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b90:	d3f9      	bcc.n	8000b86 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b92:	4a0a      	ldr	r2, [pc, #40]	@ (8000bbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b94:	4c0a      	ldr	r4, [pc, #40]	@ (8000bc0 <LoopForever+0x16>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b98:	e001      	b.n	8000b9e <LoopFillZerobss>

08000b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b9c:	3204      	adds	r2, #4

08000b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba0:	d3fb      	bcc.n	8000b9a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ba2:	f004 fcb9 	bl	8005518 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ba6:	f7ff fd19 	bl	80005dc <main>

08000baa <LoopForever>:

LoopForever:
    b LoopForever
 8000baa:	e7fe      	b.n	8000baa <LoopForever>
  ldr   r0, =_estack
 8000bac:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000bb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb4:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8000bb8:	08005f90 	.word	0x08005f90
  ldr r2, =_sbss
 8000bbc:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 8000bc0:	20000584 	.word	0x20000584

08000bc4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bc4:	e7fe      	b.n	8000bc4 <ADC_IRQHandler>

08000bc6 <LL_AHB2_GRP1_EnableClock>:
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	b085      	sub	sp, #20
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000bce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bd2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000bd4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000bde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000be2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4013      	ands	r3, r2
 8000be8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bea:	68fb      	ldr	r3, [r7, #12]
}
 8000bec:	bf00      	nop
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bc80      	pop	{r7}
 8000bf4:	4770      	bx	lr
	...

08000bf8 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8000c02:	f107 030c 	add.w	r3, r7, #12
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]
 8000c10:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000c12:	2002      	movs	r0, #2
 8000c14:	f7ff ffd7 	bl	8000bc6 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	4a12      	ldr	r2, [pc, #72]	@ (8000c64 <BSP_LED_Init+0x6c>)
 8000c1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c20:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000c22:	2301      	movs	r3, #1
 8000c24:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	4a0d      	ldr	r2, [pc, #52]	@ (8000c68 <BSP_LED_Init+0x70>)
 8000c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c36:	f107 020c 	add.w	r2, r7, #12
 8000c3a:	4611      	mov	r1, r2
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f000 fb49 	bl	80012d4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	4a08      	ldr	r2, [pc, #32]	@ (8000c68 <BSP_LED_Init+0x70>)
 8000c46:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	4a05      	ldr	r2, [pc, #20]	@ (8000c64 <BSP_LED_Init+0x6c>)
 8000c4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c52:	2200      	movs	r2, #0
 8000c54:	4619      	mov	r1, r3
 8000c56:	f000 fc9d 	bl	8001594 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000c5a:	2300      	movs	r3, #0
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3720      	adds	r7, #32
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	08005f1c 	.word	0x08005f1c
 8000c68:	20000108 	.word	0x20000108

08000c6c <HAL_SUBGHZ_TxCpltCallback>:
    return RF_WAKEUP_TIME;
}

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8000c74:	4b03      	ldr	r3, [pc, #12]	@ (8000c84 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2001      	movs	r0, #1
 8000c7a:	4798      	blx	r3
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000434 	.word	0x20000434

08000c88 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8000c90:	4b03      	ldr	r3, [pc, #12]	@ (8000ca0 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2002      	movs	r0, #2
 8000c96:	4798      	blx	r3
}
 8000c98:	bf00      	nop
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000434 	.word	0x20000434

08000ca4 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8000cac:	4b03      	ldr	r3, [pc, #12]	@ (8000cbc <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2040      	movs	r0, #64	@ 0x40
 8000cb2:	4798      	blx	r3
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000434 	.word	0x20000434

08000cc0 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	460b      	mov	r3, r1
 8000cca:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8000ccc:	78fb      	ldrb	r3, [r7, #3]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d002      	beq.n	8000cd8 <HAL_SUBGHZ_CADStatusCallback+0x18>
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d005      	beq.n	8000ce2 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8000cd6:	e00a      	b.n	8000cee <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8000cd8:	4b07      	ldr	r3, [pc, #28]	@ (8000cf8 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2080      	movs	r0, #128	@ 0x80
 8000cde:	4798      	blx	r3
            break;
 8000ce0:	e005      	b.n	8000cee <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8000ce2:	4b05      	ldr	r3, [pc, #20]	@ (8000cf8 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000cea:	4798      	blx	r3
            break;
 8000cec:	bf00      	nop
    }
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000434 	.word	0x20000434

08000cfc <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8000d04:	4b04      	ldr	r3, [pc, #16]	@ (8000d18 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000d0c:	4798      	blx	r3
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000434 	.word	0x20000434

08000d1c <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8000d24:	4b03      	ldr	r3, [pc, #12]	@ (8000d34 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2020      	movs	r0, #32
 8000d2a:	4798      	blx	r3
}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000434 	.word	0x20000434

08000d38 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8000d40:	4b03      	ldr	r3, [pc, #12]	@ (8000d50 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2004      	movs	r0, #4
 8000d46:	4798      	blx	r3
}
 8000d48:	bf00      	nop
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000434 	.word	0x20000434

08000d54 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8000d5c:	4b03      	ldr	r3, [pc, #12]	@ (8000d6c <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2008      	movs	r0, #8
 8000d62:	4798      	blx	r3
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000434 	.word	0x20000434

08000d70 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8000d78:	4b03      	ldr	r3, [pc, #12]	@ (8000d88 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2010      	movs	r0, #16
 8000d7e:	4798      	blx	r3
}
 8000d80:	bf00      	nop
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20000434 	.word	0x20000434

08000d8c <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8000d94:	4b04      	ldr	r3, [pc, #16]	@ (8000da8 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000d9c:	4798      	blx	r3
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000434 	.word	0x20000434

08000dac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000db2:	2300      	movs	r3, #0
 8000db4:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db6:	2003      	movs	r0, #3
 8000db8:	f000 f982 	bl	80010c0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000dbc:	f001 fc38 	bl	8002630 <HAL_RCC_GetHCLKFreq>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	4a09      	ldr	r2, [pc, #36]	@ (8000de8 <HAL_Init+0x3c>)
 8000dc4:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	f000 f810 	bl	8000dec <HAL_InitTick>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d002      	beq.n	8000dd8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	71fb      	strb	r3, [r7, #7]
 8000dd6:	e001      	b.n	8000ddc <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dd8:	f7ff fd42 	bl	8000860 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000104 	.word	0x20000104

08000dec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000df4:	2300      	movs	r3, #0
 8000df6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000df8:	4b17      	ldr	r3, [pc, #92]	@ (8000e58 <HAL_InitTick+0x6c>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d024      	beq.n	8000e4a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e00:	f001 fc16 	bl	8002630 <HAL_RCC_GetHCLKFreq>
 8000e04:	4602      	mov	r2, r0
 8000e06:	4b14      	ldr	r3, [pc, #80]	@ (8000e58 <HAL_InitTick+0x6c>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e10:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 f992 	bl	8001142 <HAL_SYSTICK_Config>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d10f      	bne.n	8000e44 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2b0f      	cmp	r3, #15
 8000e28:	d809      	bhi.n	8000e3e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	6879      	ldr	r1, [r7, #4]
 8000e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8000e32:	f000 f950 	bl	80010d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e36:	4a09      	ldr	r2, [pc, #36]	@ (8000e5c <HAL_InitTick+0x70>)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6013      	str	r3, [r2, #0]
 8000e3c:	e007      	b.n	8000e4e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	73fb      	strb	r3, [r7, #15]
 8000e42:	e004      	b.n	8000e4e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e44:	2301      	movs	r3, #1
 8000e46:	73fb      	strb	r3, [r7, #15]
 8000e48:	e001      	b.n	8000e4e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3710      	adds	r7, #16
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000118 	.word	0x20000118
 8000e5c:	20000114 	.word	0x20000114

08000e60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e64:	4b05      	ldr	r3, [pc, #20]	@ (8000e7c <HAL_IncTick+0x1c>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b05      	ldr	r3, [pc, #20]	@ (8000e80 <HAL_IncTick+0x20>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4413      	add	r3, r2
 8000e70:	4a03      	ldr	r2, [pc, #12]	@ (8000e80 <HAL_IncTick+0x20>)
 8000e72:	6013      	str	r3, [r2, #0]
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr
 8000e7c:	20000118 	.word	0x20000118
 8000e80:	20000438 	.word	0x20000438

08000e84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return uwTick;
 8000e88:	4b02      	ldr	r3, [pc, #8]	@ (8000e94 <HAL_GetTick+0x10>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr
 8000e94:	20000438 	.word	0x20000438

08000e98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea0:	f7ff fff0 	bl	8000e84 <HAL_GetTick>
 8000ea4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb0:	d005      	beq.n	8000ebe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000edc <HAL_Delay+0x44>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4413      	add	r3, r2
 8000ebc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ebe:	bf00      	nop
 8000ec0:	f7ff ffe0 	bl	8000e84 <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d8f7      	bhi.n	8000ec0 <HAL_Delay+0x28>
  {
  }
}
 8000ed0:	bf00      	nop
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000118 	.word	0x20000118

08000ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000efc:	4013      	ands	r3, r2
 8000efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f12:	4a04      	ldr	r2, [pc, #16]	@ (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	60d3      	str	r3, [r2, #12]
}
 8000f18:	bf00      	nop
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f2c:	4b04      	ldr	r3, [pc, #16]	@ (8000f40 <__NVIC_GetPriorityGrouping+0x18>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	0a1b      	lsrs	r3, r3, #8
 8000f32:	f003 0307 	and.w	r3, r3, #7
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bc80      	pop	{r7}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	db0b      	blt.n	8000f6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	f003 021f 	and.w	r2, r3, #31
 8000f5c:	4906      	ldr	r1, [pc, #24]	@ (8000f78 <__NVIC_EnableIRQ+0x34>)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	095b      	lsrs	r3, r3, #5
 8000f64:	2001      	movs	r0, #1
 8000f66:	fa00 f202 	lsl.w	r2, r0, r2
 8000f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr
 8000f78:	e000e100 	.word	0xe000e100

08000f7c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	db12      	blt.n	8000fb4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	f003 021f 	and.w	r2, r3, #31
 8000f94:	490a      	ldr	r1, [pc, #40]	@ (8000fc0 <__NVIC_DisableIRQ+0x44>)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	095b      	lsrs	r3, r3, #5
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000fa2:	3320      	adds	r3, #32
 8000fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa8:	f3bf 8f4f 	dsb	sy
}
 8000fac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fae:	f3bf 8f6f 	isb	sy
}
 8000fb2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bc80      	pop	{r7}
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000e100 	.word	0xe000e100

08000fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	6039      	str	r1, [r7, #0]
 8000fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	db0a      	blt.n	8000fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	490c      	ldr	r1, [pc, #48]	@ (8001010 <__NVIC_SetPriority+0x4c>)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	0112      	lsls	r2, r2, #4
 8000fe4:	b2d2      	uxtb	r2, r2
 8000fe6:	440b      	add	r3, r1
 8000fe8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fec:	e00a      	b.n	8001004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	4908      	ldr	r1, [pc, #32]	@ (8001014 <__NVIC_SetPriority+0x50>)
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	f003 030f 	and.w	r3, r3, #15
 8000ffa:	3b04      	subs	r3, #4
 8000ffc:	0112      	lsls	r2, r2, #4
 8000ffe:	b2d2      	uxtb	r2, r2
 8001000:	440b      	add	r3, r1
 8001002:	761a      	strb	r2, [r3, #24]
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	bc80      	pop	{r7}
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000e100 	.word	0xe000e100
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001018:	b480      	push	{r7}
 800101a:	b089      	sub	sp, #36	@ 0x24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	f1c3 0307 	rsb	r3, r3, #7
 8001032:	2b04      	cmp	r3, #4
 8001034:	bf28      	it	cs
 8001036:	2304      	movcs	r3, #4
 8001038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3304      	adds	r3, #4
 800103e:	2b06      	cmp	r3, #6
 8001040:	d902      	bls.n	8001048 <NVIC_EncodePriority+0x30>
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3b03      	subs	r3, #3
 8001046:	e000      	b.n	800104a <NVIC_EncodePriority+0x32>
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104c:	f04f 32ff 	mov.w	r2, #4294967295
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43da      	mvns	r2, r3
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	401a      	ands	r2, r3
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001060:	f04f 31ff 	mov.w	r1, #4294967295
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	fa01 f303 	lsl.w	r3, r1, r3
 800106a:	43d9      	mvns	r1, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001070:	4313      	orrs	r3, r2
         );
}
 8001072:	4618      	mov	r0, r3
 8001074:	3724      	adds	r7, #36	@ 0x24
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr

0800107c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3b01      	subs	r3, #1
 8001088:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800108c:	d301      	bcc.n	8001092 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800108e:	2301      	movs	r3, #1
 8001090:	e00f      	b.n	80010b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001092:	4a0a      	ldr	r2, [pc, #40]	@ (80010bc <SysTick_Config+0x40>)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3b01      	subs	r3, #1
 8001098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800109a:	210f      	movs	r1, #15
 800109c:	f04f 30ff 	mov.w	r0, #4294967295
 80010a0:	f7ff ff90 	bl	8000fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a4:	4b05      	ldr	r3, [pc, #20]	@ (80010bc <SysTick_Config+0x40>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010aa:	4b04      	ldr	r3, [pc, #16]	@ (80010bc <SysTick_Config+0x40>)
 80010ac:	2207      	movs	r2, #7
 80010ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	e000e010 	.word	0xe000e010

080010c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ff09 	bl	8000ee0 <__NVIC_SetPriorityGrouping>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b086      	sub	sp, #24
 80010da:	af00      	add	r7, sp, #0
 80010dc:	4603      	mov	r3, r0
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	607a      	str	r2, [r7, #4]
 80010e2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010e4:	f7ff ff20 	bl	8000f28 <__NVIC_GetPriorityGrouping>
 80010e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	68b9      	ldr	r1, [r7, #8]
 80010ee:	6978      	ldr	r0, [r7, #20]
 80010f0:	f7ff ff92 	bl	8001018 <NVIC_EncodePriority>
 80010f4:	4602      	mov	r2, r0
 80010f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff61 	bl	8000fc4 <__NVIC_SetPriority>
}
 8001102:	bf00      	nop
 8001104:	3718      	adds	r7, #24
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	4603      	mov	r3, r0
 8001112:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff13 	bl	8000f44 <__NVIC_EnableIRQ>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	4603      	mov	r3, r0
 800112e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ff21 	bl	8000f7c <__NVIC_DisableIRQ>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff ff96 	bl	800107c <SysTick_Config>
 8001150:	4603      	mov	r3, r0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800115a:	b480      	push	{r7}
 800115c:	b083      	sub	sp, #12
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d101      	bne.n	800116c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e04f      	b.n	800120c <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d008      	beq.n	800118a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2204      	movs	r2, #4
 800117c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e040      	b.n	800120c <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f022 020e 	bic.w	r2, r2, #14
 8001198:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80011a8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f022 0201 	bic.w	r2, r2, #1
 80011b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011be:	f003 021c 	and.w	r2, r3, #28
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c6:	2101      	movs	r1, #1
 80011c8:	fa01 f202 	lsl.w	r2, r1, r2
 80011cc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80011d6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d00c      	beq.n	80011fa <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011ea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80011ee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80011f8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2201      	movs	r2, #1
 80011fe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 800120a:	2300      	movs	r3, #0
}
 800120c:	4618      	mov	r0, r3
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr

08001216 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b084      	sub	sp, #16
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800121e:	2300      	movs	r3, #0
 8001220:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b02      	cmp	r3, #2
 800122c:	d005      	beq.n	800123a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2204      	movs	r2, #4
 8001232:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	73fb      	strb	r3, [r7, #15]
 8001238:	e047      	b.n	80012ca <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f022 020e 	bic.w	r2, r2, #14
 8001248:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f022 0201 	bic.w	r2, r2, #1
 8001258:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001264:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001268:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800126e:	f003 021c 	and.w	r2, r3, #28
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001276:	2101      	movs	r1, #1
 8001278:	fa01 f202 	lsl.w	r2, r1, r2
 800127c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001286:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800128c:	2b00      	cmp	r3, #0
 800128e:	d00c      	beq.n	80012aa <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800129a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800129e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80012a8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2201      	movs	r2, #1
 80012ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2200      	movs	r2, #0
 80012b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	4798      	blx	r3
    }
  }
  return status;
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b087      	sub	sp, #28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012e2:	e140      	b.n	8001566 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	2101      	movs	r1, #1
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	fa01 f303 	lsl.w	r3, r1, r3
 80012f0:	4013      	ands	r3, r2
 80012f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f000 8132 	beq.w	8001560 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	2b01      	cmp	r3, #1
 8001306:	d005      	beq.n	8001314 <HAL_GPIO_Init+0x40>
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 0303 	and.w	r3, r3, #3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d130      	bne.n	8001376 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	2203      	movs	r2, #3
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4013      	ands	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	68da      	ldr	r2, [r3, #12]
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	4313      	orrs	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800134a:	2201      	movs	r2, #1
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	4013      	ands	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	091b      	lsrs	r3, r3, #4
 8001360:	f003 0201 	and.w	r2, r3, #1
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f003 0303 	and.w	r3, r3, #3
 800137e:	2b03      	cmp	r3, #3
 8001380:	d017      	beq.n	80013b2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	2203      	movs	r2, #3
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4013      	ands	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f003 0303 	and.w	r3, r3, #3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d123      	bne.n	8001406 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	08da      	lsrs	r2, r3, #3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	3208      	adds	r2, #8
 80013c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	220f      	movs	r2, #15
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43db      	mvns	r3, r3
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	4013      	ands	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	691a      	ldr	r2, [r3, #16]
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	f003 0307 	and.w	r3, r3, #7
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	08da      	lsrs	r2, r3, #3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3208      	adds	r2, #8
 8001400:	6939      	ldr	r1, [r7, #16]
 8001402:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	2203      	movs	r2, #3
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f003 0203 	and.w	r2, r3, #3
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4313      	orrs	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001442:	2b00      	cmp	r3, #0
 8001444:	f000 808c 	beq.w	8001560 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001448:	4a4e      	ldr	r2, [pc, #312]	@ (8001584 <HAL_GPIO_Init+0x2b0>)
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	089b      	lsrs	r3, r3, #2
 800144e:	3302      	adds	r3, #2
 8001450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001454:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	f003 0303 	and.w	r3, r3, #3
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	2207      	movs	r2, #7
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	43db      	mvns	r3, r3
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	4013      	ands	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001472:	d00d      	beq.n	8001490 <HAL_GPIO_Init+0x1bc>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4a44      	ldr	r2, [pc, #272]	@ (8001588 <HAL_GPIO_Init+0x2b4>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d007      	beq.n	800148c <HAL_GPIO_Init+0x1b8>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a43      	ldr	r2, [pc, #268]	@ (800158c <HAL_GPIO_Init+0x2b8>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d101      	bne.n	8001488 <HAL_GPIO_Init+0x1b4>
 8001484:	2302      	movs	r3, #2
 8001486:	e004      	b.n	8001492 <HAL_GPIO_Init+0x1be>
 8001488:	2307      	movs	r3, #7
 800148a:	e002      	b.n	8001492 <HAL_GPIO_Init+0x1be>
 800148c:	2301      	movs	r3, #1
 800148e:	e000      	b.n	8001492 <HAL_GPIO_Init+0x1be>
 8001490:	2300      	movs	r3, #0
 8001492:	697a      	ldr	r2, [r7, #20]
 8001494:	f002 0203 	and.w	r2, r2, #3
 8001498:	0092      	lsls	r2, r2, #2
 800149a:	4093      	lsls	r3, r2
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4313      	orrs	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014a2:	4938      	ldr	r1, [pc, #224]	@ (8001584 <HAL_GPIO_Init+0x2b0>)
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	089b      	lsrs	r3, r3, #2
 80014a8:	3302      	adds	r3, #2
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014b0:	4b37      	ldr	r3, [pc, #220]	@ (8001590 <HAL_GPIO_Init+0x2bc>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	43db      	mvns	r3, r3
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4013      	ands	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d003      	beq.n	80014d4 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014d4:	4a2e      	ldr	r2, [pc, #184]	@ (8001590 <HAL_GPIO_Init+0x2bc>)
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80014da:	4b2d      	ldr	r3, [pc, #180]	@ (8001590 <HAL_GPIO_Init+0x2bc>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	43db      	mvns	r3, r3
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	4013      	ands	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014fe:	4a24      	ldr	r2, [pc, #144]	@ (8001590 <HAL_GPIO_Init+0x2bc>)
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001504:	4b22      	ldr	r3, [pc, #136]	@ (8001590 <HAL_GPIO_Init+0x2bc>)
 8001506:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800150a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	43db      	mvns	r3, r3
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	4013      	ands	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4313      	orrs	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800152a:	4a19      	ldr	r2, [pc, #100]	@ (8001590 <HAL_GPIO_Init+0x2bc>)
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001532:	4b17      	ldr	r3, [pc, #92]	@ (8001590 <HAL_GPIO_Init+0x2bc>)
 8001534:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001538:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	43db      	mvns	r3, r3
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	4013      	ands	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d003      	beq.n	8001558 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001558:	4a0d      	ldr	r2, [pc, #52]	@ (8001590 <HAL_GPIO_Init+0x2bc>)
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	3301      	adds	r3, #1
 8001564:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	fa22 f303 	lsr.w	r3, r2, r3
 8001570:	2b00      	cmp	r3, #0
 8001572:	f47f aeb7 	bne.w	80012e4 <HAL_GPIO_Init+0x10>
  }
}
 8001576:	bf00      	nop
 8001578:	bf00      	nop
 800157a:	371c      	adds	r7, #28
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	40010000 	.word	0x40010000
 8001588:	48000400 	.word	0x48000400
 800158c:	48000800 	.word	0x48000800
 8001590:	58000800 	.word	0x58000800

08001594 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	460b      	mov	r3, r1
 800159e:	807b      	strh	r3, [r7, #2]
 80015a0:	4613      	mov	r3, r2
 80015a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015a4:	787b      	ldrb	r3, [r7, #1]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015aa:	887a      	ldrh	r2, [r7, #2]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015b0:	e002      	b.n	80015b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015b2:	887a      	ldrh	r2, [r7, #2]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr
	...

080015c4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015c8:	4b04      	ldr	r3, [pc, #16]	@ (80015dc <HAL_PWR_EnableBkUpAccess+0x18>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a03      	ldr	r2, [pc, #12]	@ (80015dc <HAL_PWR_EnableBkUpAccess+0x18>)
 80015ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015d2:	6013      	str	r3, [r2, #0]
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr
 80015dc:	58000400 	.word	0x58000400

080015e0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80015e4:	4b03      	ldr	r3, [pc, #12]	@ (80015f4 <HAL_PWREx_GetVoltageRange+0x14>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr
 80015f4:	58000400 	.word	0x58000400

080015f8 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80015fc:	4b06      	ldr	r3, [pc, #24]	@ (8001618 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001604:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001608:	d101      	bne.n	800160e <LL_PWR_IsEnabledBkUpAccess+0x16>
 800160a:	2301      	movs	r3, #1
 800160c:	e000      	b.n	8001610 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr
 8001618:	58000400 	.word	0x58000400

0800161c <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001620:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800162a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800162e:	6013      	str	r3, [r2, #0]
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr

08001638 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800163c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001646:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800164a:	6013      	str	r3, [r2, #0]
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr

08001654 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001658:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001662:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001666:	d101      	bne.n	800166c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001668:	2301      	movs	r3, #1
 800166a:	e000      	b.n	800166e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr

08001676 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800167a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001684:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001688:	6013      	str	r3, [r2, #0]
}
 800168a:	bf00      	nop
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr

08001692 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001696:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016a4:	6013      	str	r3, [r2, #0]
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr

080016ae <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80016b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80016c0:	d101      	bne.n	80016c6 <LL_RCC_HSE_IsReady+0x18>
 80016c2:	2301      	movs	r3, #1
 80016c4:	e000      	b.n	80016c8 <LL_RCC_HSE_IsReady+0x1a>
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr

080016d0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80016d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016e2:	6013      	str	r3, [r2, #0]
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr

080016ec <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80016f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80016fe:	6013      	str	r3, [r2, #0]
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr

08001708 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800170c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001716:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800171a:	d101      	bne.n	8001720 <LL_RCC_HSI_IsReady+0x18>
 800171c:	2301      	movs	r3, #1
 800171e:	e000      	b.n	8001722 <LL_RCC_HSI_IsReady+0x1a>
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr

0800172a <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001732:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	061b      	lsls	r3, r3, #24
 8001740:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001744:	4313      	orrs	r3, r2
 8001746:	604b      	str	r3, [r1, #4]
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr

08001752 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001756:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800175a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b02      	cmp	r3, #2
 8001764:	d101      	bne.n	800176a <LL_RCC_LSE_IsReady+0x18>
 8001766:	2301      	movs	r3, #1
 8001768:	e000      	b.n	800176c <LL_RCC_LSE_IsReady+0x1a>
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr

08001774 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001778:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800177c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001780:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr

08001794 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001798:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800179c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017a4:	f023 0301 	bic.w	r3, r3, #1
 80017a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr

080017b4 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80017b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d101      	bne.n	80017cc <LL_RCC_LSI_IsReady+0x18>
 80017c8:	2301      	movs	r3, #1
 80017ca:	e000      	b.n	80017ce <LL_RCC_LSI_IsReady+0x1a>
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc80      	pop	{r7}
 80017d4:	4770      	bx	lr

080017d6 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80017da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	6013      	str	r3, [r2, #0]
}
 80017ea:	bf00      	nop
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr

080017f2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80017f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001800:	f023 0301 	bic.w	r3, r3, #1
 8001804:	6013      	str	r3, [r2, #0]
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr

0800180e <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001812:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b02      	cmp	r3, #2
 800181e:	d101      	bne.n	8001824 <LL_RCC_MSI_IsReady+0x16>
 8001820:	2301      	movs	r3, #1
 8001822:	e000      	b.n	8001826 <LL_RCC_MSI_IsReady+0x18>
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	46bd      	mov	sp, r7
 800182a:	bc80      	pop	{r7}
 800182c:	4770      	bx	lr

0800182e <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001832:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0308 	and.w	r3, r3, #8
 800183c:	2b08      	cmp	r3, #8
 800183e:	d101      	bne.n	8001844 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001840:	2301      	movs	r3, #1
 8001842:	e000      	b.n	8001846 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr

0800184e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001852:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800185c:	4618      	mov	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr

08001864 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001868:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800186c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001870:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8001874:	4618      	mov	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr

0800187c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001884:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	021b      	lsls	r3, r3, #8
 8001892:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001896:	4313      	orrs	r3, r2
 8001898:	604b      	str	r3, [r1, #4]
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr

080018a4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80018ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f023 0203 	bic.w	r2, r3, #3
 80018b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4313      	orrs	r3, r2
 80018be:	608b      	str	r3, [r1, #8]
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bc80      	pop	{r7}
 80018c8:	4770      	bx	lr

080018ca <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80018ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f003 030c 	and.w	r3, r3, #12
}
 80018d8:	4618      	mov	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr

080018e0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80018e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	608b      	str	r3, [r1, #8]
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	bc80      	pop	{r7}
 8001904:	4770      	bx	lr

08001906 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800190e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001912:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001916:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800191a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4313      	orrs	r3, r2
 8001922:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr

08001930 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001938:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800193c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001940:	f023 020f 	bic.w	r2, r3, #15
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	091b      	lsrs	r3, r3, #4
 8001948:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800194c:	4313      	orrs	r3, r2
 800194e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr

0800195c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001964:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800196e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4313      	orrs	r3, r2
 8001976:	608b      	str	r3, [r1, #8]
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr

08001982 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800198a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001994:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4313      	orrs	r3, r2
 800199c:	608b      	str	r3, [r1, #8]
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr

080019a8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80019ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr

080019be <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80019c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80019ca:	011b      	lsls	r3, r3, #4
 80019cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr

080019d8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80019dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr

080019ee <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80019f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr

08001a04 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001a08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a16:	6013      	str	r3, [r2, #0]
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr

08001a20 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001a24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a32:	6013      	str	r3, [r2, #0]
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr

08001a3c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001a40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001a4e:	d101      	bne.n	8001a54 <LL_RCC_PLL_IsReady+0x18>
 8001a50:	2301      	movs	r3, #1
 8001a52:	e000      	b.n	8001a56 <LL_RCC_PLL_IsReady+0x1a>
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr

08001a5e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001a62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	0a1b      	lsrs	r3, r3, #8
 8001a6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr

08001a76 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001a7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr

08001a8c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001a90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr

08001aa2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001aa6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	f003 0303 	and.w	r3, r3, #3
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr

08001ab8 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001abc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ac6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aca:	d101      	bne.n	8001ad0 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001acc:	2301      	movs	r3, #1
 8001ace:	e000      	b.n	8001ad2 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr

08001ada <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001ade:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ae2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001aee:	d101      	bne.n	8001af4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001af0:	2301      	movs	r3, #1
 8001af2:	e000      	b.n	8001af6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr

08001afe <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001b02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b06:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001b0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b12:	d101      	bne.n	8001b18 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001b14:	2301      	movs	r3, #1
 8001b16:	e000      	b.n	8001b1a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bc80      	pop	{r7}
 8001b20:	4770      	bx	lr

08001b22 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001b26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001b34:	d101      	bne.n	8001b3a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001b36:	2301      	movs	r3, #1
 8001b38:	e000      	b.n	8001b3c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr

08001b44 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001b48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b52:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001b56:	d101      	bne.n	8001b5c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e000      	b.n	8001b5e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr
	...

08001b68 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b088      	sub	sp, #32
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e36f      	b.n	800225a <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b7a:	f7ff fea6 	bl	80018ca <LL_RCC_GetSysClkSource>
 8001b7e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b80:	f7ff ff8f 	bl	8001aa2 <LL_RCC_PLL_GetMainSource>
 8001b84:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0320 	and.w	r3, r3, #32
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f000 80c4 	beq.w	8001d1c <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d005      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x3e>
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	2b0c      	cmp	r3, #12
 8001b9e:	d176      	bne.n	8001c8e <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d173      	bne.n	8001c8e <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a1b      	ldr	r3, [r3, #32]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e353      	b.n	800225a <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001bb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0308 	and.w	r3, r3, #8
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d005      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x68>
 8001bc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bce:	e006      	b.n	8001bde <HAL_RCC_OscConfig+0x76>
 8001bd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bd8:	091b      	lsrs	r3, r3, #4
 8001bda:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d222      	bcs.n	8001c28 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 fd5a 	bl	80026a0 <RCC_SetFlashLatencyFromMSIRange>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e331      	b.n	800225a <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c00:	f043 0308 	orr.w	r3, r3, #8
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c14:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff fe2b 	bl	800187c <LL_RCC_MSI_SetCalibTrimming>
 8001c26:	e021      	b.n	8001c6c <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c32:	f043 0308 	orr.w	r3, r3, #8
 8001c36:	6013      	str	r3, [r2, #0]
 8001c38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c46:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff fe12 	bl	800187c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f000 fd1f 	bl	80026a0 <RCC_SetFlashLatencyFromMSIRange>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e2f6      	b.n	800225a <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001c6c:	f000 fce0 	bl	8002630 <HAL_RCC_GetHCLKFreq>
 8001c70:	4603      	mov	r3, r0
 8001c72:	4aa7      	ldr	r2, [pc, #668]	@ (8001f10 <HAL_RCC_OscConfig+0x3a8>)
 8001c74:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001c76:	4ba7      	ldr	r3, [pc, #668]	@ (8001f14 <HAL_RCC_OscConfig+0x3ac>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff f8b6 	bl	8000dec <HAL_InitTick>
 8001c80:	4603      	mov	r3, r0
 8001c82:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001c84:	7cfb      	ldrb	r3, [r7, #19]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d047      	beq.n	8001d1a <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8001c8a:	7cfb      	ldrb	r3, [r7, #19]
 8001c8c:	e2e5      	b.n	800225a <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a1b      	ldr	r3, [r3, #32]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d02c      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c96:	f7ff fd9e 	bl	80017d6 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c9a:	f7ff f8f3 	bl	8000e84 <HAL_GetTick>
 8001c9e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ca2:	f7ff f8ef 	bl	8000e84 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e2d2      	b.n	800225a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001cb4:	f7ff fdab 	bl	800180e <LL_RCC_MSI_IsReady>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0f1      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001cc8:	f043 0308 	orr.w	r3, r3, #8
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cdc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff fdc7 	bl	800187c <LL_RCC_MSI_SetCalibTrimming>
 8001cee:	e015      	b.n	8001d1c <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001cf0:	f7ff fd7f 	bl	80017f2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cf4:	f7ff f8c6 	bl	8000e84 <HAL_GetTick>
 8001cf8:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cfc:	f7ff f8c2 	bl	8000e84 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e2a5      	b.n	800225a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001d0e:	f7ff fd7e 	bl	800180e <LL_RCC_MSI_IsReady>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1f1      	bne.n	8001cfc <HAL_RCC_OscConfig+0x194>
 8001d18:	e000      	b.n	8001d1c <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001d1a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d058      	beq.n	8001dda <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	2b08      	cmp	r3, #8
 8001d2c:	d005      	beq.n	8001d3a <HAL_RCC_OscConfig+0x1d2>
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	2b0c      	cmp	r3, #12
 8001d32:	d108      	bne.n	8001d46 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	2b03      	cmp	r3, #3
 8001d38:	d105      	bne.n	8001d46 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d14b      	bne.n	8001dda <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e289      	b.n	800225a <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001d46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d64:	d102      	bne.n	8001d6c <HAL_RCC_OscConfig+0x204>
 8001d66:	f7ff fc86 	bl	8001676 <LL_RCC_HSE_Enable>
 8001d6a:	e00d      	b.n	8001d88 <HAL_RCC_OscConfig+0x220>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8001d74:	d104      	bne.n	8001d80 <HAL_RCC_OscConfig+0x218>
 8001d76:	f7ff fc51 	bl	800161c <LL_RCC_HSE_EnableTcxo>
 8001d7a:	f7ff fc7c 	bl	8001676 <LL_RCC_HSE_Enable>
 8001d7e:	e003      	b.n	8001d88 <HAL_RCC_OscConfig+0x220>
 8001d80:	f7ff fc87 	bl	8001692 <LL_RCC_HSE_Disable>
 8001d84:	f7ff fc58 	bl	8001638 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d012      	beq.n	8001db6 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d90:	f7ff f878 	bl	8000e84 <HAL_GetTick>
 8001d94:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d98:	f7ff f874 	bl	8000e84 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b64      	cmp	r3, #100	@ 0x64
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e257      	b.n	800225a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001daa:	f7ff fc80 	bl	80016ae <LL_RCC_HSE_IsReady>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d0f1      	beq.n	8001d98 <HAL_RCC_OscConfig+0x230>
 8001db4:	e011      	b.n	8001dda <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db6:	f7ff f865 	bl	8000e84 <HAL_GetTick>
 8001dba:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dbe:	f7ff f861 	bl	8000e84 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b64      	cmp	r3, #100	@ 0x64
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e244      	b.n	800225a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001dd0:	f7ff fc6d 	bl	80016ae <LL_RCC_HSE_IsReady>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f1      	bne.n	8001dbe <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d046      	beq.n	8001e74 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	2b04      	cmp	r3, #4
 8001dea:	d005      	beq.n	8001df8 <HAL_RCC_OscConfig+0x290>
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	2b0c      	cmp	r3, #12
 8001df0:	d10e      	bne.n	8001e10 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d10b      	bne.n	8001e10 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e22a      	b.n	800225a <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff fc8e 	bl	800172a <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001e0e:	e031      	b.n	8001e74 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d019      	beq.n	8001e4c <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e18:	f7ff fc5a 	bl	80016d0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1c:	f7ff f832 	bl	8000e84 <HAL_GetTick>
 8001e20:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e24:	f7ff f82e 	bl	8000e84 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e211      	b.n	800225a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001e36:	f7ff fc67 	bl	8001708 <LL_RCC_HSI_IsReady>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0f1      	beq.n	8001e24 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff fc70 	bl	800172a <LL_RCC_HSI_SetCalibTrimming>
 8001e4a:	e013      	b.n	8001e74 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e4c:	f7ff fc4e 	bl	80016ec <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e50:	f7ff f818 	bl	8000e84 <HAL_GetTick>
 8001e54:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e58:	f7ff f814 	bl	8000e84 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e1f7      	b.n	800225a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001e6a:	f7ff fc4d 	bl	8001708 <LL_RCC_HSI_IsReady>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1f1      	bne.n	8001e58 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0308 	and.w	r3, r3, #8
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d06e      	beq.n	8001f5e <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d056      	beq.n	8001f36 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001e88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e90:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69da      	ldr	r2, [r3, #28]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f003 0310 	and.w	r3, r3, #16
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d031      	beq.n	8001f04 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d006      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e1d0      	b.n	800225a <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d013      	beq.n	8001eea <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8001ec2:	f7ff fc67 	bl	8001794 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ec6:	f7fe ffdd 	bl	8000e84 <HAL_GetTick>
 8001eca:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ece:	f7fe ffd9 	bl	8000e84 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b11      	cmp	r3, #17
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e1bc      	b.n	800225a <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001ee0:	f7ff fc68 	bl	80017b4 <LL_RCC_LSI_IsReady>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1f1      	bne.n	8001ece <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001eea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ef2:	f023 0210 	bic.w	r2, r3, #16
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001efe:	4313      	orrs	r3, r2
 8001f00:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f04:	f7ff fc36 	bl	8001774 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f08:	f7fe ffbc 	bl	8000e84 <HAL_GetTick>
 8001f0c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001f0e:	e00c      	b.n	8001f2a <HAL_RCC_OscConfig+0x3c2>
 8001f10:	20000104 	.word	0x20000104
 8001f14:	20000114 	.word	0x20000114
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f18:	f7fe ffb4 	bl	8000e84 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b11      	cmp	r3, #17
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e197      	b.n	800225a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001f2a:	f7ff fc43 	bl	80017b4 <LL_RCC_LSI_IsReady>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0f1      	beq.n	8001f18 <HAL_RCC_OscConfig+0x3b0>
 8001f34:	e013      	b.n	8001f5e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f36:	f7ff fc2d 	bl	8001794 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3a:	f7fe ffa3 	bl	8000e84 <HAL_GetTick>
 8001f3e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f42:	f7fe ff9f 	bl	8000e84 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b11      	cmp	r3, #17
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e182      	b.n	800225a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001f54:	f7ff fc2e 	bl	80017b4 <LL_RCC_LSI_IsReady>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1f1      	bne.n	8001f42 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0304 	and.w	r3, r3, #4
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 80d8 	beq.w	800211c <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001f6c:	f7ff fb44 	bl	80015f8 <LL_PWR_IsEnabledBkUpAccess>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d113      	bne.n	8001f9e <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001f76:	f7ff fb25 	bl	80015c4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f7a:	f7fe ff83 	bl	8000e84 <HAL_GetTick>
 8001f7e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f82:	f7fe ff7f 	bl	8000e84 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e162      	b.n	800225a <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001f94:	f7ff fb30 	bl	80015f8 <LL_PWR_IsEnabledBkUpAccess>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0f1      	beq.n	8001f82 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d07b      	beq.n	800209e <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	2b85      	cmp	r3, #133	@ 0x85
 8001fac:	d003      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	2b05      	cmp	r3, #5
 8001fb4:	d109      	bne.n	8001fca <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001fb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fbe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001fc2:	f043 0304 	orr.w	r3, r3, #4
 8001fc6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fca:	f7fe ff5b 	bl	8000e84 <HAL_GetTick>
 8001fce:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001fd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fd8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001fe4:	e00a      	b.n	8001ffc <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe6:	f7fe ff4d 	bl	8000e84 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e12e      	b.n	800225a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001ffc:	f7ff fba9 	bl	8001752 <LL_RCC_LSE_IsReady>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0ef      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	2b81      	cmp	r3, #129	@ 0x81
 800200c:	d003      	beq.n	8002016 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	2b85      	cmp	r3, #133	@ 0x85
 8002014:	d121      	bne.n	800205a <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002016:	f7fe ff35 	bl	8000e84 <HAL_GetTick>
 800201a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800201c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002020:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002024:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002028:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800202c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002030:	e00a      	b.n	8002048 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002032:	f7fe ff27 	bl	8000e84 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002040:	4293      	cmp	r3, r2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e108      	b.n	800225a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002048:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800204c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002050:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0ec      	beq.n	8002032 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002058:	e060      	b.n	800211c <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205a:	f7fe ff13 	bl	8000e84 <HAL_GetTick>
 800205e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002060:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002064:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002068:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800206c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002070:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002074:	e00a      	b.n	800208c <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002076:	f7fe ff05 	bl	8000e84 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002084:	4293      	cmp	r3, r2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e0e6      	b.n	800225a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800208c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002094:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1ec      	bne.n	8002076 <HAL_RCC_OscConfig+0x50e>
 800209c:	e03e      	b.n	800211c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800209e:	f7fe fef1 	bl	8000e84 <HAL_GetTick>
 80020a2:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80020a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80020b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80020b8:	e00a      	b.n	80020d0 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ba:	f7fe fee3 	bl	8000e84 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e0c4      	b.n	800225a <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80020d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1ec      	bne.n	80020ba <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e0:	f7fe fed0 	bl	8000e84 <HAL_GetTick>
 80020e4:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80020e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020f2:	f023 0301 	bic.w	r3, r3, #1
 80020f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80020fa:	e00a      	b.n	8002112 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020fc:	f7fe fec2 	bl	8000e84 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	f241 3288 	movw	r2, #5000	@ 0x1388
 800210a:	4293      	cmp	r3, r2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e0a3      	b.n	800225a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002112:	f7ff fb1e 	bl	8001752 <LL_RCC_LSE_IsReady>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1ef      	bne.n	80020fc <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 8099 	beq.w	8002258 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	2b0c      	cmp	r3, #12
 800212a:	d06c      	beq.n	8002206 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002130:	2b02      	cmp	r3, #2
 8002132:	d14b      	bne.n	80021cc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002134:	f7ff fc74 	bl	8001a20 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002138:	f7fe fea4 	bl	8000e84 <HAL_GetTick>
 800213c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002140:	f7fe fea0 	bl	8000e84 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b0a      	cmp	r3, #10
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e083      	b.n	800225a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002152:	f7ff fc73 	bl	8001a3c <LL_RCC_PLL_IsReady>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1f1      	bne.n	8002140 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800215c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002160:	68da      	ldr	r2, [r3, #12]
 8002162:	4b40      	ldr	r3, [pc, #256]	@ (8002264 <HAL_RCC_OscConfig+0x6fc>)
 8002164:	4013      	ands	r3, r2
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800216e:	4311      	orrs	r1, r2
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002174:	0212      	lsls	r2, r2, #8
 8002176:	4311      	orrs	r1, r2
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800217c:	4311      	orrs	r1, r2
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002182:	4311      	orrs	r1, r2
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002188:	430a      	orrs	r2, r1
 800218a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800218e:	4313      	orrs	r3, r2
 8002190:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002192:	f7ff fc37 	bl	8001a04 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002196:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021a4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a6:	f7fe fe6d 	bl	8000e84 <HAL_GetTick>
 80021aa:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ae:	f7fe fe69 	bl	8000e84 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b0a      	cmp	r3, #10
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e04c      	b.n	800225a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80021c0:	f7ff fc3c 	bl	8001a3c <LL_RCC_PLL_IsReady>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0f1      	beq.n	80021ae <HAL_RCC_OscConfig+0x646>
 80021ca:	e045      	b.n	8002258 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021cc:	f7ff fc28 	bl	8001a20 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d0:	f7fe fe58 	bl	8000e84 <HAL_GetTick>
 80021d4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d8:	f7fe fe54 	bl	8000e84 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b0a      	cmp	r3, #10
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e037      	b.n	800225a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80021ea:	f7ff fc27 	bl	8001a3c <LL_RCC_PLL_IsReady>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1f1      	bne.n	80021d8 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80021f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021f8:	68da      	ldr	r2, [r3, #12]
 80021fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80021fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002268 <HAL_RCC_OscConfig+0x700>)
 8002200:	4013      	ands	r3, r2
 8002202:	60cb      	str	r3, [r1, #12]
 8002204:	e028      	b.n	8002258 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800220a:	2b01      	cmp	r3, #1
 800220c:	d101      	bne.n	8002212 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e023      	b.n	800225a <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002212:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	f003 0203 	and.w	r2, r3, #3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002224:	429a      	cmp	r2, r3
 8002226:	d115      	bne.n	8002254 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002232:	429a      	cmp	r2, r3
 8002234:	d10e      	bne.n	8002254 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002240:	021b      	lsls	r3, r3, #8
 8002242:	429a      	cmp	r2, r3
 8002244:	d106      	bne.n	8002254 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002250:	429a      	cmp	r2, r3
 8002252:	d001      	beq.n	8002258 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e000      	b.n	800225a <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3720      	adds	r7, #32
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	11c1808c 	.word	0x11c1808c
 8002268:	eefefffc 	.word	0xeefefffc

0800226c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e12c      	b.n	80024da <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002280:	4b98      	ldr	r3, [pc, #608]	@ (80024e4 <HAL_RCC_ClockConfig+0x278>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d91b      	bls.n	80022c6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800228e:	4b95      	ldr	r3, [pc, #596]	@ (80024e4 <HAL_RCC_ClockConfig+0x278>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f023 0207 	bic.w	r2, r3, #7
 8002296:	4993      	ldr	r1, [pc, #588]	@ (80024e4 <HAL_RCC_ClockConfig+0x278>)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	4313      	orrs	r3, r2
 800229c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800229e:	f7fe fdf1 	bl	8000e84 <HAL_GetTick>
 80022a2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80022a6:	f7fe fded 	bl	8000e84 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e110      	b.n	80024da <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b8:	4b8a      	ldr	r3, [pc, #552]	@ (80024e4 <HAL_RCC_ClockConfig+0x278>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0307 	and.w	r3, r3, #7
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d1ef      	bne.n	80022a6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d016      	beq.n	8002300 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff fb02 	bl	80018e0 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80022dc:	f7fe fdd2 	bl	8000e84 <HAL_GetTick>
 80022e0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80022e4:	f7fe fdce 	bl	8000e84 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e0f1      	b.n	80024da <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80022f6:	f7ff fbdf 	bl	8001ab8 <LL_RCC_IsActiveFlag_HPRE>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d0f1      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0320 	and.w	r3, r3, #32
 8002308:	2b00      	cmp	r3, #0
 800230a:	d016      	beq.n	800233a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff faf8 	bl	8001906 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002316:	f7fe fdb5 	bl	8000e84 <HAL_GetTick>
 800231a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800231c:	e008      	b.n	8002330 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800231e:	f7fe fdb1 	bl	8000e84 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e0d4      	b.n	80024da <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002330:	f7ff fbd3 	bl	8001ada <LL_RCC_IsActiveFlag_C2HPRE>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0f1      	beq.n	800231e <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002342:	2b00      	cmp	r3, #0
 8002344:	d016      	beq.n	8002374 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff faf0 	bl	8001930 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002350:	f7fe fd98 	bl	8000e84 <HAL_GetTick>
 8002354:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002356:	e008      	b.n	800236a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002358:	f7fe fd94 	bl	8000e84 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e0b7      	b.n	80024da <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800236a:	f7ff fbc8 	bl	8001afe <LL_RCC_IsActiveFlag_SHDHPRE>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0f1      	beq.n	8002358 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b00      	cmp	r3, #0
 800237e:	d016      	beq.n	80023ae <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff fae9 	bl	800195c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800238a:	f7fe fd7b 	bl	8000e84 <HAL_GetTick>
 800238e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002390:	e008      	b.n	80023a4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002392:	f7fe fd77 	bl	8000e84 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e09a      	b.n	80024da <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80023a4:	f7ff fbbd 	bl	8001b22 <LL_RCC_IsActiveFlag_PPRE1>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d0f1      	beq.n	8002392 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d017      	beq.n	80023ea <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff fade 	bl	8001982 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80023c6:	f7fe fd5d 	bl	8000e84 <HAL_GetTick>
 80023ca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80023ce:	f7fe fd59 	bl	8000e84 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e07c      	b.n	80024da <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80023e0:	f7ff fbb0 	bl	8001b44 <LL_RCC_IsActiveFlag_PPRE2>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d0f1      	beq.n	80023ce <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d043      	beq.n	800247e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d106      	bne.n	800240c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80023fe:	f7ff f956 	bl	80016ae <LL_RCC_HSE_IsReady>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d11e      	bne.n	8002446 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e066      	b.n	80024da <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b03      	cmp	r3, #3
 8002412:	d106      	bne.n	8002422 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002414:	f7ff fb12 	bl	8001a3c <LL_RCC_PLL_IsReady>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d113      	bne.n	8002446 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e05b      	b.n	80024da <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d106      	bne.n	8002438 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800242a:	f7ff f9f0 	bl	800180e <LL_RCC_MSI_IsReady>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d108      	bne.n	8002446 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e050      	b.n	80024da <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002438:	f7ff f966 	bl	8001708 <LL_RCC_HSI_IsReady>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e049      	b.n	80024da <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff fa2a 	bl	80018a4 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002450:	f7fe fd18 	bl	8000e84 <HAL_GetTick>
 8002454:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002456:	e00a      	b.n	800246e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002458:	f7fe fd14 	bl	8000e84 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002466:	4293      	cmp	r3, r2
 8002468:	d901      	bls.n	800246e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e035      	b.n	80024da <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246e:	f7ff fa2c 	bl	80018ca <LL_RCC_GetSysClkSource>
 8002472:	4602      	mov	r2, r0
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	429a      	cmp	r2, r3
 800247c:	d1ec      	bne.n	8002458 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800247e:	4b19      	ldr	r3, [pc, #100]	@ (80024e4 <HAL_RCC_ClockConfig+0x278>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d21b      	bcs.n	80024c4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248c:	4b15      	ldr	r3, [pc, #84]	@ (80024e4 <HAL_RCC_ClockConfig+0x278>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f023 0207 	bic.w	r2, r3, #7
 8002494:	4913      	ldr	r1, [pc, #76]	@ (80024e4 <HAL_RCC_ClockConfig+0x278>)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	4313      	orrs	r3, r2
 800249a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800249c:	f7fe fcf2 	bl	8000e84 <HAL_GetTick>
 80024a0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80024a4:	f7fe fcee 	bl	8000e84 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e011      	b.n	80024da <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b6:	4b0b      	ldr	r3, [pc, #44]	@ (80024e4 <HAL_RCC_ClockConfig+0x278>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d1ef      	bne.n	80024a4 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80024c4:	f000 f8b4 	bl	8002630 <HAL_RCC_GetHCLKFreq>
 80024c8:	4603      	mov	r3, r0
 80024ca:	4a07      	ldr	r2, [pc, #28]	@ (80024e8 <HAL_RCC_ClockConfig+0x27c>)
 80024cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80024ce:	4b07      	ldr	r3, [pc, #28]	@ (80024ec <HAL_RCC_ClockConfig+0x280>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fe fc8a 	bl	8000dec <HAL_InitTick>
 80024d8:	4603      	mov	r3, r0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	58004000 	.word	0x58004000
 80024e8:	20000104 	.word	0x20000104
 80024ec:	20000114 	.word	0x20000114

080024f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024f0:	b590      	push	{r4, r7, lr}
 80024f2:	b087      	sub	sp, #28
 80024f4:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024fe:	f7ff f9e4 	bl	80018ca <LL_RCC_GetSysClkSource>
 8002502:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002504:	f7ff facd 	bl	8001aa2 <LL_RCC_PLL_GetMainSource>
 8002508:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <HAL_RCC_GetSysClockFreq+0x2c>
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	2b0c      	cmp	r3, #12
 8002514:	d139      	bne.n	800258a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d136      	bne.n	800258a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800251c:	f7ff f987 	bl	800182e <LL_RCC_MSI_IsEnabledRangeSelect>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d115      	bne.n	8002552 <HAL_RCC_GetSysClockFreq+0x62>
 8002526:	f7ff f982 	bl	800182e <LL_RCC_MSI_IsEnabledRangeSelect>
 800252a:	4603      	mov	r3, r0
 800252c:	2b01      	cmp	r3, #1
 800252e:	d106      	bne.n	800253e <HAL_RCC_GetSysClockFreq+0x4e>
 8002530:	f7ff f98d 	bl	800184e <LL_RCC_MSI_GetRange>
 8002534:	4603      	mov	r3, r0
 8002536:	0a1b      	lsrs	r3, r3, #8
 8002538:	f003 030f 	and.w	r3, r3, #15
 800253c:	e005      	b.n	800254a <HAL_RCC_GetSysClockFreq+0x5a>
 800253e:	f7ff f991 	bl	8001864 <LL_RCC_MSI_GetRangeAfterStandby>
 8002542:	4603      	mov	r3, r0
 8002544:	0a1b      	lsrs	r3, r3, #8
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	4a36      	ldr	r2, [pc, #216]	@ (8002624 <HAL_RCC_GetSysClockFreq+0x134>)
 800254c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002550:	e014      	b.n	800257c <HAL_RCC_GetSysClockFreq+0x8c>
 8002552:	f7ff f96c 	bl	800182e <LL_RCC_MSI_IsEnabledRangeSelect>
 8002556:	4603      	mov	r3, r0
 8002558:	2b01      	cmp	r3, #1
 800255a:	d106      	bne.n	800256a <HAL_RCC_GetSysClockFreq+0x7a>
 800255c:	f7ff f977 	bl	800184e <LL_RCC_MSI_GetRange>
 8002560:	4603      	mov	r3, r0
 8002562:	091b      	lsrs	r3, r3, #4
 8002564:	f003 030f 	and.w	r3, r3, #15
 8002568:	e005      	b.n	8002576 <HAL_RCC_GetSysClockFreq+0x86>
 800256a:	f7ff f97b 	bl	8001864 <LL_RCC_MSI_GetRangeAfterStandby>
 800256e:	4603      	mov	r3, r0
 8002570:	091b      	lsrs	r3, r3, #4
 8002572:	f003 030f 	and.w	r3, r3, #15
 8002576:	4a2b      	ldr	r2, [pc, #172]	@ (8002624 <HAL_RCC_GetSysClockFreq+0x134>)
 8002578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800257c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d115      	bne.n	80025b0 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002588:	e012      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	2b04      	cmp	r3, #4
 800258e:	d102      	bne.n	8002596 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002590:	4b25      	ldr	r3, [pc, #148]	@ (8002628 <HAL_RCC_GetSysClockFreq+0x138>)
 8002592:	617b      	str	r3, [r7, #20]
 8002594:	e00c      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	2b08      	cmp	r3, #8
 800259a:	d109      	bne.n	80025b0 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800259c:	f7ff f85a 	bl	8001654 <LL_RCC_HSE_IsEnabledDiv2>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d102      	bne.n	80025ac <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80025a6:	4b20      	ldr	r3, [pc, #128]	@ (8002628 <HAL_RCC_GetSysClockFreq+0x138>)
 80025a8:	617b      	str	r3, [r7, #20]
 80025aa:	e001      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80025ac:	4b1f      	ldr	r3, [pc, #124]	@ (800262c <HAL_RCC_GetSysClockFreq+0x13c>)
 80025ae:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025b0:	f7ff f98b 	bl	80018ca <LL_RCC_GetSysClkSource>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b0c      	cmp	r3, #12
 80025b8:	d12f      	bne.n	800261a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80025ba:	f7ff fa72 	bl	8001aa2 <LL_RCC_PLL_GetMainSource>
 80025be:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d003      	beq.n	80025ce <HAL_RCC_GetSysClockFreq+0xde>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	d003      	beq.n	80025d4 <HAL_RCC_GetSysClockFreq+0xe4>
 80025cc:	e00d      	b.n	80025ea <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80025ce:	4b16      	ldr	r3, [pc, #88]	@ (8002628 <HAL_RCC_GetSysClockFreq+0x138>)
 80025d0:	60fb      	str	r3, [r7, #12]
        break;
 80025d2:	e00d      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80025d4:	f7ff f83e 	bl	8001654 <LL_RCC_HSE_IsEnabledDiv2>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d102      	bne.n	80025e4 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80025de:	4b12      	ldr	r3, [pc, #72]	@ (8002628 <HAL_RCC_GetSysClockFreq+0x138>)
 80025e0:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80025e2:	e005      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80025e4:	4b11      	ldr	r3, [pc, #68]	@ (800262c <HAL_RCC_GetSysClockFreq+0x13c>)
 80025e6:	60fb      	str	r3, [r7, #12]
        break;
 80025e8:	e002      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	60fb      	str	r3, [r7, #12]
        break;
 80025ee:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80025f0:	f7ff fa35 	bl	8001a5e <LL_RCC_PLL_GetN>
 80025f4:	4602      	mov	r2, r0
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	fb03 f402 	mul.w	r4, r3, r2
 80025fc:	f7ff fa46 	bl	8001a8c <LL_RCC_PLL_GetDivider>
 8002600:	4603      	mov	r3, r0
 8002602:	091b      	lsrs	r3, r3, #4
 8002604:	3301      	adds	r3, #1
 8002606:	fbb4 f4f3 	udiv	r4, r4, r3
 800260a:	f7ff fa34 	bl	8001a76 <LL_RCC_PLL_GetR>
 800260e:	4603      	mov	r3, r0
 8002610:	0f5b      	lsrs	r3, r3, #29
 8002612:	3301      	adds	r3, #1
 8002614:	fbb4 f3f3 	udiv	r3, r4, r3
 8002618:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800261a:	697b      	ldr	r3, [r7, #20]
}
 800261c:	4618      	mov	r0, r3
 800261e:	371c      	adds	r7, #28
 8002620:	46bd      	mov	sp, r7
 8002622:	bd90      	pop	{r4, r7, pc}
 8002624:	08005edc 	.word	0x08005edc
 8002628:	00f42400 	.word	0x00f42400
 800262c:	01e84800 	.word	0x01e84800

08002630 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002630:	b598      	push	{r3, r4, r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002634:	f7ff ff5c 	bl	80024f0 <HAL_RCC_GetSysClockFreq>
 8002638:	4604      	mov	r4, r0
 800263a:	f7ff f9b5 	bl	80019a8 <LL_RCC_GetAHBPrescaler>
 800263e:	4603      	mov	r3, r0
 8002640:	091b      	lsrs	r3, r3, #4
 8002642:	f003 030f 	and.w	r3, r3, #15
 8002646:	4a03      	ldr	r2, [pc, #12]	@ (8002654 <HAL_RCC_GetHCLKFreq+0x24>)
 8002648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800264c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002650:	4618      	mov	r0, r3
 8002652:	bd98      	pop	{r3, r4, r7, pc}
 8002654:	08005e7c 	.word	0x08005e7c

08002658 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002658:	b598      	push	{r3, r4, r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800265c:	f7ff ffe8 	bl	8002630 <HAL_RCC_GetHCLKFreq>
 8002660:	4604      	mov	r4, r0
 8002662:	f7ff f9b9 	bl	80019d8 <LL_RCC_GetAPB1Prescaler>
 8002666:	4603      	mov	r3, r0
 8002668:	0a1b      	lsrs	r3, r3, #8
 800266a:	4a03      	ldr	r2, [pc, #12]	@ (8002678 <HAL_RCC_GetPCLK1Freq+0x20>)
 800266c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002670:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002674:	4618      	mov	r0, r3
 8002676:	bd98      	pop	{r3, r4, r7, pc}
 8002678:	08005ebc 	.word	0x08005ebc

0800267c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800267c:	b598      	push	{r3, r4, r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002680:	f7ff ffd6 	bl	8002630 <HAL_RCC_GetHCLKFreq>
 8002684:	4604      	mov	r4, r0
 8002686:	f7ff f9b2 	bl	80019ee <LL_RCC_GetAPB2Prescaler>
 800268a:	4603      	mov	r3, r0
 800268c:	0adb      	lsrs	r3, r3, #11
 800268e:	4a03      	ldr	r2, [pc, #12]	@ (800269c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002694:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002698:	4618      	mov	r0, r3
 800269a:	bd98      	pop	{r3, r4, r7, pc}
 800269c:	08005ebc 	.word	0x08005ebc

080026a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80026a0:	b590      	push	{r4, r7, lr}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	091b      	lsrs	r3, r3, #4
 80026ac:	f003 030f 	and.w	r3, r3, #15
 80026b0:	4a10      	ldr	r2, [pc, #64]	@ (80026f4 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80026b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b6:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80026b8:	f7ff f981 	bl	80019be <LL_RCC_GetAHB3Prescaler>
 80026bc:	4603      	mov	r3, r0
 80026be:	091b      	lsrs	r3, r3, #4
 80026c0:	f003 030f 	and.w	r3, r3, #15
 80026c4:	4a0c      	ldr	r2, [pc, #48]	@ (80026f8 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80026c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d0:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	4a09      	ldr	r2, [pc, #36]	@ (80026fc <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80026d6:	fba2 2303 	umull	r2, r3, r2, r3
 80026da:	0c9c      	lsrs	r4, r3, #18
 80026dc:	f7fe ff80 	bl	80015e0 <HAL_PWREx_GetVoltageRange>
 80026e0:	4603      	mov	r3, r0
 80026e2:	4619      	mov	r1, r3
 80026e4:	4620      	mov	r0, r4
 80026e6:	f000 f80b 	bl	8002700 <RCC_SetFlashLatency>
 80026ea:	4603      	mov	r3, r0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd90      	pop	{r4, r7, pc}
 80026f4:	08005edc 	.word	0x08005edc
 80026f8:	08005e7c 	.word	0x08005e7c
 80026fc:	431bde83 	.word	0x431bde83

08002700 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b08e      	sub	sp, #56	@ 0x38
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800270a:	4a3a      	ldr	r2, [pc, #232]	@ (80027f4 <RCC_SetFlashLatency+0xf4>)
 800270c:	f107 0320 	add.w	r3, r7, #32
 8002710:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002714:	6018      	str	r0, [r3, #0]
 8002716:	3304      	adds	r3, #4
 8002718:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800271a:	4a37      	ldr	r2, [pc, #220]	@ (80027f8 <RCC_SetFlashLatency+0xf8>)
 800271c:	f107 0318 	add.w	r3, r7, #24
 8002720:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002724:	6018      	str	r0, [r3, #0]
 8002726:	3304      	adds	r3, #4
 8002728:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800272a:	4a34      	ldr	r2, [pc, #208]	@ (80027fc <RCC_SetFlashLatency+0xfc>)
 800272c:	f107 030c 	add.w	r3, r7, #12
 8002730:	ca07      	ldmia	r2, {r0, r1, r2}
 8002732:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002736:	2300      	movs	r3, #0
 8002738:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002740:	d11b      	bne.n	800277a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002742:	2300      	movs	r3, #0
 8002744:	633b      	str	r3, [r7, #48]	@ 0x30
 8002746:	e014      	b.n	8002772 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	3338      	adds	r3, #56	@ 0x38
 800274e:	443b      	add	r3, r7
 8002750:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002754:	461a      	mov	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4293      	cmp	r3, r2
 800275a:	d807      	bhi.n	800276c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800275c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	3338      	adds	r3, #56	@ 0x38
 8002762:	443b      	add	r3, r7
 8002764:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002768:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800276a:	e021      	b.n	80027b0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800276c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800276e:	3301      	adds	r3, #1
 8002770:	633b      	str	r3, [r7, #48]	@ 0x30
 8002772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002774:	2b02      	cmp	r3, #2
 8002776:	d9e7      	bls.n	8002748 <RCC_SetFlashLatency+0x48>
 8002778:	e01a      	b.n	80027b0 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800277a:	2300      	movs	r3, #0
 800277c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800277e:	e014      	b.n	80027aa <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	3338      	adds	r3, #56	@ 0x38
 8002786:	443b      	add	r3, r7
 8002788:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800278c:	461a      	mov	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4293      	cmp	r3, r2
 8002792:	d807      	bhi.n	80027a4 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	3338      	adds	r3, #56	@ 0x38
 800279a:	443b      	add	r3, r7
 800279c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80027a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80027a2:	e005      	b.n	80027b0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80027a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027a6:	3301      	adds	r3, #1
 80027a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d9e7      	bls.n	8002780 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80027b0:	4b13      	ldr	r3, [pc, #76]	@ (8002800 <RCC_SetFlashLatency+0x100>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f023 0207 	bic.w	r2, r3, #7
 80027b8:	4911      	ldr	r1, [pc, #68]	@ (8002800 <RCC_SetFlashLatency+0x100>)
 80027ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027bc:	4313      	orrs	r3, r2
 80027be:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80027c0:	f7fe fb60 	bl	8000e84 <HAL_GetTick>
 80027c4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80027c6:	e008      	b.n	80027da <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80027c8:	f7fe fb5c 	bl	8000e84 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e007      	b.n	80027ea <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80027da:	4b09      	ldr	r3, [pc, #36]	@ (8002800 <RCC_SetFlashLatency+0x100>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d1ef      	bne.n	80027c8 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3738      	adds	r7, #56	@ 0x38
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	08005e60 	.word	0x08005e60
 80027f8:	08005e68 	.word	0x08005e68
 80027fc:	08005e70 	.word	0x08005e70
 8002800:	58004000 	.word	0x58004000

08002804 <LL_RCC_LSE_IsReady>:
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002808:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800280c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b02      	cmp	r3, #2
 8002816:	d101      	bne.n	800281c <LL_RCC_LSE_IsReady+0x18>
 8002818:	2301      	movs	r3, #1
 800281a:	e000      	b.n	800281e <LL_RCC_LSE_IsReady+0x1a>
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr

08002826 <LL_RCC_SetUSARTClockSource>:
{
 8002826:	b480      	push	{r7}
 8002828:	b083      	sub	sp, #12
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800282e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002832:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	0c1b      	lsrs	r3, r3, #16
 800283a:	43db      	mvns	r3, r3
 800283c:	401a      	ands	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	b29b      	uxth	r3, r3
 8002842:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002846:	4313      	orrs	r3, r2
 8002848:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	bc80      	pop	{r7}
 8002854:	4770      	bx	lr

08002856 <LL_RCC_SetI2SClockSource>:
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800285e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002866:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800286a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4313      	orrs	r3, r2
 8002872:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002876:	bf00      	nop
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr

08002880 <LL_RCC_SetLPUARTClockSource>:
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002888:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800288c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002890:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002894:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4313      	orrs	r3, r2
 800289c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr

080028aa <LL_RCC_SetI2CClockSource>:
{
 80028aa:	b480      	push	{r7}
 80028ac:	b083      	sub	sp, #12
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80028b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	091b      	lsrs	r3, r3, #4
 80028be:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80028c2:	43db      	mvns	r3, r3
 80028c4:	401a      	ands	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	011b      	lsls	r3, r3, #4
 80028ca:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80028ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028d2:	4313      	orrs	r3, r2
 80028d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr

080028e2 <LL_RCC_SetLPTIMClockSource>:
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80028ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	0c1b      	lsrs	r3, r3, #16
 80028f6:	041b      	lsls	r3, r3, #16
 80028f8:	43db      	mvns	r3, r3
 80028fa:	401a      	ands	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	041b      	lsls	r3, r3, #16
 8002900:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002904:	4313      	orrs	r3, r2
 8002906:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr

08002914 <LL_RCC_SetRNGClockSource>:
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800291c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002920:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002924:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002928:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4313      	orrs	r3, r2
 8002930:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	bc80      	pop	{r7}
 800293c:	4770      	bx	lr

0800293e <LL_RCC_SetADCClockSource>:
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002946:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800294a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800294e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002952:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4313      	orrs	r3, r2
 800295a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr

08002968 <LL_RCC_SetRTCClockSource>:
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002970:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002974:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002978:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800297c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4313      	orrs	r3, r2
 8002984:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	bc80      	pop	{r7}
 8002990:	4770      	bx	lr

08002992 <LL_RCC_GetRTCClockSource>:
{
 8002992:	b480      	push	{r7}
 8002994:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002996:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800299a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800299e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bc80      	pop	{r7}
 80029a8:	4770      	bx	lr

080029aa <LL_RCC_ForceBackupDomainReset>:
{
 80029aa:	b480      	push	{r7}
 80029ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80029ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80029c2:	bf00      	nop
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr

080029ca <LL_RCC_ReleaseBackupDomainReset>:
{
 80029ca:	b480      	push	{r7}
 80029cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80029ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80029e2:	bf00      	nop
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bc80      	pop	{r7}
 80029e8:	4770      	bx	lr
	...

080029ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80029f4:	2300      	movs	r3, #0
 80029f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80029f8:	2300      	movs	r3, #0
 80029fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80029fc:	2300      	movs	r3, #0
 80029fe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d058      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002a0c:	f7fe fdda 	bl	80015c4 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a10:	f7fe fa38 	bl	8000e84 <HAL_GetTick>
 8002a14:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002a16:	e009      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a18:	f7fe fa34 	bl	8000e84 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d902      	bls.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	74fb      	strb	r3, [r7, #19]
        break;
 8002a2a:	e006      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002a2c:	4b7b      	ldr	r3, [pc, #492]	@ (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a38:	d1ee      	bne.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002a3a:	7cfb      	ldrb	r3, [r7, #19]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d13c      	bne.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002a40:	f7ff ffa7 	bl	8002992 <LL_RCC_GetRTCClockSource>
 8002a44:	4602      	mov	r2, r0
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d00f      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a5a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a5c:	f7ff ffa5 	bl	80029aa <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a60:	f7ff ffb3 	bl	80029ca <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a64:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d014      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a78:	f7fe fa04 	bl	8000e84 <HAL_GetTick>
 8002a7c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002a7e:	e00b      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a80:	f7fe fa00 	bl	8000e84 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d902      	bls.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	74fb      	strb	r3, [r7, #19]
            break;
 8002a96:	e004      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002a98:	f7ff feb4 	bl	8002804 <LL_RCC_LSE_IsReady>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d1ee      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002aa2:	7cfb      	ldrb	r3, [r7, #19]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d105      	bne.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff ff5b 	bl	8002968 <LL_RCC_SetRTCClockSource>
 8002ab2:	e004      	b.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ab4:	7cfb      	ldrb	r3, [r7, #19]
 8002ab6:	74bb      	strb	r3, [r7, #18]
 8002ab8:	e001      	b.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aba:	7cfb      	ldrb	r3, [r7, #19]
 8002abc:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d004      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff fea9 	bl	8002826 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d004      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff fe9e 	bl	8002826 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0320 	and.w	r3, r3, #32
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d004      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff fec0 	bl	8002880 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d004      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff fee6 	bl	80028e2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d004      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff fedb 	bl	80028e2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d004      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff fed0 	bl	80028e2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d004      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff fea9 	bl	80028aa <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d004      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff fe9e 	bl	80028aa <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d004      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff fe93 	bl	80028aa <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0310 	and.w	r3, r3, #16
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d011      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff fe5e 	bl	8002856 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ba2:	d107      	bne.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002ba4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bb2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d010      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff fea5 	bl	8002914 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d107      	bne.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002bd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bdc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002be0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d011      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff fea3 	bl	800293e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c00:	d107      	bne.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002c02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c10:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002c12:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3718      	adds	r7, #24
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	58000400 	.word	0x58000400

08002c20 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8002c28:	4b06      	ldr	r3, [pc, #24]	@ (8002c44 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002c30:	4904      	ldr	r1, [pc, #16]	@ (8002c44 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	608b      	str	r3, [r1, #8]
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bc80      	pop	{r7}
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	58000400 	.word	0x58000400

08002c48 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8002c4c:	4b05      	ldr	r3, [pc, #20]	@ (8002c64 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8002c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c52:	4a04      	ldr	r2, [pc, #16]	@ (8002c64 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8002c54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002c5c:	bf00      	nop
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bc80      	pop	{r7}
 8002c62:	4770      	bx	lr
 8002c64:	58000400 	.word	0x58000400

08002c68 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8002c6c:	4b05      	ldr	r3, [pc, #20]	@ (8002c84 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8002c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c72:	4a04      	ldr	r2, [pc, #16]	@ (8002c84 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8002c74:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002c78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002c7c:	bf00      	nop
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr
 8002c84:	58000400 	.word	0x58000400

08002c88 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8002c8c:	4b03      	ldr	r3, [pc, #12]	@ (8002c9c <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8002c8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002c92:	619a      	str	r2, [r3, #24]
}
 8002c94:	bf00      	nop
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bc80      	pop	{r7}
 8002c9a:	4770      	bx	lr
 8002c9c:	58000400 	.word	0x58000400

08002ca0 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8002ca4:	4b06      	ldr	r3, [pc, #24]	@ (8002cc0 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d101      	bne.n	8002cb4 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e000      	b.n	8002cb6 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc80      	pop	{r7}
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	58000400 	.word	0x58000400

08002cc4 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8002cc8:	4b06      	ldr	r3, [pc, #24]	@ (8002ce4 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	f003 0304 	and.w	r3, r3, #4
 8002cd0:	2b04      	cmp	r3, #4
 8002cd2:	d101      	bne.n	8002cd8 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e000      	b.n	8002cda <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bc80      	pop	{r7}
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	58000400 	.word	0x58000400

08002ce8 <LL_RCC_RF_DisableReset>:
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8002cec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cf4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002cf8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002cfc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002d00:	bf00      	nop
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bc80      	pop	{r7}
 8002d06:	4770      	bx	lr

08002d08 <LL_RCC_IsRFUnderReset>:
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8002d0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d1c:	d101      	bne.n	8002d22 <LL_RCC_IsRFUnderReset+0x1a>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <LL_RCC_IsRFUnderReset+0x1c>
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bc80      	pop	{r7}
 8002d2a:	4770      	bx	lr

08002d2c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002d34:	4b06      	ldr	r3, [pc, #24]	@ (8002d50 <LL_EXTI_EnableIT_32_63+0x24>)
 8002d36:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002d3a:	4905      	ldr	r1, [pc, #20]	@ (8002d50 <LL_EXTI_EnableIT_32_63+0x24>)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bc80      	pop	{r7}
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	58000800 	.word	0x58000800

08002d54 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d103      	bne.n	8002d6a <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	73fb      	strb	r3, [r7, #15]
    return status;
 8002d66:	7bfb      	ldrb	r3, [r7, #15]
 8002d68:	e052      	b.n	8002e10 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	799b      	ldrb	r3, [r3, #6]
 8002d72:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8002d74:	7bbb      	ldrb	r3, [r7, #14]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d002      	beq.n	8002d80 <HAL_SUBGHZ_Init+0x2c>
 8002d7a:	7bbb      	ldrb	r3, [r7, #14]
 8002d7c:	2b03      	cmp	r3, #3
 8002d7e:	d109      	bne.n	8002d94 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7fd fdda 	bl	8000940 <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8002d8c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002d90:	f7ff ffcc 	bl	8002d2c <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8002d94:	7bbb      	ldrb	r3, [r7, #14]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d126      	bne.n	8002de8 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2202      	movs	r2, #2
 8002d9e:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8002da0:	f7ff ffa2 	bl	8002ce8 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8002da4:	4b1c      	ldr	r3, [pc, #112]	@ (8002e18 <HAL_SUBGHZ_Init+0xc4>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	4613      	mov	r3, r2
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	1a9b      	subs	r3, r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	0cdb      	lsrs	r3, r3, #19
 8002db2:	2264      	movs	r2, #100	@ 0x64
 8002db4:	fb02 f303 	mul.w	r3, r2, r3
 8002db8:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d105      	bne.n	8002dcc <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	609a      	str	r2, [r3, #8]
        break;
 8002dca:	e007      	b.n	8002ddc <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8002dd2:	f7ff ff99 	bl	8002d08 <LL_RCC_IsRFUnderReset>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1ee      	bne.n	8002dba <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002ddc:	f7ff ff34 	bl	8002c48 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8002de0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002de4:	f7ff ff1c 	bl	8002c20 <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8002de8:	f7ff ff4e 	bl	8002c88 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8002dec:	7bfb      	ldrb	r3, [r7, #15]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10a      	bne.n	8002e08 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 f952 	bl	80030a0 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	719a      	strb	r2, [r3, #6]

  return status;
 8002e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	20000104 	.word	0x20000104

08002e1c <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	607a      	str	r2, [r7, #4]
 8002e26:	461a      	mov	r2, r3
 8002e28:	460b      	mov	r3, r1
 8002e2a:	72fb      	strb	r3, [r7, #11]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	799b      	ldrb	r3, [r3, #6]
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d14a      	bne.n	8002ed0 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	795b      	ldrb	r3, [r3, #5]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d101      	bne.n	8002e46 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8002e42:	2302      	movs	r3, #2
 8002e44:	e045      	b.n	8002ed2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f000 f9f5 	bl	800323c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8002e52:	7afb      	ldrb	r3, [r7, #11]
 8002e54:	2b84      	cmp	r3, #132	@ 0x84
 8002e56:	d002      	beq.n	8002e5e <HAL_SUBGHZ_ExecSetCmd+0x42>
 8002e58:	7afb      	ldrb	r3, [r7, #11]
 8002e5a:	2b94      	cmp	r3, #148	@ 0x94
 8002e5c:	d103      	bne.n	8002e66 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2201      	movs	r2, #1
 8002e62:	711a      	strb	r2, [r3, #4]
 8002e64:	e002      	b.n	8002e6c <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002e6c:	f7ff fefc 	bl	8002c68 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8002e70:	7afb      	ldrb	r3, [r7, #11]
 8002e72:	4619      	mov	r1, r3
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 f933 	bl	80030e0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	82bb      	strh	r3, [r7, #20]
 8002e7e:	e00a      	b.n	8002e96 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8002e80:	8abb      	ldrh	r3, [r7, #20]
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	4413      	add	r3, r2
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	4619      	mov	r1, r3
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f000 f928 	bl	80030e0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8002e90:	8abb      	ldrh	r3, [r7, #20]
 8002e92:	3301      	adds	r3, #1
 8002e94:	82bb      	strh	r3, [r7, #20]
 8002e96:	8aba      	ldrh	r2, [r7, #20]
 8002e98:	893b      	ldrh	r3, [r7, #8]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d3f0      	bcc.n	8002e80 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002e9e:	f7ff fed3 	bl	8002c48 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8002ea2:	7afb      	ldrb	r3, [r7, #11]
 8002ea4:	2b84      	cmp	r3, #132	@ 0x84
 8002ea6:	d002      	beq.n	8002eae <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f000 f9eb 	bl	8003284 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d002      	beq.n	8002ebc <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	75fb      	strb	r3, [r7, #23]
 8002eba:	e001      	b.n	8002ec0 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	715a      	strb	r2, [r3, #5]

    return status;
 8002ecc:	7dfb      	ldrb	r3, [r7, #23]
 8002ece:	e000      	b.n	8002ed2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8002ed0:	2302      	movs	r3, #2
  }
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b088      	sub	sp, #32
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	60f8      	str	r0, [r7, #12]
 8002ee2:	607a      	str	r2, [r7, #4]
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	72fb      	strb	r3, [r7, #11]
 8002eea:	4613      	mov	r3, r2
 8002eec:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	799b      	ldrb	r3, [r3, #6]
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d13d      	bne.n	8002f78 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	795b      	ldrb	r3, [r3, #5]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8002f04:	2302      	movs	r3, #2
 8002f06:	e038      	b.n	8002f7a <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f000 f994 	bl	800323c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002f14:	f7ff fea8 	bl	8002c68 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8002f18:	7afb      	ldrb	r3, [r7, #11]
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f000 f8df 	bl	80030e0 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8002f22:	2100      	movs	r1, #0
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f000 f8db 	bl	80030e0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	82fb      	strh	r3, [r7, #22]
 8002f2e:	e009      	b.n	8002f44 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8002f30:	69b9      	ldr	r1, [r7, #24]
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 f92a 	bl	800318c <SUBGHZSPI_Receive>
      pData++;
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8002f3e:	8afb      	ldrh	r3, [r7, #22]
 8002f40:	3301      	adds	r3, #1
 8002f42:	82fb      	strh	r3, [r7, #22]
 8002f44:	8afa      	ldrh	r2, [r7, #22]
 8002f46:	893b      	ldrh	r3, [r7, #8]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d3f1      	bcc.n	8002f30 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002f4c:	f7ff fe7c 	bl	8002c48 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f000 f997 	bl	8003284 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d002      	beq.n	8002f64 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	77fb      	strb	r3, [r7, #31]
 8002f62:	e001      	b.n	8002f68 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8002f64:	2300      	movs	r3, #0
 8002f66:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	715a      	strb	r2, [r3, #5]

    return status;
 8002f74:	7ffb      	ldrb	r3, [r7, #31]
 8002f76:	e000      	b.n	8002f7a <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002f78:	2302      	movs	r3, #2
  }
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3720      	adds	r7, #32
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b084      	sub	sp, #16
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8002f8e:	f107 020c 	add.w	r2, r7, #12
 8002f92:	2302      	movs	r3, #2
 8002f94:	2112      	movs	r1, #18
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7ff ff9f 	bl	8002eda <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8002f9c:	7b3b      	ldrb	r3, [r7, #12]
 8002f9e:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8002fa0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fa4:	021b      	lsls	r3, r3, #8
 8002fa6:	b21a      	sxth	r2, r3
 8002fa8:	7b7b      	ldrb	r3, [r7, #13]
 8002faa:	b21b      	sxth	r3, r3
 8002fac:	4313      	orrs	r3, r2
 8002fae:	b21b      	sxth	r3, r3
 8002fb0:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8002fb2:	f107 020c 	add.w	r2, r7, #12
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	2102      	movs	r1, #2
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7ff ff2e 	bl	8002e1c <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8002fc0:	89fb      	ldrh	r3, [r7, #14]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d002      	beq.n	8002fd0 <HAL_SUBGHZ_IRQHandler+0x4e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7fd fe4e 	bl	8000c6c <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8002fd0:	89fb      	ldrh	r3, [r7, #14]
 8002fd2:	085b      	lsrs	r3, r3, #1
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d008      	beq.n	8002fee <HAL_SUBGHZ_IRQHandler+0x6c>
      (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) == RESET))
 8002fdc:	89fb      	ldrh	r3, [r7, #14]
 8002fde:	099b      	lsrs	r3, r3, #6
 8002fe0:	f003 0301 	and.w	r3, r3, #1
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d102      	bne.n	8002fee <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f7fd fe4d 	bl	8000c88 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8002fee:	89fb      	ldrh	r3, [r7, #14]
 8002ff0:	089b      	lsrs	r3, r3, #2
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d002      	beq.n	8003000 <HAL_SUBGHZ_IRQHandler+0x7e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7fd fe9c 	bl	8000d38 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8003000:	89fb      	ldrh	r3, [r7, #14]
 8003002:	08db      	lsrs	r3, r3, #3
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b00      	cmp	r3, #0
 800300a:	d002      	beq.n	8003012 <HAL_SUBGHZ_IRQHandler+0x90>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f7fd fea1 	bl	8000d54 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8003012:	89fb      	ldrh	r3, [r7, #14]
 8003014:	091b      	lsrs	r3, r3, #4
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d002      	beq.n	8003024 <HAL_SUBGHZ_IRQHandler+0xa2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7fd fea6 	bl	8000d70 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8003024:	89fb      	ldrh	r3, [r7, #14]
 8003026:	095b      	lsrs	r3, r3, #5
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b00      	cmp	r3, #0
 800302e:	d002      	beq.n	8003036 <HAL_SUBGHZ_IRQHandler+0xb4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7fd fe73 	bl	8000d1c <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8003036:	89fb      	ldrh	r3, [r7, #14]
 8003038:	099b      	lsrs	r3, r3, #6
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d002      	beq.n	8003048 <HAL_SUBGHZ_IRQHandler+0xc6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7fd fe2e 	bl	8000ca4 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8003048:	89fb      	ldrh	r3, [r7, #14]
 800304a:	09db      	lsrs	r3, r3, #7
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00e      	beq.n	8003072 <HAL_SUBGHZ_IRQHandler+0xf0>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8003054:	89fb      	ldrh	r3, [r7, #14]
 8003056:	0a1b      	lsrs	r3, r3, #8
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	2b00      	cmp	r3, #0
 800305e:	d004      	beq.n	800306a <HAL_SUBGHZ_IRQHandler+0xe8>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8003060:	2101      	movs	r1, #1
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7fd fe2c 	bl	8000cc0 <HAL_SUBGHZ_CADStatusCallback>
 8003068:	e003      	b.n	8003072 <HAL_SUBGHZ_IRQHandler+0xf0>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800306a:	2100      	movs	r1, #0
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f7fd fe27 	bl	8000cc0 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8003072:	89fb      	ldrh	r3, [r7, #14]
 8003074:	0a5b      	lsrs	r3, r3, #9
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d002      	beq.n	8003084 <HAL_SUBGHZ_IRQHandler+0x102>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7fd fe3c 	bl	8000cfc <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8003084:	89fb      	ldrh	r3, [r7, #14]
 8003086:	0b9b      	lsrs	r3, r3, #14
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	2b00      	cmp	r3, #0
 800308e:	d002      	beq.n	8003096 <HAL_SUBGHZ_IRQHandler+0x114>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f7fd fe7b 	bl	8000d8c <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8003096:	bf00      	nop
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
	...

080030a0 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80030a8:	4b0c      	ldr	r3, [pc, #48]	@ (80030dc <SUBGHZSPI_Init+0x3c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a0b      	ldr	r2, [pc, #44]	@ (80030dc <SUBGHZSPI_Init+0x3c>)
 80030ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030b2:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80030b4:	4a09      	ldr	r2, [pc, #36]	@ (80030dc <SUBGHZSPI_Init+0x3c>)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 80030bc:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80030be:	4b07      	ldr	r3, [pc, #28]	@ (80030dc <SUBGHZSPI_Init+0x3c>)
 80030c0:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 80030c4:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80030c6:	4b05      	ldr	r3, [pc, #20]	@ (80030dc <SUBGHZSPI_Init+0x3c>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a04      	ldr	r2, [pc, #16]	@ (80030dc <SUBGHZSPI_Init+0x3c>)
 80030cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030d0:	6013      	str	r3, [r2, #0]
}
 80030d2:	bf00      	nop
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr
 80030dc:	58010000 	.word	0x58010000

080030e0 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b087      	sub	sp, #28
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	460b      	mov	r3, r1
 80030ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80030ec:	2300      	movs	r3, #0
 80030ee:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80030f0:	4b23      	ldr	r3, [pc, #140]	@ (8003180 <SUBGHZSPI_Transmit+0xa0>)
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	4613      	mov	r3, r2
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	1a9b      	subs	r3, r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	0cdb      	lsrs	r3, r3, #19
 80030fe:	2264      	movs	r2, #100	@ 0x64
 8003100:	fb02 f303 	mul.w	r3, r2, r3
 8003104:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d105      	bne.n	8003118 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	609a      	str	r2, [r3, #8]
      break;
 8003116:	e008      	b.n	800312a <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	3b01      	subs	r3, #1
 800311c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800311e:	4b19      	ldr	r3, [pc, #100]	@ (8003184 <SUBGHZSPI_Transmit+0xa4>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b02      	cmp	r3, #2
 8003128:	d1ed      	bne.n	8003106 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800312a:	4b17      	ldr	r3, [pc, #92]	@ (8003188 <SUBGHZSPI_Transmit+0xa8>)
 800312c:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	78fa      	ldrb	r2, [r7, #3]
 8003132:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003134:	4b12      	ldr	r3, [pc, #72]	@ (8003180 <SUBGHZSPI_Transmit+0xa0>)
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	4613      	mov	r3, r2
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	1a9b      	subs	r3, r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	0cdb      	lsrs	r3, r3, #19
 8003142:	2264      	movs	r2, #100	@ 0x64
 8003144:	fb02 f303 	mul.w	r3, r2, r3
 8003148:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d105      	bne.n	800315c <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	609a      	str	r2, [r3, #8]
      break;
 800315a:	e008      	b.n	800316e <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	3b01      	subs	r3, #1
 8003160:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8003162:	4b08      	ldr	r3, [pc, #32]	@ (8003184 <SUBGHZSPI_Transmit+0xa4>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b01      	cmp	r3, #1
 800316c:	d1ed      	bne.n	800314a <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800316e:	4b05      	ldr	r3, [pc, #20]	@ (8003184 <SUBGHZSPI_Transmit+0xa4>)
 8003170:	68db      	ldr	r3, [r3, #12]

  return status;
 8003172:	7dfb      	ldrb	r3, [r7, #23]
}
 8003174:	4618      	mov	r0, r3
 8003176:	371c      	adds	r7, #28
 8003178:	46bd      	mov	sp, r7
 800317a:	bc80      	pop	{r7}
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	20000104 	.word	0x20000104
 8003184:	58010000 	.word	0x58010000
 8003188:	5801000c 	.word	0x5801000c

0800318c <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 800318c:	b480      	push	{r7}
 800318e:	b087      	sub	sp, #28
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003196:	2300      	movs	r3, #0
 8003198:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800319a:	4b25      	ldr	r3, [pc, #148]	@ (8003230 <SUBGHZSPI_Receive+0xa4>)
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	4613      	mov	r3, r2
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	1a9b      	subs	r3, r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	0cdb      	lsrs	r3, r3, #19
 80031a8:	2264      	movs	r2, #100	@ 0x64
 80031aa:	fb02 f303 	mul.w	r3, r2, r3
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d105      	bne.n	80031c2 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	609a      	str	r2, [r3, #8]
      break;
 80031c0:	e008      	b.n	80031d4 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	3b01      	subs	r3, #1
 80031c6:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80031c8:	4b1a      	ldr	r3, [pc, #104]	@ (8003234 <SUBGHZSPI_Receive+0xa8>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d1ed      	bne.n	80031b0 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80031d4:	4b18      	ldr	r3, [pc, #96]	@ (8003238 <SUBGHZSPI_Receive+0xac>)
 80031d6:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	22ff      	movs	r2, #255	@ 0xff
 80031dc:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80031de:	4b14      	ldr	r3, [pc, #80]	@ (8003230 <SUBGHZSPI_Receive+0xa4>)
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	4613      	mov	r3, r2
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	1a9b      	subs	r3, r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	0cdb      	lsrs	r3, r3, #19
 80031ec:	2264      	movs	r2, #100	@ 0x64
 80031ee:	fb02 f303 	mul.w	r3, r2, r3
 80031f2:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d105      	bne.n	8003206 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	609a      	str	r2, [r3, #8]
      break;
 8003204:	e008      	b.n	8003218 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	3b01      	subs	r3, #1
 800320a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800320c:	4b09      	ldr	r3, [pc, #36]	@ (8003234 <SUBGHZSPI_Receive+0xa8>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b01      	cmp	r3, #1
 8003216:	d1ed      	bne.n	80031f4 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8003218:	4b06      	ldr	r3, [pc, #24]	@ (8003234 <SUBGHZSPI_Receive+0xa8>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	b2da      	uxtb	r2, r3
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	701a      	strb	r2, [r3, #0]

  return status;
 8003222:	7dfb      	ldrb	r3, [r7, #23]
}
 8003224:	4618      	mov	r0, r3
 8003226:	371c      	adds	r7, #28
 8003228:	46bd      	mov	sp, r7
 800322a:	bc80      	pop	{r7}
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	20000104 	.word	0x20000104
 8003234:	58010000 	.word	0x58010000
 8003238:	5801000c 	.word	0x5801000c

0800323c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	791b      	ldrb	r3, [r3, #4]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d111      	bne.n	8003270 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 800324c:	4b0c      	ldr	r3, [pc, #48]	@ (8003280 <SUBGHZ_CheckDeviceReady+0x44>)
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	4613      	mov	r3, r2
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	4413      	add	r3, r2
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	0c1b      	lsrs	r3, r3, #16
 800325a:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800325c:	f7ff fd04 	bl	8002c68 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	3b01      	subs	r3, #1
 8003264:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1f9      	bne.n	8003260 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800326c:	f7ff fcec 	bl	8002c48 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 f807 	bl	8003284 <SUBGHZ_WaitOnBusy>
 8003276:	4603      	mov	r3, r0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	20000104 	.word	0x20000104

08003284 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 800328c:	2300      	movs	r3, #0
 800328e:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8003290:	4b12      	ldr	r3, [pc, #72]	@ (80032dc <SUBGHZ_WaitOnBusy+0x58>)
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	4613      	mov	r3, r2
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	4413      	add	r3, r2
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	0d1b      	lsrs	r3, r3, #20
 800329e:	2264      	movs	r2, #100	@ 0x64
 80032a0:	fb02 f303 	mul.w	r3, r2, r3
 80032a4:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80032a6:	f7ff fd0d 	bl	8002cc4 <LL_PWR_IsActiveFlag_RFBUSYMS>
 80032aa:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d105      	bne.n	80032be <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2202      	movs	r2, #2
 80032ba:	609a      	str	r2, [r3, #8]
      break;
 80032bc:	e009      	b.n	80032d2 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	3b01      	subs	r3, #1
 80032c2:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80032c4:	f7ff fcec 	bl	8002ca0 <LL_PWR_IsActiveFlag_RFBUSYS>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	4013      	ands	r3, r2
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d0e9      	beq.n	80032a6 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80032d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	20000104 	.word	0x20000104

080032e0 <LL_RCC_GetUSARTClockSource>:
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80032e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032ec:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	401a      	ands	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	041b      	lsls	r3, r3, #16
 80032f8:	4313      	orrs	r3, r2
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	bc80      	pop	{r7}
 8003302:	4770      	bx	lr

08003304 <LL_RCC_GetLPUARTClockSource>:
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800330c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003310:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4013      	ands	r3, r2
}
 8003318:	4618      	mov	r0, r3
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	bc80      	pop	{r7}
 8003320:	4770      	bx	lr

08003322 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b082      	sub	sp, #8
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d101      	bne.n	8003334 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e042      	b.n	80033ba <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800333a:	2b00      	cmp	r3, #0
 800333c:	d106      	bne.n	800334c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7fd fbc6 	bl	8000ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2224      	movs	r2, #36	@ 0x24
 8003350:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 0201 	bic.w	r2, r2, #1
 8003362:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003368:	2b00      	cmp	r3, #0
 800336a:	d002      	beq.n	8003372 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 feb1 	bl	80040d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 fc3a 	bl	8003bec <UART_SetConfig>
 8003378:	4603      	mov	r3, r0
 800337a:	2b01      	cmp	r3, #1
 800337c:	d101      	bne.n	8003382 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e01b      	b.n	80033ba <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003390:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80033a0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f042 0201 	orr.w	r2, r2, #1
 80033b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 ff2f 	bl	8004216 <UART_CheckIdleState>
 80033b8:	4603      	mov	r3, r0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b08a      	sub	sp, #40	@ 0x28
 80033c6:	af02      	add	r7, sp, #8
 80033c8:	60f8      	str	r0, [r7, #12]
 80033ca:	60b9      	str	r1, [r7, #8]
 80033cc:	603b      	str	r3, [r7, #0]
 80033ce:	4613      	mov	r3, r2
 80033d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033d8:	2b20      	cmp	r3, #32
 80033da:	d173      	bne.n	80034c4 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d002      	beq.n	80033e8 <HAL_UART_Transmit+0x26>
 80033e2:	88fb      	ldrh	r3, [r7, #6]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d101      	bne.n	80033ec <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e06c      	b.n	80034c6 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2221      	movs	r2, #33	@ 0x21
 80033f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033fc:	f7fd fd42 	bl	8000e84 <HAL_GetTick>
 8003400:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	88fa      	ldrh	r2, [r7, #6]
 8003406:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	88fa      	ldrh	r2, [r7, #6]
 800340e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800341a:	d108      	bne.n	800342e <HAL_UART_Transmit+0x6c>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d104      	bne.n	800342e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003424:	2300      	movs	r3, #0
 8003426:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	61bb      	str	r3, [r7, #24]
 800342c:	e003      	b.n	8003436 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003432:	2300      	movs	r3, #0
 8003434:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003436:	e02c      	b.n	8003492 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	2200      	movs	r2, #0
 8003440:	2180      	movs	r1, #128	@ 0x80
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f000 ff35 	bl	80042b2 <UART_WaitOnFlagUntilTimeout>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e039      	b.n	80034c6 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d10b      	bne.n	8003470 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	881b      	ldrh	r3, [r3, #0]
 800345c:	461a      	mov	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003466:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	3302      	adds	r3, #2
 800346c:	61bb      	str	r3, [r7, #24]
 800346e:	e007      	b.n	8003480 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	781a      	ldrb	r2, [r3, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	3301      	adds	r3, #1
 800347e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003486:	b29b      	uxth	r3, r3
 8003488:	3b01      	subs	r3, #1
 800348a:	b29a      	uxth	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003498:	b29b      	uxth	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1cc      	bne.n	8003438 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	2200      	movs	r2, #0
 80034a6:	2140      	movs	r1, #64	@ 0x40
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f000 ff02 	bl	80042b2 <UART_WaitOnFlagUntilTimeout>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e006      	b.n	80034c6 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2220      	movs	r2, #32
 80034bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80034c0:	2300      	movs	r3, #0
 80034c2:	e000      	b.n	80034c6 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 80034c4:	2302      	movs	r3, #2
  }
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3720      	adds	r7, #32
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
	...

080034d0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b08a      	sub	sp, #40	@ 0x28
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	4613      	mov	r3, r2
 80034dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034e4:	2b20      	cmp	r3, #32
 80034e6:	d137      	bne.n	8003558 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d002      	beq.n	80034f4 <HAL_UART_Receive_IT+0x24>
 80034ee:	88fb      	ldrh	r3, [r7, #6]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d101      	bne.n	80034f8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e030      	b.n	800355a <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a18      	ldr	r2, [pc, #96]	@ (8003564 <HAL_UART_Receive_IT+0x94>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d01f      	beq.n	8003548 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d018      	beq.n	8003548 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	e853 3f00 	ldrex	r3, [r3]
 8003522:	613b      	str	r3, [r7, #16]
   return(result);
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800352a:	627b      	str	r3, [r7, #36]	@ 0x24
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	461a      	mov	r2, r3
 8003532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003534:	623b      	str	r3, [r7, #32]
 8003536:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003538:	69f9      	ldr	r1, [r7, #28]
 800353a:	6a3a      	ldr	r2, [r7, #32]
 800353c:	e841 2300 	strex	r3, r2, [r1]
 8003540:	61bb      	str	r3, [r7, #24]
   return(result);
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1e6      	bne.n	8003516 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003548:	88fb      	ldrh	r3, [r7, #6]
 800354a:	461a      	mov	r2, r3
 800354c:	68b9      	ldr	r1, [r7, #8]
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f000 ff7e 	bl	8004450 <UART_Start_Receive_IT>
 8003554:	4603      	mov	r3, r0
 8003556:	e000      	b.n	800355a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003558:	2302      	movs	r3, #2
  }
}
 800355a:	4618      	mov	r0, r3
 800355c:	3728      	adds	r7, #40	@ 0x28
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	40008000 	.word	0x40008000

08003568 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b0ba      	sub	sp, #232	@ 0xe8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800358e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003592:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003596:	4013      	ands	r3, r2
 8003598:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800359c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d11b      	bne.n	80035dc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80035a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035a8:	f003 0320 	and.w	r3, r3, #32
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d015      	beq.n	80035dc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80035b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035b4:	f003 0320 	and.w	r3, r3, #32
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d105      	bne.n	80035c8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80035bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d009      	beq.n	80035dc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 82e3 	beq.w	8003b98 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	4798      	blx	r3
      }
      return;
 80035da:	e2dd      	b.n	8003b98 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80035dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f000 8123 	beq.w	800382c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80035e6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80035ea:	4b8d      	ldr	r3, [pc, #564]	@ (8003820 <HAL_UART_IRQHandler+0x2b8>)
 80035ec:	4013      	ands	r3, r2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d106      	bne.n	8003600 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80035f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80035f6:	4b8b      	ldr	r3, [pc, #556]	@ (8003824 <HAL_UART_IRQHandler+0x2bc>)
 80035f8:	4013      	ands	r3, r2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 8116 	beq.w	800382c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b00      	cmp	r3, #0
 800360a:	d011      	beq.n	8003630 <HAL_UART_IRQHandler+0xc8>
 800360c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003610:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00b      	beq.n	8003630 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2201      	movs	r2, #1
 800361e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003626:	f043 0201 	orr.w	r2, r3, #1
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d011      	beq.n	8003660 <HAL_UART_IRQHandler+0xf8>
 800363c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00b      	beq.n	8003660 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2202      	movs	r2, #2
 800364e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003656:	f043 0204 	orr.w	r2, r3, #4
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b00      	cmp	r3, #0
 800366a:	d011      	beq.n	8003690 <HAL_UART_IRQHandler+0x128>
 800366c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00b      	beq.n	8003690 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2204      	movs	r2, #4
 800367e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003686:	f043 0202 	orr.w	r2, r3, #2
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003694:	f003 0308 	and.w	r3, r3, #8
 8003698:	2b00      	cmp	r3, #0
 800369a:	d017      	beq.n	80036cc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800369c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036a0:	f003 0320 	and.w	r3, r3, #32
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d105      	bne.n	80036b4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80036a8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80036ac:	4b5c      	ldr	r3, [pc, #368]	@ (8003820 <HAL_UART_IRQHandler+0x2b8>)
 80036ae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00b      	beq.n	80036cc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2208      	movs	r2, #8
 80036ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036c2:	f043 0208 	orr.w	r2, r3, #8
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80036cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d012      	beq.n	80036fe <HAL_UART_IRQHandler+0x196>
 80036d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00c      	beq.n	80036fe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80036ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036f4:	f043 0220 	orr.w	r2, r3, #32
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003704:	2b00      	cmp	r3, #0
 8003706:	f000 8249 	beq.w	8003b9c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800370a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800370e:	f003 0320 	and.w	r3, r3, #32
 8003712:	2b00      	cmp	r3, #0
 8003714:	d013      	beq.n	800373e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003716:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800371a:	f003 0320 	and.w	r3, r3, #32
 800371e:	2b00      	cmp	r3, #0
 8003720:	d105      	bne.n	800372e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003722:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d007      	beq.n	800373e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003744:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003752:	2b40      	cmp	r3, #64	@ 0x40
 8003754:	d005      	beq.n	8003762 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003756:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800375a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800375e:	2b00      	cmp	r3, #0
 8003760:	d054      	beq.n	800380c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 ff94 	bl	8004690 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003772:	2b40      	cmp	r3, #64	@ 0x40
 8003774:	d146      	bne.n	8003804 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	3308      	adds	r3, #8
 800377c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003780:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003784:	e853 3f00 	ldrex	r3, [r3]
 8003788:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800378c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003790:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003794:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	3308      	adds	r3, #8
 800379e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80037a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80037a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80037ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80037b2:	e841 2300 	strex	r3, r2, [r1]
 80037b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80037ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1d9      	bne.n	8003776 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d017      	beq.n	80037fc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037d2:	4a15      	ldr	r2, [pc, #84]	@ (8003828 <HAL_UART_IRQHandler+0x2c0>)
 80037d4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037dc:	4618      	mov	r0, r3
 80037de:	f7fd fd1a 	bl	8001216 <HAL_DMA_Abort_IT>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d019      	beq.n	800381c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80037f6:	4610      	mov	r0, r2
 80037f8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037fa:	e00f      	b.n	800381c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 f9e0 	bl	8003bc2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003802:	e00b      	b.n	800381c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 f9dc 	bl	8003bc2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800380a:	e007      	b.n	800381c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f9d8 	bl	8003bc2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800381a:	e1bf      	b.n	8003b9c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800381c:	bf00      	nop
    return;
 800381e:	e1bd      	b.n	8003b9c <HAL_UART_IRQHandler+0x634>
 8003820:	10000001 	.word	0x10000001
 8003824:	04000120 	.word	0x04000120
 8003828:	0800475b 	.word	0x0800475b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003830:	2b01      	cmp	r3, #1
 8003832:	f040 8153 	bne.w	8003adc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800383a:	f003 0310 	and.w	r3, r3, #16
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 814c 	beq.w	8003adc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003848:	f003 0310 	and.w	r3, r3, #16
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 8145 	beq.w	8003adc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2210      	movs	r2, #16
 8003858:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003864:	2b40      	cmp	r3, #64	@ 0x40
 8003866:	f040 80bb 	bne.w	80039e0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003878:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800387c:	2b00      	cmp	r3, #0
 800387e:	f000 818f 	beq.w	8003ba0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003888:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800388c:	429a      	cmp	r2, r3
 800388e:	f080 8187 	bcs.w	8003ba0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003898:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0320 	and.w	r3, r3, #32
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f040 8087 	bne.w	80039be <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038bc:	e853 3f00 	ldrex	r3, [r3]
 80038c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80038c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	461a      	mov	r2, r3
 80038d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80038da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80038de:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80038e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80038ea:	e841 2300 	strex	r3, r2, [r1]
 80038ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80038f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1da      	bne.n	80038b0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	3308      	adds	r3, #8
 8003900:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003902:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003904:	e853 3f00 	ldrex	r3, [r3]
 8003908:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800390a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800390c:	f023 0301 	bic.w	r3, r3, #1
 8003910:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	3308      	adds	r3, #8
 800391a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800391e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003922:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003924:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003926:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800392a:	e841 2300 	strex	r3, r2, [r1]
 800392e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003930:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1e1      	bne.n	80038fa <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	3308      	adds	r3, #8
 800393c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003940:	e853 3f00 	ldrex	r3, [r3]
 8003944:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003946:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003948:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800394c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	3308      	adds	r3, #8
 8003956:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800395a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800395c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003960:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003962:	e841 2300 	strex	r3, r2, [r1]
 8003966:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003968:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1e3      	bne.n	8003936 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2220      	movs	r2, #32
 8003972:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003982:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003984:	e853 3f00 	ldrex	r3, [r3]
 8003988:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800398a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800398c:	f023 0310 	bic.w	r3, r3, #16
 8003990:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	461a      	mov	r2, r3
 800399a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800399e:	65bb      	str	r3, [r7, #88]	@ 0x58
 80039a0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80039a6:	e841 2300 	strex	r3, r2, [r1]
 80039aa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80039ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1e4      	bne.n	800397c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7fd fbce 	bl	800115a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2202      	movs	r2, #2
 80039c2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	4619      	mov	r1, r3
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 f8fb 	bl	8003bd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80039de:	e0df      	b.n	8003ba0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 80d1 	beq.w	8003ba4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8003a02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 80cc 	beq.w	8003ba4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a14:	e853 3f00 	ldrex	r3, [r3]
 8003a18:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	461a      	mov	r2, r3
 8003a2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003a2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a30:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a32:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a36:	e841 2300 	strex	r3, r2, [r1]
 8003a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1e4      	bne.n	8003a0c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	3308      	adds	r3, #8
 8003a48:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4c:	e853 3f00 	ldrex	r3, [r3]
 8003a50:	623b      	str	r3, [r7, #32]
   return(result);
 8003a52:	6a3b      	ldr	r3, [r7, #32]
 8003a54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a58:	f023 0301 	bic.w	r3, r3, #1
 8003a5c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	3308      	adds	r3, #8
 8003a66:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003a6a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a72:	e841 2300 	strex	r3, r2, [r1]
 8003a76:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1e1      	bne.n	8003a42 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2220      	movs	r2, #32
 8003a82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	e853 3f00 	ldrex	r3, [r3]
 8003a9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f023 0310 	bic.w	r3, r3, #16
 8003aa6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ab4:	61fb      	str	r3, [r7, #28]
 8003ab6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab8:	69b9      	ldr	r1, [r7, #24]
 8003aba:	69fa      	ldr	r2, [r7, #28]
 8003abc:	e841 2300 	strex	r3, r2, [r1]
 8003ac0:	617b      	str	r3, [r7, #20]
   return(result);
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1e4      	bne.n	8003a92 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2202      	movs	r2, #2
 8003acc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ace:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 f87d 	bl	8003bd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ada:	e063      	b.n	8003ba4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ae0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00e      	beq.n	8003b06 <HAL_UART_IRQHandler+0x59e>
 8003ae8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003aec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d008      	beq.n	8003b06 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003afc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f001 fb88 	bl	8005214 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b04:	e051      	b.n	8003baa <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d014      	beq.n	8003b3c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003b12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d105      	bne.n	8003b2a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003b1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d008      	beq.n	8003b3c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d03a      	beq.n	8003ba8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	4798      	blx	r3
    }
    return;
 8003b3a:	e035      	b.n	8003ba8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d009      	beq.n	8003b5c <HAL_UART_IRQHandler+0x5f4>
 8003b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d003      	beq.n	8003b5c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 fe16 	bl	8004786 <UART_EndTransmit_IT>
    return;
 8003b5a:	e026      	b.n	8003baa <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d009      	beq.n	8003b7c <HAL_UART_IRQHandler+0x614>
 8003b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b6c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d003      	beq.n	8003b7c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f001 fb5f 	bl	8005238 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b7a:	e016      	b.n	8003baa <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d010      	beq.n	8003baa <HAL_UART_IRQHandler+0x642>
 8003b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	da0c      	bge.n	8003baa <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f001 fb48 	bl	8005226 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b96:	e008      	b.n	8003baa <HAL_UART_IRQHandler+0x642>
      return;
 8003b98:	bf00      	nop
 8003b9a:	e006      	b.n	8003baa <HAL_UART_IRQHandler+0x642>
    return;
 8003b9c:	bf00      	nop
 8003b9e:	e004      	b.n	8003baa <HAL_UART_IRQHandler+0x642>
      return;
 8003ba0:	bf00      	nop
 8003ba2:	e002      	b.n	8003baa <HAL_UART_IRQHandler+0x642>
      return;
 8003ba4:	bf00      	nop
 8003ba6:	e000      	b.n	8003baa <HAL_UART_IRQHandler+0x642>
    return;
 8003ba8:	bf00      	nop
  }
}
 8003baa:	37e8      	adds	r7, #232	@ 0xe8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bc80      	pop	{r7}
 8003bc0:	4770      	bx	lr

08003bc2 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b083      	sub	sp, #12
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003bca:	bf00      	nop
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bc80      	pop	{r7}
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	460b      	mov	r3, r1
 8003bde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bc80      	pop	{r7}
 8003be8:	4770      	bx	lr
	...

08003bec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bf0:	b08c      	sub	sp, #48	@ 0x30
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	431a      	orrs	r2, r3
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	69db      	ldr	r3, [r3, #28]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	4b94      	ldr	r3, [pc, #592]	@ (8003e6c <UART_SetConfig+0x280>)
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	6812      	ldr	r2, [r2, #0]
 8003c22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c24:	430b      	orrs	r3, r1
 8003c26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a89      	ldr	r2, [pc, #548]	@ (8003e70 <UART_SetConfig+0x284>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d004      	beq.n	8003c58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c54:	4313      	orrs	r3, r2
 8003c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003c62:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	6812      	ldr	r2, [r2, #0]
 8003c6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c6c:	430b      	orrs	r3, r1
 8003c6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c76:	f023 010f 	bic.w	r1, r3, #15
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a7a      	ldr	r2, [pc, #488]	@ (8003e74 <UART_SetConfig+0x288>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d127      	bne.n	8003ce0 <UART_SetConfig+0xf4>
 8003c90:	2003      	movs	r0, #3
 8003c92:	f7ff fb25 	bl	80032e0 <LL_RCC_GetUSARTClockSource>
 8003c96:	4603      	mov	r3, r0
 8003c98:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8003c9c:	2b03      	cmp	r3, #3
 8003c9e:	d81b      	bhi.n	8003cd8 <UART_SetConfig+0xec>
 8003ca0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ca8 <UART_SetConfig+0xbc>)
 8003ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca6:	bf00      	nop
 8003ca8:	08003cb9 	.word	0x08003cb9
 8003cac:	08003cc9 	.word	0x08003cc9
 8003cb0:	08003cc1 	.word	0x08003cc1
 8003cb4:	08003cd1 	.word	0x08003cd1
 8003cb8:	2301      	movs	r3, #1
 8003cba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cbe:	e080      	b.n	8003dc2 <UART_SetConfig+0x1d6>
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cc6:	e07c      	b.n	8003dc2 <UART_SetConfig+0x1d6>
 8003cc8:	2304      	movs	r3, #4
 8003cca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cce:	e078      	b.n	8003dc2 <UART_SetConfig+0x1d6>
 8003cd0:	2308      	movs	r3, #8
 8003cd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cd6:	e074      	b.n	8003dc2 <UART_SetConfig+0x1d6>
 8003cd8:	2310      	movs	r3, #16
 8003cda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cde:	e070      	b.n	8003dc2 <UART_SetConfig+0x1d6>
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a64      	ldr	r2, [pc, #400]	@ (8003e78 <UART_SetConfig+0x28c>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d138      	bne.n	8003d5c <UART_SetConfig+0x170>
 8003cea:	200c      	movs	r0, #12
 8003cec:	f7ff faf8 	bl	80032e0 <LL_RCC_GetUSARTClockSource>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8003cf6:	2b0c      	cmp	r3, #12
 8003cf8:	d82c      	bhi.n	8003d54 <UART_SetConfig+0x168>
 8003cfa:	a201      	add	r2, pc, #4	@ (adr r2, 8003d00 <UART_SetConfig+0x114>)
 8003cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d00:	08003d35 	.word	0x08003d35
 8003d04:	08003d55 	.word	0x08003d55
 8003d08:	08003d55 	.word	0x08003d55
 8003d0c:	08003d55 	.word	0x08003d55
 8003d10:	08003d45 	.word	0x08003d45
 8003d14:	08003d55 	.word	0x08003d55
 8003d18:	08003d55 	.word	0x08003d55
 8003d1c:	08003d55 	.word	0x08003d55
 8003d20:	08003d3d 	.word	0x08003d3d
 8003d24:	08003d55 	.word	0x08003d55
 8003d28:	08003d55 	.word	0x08003d55
 8003d2c:	08003d55 	.word	0x08003d55
 8003d30:	08003d4d 	.word	0x08003d4d
 8003d34:	2300      	movs	r3, #0
 8003d36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d3a:	e042      	b.n	8003dc2 <UART_SetConfig+0x1d6>
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d42:	e03e      	b.n	8003dc2 <UART_SetConfig+0x1d6>
 8003d44:	2304      	movs	r3, #4
 8003d46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d4a:	e03a      	b.n	8003dc2 <UART_SetConfig+0x1d6>
 8003d4c:	2308      	movs	r3, #8
 8003d4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d52:	e036      	b.n	8003dc2 <UART_SetConfig+0x1d6>
 8003d54:	2310      	movs	r3, #16
 8003d56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d5a:	e032      	b.n	8003dc2 <UART_SetConfig+0x1d6>
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a43      	ldr	r2, [pc, #268]	@ (8003e70 <UART_SetConfig+0x284>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d12a      	bne.n	8003dbc <UART_SetConfig+0x1d0>
 8003d66:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8003d6a:	f7ff facb 	bl	8003304 <LL_RCC_GetLPUARTClockSource>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d74:	d01a      	beq.n	8003dac <UART_SetConfig+0x1c0>
 8003d76:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d7a:	d81b      	bhi.n	8003db4 <UART_SetConfig+0x1c8>
 8003d7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d80:	d00c      	beq.n	8003d9c <UART_SetConfig+0x1b0>
 8003d82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d86:	d815      	bhi.n	8003db4 <UART_SetConfig+0x1c8>
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <UART_SetConfig+0x1a8>
 8003d8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d90:	d008      	beq.n	8003da4 <UART_SetConfig+0x1b8>
 8003d92:	e00f      	b.n	8003db4 <UART_SetConfig+0x1c8>
 8003d94:	2300      	movs	r3, #0
 8003d96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d9a:	e012      	b.n	8003dc2 <UART_SetConfig+0x1d6>
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003da2:	e00e      	b.n	8003dc2 <UART_SetConfig+0x1d6>
 8003da4:	2304      	movs	r3, #4
 8003da6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003daa:	e00a      	b.n	8003dc2 <UART_SetConfig+0x1d6>
 8003dac:	2308      	movs	r3, #8
 8003dae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003db2:	e006      	b.n	8003dc2 <UART_SetConfig+0x1d6>
 8003db4:	2310      	movs	r3, #16
 8003db6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dba:	e002      	b.n	8003dc2 <UART_SetConfig+0x1d6>
 8003dbc:	2310      	movs	r3, #16
 8003dbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a2a      	ldr	r2, [pc, #168]	@ (8003e70 <UART_SetConfig+0x284>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	f040 80a4 	bne.w	8003f16 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003dce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003dd2:	2b08      	cmp	r3, #8
 8003dd4:	d823      	bhi.n	8003e1e <UART_SetConfig+0x232>
 8003dd6:	a201      	add	r2, pc, #4	@ (adr r2, 8003ddc <UART_SetConfig+0x1f0>)
 8003dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ddc:	08003e01 	.word	0x08003e01
 8003de0:	08003e1f 	.word	0x08003e1f
 8003de4:	08003e09 	.word	0x08003e09
 8003de8:	08003e1f 	.word	0x08003e1f
 8003dec:	08003e0f 	.word	0x08003e0f
 8003df0:	08003e1f 	.word	0x08003e1f
 8003df4:	08003e1f 	.word	0x08003e1f
 8003df8:	08003e1f 	.word	0x08003e1f
 8003dfc:	08003e17 	.word	0x08003e17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e00:	f7fe fc2a 	bl	8002658 <HAL_RCC_GetPCLK1Freq>
 8003e04:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e06:	e010      	b.n	8003e2a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e08:	4b1c      	ldr	r3, [pc, #112]	@ (8003e7c <UART_SetConfig+0x290>)
 8003e0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e0c:	e00d      	b.n	8003e2a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e0e:	f7fe fb6f 	bl	80024f0 <HAL_RCC_GetSysClockFreq>
 8003e12:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e14:	e009      	b.n	8003e2a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e1c:	e005      	b.n	8003e2a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003e28:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 8137 	beq.w	80040a0 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e36:	4a12      	ldr	r2, [pc, #72]	@ (8003e80 <UART_SetConfig+0x294>)
 8003e38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e40:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e44:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	4413      	add	r3, r2
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d305      	bcc.n	8003e62 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d910      	bls.n	8003e84 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003e68:	e11a      	b.n	80040a0 <UART_SetConfig+0x4b4>
 8003e6a:	bf00      	nop
 8003e6c:	cfff69f3 	.word	0xcfff69f3
 8003e70:	40008000 	.word	0x40008000
 8003e74:	40013800 	.word	0x40013800
 8003e78:	40004400 	.word	0x40004400
 8003e7c:	00f42400 	.word	0x00f42400
 8003e80:	08005f24 	.word	0x08005f24
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e86:	2200      	movs	r2, #0
 8003e88:	60bb      	str	r3, [r7, #8]
 8003e8a:	60fa      	str	r2, [r7, #12]
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e90:	4a8e      	ldr	r2, [pc, #568]	@ (80040cc <UART_SetConfig+0x4e0>)
 8003e92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	2200      	movs	r2, #0
 8003e9a:	603b      	str	r3, [r7, #0]
 8003e9c:	607a      	str	r2, [r7, #4]
 8003e9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ea2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ea6:	f7fc f9c3 	bl	8000230 <__aeabi_uldivmod>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	460b      	mov	r3, r1
 8003eae:	4610      	mov	r0, r2
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	f04f 0200 	mov.w	r2, #0
 8003eb6:	f04f 0300 	mov.w	r3, #0
 8003eba:	020b      	lsls	r3, r1, #8
 8003ebc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003ec0:	0202      	lsls	r2, r0, #8
 8003ec2:	6979      	ldr	r1, [r7, #20]
 8003ec4:	6849      	ldr	r1, [r1, #4]
 8003ec6:	0849      	lsrs	r1, r1, #1
 8003ec8:	2000      	movs	r0, #0
 8003eca:	460c      	mov	r4, r1
 8003ecc:	4605      	mov	r5, r0
 8003ece:	eb12 0804 	adds.w	r8, r2, r4
 8003ed2:	eb43 0905 	adc.w	r9, r3, r5
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	469a      	mov	sl, r3
 8003ede:	4693      	mov	fp, r2
 8003ee0:	4652      	mov	r2, sl
 8003ee2:	465b      	mov	r3, fp
 8003ee4:	4640      	mov	r0, r8
 8003ee6:	4649      	mov	r1, r9
 8003ee8:	f7fc f9a2 	bl	8000230 <__aeabi_uldivmod>
 8003eec:	4602      	mov	r2, r0
 8003eee:	460b      	mov	r3, r1
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003efa:	d308      	bcc.n	8003f0e <UART_SetConfig+0x322>
 8003efc:	6a3b      	ldr	r3, [r7, #32]
 8003efe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f02:	d204      	bcs.n	8003f0e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6a3a      	ldr	r2, [r7, #32]
 8003f0a:	60da      	str	r2, [r3, #12]
 8003f0c:	e0c8      	b.n	80040a0 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003f14:	e0c4      	b.n	80040a0 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f1e:	d167      	bne.n	8003ff0 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8003f20:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	d828      	bhi.n	8003f7a <UART_SetConfig+0x38e>
 8003f28:	a201      	add	r2, pc, #4	@ (adr r2, 8003f30 <UART_SetConfig+0x344>)
 8003f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2e:	bf00      	nop
 8003f30:	08003f55 	.word	0x08003f55
 8003f34:	08003f5d 	.word	0x08003f5d
 8003f38:	08003f65 	.word	0x08003f65
 8003f3c:	08003f7b 	.word	0x08003f7b
 8003f40:	08003f6b 	.word	0x08003f6b
 8003f44:	08003f7b 	.word	0x08003f7b
 8003f48:	08003f7b 	.word	0x08003f7b
 8003f4c:	08003f7b 	.word	0x08003f7b
 8003f50:	08003f73 	.word	0x08003f73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f54:	f7fe fb80 	bl	8002658 <HAL_RCC_GetPCLK1Freq>
 8003f58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f5a:	e014      	b.n	8003f86 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f5c:	f7fe fb8e 	bl	800267c <HAL_RCC_GetPCLK2Freq>
 8003f60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f62:	e010      	b.n	8003f86 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f64:	4b5a      	ldr	r3, [pc, #360]	@ (80040d0 <UART_SetConfig+0x4e4>)
 8003f66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003f68:	e00d      	b.n	8003f86 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f6a:	f7fe fac1 	bl	80024f0 <HAL_RCC_GetSysClockFreq>
 8003f6e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f70:	e009      	b.n	8003f86 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003f78:	e005      	b.n	8003f86 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003f84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f000 8089 	beq.w	80040a0 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f92:	4a4e      	ldr	r2, [pc, #312]	@ (80040cc <UART_SetConfig+0x4e0>)
 8003f94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f98:	461a      	mov	r2, r3
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fa0:	005a      	lsls	r2, r3, #1
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	085b      	lsrs	r3, r3, #1
 8003fa8:	441a      	add	r2, r3
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fb4:	6a3b      	ldr	r3, [r7, #32]
 8003fb6:	2b0f      	cmp	r3, #15
 8003fb8:	d916      	bls.n	8003fe8 <UART_SetConfig+0x3fc>
 8003fba:	6a3b      	ldr	r3, [r7, #32]
 8003fbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fc0:	d212      	bcs.n	8003fe8 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	f023 030f 	bic.w	r3, r3, #15
 8003fca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fcc:	6a3b      	ldr	r3, [r7, #32]
 8003fce:	085b      	lsrs	r3, r3, #1
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	8bfb      	ldrh	r3, [r7, #30]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	8bfa      	ldrh	r2, [r7, #30]
 8003fe4:	60da      	str	r2, [r3, #12]
 8003fe6:	e05b      	b.n	80040a0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003fee:	e057      	b.n	80040a0 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ff0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	d828      	bhi.n	800404a <UART_SetConfig+0x45e>
 8003ff8:	a201      	add	r2, pc, #4	@ (adr r2, 8004000 <UART_SetConfig+0x414>)
 8003ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffe:	bf00      	nop
 8004000:	08004025 	.word	0x08004025
 8004004:	0800402d 	.word	0x0800402d
 8004008:	08004035 	.word	0x08004035
 800400c:	0800404b 	.word	0x0800404b
 8004010:	0800403b 	.word	0x0800403b
 8004014:	0800404b 	.word	0x0800404b
 8004018:	0800404b 	.word	0x0800404b
 800401c:	0800404b 	.word	0x0800404b
 8004020:	08004043 	.word	0x08004043
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004024:	f7fe fb18 	bl	8002658 <HAL_RCC_GetPCLK1Freq>
 8004028:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800402a:	e014      	b.n	8004056 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800402c:	f7fe fb26 	bl	800267c <HAL_RCC_GetPCLK2Freq>
 8004030:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004032:	e010      	b.n	8004056 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004034:	4b26      	ldr	r3, [pc, #152]	@ (80040d0 <UART_SetConfig+0x4e4>)
 8004036:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004038:	e00d      	b.n	8004056 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800403a:	f7fe fa59 	bl	80024f0 <HAL_RCC_GetSysClockFreq>
 800403e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004040:	e009      	b.n	8004056 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004042:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004046:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004048:	e005      	b.n	8004056 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800404a:	2300      	movs	r3, #0
 800404c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004054:	bf00      	nop
    }

    if (pclk != 0U)
 8004056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004058:	2b00      	cmp	r3, #0
 800405a:	d021      	beq.n	80040a0 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004060:	4a1a      	ldr	r2, [pc, #104]	@ (80040cc <UART_SetConfig+0x4e0>)
 8004062:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004066:	461a      	mov	r2, r3
 8004068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406a:	fbb3 f2f2 	udiv	r2, r3, r2
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	085b      	lsrs	r3, r3, #1
 8004074:	441a      	add	r2, r3
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	fbb2 f3f3 	udiv	r3, r2, r3
 800407e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004080:	6a3b      	ldr	r3, [r7, #32]
 8004082:	2b0f      	cmp	r3, #15
 8004084:	d909      	bls.n	800409a <UART_SetConfig+0x4ae>
 8004086:	6a3b      	ldr	r3, [r7, #32]
 8004088:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800408c:	d205      	bcs.n	800409a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	b29a      	uxth	r2, r3
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	60da      	str	r2, [r3, #12]
 8004098:	e002      	b.n	80040a0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	2200      	movs	r2, #0
 80040b4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	2200      	movs	r2, #0
 80040ba:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80040bc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3730      	adds	r7, #48	@ 0x30
 80040c4:	46bd      	mov	sp, r7
 80040c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040ca:	bf00      	nop
 80040cc:	08005f24 	.word	0x08005f24
 80040d0:	00f42400 	.word	0x00f42400

080040d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e0:	f003 0308 	and.w	r3, r3, #8
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00a      	beq.n	80040fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00a      	beq.n	8004142 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	430a      	orrs	r2, r1
 8004140:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004146:	f003 0304 	and.w	r3, r3, #4
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00a      	beq.n	8004164 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	430a      	orrs	r2, r1
 8004162:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004168:	f003 0310 	and.w	r3, r3, #16
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00a      	beq.n	8004186 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	430a      	orrs	r2, r1
 8004184:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800418a:	f003 0320 	and.w	r3, r3, #32
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00a      	beq.n	80041a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	430a      	orrs	r2, r1
 80041a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d01a      	beq.n	80041ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	430a      	orrs	r2, r1
 80041c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041d2:	d10a      	bne.n	80041ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00a      	beq.n	800420c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	430a      	orrs	r2, r1
 800420a:	605a      	str	r2, [r3, #4]
  }
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	bc80      	pop	{r7}
 8004214:	4770      	bx	lr

08004216 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b086      	sub	sp, #24
 800421a:	af02      	add	r7, sp, #8
 800421c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004226:	f7fc fe2d 	bl	8000e84 <HAL_GetTick>
 800422a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0308 	and.w	r3, r3, #8
 8004236:	2b08      	cmp	r3, #8
 8004238:	d10e      	bne.n	8004258 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800423a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800423e:	9300      	str	r3, [sp, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 f832 	bl	80042b2 <UART_WaitOnFlagUntilTimeout>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d001      	beq.n	8004258 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e028      	b.n	80042aa <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0304 	and.w	r3, r3, #4
 8004262:	2b04      	cmp	r3, #4
 8004264:	d10e      	bne.n	8004284 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004266:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 f81c 	bl	80042b2 <UART_WaitOnFlagUntilTimeout>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e012      	b.n	80042aa <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2220      	movs	r2, #32
 8004288:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2220      	movs	r2, #32
 8004290:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3710      	adds	r7, #16
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b09c      	sub	sp, #112	@ 0x70
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	60f8      	str	r0, [r7, #12]
 80042ba:	60b9      	str	r1, [r7, #8]
 80042bc:	603b      	str	r3, [r7, #0]
 80042be:	4613      	mov	r3, r2
 80042c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042c2:	e0af      	b.n	8004424 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ca:	f000 80ab 	beq.w	8004424 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ce:	f7fc fdd9 	bl	8000e84 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80042da:	429a      	cmp	r2, r3
 80042dc:	d302      	bcc.n	80042e4 <UART_WaitOnFlagUntilTimeout+0x32>
 80042de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d140      	bne.n	8004366 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042ec:	e853 3f00 	ldrex	r3, [r3]
 80042f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80042f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042f4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80042f8:	667b      	str	r3, [r7, #100]	@ 0x64
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	461a      	mov	r2, r3
 8004300:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004302:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004304:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004306:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004308:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800430a:	e841 2300 	strex	r3, r2, [r1]
 800430e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004310:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1e6      	bne.n	80042e4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	3308      	adds	r3, #8
 800431c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004320:	e853 3f00 	ldrex	r3, [r3]
 8004324:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004328:	f023 0301 	bic.w	r3, r3, #1
 800432c:	663b      	str	r3, [r7, #96]	@ 0x60
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	3308      	adds	r3, #8
 8004334:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004336:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004338:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800433c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800433e:	e841 2300 	strex	r3, r2, [r1]
 8004342:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004344:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1e5      	bne.n	8004316 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2220      	movs	r2, #32
 800434e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2220      	movs	r2, #32
 8004356:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e06f      	b.n	8004446 <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	2b00      	cmp	r3, #0
 8004372:	d057      	beq.n	8004424 <UART_WaitOnFlagUntilTimeout+0x172>
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	2b80      	cmp	r3, #128	@ 0x80
 8004378:	d054      	beq.n	8004424 <UART_WaitOnFlagUntilTimeout+0x172>
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	2b40      	cmp	r3, #64	@ 0x40
 800437e:	d051      	beq.n	8004424 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800438a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800438e:	d149      	bne.n	8004424 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004398:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a2:	e853 3f00 	ldrex	r3, [r3]
 80043a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043aa:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80043ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	461a      	mov	r2, r3
 80043b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80043ba:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043bc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80043be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80043c0:	e841 2300 	strex	r3, r2, [r1]
 80043c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80043c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1e6      	bne.n	800439a <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	3308      	adds	r3, #8
 80043d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	e853 3f00 	ldrex	r3, [r3]
 80043da:	613b      	str	r3, [r7, #16]
   return(result);
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	f023 0301 	bic.w	r3, r3, #1
 80043e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	3308      	adds	r3, #8
 80043ea:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80043ec:	623a      	str	r2, [r7, #32]
 80043ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f0:	69f9      	ldr	r1, [r7, #28]
 80043f2:	6a3a      	ldr	r2, [r7, #32]
 80043f4:	e841 2300 	strex	r3, r2, [r1]
 80043f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1e5      	bne.n	80043cc <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2220      	movs	r2, #32
 8004404:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2220      	movs	r2, #32
 800440c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2220      	movs	r2, #32
 8004414:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e010      	b.n	8004446 <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	69da      	ldr	r2, [r3, #28]
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	4013      	ands	r3, r2
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	429a      	cmp	r2, r3
 8004432:	bf0c      	ite	eq
 8004434:	2301      	moveq	r3, #1
 8004436:	2300      	movne	r3, #0
 8004438:	b2db      	uxtb	r3, r3
 800443a:	461a      	mov	r2, r3
 800443c:	79fb      	ldrb	r3, [r7, #7]
 800443e:	429a      	cmp	r2, r3
 8004440:	f43f af40 	beq.w	80042c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3770      	adds	r7, #112	@ 0x70
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
	...

08004450 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004450:	b480      	push	{r7}
 8004452:	b0a3      	sub	sp, #140	@ 0x8c
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	4613      	mov	r3, r2
 800445c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	88fa      	ldrh	r2, [r7, #6]
 8004468:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	88fa      	ldrh	r2, [r7, #6]
 8004470:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004482:	d10e      	bne.n	80044a2 <UART_Start_Receive_IT+0x52>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d105      	bne.n	8004498 <UART_Start_Receive_IT+0x48>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004492:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004496:	e02d      	b.n	80044f4 <UART_Start_Receive_IT+0xa4>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	22ff      	movs	r2, #255	@ 0xff
 800449c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80044a0:	e028      	b.n	80044f4 <UART_Start_Receive_IT+0xa4>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10d      	bne.n	80044c6 <UART_Start_Receive_IT+0x76>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d104      	bne.n	80044bc <UART_Start_Receive_IT+0x6c>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	22ff      	movs	r2, #255	@ 0xff
 80044b6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80044ba:	e01b      	b.n	80044f4 <UART_Start_Receive_IT+0xa4>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	227f      	movs	r2, #127	@ 0x7f
 80044c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80044c4:	e016      	b.n	80044f4 <UART_Start_Receive_IT+0xa4>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80044ce:	d10d      	bne.n	80044ec <UART_Start_Receive_IT+0x9c>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d104      	bne.n	80044e2 <UART_Start_Receive_IT+0x92>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	227f      	movs	r2, #127	@ 0x7f
 80044dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80044e0:	e008      	b.n	80044f4 <UART_Start_Receive_IT+0xa4>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	223f      	movs	r2, #63	@ 0x3f
 80044e6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80044ea:	e003      	b.n	80044f4 <UART_Start_Receive_IT+0xa4>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2222      	movs	r2, #34	@ 0x22
 8004500:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3308      	adds	r3, #8
 800450a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800450e:	e853 3f00 	ldrex	r3, [r3]
 8004512:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8004514:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004516:	f043 0301 	orr.w	r3, r3, #1
 800451a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	3308      	adds	r3, #8
 8004524:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004528:	673a      	str	r2, [r7, #112]	@ 0x70
 800452a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800452e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004530:	e841 2300 	strex	r3, r2, [r1]
 8004534:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8004536:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1e3      	bne.n	8004504 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004540:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004544:	d14f      	bne.n	80045e6 <UART_Start_Receive_IT+0x196>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800454c:	88fa      	ldrh	r2, [r7, #6]
 800454e:	429a      	cmp	r2, r3
 8004550:	d349      	bcc.n	80045e6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800455a:	d107      	bne.n	800456c <UART_Start_Receive_IT+0x11c>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d103      	bne.n	800456c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	4a46      	ldr	r2, [pc, #280]	@ (8004680 <UART_Start_Receive_IT+0x230>)
 8004568:	675a      	str	r2, [r3, #116]	@ 0x74
 800456a:	e002      	b.n	8004572 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4a45      	ldr	r2, [pc, #276]	@ (8004684 <UART_Start_Receive_IT+0x234>)
 8004570:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d01a      	beq.n	80045b0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004580:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004582:	e853 3f00 	ldrex	r3, [r3]
 8004586:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004588:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800458a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800458e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	461a      	mov	r2, r3
 8004598:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800459c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800459e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80045a2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80045a4:	e841 2300 	strex	r3, r2, [r1]
 80045a8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80045aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1e4      	bne.n	800457a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	3308      	adds	r3, #8
 80045b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045ba:	e853 3f00 	ldrex	r3, [r3]
 80045be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80045c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	3308      	adds	r3, #8
 80045ce:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80045d0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80045d2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80045d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045d8:	e841 2300 	strex	r3, r2, [r1]
 80045dc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80045de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1e5      	bne.n	80045b0 <UART_Start_Receive_IT+0x160>
 80045e4:	e046      	b.n	8004674 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045ee:	d107      	bne.n	8004600 <UART_Start_Receive_IT+0x1b0>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d103      	bne.n	8004600 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4a23      	ldr	r2, [pc, #140]	@ (8004688 <UART_Start_Receive_IT+0x238>)
 80045fc:	675a      	str	r2, [r3, #116]	@ 0x74
 80045fe:	e002      	b.n	8004606 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4a22      	ldr	r2, [pc, #136]	@ (800468c <UART_Start_Receive_IT+0x23c>)
 8004604:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d019      	beq.n	8004642 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004616:	e853 3f00 	ldrex	r3, [r3]
 800461a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800461c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004622:	677b      	str	r3, [r7, #116]	@ 0x74
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	461a      	mov	r2, r3
 800462a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800462c:	637b      	str	r3, [r7, #52]	@ 0x34
 800462e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004630:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004632:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004634:	e841 2300 	strex	r3, r2, [r1]
 8004638:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800463a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1e6      	bne.n	800460e <UART_Start_Receive_IT+0x1be>
 8004640:	e018      	b.n	8004674 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	e853 3f00 	ldrex	r3, [r3]
 800464e:	613b      	str	r3, [r7, #16]
   return(result);
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	f043 0320 	orr.w	r3, r3, #32
 8004656:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	461a      	mov	r2, r3
 800465e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004660:	623b      	str	r3, [r7, #32]
 8004662:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004664:	69f9      	ldr	r1, [r7, #28]
 8004666:	6a3a      	ldr	r2, [r7, #32]
 8004668:	e841 2300 	strex	r3, r2, [r1]
 800466c:	61bb      	str	r3, [r7, #24]
   return(result);
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1e6      	bne.n	8004642 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	378c      	adds	r7, #140	@ 0x8c
 800467a:	46bd      	mov	sp, r7
 800467c:	bc80      	pop	{r7}
 800467e:	4770      	bx	lr
 8004680:	08004ead 	.word	0x08004ead
 8004684:	08004b4d 	.word	0x08004b4d
 8004688:	08004995 	.word	0x08004995
 800468c:	080047dd 	.word	0x080047dd

08004690 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004690:	b480      	push	{r7}
 8004692:	b095      	sub	sp, #84	@ 0x54
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046a0:	e853 3f00 	ldrex	r3, [r3]
 80046a4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80046a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	461a      	mov	r2, r3
 80046b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80046b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80046bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80046be:	e841 2300 	strex	r3, r2, [r1]
 80046c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80046c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1e6      	bne.n	8004698 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	3308      	adds	r3, #8
 80046d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d2:	6a3b      	ldr	r3, [r7, #32]
 80046d4:	e853 3f00 	ldrex	r3, [r3]
 80046d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046e0:	f023 0301 	bic.w	r3, r3, #1
 80046e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	3308      	adds	r3, #8
 80046ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046f6:	e841 2300 	strex	r3, r2, [r1]
 80046fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80046fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1e3      	bne.n	80046ca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004706:	2b01      	cmp	r3, #1
 8004708:	d118      	bne.n	800473c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	e853 3f00 	ldrex	r3, [r3]
 8004716:	60bb      	str	r3, [r7, #8]
   return(result);
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	f023 0310 	bic.w	r3, r3, #16
 800471e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	461a      	mov	r2, r3
 8004726:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004728:	61bb      	str	r3, [r7, #24]
 800472a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472c:	6979      	ldr	r1, [r7, #20]
 800472e:	69ba      	ldr	r2, [r7, #24]
 8004730:	e841 2300 	strex	r3, r2, [r1]
 8004734:	613b      	str	r3, [r7, #16]
   return(result);
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1e6      	bne.n	800470a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2220      	movs	r2, #32
 8004740:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004750:	bf00      	nop
 8004752:	3754      	adds	r7, #84	@ 0x54
 8004754:	46bd      	mov	sp, r7
 8004756:	bc80      	pop	{r7}
 8004758:	4770      	bx	lr

0800475a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b084      	sub	sp, #16
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004766:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004778:	68f8      	ldr	r0, [r7, #12]
 800477a:	f7ff fa22 	bl	8003bc2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800477e:	bf00      	nop
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b088      	sub	sp, #32
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	e853 3f00 	ldrex	r3, [r3]
 800479a:	60bb      	str	r3, [r7, #8]
   return(result);
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047a2:	61fb      	str	r3, [r7, #28]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	461a      	mov	r2, r3
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	61bb      	str	r3, [r7, #24]
 80047ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b0:	6979      	ldr	r1, [r7, #20]
 80047b2:	69ba      	ldr	r2, [r7, #24]
 80047b4:	e841 2300 	strex	r3, r2, [r1]
 80047b8:	613b      	str	r3, [r7, #16]
   return(result);
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1e6      	bne.n	800478e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2220      	movs	r2, #32
 80047c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7ff f9ee 	bl	8003bb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047d4:	bf00      	nop
 80047d6:	3720      	adds	r7, #32
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b09c      	sub	sp, #112	@ 0x70
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80047ea:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047f4:	2b22      	cmp	r3, #34	@ 0x22
 80047f6:	f040 80be 	bne.w	8004976 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004800:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004804:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004808:	b2d9      	uxtb	r1, r3
 800480a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800480e:	b2da      	uxtb	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004814:	400a      	ands	r2, r1
 8004816:	b2d2      	uxtb	r2, r2
 8004818:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800481e:	1c5a      	adds	r2, r3, #1
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800482a:	b29b      	uxth	r3, r3
 800482c:	3b01      	subs	r3, #1
 800482e:	b29a      	uxth	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800483c:	b29b      	uxth	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	f040 80a1 	bne.w	8004986 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800484c:	e853 3f00 	ldrex	r3, [r3]
 8004850:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004852:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004854:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004858:	66bb      	str	r3, [r7, #104]	@ 0x68
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	461a      	mov	r2, r3
 8004860:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004862:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004864:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004866:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004868:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800486a:	e841 2300 	strex	r3, r2, [r1]
 800486e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004870:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1e6      	bne.n	8004844 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	3308      	adds	r3, #8
 800487c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004880:	e853 3f00 	ldrex	r3, [r3]
 8004884:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004888:	f023 0301 	bic.w	r3, r3, #1
 800488c:	667b      	str	r3, [r7, #100]	@ 0x64
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	3308      	adds	r3, #8
 8004894:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004896:	647a      	str	r2, [r7, #68]	@ 0x44
 8004898:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800489c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800489e:	e841 2300 	strex	r3, r2, [r1]
 80048a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80048a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1e5      	bne.n	8004876 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2220      	movs	r2, #32
 80048ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a33      	ldr	r2, [pc, #204]	@ (8004990 <UART_RxISR_8BIT+0x1b4>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d01f      	beq.n	8004908 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d018      	beq.n	8004908 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048de:	e853 3f00 	ldrex	r3, [r3]
 80048e2:	623b      	str	r3, [r7, #32]
   return(result);
 80048e4:	6a3b      	ldr	r3, [r7, #32]
 80048e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80048ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	461a      	mov	r2, r3
 80048f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80048f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048fc:	e841 2300 	strex	r3, r2, [r1]
 8004900:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1e6      	bne.n	80048d6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800490c:	2b01      	cmp	r3, #1
 800490e:	d12e      	bne.n	800496e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	e853 3f00 	ldrex	r3, [r3]
 8004922:	60fb      	str	r3, [r7, #12]
   return(result);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f023 0310 	bic.w	r3, r3, #16
 800492a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	461a      	mov	r2, r3
 8004932:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004934:	61fb      	str	r3, [r7, #28]
 8004936:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004938:	69b9      	ldr	r1, [r7, #24]
 800493a:	69fa      	ldr	r2, [r7, #28]
 800493c:	e841 2300 	strex	r3, r2, [r1]
 8004940:	617b      	str	r3, [r7, #20]
   return(result);
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1e6      	bne.n	8004916 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	f003 0310 	and.w	r3, r3, #16
 8004952:	2b10      	cmp	r3, #16
 8004954:	d103      	bne.n	800495e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2210      	movs	r2, #16
 800495c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004964:	4619      	mov	r1, r3
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7ff f934 	bl	8003bd4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800496c:	e00b      	b.n	8004986 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f7fb fef8 	bl	8000764 <HAL_UART_RxCpltCallback>
}
 8004974:	e007      	b.n	8004986 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	699a      	ldr	r2, [r3, #24]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f042 0208 	orr.w	r2, r2, #8
 8004984:	619a      	str	r2, [r3, #24]
}
 8004986:	bf00      	nop
 8004988:	3770      	adds	r7, #112	@ 0x70
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	40008000 	.word	0x40008000

08004994 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b09c      	sub	sp, #112	@ 0x70
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80049a2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049ac:	2b22      	cmp	r3, #34	@ 0x22
 80049ae:	f040 80be 	bne.w	8004b2e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049c0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80049c2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80049c6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80049ca:	4013      	ands	r3, r2
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80049d0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049d6:	1c9a      	adds	r2, r3, #2
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	3b01      	subs	r3, #1
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f040 80a1 	bne.w	8004b3e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a04:	e853 3f00 	ldrex	r3, [r3]
 8004a08:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004a0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a10:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	461a      	mov	r2, r3
 8004a18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a1c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004a20:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004a22:	e841 2300 	strex	r3, r2, [r1]
 8004a26:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004a28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1e6      	bne.n	80049fc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	3308      	adds	r3, #8
 8004a34:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a38:	e853 3f00 	ldrex	r3, [r3]
 8004a3c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a40:	f023 0301 	bic.w	r3, r3, #1
 8004a44:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	3308      	adds	r3, #8
 8004a4c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004a4e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a52:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a54:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a56:	e841 2300 	strex	r3, r2, [r1]
 8004a5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1e5      	bne.n	8004a2e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2220      	movs	r2, #32
 8004a66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a33      	ldr	r2, [pc, #204]	@ (8004b48 <UART_RxISR_16BIT+0x1b4>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d01f      	beq.n	8004ac0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d018      	beq.n	8004ac0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a94:	6a3b      	ldr	r3, [r7, #32]
 8004a96:	e853 3f00 	ldrex	r3, [r3]
 8004a9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004aa2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004aae:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ab2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ab4:	e841 2300 	strex	r3, r2, [r1]
 8004ab8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1e6      	bne.n	8004a8e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d12e      	bne.n	8004b26 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	e853 3f00 	ldrex	r3, [r3]
 8004ada:	60bb      	str	r3, [r7, #8]
   return(result);
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	f023 0310 	bic.w	r3, r3, #16
 8004ae2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	461a      	mov	r2, r3
 8004aea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004aec:	61bb      	str	r3, [r7, #24]
 8004aee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af0:	6979      	ldr	r1, [r7, #20]
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	e841 2300 	strex	r3, r2, [r1]
 8004af8:	613b      	str	r3, [r7, #16]
   return(result);
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1e6      	bne.n	8004ace <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	f003 0310 	and.w	r3, r3, #16
 8004b0a:	2b10      	cmp	r3, #16
 8004b0c:	d103      	bne.n	8004b16 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2210      	movs	r2, #16
 8004b14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7ff f858 	bl	8003bd4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004b24:	e00b      	b.n	8004b3e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7fb fe1c 	bl	8000764 <HAL_UART_RxCpltCallback>
}
 8004b2c:	e007      	b.n	8004b3e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	699a      	ldr	r2, [r3, #24]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f042 0208 	orr.w	r2, r2, #8
 8004b3c:	619a      	str	r2, [r3, #24]
}
 8004b3e:	bf00      	nop
 8004b40:	3770      	adds	r7, #112	@ 0x70
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	40008000 	.word	0x40008000

08004b4c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b0ac      	sub	sp, #176	@ 0xb0
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004b5a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	69db      	ldr	r3, [r3, #28]
 8004b64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b82:	2b22      	cmp	r3, #34	@ 0x22
 8004b84:	f040 8182 	bne.w	8004e8c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004b8e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004b92:	e125      	b.n	8004de0 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004b9e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8004ba2:	b2d9      	uxtb	r1, r3
 8004ba4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bae:	400a      	ands	r2, r1
 8004bb0:	b2d2      	uxtb	r2, r2
 8004bb2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bb8:	1c5a      	adds	r2, r3, #1
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	69db      	ldr	r3, [r3, #28]
 8004bd6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004bda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004bde:	f003 0307 	and.w	r3, r3, #7
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d053      	beq.n	8004c8e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004be6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d011      	beq.n	8004c16 <UART_RxISR_8BIT_FIFOEN+0xca>
 8004bf2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00b      	beq.n	8004c16 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2201      	movs	r2, #1
 8004c04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c0c:	f043 0201 	orr.w	r2, r3, #1
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d011      	beq.n	8004c46 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8004c22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00b      	beq.n	8004c46 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2202      	movs	r2, #2
 8004c34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c3c:	f043 0204 	orr.w	r2, r3, #4
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c4a:	f003 0304 	and.w	r3, r3, #4
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d011      	beq.n	8004c76 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8004c52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00b      	beq.n	8004c76 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2204      	movs	r2, #4
 8004c64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c6c:	f043 0202 	orr.w	r2, r3, #2
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d006      	beq.n	8004c8e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f7fe ff9e 	bl	8003bc2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f040 80a2 	bne.w	8004de0 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ca4:	e853 3f00 	ldrex	r3, [r3]
 8004ca8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8004caa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	461a      	mov	r2, r3
 8004cba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004cbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004cc0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8004cc4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004cc6:	e841 2300 	strex	r3, r2, [r1]
 8004cca:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8004ccc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1e4      	bne.n	8004c9c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	3308      	adds	r3, #8
 8004cd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cdc:	e853 3f00 	ldrex	r3, [r3]
 8004ce0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8004ce2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ce4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ce8:	f023 0301 	bic.w	r3, r3, #1
 8004cec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	3308      	adds	r3, #8
 8004cf6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004cfa:	66ba      	str	r2, [r7, #104]	@ 0x68
 8004cfc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfe:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8004d00:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004d02:	e841 2300 	strex	r3, r2, [r1]
 8004d06:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8004d08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1e1      	bne.n	8004cd2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2220      	movs	r2, #32
 8004d12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a5f      	ldr	r2, [pc, #380]	@ (8004ea4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d021      	beq.n	8004d70 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d01a      	beq.n	8004d70 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d42:	e853 3f00 	ldrex	r3, [r3]
 8004d46:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004d48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d4a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004d4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	461a      	mov	r2, r3
 8004d58:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004d5c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d5e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d60:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004d62:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004d64:	e841 2300 	strex	r3, r2, [r1]
 8004d68:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004d6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1e4      	bne.n	8004d3a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d130      	bne.n	8004dda <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d86:	e853 3f00 	ldrex	r3, [r3]
 8004d8a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d8e:	f023 0310 	bic.w	r3, r3, #16
 8004d92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004da0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004da2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004da6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004da8:	e841 2300 	strex	r3, r2, [r1]
 8004dac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1e4      	bne.n	8004d7e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	69db      	ldr	r3, [r3, #28]
 8004dba:	f003 0310 	and.w	r3, r3, #16
 8004dbe:	2b10      	cmp	r3, #16
 8004dc0:	d103      	bne.n	8004dca <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2210      	movs	r2, #16
 8004dc8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f7fe fefe 	bl	8003bd4 <HAL_UARTEx_RxEventCallback>
 8004dd8:	e002      	b.n	8004de0 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f7fb fcc2 	bl	8000764 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004de0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d006      	beq.n	8004df6 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8004de8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004dec:	f003 0320 	and.w	r3, r3, #32
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f47f aecf 	bne.w	8004b94 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004dfc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004e00:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d049      	beq.n	8004e9c <UART_RxISR_8BIT_FIFOEN+0x350>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004e0e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d242      	bcs.n	8004e9c <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	3308      	adds	r3, #8
 8004e1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1e:	6a3b      	ldr	r3, [r7, #32]
 8004e20:	e853 3f00 	ldrex	r3, [r3]
 8004e24:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	3308      	adds	r3, #8
 8004e36:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004e3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e42:	e841 2300 	strex	r3, r2, [r1]
 8004e46:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1e3      	bne.n	8004e16 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a15      	ldr	r2, [pc, #84]	@ (8004ea8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8004e52:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	e853 3f00 	ldrex	r3, [r3]
 8004e60:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	f043 0320 	orr.w	r3, r3, #32
 8004e68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	461a      	mov	r2, r3
 8004e72:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004e76:	61bb      	str	r3, [r7, #24]
 8004e78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7a:	6979      	ldr	r1, [r7, #20]
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	e841 2300 	strex	r3, r2, [r1]
 8004e82:	613b      	str	r3, [r7, #16]
   return(result);
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1e4      	bne.n	8004e54 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e8a:	e007      	b.n	8004e9c <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	699a      	ldr	r2, [r3, #24]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f042 0208 	orr.w	r2, r2, #8
 8004e9a:	619a      	str	r2, [r3, #24]
}
 8004e9c:	bf00      	nop
 8004e9e:	37b0      	adds	r7, #176	@ 0xb0
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	40008000 	.word	0x40008000
 8004ea8:	080047dd 	.word	0x080047dd

08004eac <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b0ae      	sub	sp, #184	@ 0xb8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004eba:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	69db      	ldr	r3, [r3, #28]
 8004ec4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ee2:	2b22      	cmp	r3, #34	@ 0x22
 8004ee4:	f040 8186 	bne.w	80051f4 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004eee:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004ef2:	e129      	b.n	8005148 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efa:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8004f06:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8004f0a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8004f0e:	4013      	ands	r3, r2
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f16:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f1c:	1c9a      	adds	r2, r3, #2
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004f3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004f42:	f003 0307 	and.w	r3, r3, #7
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d053      	beq.n	8004ff2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d011      	beq.n	8004f7a <UART_RxISR_16BIT_FIFOEN+0xce>
 8004f56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00b      	beq.n	8004f7a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2201      	movs	r2, #1
 8004f68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f70:	f043 0201 	orr.w	r2, r3, #1
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d011      	beq.n	8004faa <UART_RxISR_16BIT_FIFOEN+0xfe>
 8004f86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00b      	beq.n	8004faa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2202      	movs	r2, #2
 8004f98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fa0:	f043 0204 	orr.w	r2, r3, #4
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004faa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004fae:	f003 0304 	and.w	r3, r3, #4
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d011      	beq.n	8004fda <UART_RxISR_16BIT_FIFOEN+0x12e>
 8004fb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00b      	beq.n	8004fda <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2204      	movs	r2, #4
 8004fc8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fd0:	f043 0202 	orr.w	r2, r3, #2
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d006      	beq.n	8004ff2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f7fe fdec 	bl	8003bc2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f040 80a4 	bne.w	8005148 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005006:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005008:	e853 3f00 	ldrex	r3, [r3]
 800500c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800500e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005010:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005014:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	461a      	mov	r2, r3
 800501e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005022:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005026:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005028:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800502a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800502e:	e841 2300 	strex	r3, r2, [r1]
 8005032:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005034:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1e2      	bne.n	8005000 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	3308      	adds	r3, #8
 8005040:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005042:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005044:	e853 3f00 	ldrex	r3, [r3]
 8005048:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800504a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800504c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005050:	f023 0301 	bic.w	r3, r3, #1
 8005054:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	3308      	adds	r3, #8
 800505e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8005062:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005064:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005066:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005068:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800506a:	e841 2300 	strex	r3, r2, [r1]
 800506e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005070:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1e1      	bne.n	800503a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2220      	movs	r2, #32
 800507a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a5f      	ldr	r2, [pc, #380]	@ (800520c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d021      	beq.n	80050d8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d01a      	beq.n	80050d8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050aa:	e853 3f00 	ldrex	r3, [r3]
 80050ae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80050b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80050b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	461a      	mov	r2, r3
 80050c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80050c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80050c6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80050ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80050cc:	e841 2300 	strex	r3, r2, [r1]
 80050d0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80050d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1e4      	bne.n	80050a2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d130      	bne.n	8005142 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ee:	e853 3f00 	ldrex	r3, [r3]
 80050f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80050f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050f6:	f023 0310 	bic.w	r3, r3, #16
 80050fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	461a      	mov	r2, r3
 8005104:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005108:	647b      	str	r3, [r7, #68]	@ 0x44
 800510a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800510e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005110:	e841 2300 	strex	r3, r2, [r1]
 8005114:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005116:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1e4      	bne.n	80050e6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	f003 0310 	and.w	r3, r3, #16
 8005126:	2b10      	cmp	r3, #16
 8005128:	d103      	bne.n	8005132 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2210      	movs	r2, #16
 8005130:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005138:	4619      	mov	r1, r3
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7fe fd4a 	bl	8003bd4 <HAL_UARTEx_RxEventCallback>
 8005140:	e002      	b.n	8005148 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7fb fb0e 	bl	8000764 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005148:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800514c:	2b00      	cmp	r3, #0
 800514e:	d006      	beq.n	800515e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8005150:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005154:	f003 0320 	and.w	r3, r3, #32
 8005158:	2b00      	cmp	r3, #0
 800515a:	f47f aecb 	bne.w	8004ef4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005164:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005168:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800516c:	2b00      	cmp	r3, #0
 800516e:	d049      	beq.n	8005204 <UART_RxISR_16BIT_FIFOEN+0x358>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005176:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800517a:	429a      	cmp	r2, r3
 800517c:	d242      	bcs.n	8005204 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	3308      	adds	r3, #8
 8005184:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005188:	e853 3f00 	ldrex	r3, [r3]
 800518c:	623b      	str	r3, [r7, #32]
   return(result);
 800518e:	6a3b      	ldr	r3, [r7, #32]
 8005190:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005194:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	3308      	adds	r3, #8
 800519e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80051a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80051a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051aa:	e841 2300 	strex	r3, r2, [r1]
 80051ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1e3      	bne.n	800517e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a15      	ldr	r2, [pc, #84]	@ (8005210 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80051ba:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	e853 3f00 	ldrex	r3, [r3]
 80051c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f043 0320 	orr.w	r3, r3, #32
 80051d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	461a      	mov	r2, r3
 80051da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80051de:	61fb      	str	r3, [r7, #28]
 80051e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e2:	69b9      	ldr	r1, [r7, #24]
 80051e4:	69fa      	ldr	r2, [r7, #28]
 80051e6:	e841 2300 	strex	r3, r2, [r1]
 80051ea:	617b      	str	r3, [r7, #20]
   return(result);
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1e4      	bne.n	80051bc <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80051f2:	e007      	b.n	8005204 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	699a      	ldr	r2, [r3, #24]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f042 0208 	orr.w	r2, r2, #8
 8005202:	619a      	str	r2, [r3, #24]
}
 8005204:	bf00      	nop
 8005206:	37b8      	adds	r7, #184	@ 0xb8
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	40008000 	.word	0x40008000
 8005210:	08004995 	.word	0x08004995

08005214 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	bc80      	pop	{r7}
 8005224:	4770      	bx	lr

08005226 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005226:	b480      	push	{r7}
 8005228:	b083      	sub	sp, #12
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800522e:	bf00      	nop
 8005230:	370c      	adds	r7, #12
 8005232:	46bd      	mov	sp, r7
 8005234:	bc80      	pop	{r7}
 8005236:	4770      	bx	lr

08005238 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	bc80      	pop	{r7}
 8005248:	4770      	bx	lr

0800524a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800524a:	b480      	push	{r7}
 800524c:	b085      	sub	sp, #20
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005258:	2b01      	cmp	r3, #1
 800525a:	d101      	bne.n	8005260 <HAL_UARTEx_DisableFifoMode+0x16>
 800525c:	2302      	movs	r3, #2
 800525e:	e027      	b.n	80052b0 <HAL_UARTEx_DisableFifoMode+0x66>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2224      	movs	r2, #36	@ 0x24
 800526c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f022 0201 	bic.w	r2, r2, #1
 8005286:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800528e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2220      	movs	r2, #32
 80052a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3714      	adds	r7, #20
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bc80      	pop	{r7}
 80052b8:	4770      	bx	lr

080052ba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b084      	sub	sp, #16
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
 80052c2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d101      	bne.n	80052d2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80052ce:	2302      	movs	r3, #2
 80052d0:	e02d      	b.n	800532e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2224      	movs	r2, #36	@ 0x24
 80052de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f022 0201 	bic.w	r2, r2, #1
 80052f8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	683a      	ldr	r2, [r7, #0]
 800530a:	430a      	orrs	r2, r1
 800530c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f850 	bl	80053b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2220      	movs	r2, #32
 8005320:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b084      	sub	sp, #16
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
 800533e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005346:	2b01      	cmp	r3, #1
 8005348:	d101      	bne.n	800534e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800534a:	2302      	movs	r3, #2
 800534c:	e02d      	b.n	80053aa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2224      	movs	r2, #36	@ 0x24
 800535a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f022 0201 	bic.w	r2, r2, #1
 8005374:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	683a      	ldr	r2, [r7, #0]
 8005386:	430a      	orrs	r2, r1
 8005388:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f812 	bl	80053b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2220      	movs	r2, #32
 800539c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
	...

080053b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d108      	bne.n	80053d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80053d4:	e031      	b.n	800543a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80053d6:	2308      	movs	r3, #8
 80053d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80053da:	2308      	movs	r3, #8
 80053dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	0e5b      	lsrs	r3, r3, #25
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	f003 0307 	and.w	r3, r3, #7
 80053ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	0f5b      	lsrs	r3, r3, #29
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	f003 0307 	and.w	r3, r3, #7
 80053fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80053fe:	7bbb      	ldrb	r3, [r7, #14]
 8005400:	7b3a      	ldrb	r2, [r7, #12]
 8005402:	4910      	ldr	r1, [pc, #64]	@ (8005444 <UARTEx_SetNbDataToProcess+0x90>)
 8005404:	5c8a      	ldrb	r2, [r1, r2]
 8005406:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800540a:	7b3a      	ldrb	r2, [r7, #12]
 800540c:	490e      	ldr	r1, [pc, #56]	@ (8005448 <UARTEx_SetNbDataToProcess+0x94>)
 800540e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005410:	fb93 f3f2 	sdiv	r3, r3, r2
 8005414:	b29a      	uxth	r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800541c:	7bfb      	ldrb	r3, [r7, #15]
 800541e:	7b7a      	ldrb	r2, [r7, #13]
 8005420:	4908      	ldr	r1, [pc, #32]	@ (8005444 <UARTEx_SetNbDataToProcess+0x90>)
 8005422:	5c8a      	ldrb	r2, [r1, r2]
 8005424:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005428:	7b7a      	ldrb	r2, [r7, #13]
 800542a:	4907      	ldr	r1, [pc, #28]	@ (8005448 <UARTEx_SetNbDataToProcess+0x94>)
 800542c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800542e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005432:	b29a      	uxth	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800543a:	bf00      	nop
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	bc80      	pop	{r7}
 8005442:	4770      	bx	lr
 8005444:	08005f3c 	.word	0x08005f3c
 8005448:	08005f44 	.word	0x08005f44

0800544c <sniprintf>:
 800544c:	b40c      	push	{r2, r3}
 800544e:	b530      	push	{r4, r5, lr}
 8005450:	4b18      	ldr	r3, [pc, #96]	@ (80054b4 <sniprintf+0x68>)
 8005452:	1e0c      	subs	r4, r1, #0
 8005454:	681d      	ldr	r5, [r3, #0]
 8005456:	b09d      	sub	sp, #116	@ 0x74
 8005458:	da08      	bge.n	800546c <sniprintf+0x20>
 800545a:	238b      	movs	r3, #139	@ 0x8b
 800545c:	602b      	str	r3, [r5, #0]
 800545e:	f04f 30ff 	mov.w	r0, #4294967295
 8005462:	b01d      	add	sp, #116	@ 0x74
 8005464:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005468:	b002      	add	sp, #8
 800546a:	4770      	bx	lr
 800546c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005470:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005474:	f04f 0300 	mov.w	r3, #0
 8005478:	931b      	str	r3, [sp, #108]	@ 0x6c
 800547a:	bf14      	ite	ne
 800547c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005480:	4623      	moveq	r3, r4
 8005482:	9304      	str	r3, [sp, #16]
 8005484:	9307      	str	r3, [sp, #28]
 8005486:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800548a:	9002      	str	r0, [sp, #8]
 800548c:	9006      	str	r0, [sp, #24]
 800548e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005492:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005494:	ab21      	add	r3, sp, #132	@ 0x84
 8005496:	a902      	add	r1, sp, #8
 8005498:	4628      	mov	r0, r5
 800549a:	9301      	str	r3, [sp, #4]
 800549c:	f000 f9b6 	bl	800580c <_svfiprintf_r>
 80054a0:	1c43      	adds	r3, r0, #1
 80054a2:	bfbc      	itt	lt
 80054a4:	238b      	movlt	r3, #139	@ 0x8b
 80054a6:	602b      	strlt	r3, [r5, #0]
 80054a8:	2c00      	cmp	r4, #0
 80054aa:	d0da      	beq.n	8005462 <sniprintf+0x16>
 80054ac:	9b02      	ldr	r3, [sp, #8]
 80054ae:	2200      	movs	r2, #0
 80054b0:	701a      	strb	r2, [r3, #0]
 80054b2:	e7d6      	b.n	8005462 <sniprintf+0x16>
 80054b4:	2000011c 	.word	0x2000011c

080054b8 <siprintf>:
 80054b8:	b40e      	push	{r1, r2, r3}
 80054ba:	b510      	push	{r4, lr}
 80054bc:	b09d      	sub	sp, #116	@ 0x74
 80054be:	ab1f      	add	r3, sp, #124	@ 0x7c
 80054c0:	9002      	str	r0, [sp, #8]
 80054c2:	9006      	str	r0, [sp, #24]
 80054c4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80054c8:	480a      	ldr	r0, [pc, #40]	@ (80054f4 <siprintf+0x3c>)
 80054ca:	9107      	str	r1, [sp, #28]
 80054cc:	9104      	str	r1, [sp, #16]
 80054ce:	490a      	ldr	r1, [pc, #40]	@ (80054f8 <siprintf+0x40>)
 80054d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80054d4:	9105      	str	r1, [sp, #20]
 80054d6:	2400      	movs	r4, #0
 80054d8:	a902      	add	r1, sp, #8
 80054da:	6800      	ldr	r0, [r0, #0]
 80054dc:	9301      	str	r3, [sp, #4]
 80054de:	941b      	str	r4, [sp, #108]	@ 0x6c
 80054e0:	f000 f994 	bl	800580c <_svfiprintf_r>
 80054e4:	9b02      	ldr	r3, [sp, #8]
 80054e6:	701c      	strb	r4, [r3, #0]
 80054e8:	b01d      	add	sp, #116	@ 0x74
 80054ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054ee:	b003      	add	sp, #12
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	2000011c 	.word	0x2000011c
 80054f8:	ffff0208 	.word	0xffff0208

080054fc <memset>:
 80054fc:	4402      	add	r2, r0
 80054fe:	4603      	mov	r3, r0
 8005500:	4293      	cmp	r3, r2
 8005502:	d100      	bne.n	8005506 <memset+0xa>
 8005504:	4770      	bx	lr
 8005506:	f803 1b01 	strb.w	r1, [r3], #1
 800550a:	e7f9      	b.n	8005500 <memset+0x4>

0800550c <__errno>:
 800550c:	4b01      	ldr	r3, [pc, #4]	@ (8005514 <__errno+0x8>)
 800550e:	6818      	ldr	r0, [r3, #0]
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	2000011c 	.word	0x2000011c

08005518 <__libc_init_array>:
 8005518:	b570      	push	{r4, r5, r6, lr}
 800551a:	4d0d      	ldr	r5, [pc, #52]	@ (8005550 <__libc_init_array+0x38>)
 800551c:	4c0d      	ldr	r4, [pc, #52]	@ (8005554 <__libc_init_array+0x3c>)
 800551e:	1b64      	subs	r4, r4, r5
 8005520:	10a4      	asrs	r4, r4, #2
 8005522:	2600      	movs	r6, #0
 8005524:	42a6      	cmp	r6, r4
 8005526:	d109      	bne.n	800553c <__libc_init_array+0x24>
 8005528:	4d0b      	ldr	r5, [pc, #44]	@ (8005558 <__libc_init_array+0x40>)
 800552a:	4c0c      	ldr	r4, [pc, #48]	@ (800555c <__libc_init_array+0x44>)
 800552c:	f000 fc64 	bl	8005df8 <_init>
 8005530:	1b64      	subs	r4, r4, r5
 8005532:	10a4      	asrs	r4, r4, #2
 8005534:	2600      	movs	r6, #0
 8005536:	42a6      	cmp	r6, r4
 8005538:	d105      	bne.n	8005546 <__libc_init_array+0x2e>
 800553a:	bd70      	pop	{r4, r5, r6, pc}
 800553c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005540:	4798      	blx	r3
 8005542:	3601      	adds	r6, #1
 8005544:	e7ee      	b.n	8005524 <__libc_init_array+0xc>
 8005546:	f855 3b04 	ldr.w	r3, [r5], #4
 800554a:	4798      	blx	r3
 800554c:	3601      	adds	r6, #1
 800554e:	e7f2      	b.n	8005536 <__libc_init_array+0x1e>
 8005550:	08005f88 	.word	0x08005f88
 8005554:	08005f88 	.word	0x08005f88
 8005558:	08005f88 	.word	0x08005f88
 800555c:	08005f8c 	.word	0x08005f8c

08005560 <__retarget_lock_acquire_recursive>:
 8005560:	4770      	bx	lr

08005562 <__retarget_lock_release_recursive>:
 8005562:	4770      	bx	lr

08005564 <_free_r>:
 8005564:	b538      	push	{r3, r4, r5, lr}
 8005566:	4605      	mov	r5, r0
 8005568:	2900      	cmp	r1, #0
 800556a:	d041      	beq.n	80055f0 <_free_r+0x8c>
 800556c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005570:	1f0c      	subs	r4, r1, #4
 8005572:	2b00      	cmp	r3, #0
 8005574:	bfb8      	it	lt
 8005576:	18e4      	addlt	r4, r4, r3
 8005578:	f000 f8e0 	bl	800573c <__malloc_lock>
 800557c:	4a1d      	ldr	r2, [pc, #116]	@ (80055f4 <_free_r+0x90>)
 800557e:	6813      	ldr	r3, [r2, #0]
 8005580:	b933      	cbnz	r3, 8005590 <_free_r+0x2c>
 8005582:	6063      	str	r3, [r4, #4]
 8005584:	6014      	str	r4, [r2, #0]
 8005586:	4628      	mov	r0, r5
 8005588:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800558c:	f000 b8dc 	b.w	8005748 <__malloc_unlock>
 8005590:	42a3      	cmp	r3, r4
 8005592:	d908      	bls.n	80055a6 <_free_r+0x42>
 8005594:	6820      	ldr	r0, [r4, #0]
 8005596:	1821      	adds	r1, r4, r0
 8005598:	428b      	cmp	r3, r1
 800559a:	bf01      	itttt	eq
 800559c:	6819      	ldreq	r1, [r3, #0]
 800559e:	685b      	ldreq	r3, [r3, #4]
 80055a0:	1809      	addeq	r1, r1, r0
 80055a2:	6021      	streq	r1, [r4, #0]
 80055a4:	e7ed      	b.n	8005582 <_free_r+0x1e>
 80055a6:	461a      	mov	r2, r3
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	b10b      	cbz	r3, 80055b0 <_free_r+0x4c>
 80055ac:	42a3      	cmp	r3, r4
 80055ae:	d9fa      	bls.n	80055a6 <_free_r+0x42>
 80055b0:	6811      	ldr	r1, [r2, #0]
 80055b2:	1850      	adds	r0, r2, r1
 80055b4:	42a0      	cmp	r0, r4
 80055b6:	d10b      	bne.n	80055d0 <_free_r+0x6c>
 80055b8:	6820      	ldr	r0, [r4, #0]
 80055ba:	4401      	add	r1, r0
 80055bc:	1850      	adds	r0, r2, r1
 80055be:	4283      	cmp	r3, r0
 80055c0:	6011      	str	r1, [r2, #0]
 80055c2:	d1e0      	bne.n	8005586 <_free_r+0x22>
 80055c4:	6818      	ldr	r0, [r3, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	6053      	str	r3, [r2, #4]
 80055ca:	4408      	add	r0, r1
 80055cc:	6010      	str	r0, [r2, #0]
 80055ce:	e7da      	b.n	8005586 <_free_r+0x22>
 80055d0:	d902      	bls.n	80055d8 <_free_r+0x74>
 80055d2:	230c      	movs	r3, #12
 80055d4:	602b      	str	r3, [r5, #0]
 80055d6:	e7d6      	b.n	8005586 <_free_r+0x22>
 80055d8:	6820      	ldr	r0, [r4, #0]
 80055da:	1821      	adds	r1, r4, r0
 80055dc:	428b      	cmp	r3, r1
 80055de:	bf04      	itt	eq
 80055e0:	6819      	ldreq	r1, [r3, #0]
 80055e2:	685b      	ldreq	r3, [r3, #4]
 80055e4:	6063      	str	r3, [r4, #4]
 80055e6:	bf04      	itt	eq
 80055e8:	1809      	addeq	r1, r1, r0
 80055ea:	6021      	streq	r1, [r4, #0]
 80055ec:	6054      	str	r4, [r2, #4]
 80055ee:	e7ca      	b.n	8005586 <_free_r+0x22>
 80055f0:	bd38      	pop	{r3, r4, r5, pc}
 80055f2:	bf00      	nop
 80055f4:	20000580 	.word	0x20000580

080055f8 <sbrk_aligned>:
 80055f8:	b570      	push	{r4, r5, r6, lr}
 80055fa:	4e0f      	ldr	r6, [pc, #60]	@ (8005638 <sbrk_aligned+0x40>)
 80055fc:	460c      	mov	r4, r1
 80055fe:	6831      	ldr	r1, [r6, #0]
 8005600:	4605      	mov	r5, r0
 8005602:	b911      	cbnz	r1, 800560a <sbrk_aligned+0x12>
 8005604:	f000 fba4 	bl	8005d50 <_sbrk_r>
 8005608:	6030      	str	r0, [r6, #0]
 800560a:	4621      	mov	r1, r4
 800560c:	4628      	mov	r0, r5
 800560e:	f000 fb9f 	bl	8005d50 <_sbrk_r>
 8005612:	1c43      	adds	r3, r0, #1
 8005614:	d103      	bne.n	800561e <sbrk_aligned+0x26>
 8005616:	f04f 34ff 	mov.w	r4, #4294967295
 800561a:	4620      	mov	r0, r4
 800561c:	bd70      	pop	{r4, r5, r6, pc}
 800561e:	1cc4      	adds	r4, r0, #3
 8005620:	f024 0403 	bic.w	r4, r4, #3
 8005624:	42a0      	cmp	r0, r4
 8005626:	d0f8      	beq.n	800561a <sbrk_aligned+0x22>
 8005628:	1a21      	subs	r1, r4, r0
 800562a:	4628      	mov	r0, r5
 800562c:	f000 fb90 	bl	8005d50 <_sbrk_r>
 8005630:	3001      	adds	r0, #1
 8005632:	d1f2      	bne.n	800561a <sbrk_aligned+0x22>
 8005634:	e7ef      	b.n	8005616 <sbrk_aligned+0x1e>
 8005636:	bf00      	nop
 8005638:	2000057c 	.word	0x2000057c

0800563c <_malloc_r>:
 800563c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005640:	1ccd      	adds	r5, r1, #3
 8005642:	f025 0503 	bic.w	r5, r5, #3
 8005646:	3508      	adds	r5, #8
 8005648:	2d0c      	cmp	r5, #12
 800564a:	bf38      	it	cc
 800564c:	250c      	movcc	r5, #12
 800564e:	2d00      	cmp	r5, #0
 8005650:	4606      	mov	r6, r0
 8005652:	db01      	blt.n	8005658 <_malloc_r+0x1c>
 8005654:	42a9      	cmp	r1, r5
 8005656:	d904      	bls.n	8005662 <_malloc_r+0x26>
 8005658:	230c      	movs	r3, #12
 800565a:	6033      	str	r3, [r6, #0]
 800565c:	2000      	movs	r0, #0
 800565e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005662:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005738 <_malloc_r+0xfc>
 8005666:	f000 f869 	bl	800573c <__malloc_lock>
 800566a:	f8d8 3000 	ldr.w	r3, [r8]
 800566e:	461c      	mov	r4, r3
 8005670:	bb44      	cbnz	r4, 80056c4 <_malloc_r+0x88>
 8005672:	4629      	mov	r1, r5
 8005674:	4630      	mov	r0, r6
 8005676:	f7ff ffbf 	bl	80055f8 <sbrk_aligned>
 800567a:	1c43      	adds	r3, r0, #1
 800567c:	4604      	mov	r4, r0
 800567e:	d158      	bne.n	8005732 <_malloc_r+0xf6>
 8005680:	f8d8 4000 	ldr.w	r4, [r8]
 8005684:	4627      	mov	r7, r4
 8005686:	2f00      	cmp	r7, #0
 8005688:	d143      	bne.n	8005712 <_malloc_r+0xd6>
 800568a:	2c00      	cmp	r4, #0
 800568c:	d04b      	beq.n	8005726 <_malloc_r+0xea>
 800568e:	6823      	ldr	r3, [r4, #0]
 8005690:	4639      	mov	r1, r7
 8005692:	4630      	mov	r0, r6
 8005694:	eb04 0903 	add.w	r9, r4, r3
 8005698:	f000 fb5a 	bl	8005d50 <_sbrk_r>
 800569c:	4581      	cmp	r9, r0
 800569e:	d142      	bne.n	8005726 <_malloc_r+0xea>
 80056a0:	6821      	ldr	r1, [r4, #0]
 80056a2:	1a6d      	subs	r5, r5, r1
 80056a4:	4629      	mov	r1, r5
 80056a6:	4630      	mov	r0, r6
 80056a8:	f7ff ffa6 	bl	80055f8 <sbrk_aligned>
 80056ac:	3001      	adds	r0, #1
 80056ae:	d03a      	beq.n	8005726 <_malloc_r+0xea>
 80056b0:	6823      	ldr	r3, [r4, #0]
 80056b2:	442b      	add	r3, r5
 80056b4:	6023      	str	r3, [r4, #0]
 80056b6:	f8d8 3000 	ldr.w	r3, [r8]
 80056ba:	685a      	ldr	r2, [r3, #4]
 80056bc:	bb62      	cbnz	r2, 8005718 <_malloc_r+0xdc>
 80056be:	f8c8 7000 	str.w	r7, [r8]
 80056c2:	e00f      	b.n	80056e4 <_malloc_r+0xa8>
 80056c4:	6822      	ldr	r2, [r4, #0]
 80056c6:	1b52      	subs	r2, r2, r5
 80056c8:	d420      	bmi.n	800570c <_malloc_r+0xd0>
 80056ca:	2a0b      	cmp	r2, #11
 80056cc:	d917      	bls.n	80056fe <_malloc_r+0xc2>
 80056ce:	1961      	adds	r1, r4, r5
 80056d0:	42a3      	cmp	r3, r4
 80056d2:	6025      	str	r5, [r4, #0]
 80056d4:	bf18      	it	ne
 80056d6:	6059      	strne	r1, [r3, #4]
 80056d8:	6863      	ldr	r3, [r4, #4]
 80056da:	bf08      	it	eq
 80056dc:	f8c8 1000 	streq.w	r1, [r8]
 80056e0:	5162      	str	r2, [r4, r5]
 80056e2:	604b      	str	r3, [r1, #4]
 80056e4:	4630      	mov	r0, r6
 80056e6:	f000 f82f 	bl	8005748 <__malloc_unlock>
 80056ea:	f104 000b 	add.w	r0, r4, #11
 80056ee:	1d23      	adds	r3, r4, #4
 80056f0:	f020 0007 	bic.w	r0, r0, #7
 80056f4:	1ac2      	subs	r2, r0, r3
 80056f6:	bf1c      	itt	ne
 80056f8:	1a1b      	subne	r3, r3, r0
 80056fa:	50a3      	strne	r3, [r4, r2]
 80056fc:	e7af      	b.n	800565e <_malloc_r+0x22>
 80056fe:	6862      	ldr	r2, [r4, #4]
 8005700:	42a3      	cmp	r3, r4
 8005702:	bf0c      	ite	eq
 8005704:	f8c8 2000 	streq.w	r2, [r8]
 8005708:	605a      	strne	r2, [r3, #4]
 800570a:	e7eb      	b.n	80056e4 <_malloc_r+0xa8>
 800570c:	4623      	mov	r3, r4
 800570e:	6864      	ldr	r4, [r4, #4]
 8005710:	e7ae      	b.n	8005670 <_malloc_r+0x34>
 8005712:	463c      	mov	r4, r7
 8005714:	687f      	ldr	r7, [r7, #4]
 8005716:	e7b6      	b.n	8005686 <_malloc_r+0x4a>
 8005718:	461a      	mov	r2, r3
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	42a3      	cmp	r3, r4
 800571e:	d1fb      	bne.n	8005718 <_malloc_r+0xdc>
 8005720:	2300      	movs	r3, #0
 8005722:	6053      	str	r3, [r2, #4]
 8005724:	e7de      	b.n	80056e4 <_malloc_r+0xa8>
 8005726:	230c      	movs	r3, #12
 8005728:	6033      	str	r3, [r6, #0]
 800572a:	4630      	mov	r0, r6
 800572c:	f000 f80c 	bl	8005748 <__malloc_unlock>
 8005730:	e794      	b.n	800565c <_malloc_r+0x20>
 8005732:	6005      	str	r5, [r0, #0]
 8005734:	e7d6      	b.n	80056e4 <_malloc_r+0xa8>
 8005736:	bf00      	nop
 8005738:	20000580 	.word	0x20000580

0800573c <__malloc_lock>:
 800573c:	4801      	ldr	r0, [pc, #4]	@ (8005744 <__malloc_lock+0x8>)
 800573e:	f7ff bf0f 	b.w	8005560 <__retarget_lock_acquire_recursive>
 8005742:	bf00      	nop
 8005744:	20000578 	.word	0x20000578

08005748 <__malloc_unlock>:
 8005748:	4801      	ldr	r0, [pc, #4]	@ (8005750 <__malloc_unlock+0x8>)
 800574a:	f7ff bf0a 	b.w	8005562 <__retarget_lock_release_recursive>
 800574e:	bf00      	nop
 8005750:	20000578 	.word	0x20000578

08005754 <__ssputs_r>:
 8005754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005758:	688e      	ldr	r6, [r1, #8]
 800575a:	461f      	mov	r7, r3
 800575c:	42be      	cmp	r6, r7
 800575e:	680b      	ldr	r3, [r1, #0]
 8005760:	4682      	mov	sl, r0
 8005762:	460c      	mov	r4, r1
 8005764:	4690      	mov	r8, r2
 8005766:	d82d      	bhi.n	80057c4 <__ssputs_r+0x70>
 8005768:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800576c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005770:	d026      	beq.n	80057c0 <__ssputs_r+0x6c>
 8005772:	6965      	ldr	r5, [r4, #20]
 8005774:	6909      	ldr	r1, [r1, #16]
 8005776:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800577a:	eba3 0901 	sub.w	r9, r3, r1
 800577e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005782:	1c7b      	adds	r3, r7, #1
 8005784:	444b      	add	r3, r9
 8005786:	106d      	asrs	r5, r5, #1
 8005788:	429d      	cmp	r5, r3
 800578a:	bf38      	it	cc
 800578c:	461d      	movcc	r5, r3
 800578e:	0553      	lsls	r3, r2, #21
 8005790:	d527      	bpl.n	80057e2 <__ssputs_r+0x8e>
 8005792:	4629      	mov	r1, r5
 8005794:	f7ff ff52 	bl	800563c <_malloc_r>
 8005798:	4606      	mov	r6, r0
 800579a:	b360      	cbz	r0, 80057f6 <__ssputs_r+0xa2>
 800579c:	6921      	ldr	r1, [r4, #16]
 800579e:	464a      	mov	r2, r9
 80057a0:	f000 fae6 	bl	8005d70 <memcpy>
 80057a4:	89a3      	ldrh	r3, [r4, #12]
 80057a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80057aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057ae:	81a3      	strh	r3, [r4, #12]
 80057b0:	6126      	str	r6, [r4, #16]
 80057b2:	6165      	str	r5, [r4, #20]
 80057b4:	444e      	add	r6, r9
 80057b6:	eba5 0509 	sub.w	r5, r5, r9
 80057ba:	6026      	str	r6, [r4, #0]
 80057bc:	60a5      	str	r5, [r4, #8]
 80057be:	463e      	mov	r6, r7
 80057c0:	42be      	cmp	r6, r7
 80057c2:	d900      	bls.n	80057c6 <__ssputs_r+0x72>
 80057c4:	463e      	mov	r6, r7
 80057c6:	6820      	ldr	r0, [r4, #0]
 80057c8:	4632      	mov	r2, r6
 80057ca:	4641      	mov	r1, r8
 80057cc:	f000 faa6 	bl	8005d1c <memmove>
 80057d0:	68a3      	ldr	r3, [r4, #8]
 80057d2:	1b9b      	subs	r3, r3, r6
 80057d4:	60a3      	str	r3, [r4, #8]
 80057d6:	6823      	ldr	r3, [r4, #0]
 80057d8:	4433      	add	r3, r6
 80057da:	6023      	str	r3, [r4, #0]
 80057dc:	2000      	movs	r0, #0
 80057de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057e2:	462a      	mov	r2, r5
 80057e4:	f000 fad2 	bl	8005d8c <_realloc_r>
 80057e8:	4606      	mov	r6, r0
 80057ea:	2800      	cmp	r0, #0
 80057ec:	d1e0      	bne.n	80057b0 <__ssputs_r+0x5c>
 80057ee:	6921      	ldr	r1, [r4, #16]
 80057f0:	4650      	mov	r0, sl
 80057f2:	f7ff feb7 	bl	8005564 <_free_r>
 80057f6:	230c      	movs	r3, #12
 80057f8:	f8ca 3000 	str.w	r3, [sl]
 80057fc:	89a3      	ldrh	r3, [r4, #12]
 80057fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005802:	81a3      	strh	r3, [r4, #12]
 8005804:	f04f 30ff 	mov.w	r0, #4294967295
 8005808:	e7e9      	b.n	80057de <__ssputs_r+0x8a>
	...

0800580c <_svfiprintf_r>:
 800580c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005810:	4698      	mov	r8, r3
 8005812:	898b      	ldrh	r3, [r1, #12]
 8005814:	061b      	lsls	r3, r3, #24
 8005816:	b09d      	sub	sp, #116	@ 0x74
 8005818:	4607      	mov	r7, r0
 800581a:	460d      	mov	r5, r1
 800581c:	4614      	mov	r4, r2
 800581e:	d510      	bpl.n	8005842 <_svfiprintf_r+0x36>
 8005820:	690b      	ldr	r3, [r1, #16]
 8005822:	b973      	cbnz	r3, 8005842 <_svfiprintf_r+0x36>
 8005824:	2140      	movs	r1, #64	@ 0x40
 8005826:	f7ff ff09 	bl	800563c <_malloc_r>
 800582a:	6028      	str	r0, [r5, #0]
 800582c:	6128      	str	r0, [r5, #16]
 800582e:	b930      	cbnz	r0, 800583e <_svfiprintf_r+0x32>
 8005830:	230c      	movs	r3, #12
 8005832:	603b      	str	r3, [r7, #0]
 8005834:	f04f 30ff 	mov.w	r0, #4294967295
 8005838:	b01d      	add	sp, #116	@ 0x74
 800583a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800583e:	2340      	movs	r3, #64	@ 0x40
 8005840:	616b      	str	r3, [r5, #20]
 8005842:	2300      	movs	r3, #0
 8005844:	9309      	str	r3, [sp, #36]	@ 0x24
 8005846:	2320      	movs	r3, #32
 8005848:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800584c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005850:	2330      	movs	r3, #48	@ 0x30
 8005852:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80059f0 <_svfiprintf_r+0x1e4>
 8005856:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800585a:	f04f 0901 	mov.w	r9, #1
 800585e:	4623      	mov	r3, r4
 8005860:	469a      	mov	sl, r3
 8005862:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005866:	b10a      	cbz	r2, 800586c <_svfiprintf_r+0x60>
 8005868:	2a25      	cmp	r2, #37	@ 0x25
 800586a:	d1f9      	bne.n	8005860 <_svfiprintf_r+0x54>
 800586c:	ebba 0b04 	subs.w	fp, sl, r4
 8005870:	d00b      	beq.n	800588a <_svfiprintf_r+0x7e>
 8005872:	465b      	mov	r3, fp
 8005874:	4622      	mov	r2, r4
 8005876:	4629      	mov	r1, r5
 8005878:	4638      	mov	r0, r7
 800587a:	f7ff ff6b 	bl	8005754 <__ssputs_r>
 800587e:	3001      	adds	r0, #1
 8005880:	f000 80a7 	beq.w	80059d2 <_svfiprintf_r+0x1c6>
 8005884:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005886:	445a      	add	r2, fp
 8005888:	9209      	str	r2, [sp, #36]	@ 0x24
 800588a:	f89a 3000 	ldrb.w	r3, [sl]
 800588e:	2b00      	cmp	r3, #0
 8005890:	f000 809f 	beq.w	80059d2 <_svfiprintf_r+0x1c6>
 8005894:	2300      	movs	r3, #0
 8005896:	f04f 32ff 	mov.w	r2, #4294967295
 800589a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800589e:	f10a 0a01 	add.w	sl, sl, #1
 80058a2:	9304      	str	r3, [sp, #16]
 80058a4:	9307      	str	r3, [sp, #28]
 80058a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80058aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80058ac:	4654      	mov	r4, sl
 80058ae:	2205      	movs	r2, #5
 80058b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058b4:	484e      	ldr	r0, [pc, #312]	@ (80059f0 <_svfiprintf_r+0x1e4>)
 80058b6:	f7fa fc6b 	bl	8000190 <memchr>
 80058ba:	9a04      	ldr	r2, [sp, #16]
 80058bc:	b9d8      	cbnz	r0, 80058f6 <_svfiprintf_r+0xea>
 80058be:	06d0      	lsls	r0, r2, #27
 80058c0:	bf44      	itt	mi
 80058c2:	2320      	movmi	r3, #32
 80058c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80058c8:	0711      	lsls	r1, r2, #28
 80058ca:	bf44      	itt	mi
 80058cc:	232b      	movmi	r3, #43	@ 0x2b
 80058ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80058d2:	f89a 3000 	ldrb.w	r3, [sl]
 80058d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80058d8:	d015      	beq.n	8005906 <_svfiprintf_r+0xfa>
 80058da:	9a07      	ldr	r2, [sp, #28]
 80058dc:	4654      	mov	r4, sl
 80058de:	2000      	movs	r0, #0
 80058e0:	f04f 0c0a 	mov.w	ip, #10
 80058e4:	4621      	mov	r1, r4
 80058e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058ea:	3b30      	subs	r3, #48	@ 0x30
 80058ec:	2b09      	cmp	r3, #9
 80058ee:	d94b      	bls.n	8005988 <_svfiprintf_r+0x17c>
 80058f0:	b1b0      	cbz	r0, 8005920 <_svfiprintf_r+0x114>
 80058f2:	9207      	str	r2, [sp, #28]
 80058f4:	e014      	b.n	8005920 <_svfiprintf_r+0x114>
 80058f6:	eba0 0308 	sub.w	r3, r0, r8
 80058fa:	fa09 f303 	lsl.w	r3, r9, r3
 80058fe:	4313      	orrs	r3, r2
 8005900:	9304      	str	r3, [sp, #16]
 8005902:	46a2      	mov	sl, r4
 8005904:	e7d2      	b.n	80058ac <_svfiprintf_r+0xa0>
 8005906:	9b03      	ldr	r3, [sp, #12]
 8005908:	1d19      	adds	r1, r3, #4
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	9103      	str	r1, [sp, #12]
 800590e:	2b00      	cmp	r3, #0
 8005910:	bfbb      	ittet	lt
 8005912:	425b      	neglt	r3, r3
 8005914:	f042 0202 	orrlt.w	r2, r2, #2
 8005918:	9307      	strge	r3, [sp, #28]
 800591a:	9307      	strlt	r3, [sp, #28]
 800591c:	bfb8      	it	lt
 800591e:	9204      	strlt	r2, [sp, #16]
 8005920:	7823      	ldrb	r3, [r4, #0]
 8005922:	2b2e      	cmp	r3, #46	@ 0x2e
 8005924:	d10a      	bne.n	800593c <_svfiprintf_r+0x130>
 8005926:	7863      	ldrb	r3, [r4, #1]
 8005928:	2b2a      	cmp	r3, #42	@ 0x2a
 800592a:	d132      	bne.n	8005992 <_svfiprintf_r+0x186>
 800592c:	9b03      	ldr	r3, [sp, #12]
 800592e:	1d1a      	adds	r2, r3, #4
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	9203      	str	r2, [sp, #12]
 8005934:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005938:	3402      	adds	r4, #2
 800593a:	9305      	str	r3, [sp, #20]
 800593c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80059f4 <_svfiprintf_r+0x1e8>
 8005940:	7821      	ldrb	r1, [r4, #0]
 8005942:	2203      	movs	r2, #3
 8005944:	4650      	mov	r0, sl
 8005946:	f7fa fc23 	bl	8000190 <memchr>
 800594a:	b138      	cbz	r0, 800595c <_svfiprintf_r+0x150>
 800594c:	9b04      	ldr	r3, [sp, #16]
 800594e:	eba0 000a 	sub.w	r0, r0, sl
 8005952:	2240      	movs	r2, #64	@ 0x40
 8005954:	4082      	lsls	r2, r0
 8005956:	4313      	orrs	r3, r2
 8005958:	3401      	adds	r4, #1
 800595a:	9304      	str	r3, [sp, #16]
 800595c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005960:	4825      	ldr	r0, [pc, #148]	@ (80059f8 <_svfiprintf_r+0x1ec>)
 8005962:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005966:	2206      	movs	r2, #6
 8005968:	f7fa fc12 	bl	8000190 <memchr>
 800596c:	2800      	cmp	r0, #0
 800596e:	d036      	beq.n	80059de <_svfiprintf_r+0x1d2>
 8005970:	4b22      	ldr	r3, [pc, #136]	@ (80059fc <_svfiprintf_r+0x1f0>)
 8005972:	bb1b      	cbnz	r3, 80059bc <_svfiprintf_r+0x1b0>
 8005974:	9b03      	ldr	r3, [sp, #12]
 8005976:	3307      	adds	r3, #7
 8005978:	f023 0307 	bic.w	r3, r3, #7
 800597c:	3308      	adds	r3, #8
 800597e:	9303      	str	r3, [sp, #12]
 8005980:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005982:	4433      	add	r3, r6
 8005984:	9309      	str	r3, [sp, #36]	@ 0x24
 8005986:	e76a      	b.n	800585e <_svfiprintf_r+0x52>
 8005988:	fb0c 3202 	mla	r2, ip, r2, r3
 800598c:	460c      	mov	r4, r1
 800598e:	2001      	movs	r0, #1
 8005990:	e7a8      	b.n	80058e4 <_svfiprintf_r+0xd8>
 8005992:	2300      	movs	r3, #0
 8005994:	3401      	adds	r4, #1
 8005996:	9305      	str	r3, [sp, #20]
 8005998:	4619      	mov	r1, r3
 800599a:	f04f 0c0a 	mov.w	ip, #10
 800599e:	4620      	mov	r0, r4
 80059a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059a4:	3a30      	subs	r2, #48	@ 0x30
 80059a6:	2a09      	cmp	r2, #9
 80059a8:	d903      	bls.n	80059b2 <_svfiprintf_r+0x1a6>
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d0c6      	beq.n	800593c <_svfiprintf_r+0x130>
 80059ae:	9105      	str	r1, [sp, #20]
 80059b0:	e7c4      	b.n	800593c <_svfiprintf_r+0x130>
 80059b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80059b6:	4604      	mov	r4, r0
 80059b8:	2301      	movs	r3, #1
 80059ba:	e7f0      	b.n	800599e <_svfiprintf_r+0x192>
 80059bc:	ab03      	add	r3, sp, #12
 80059be:	9300      	str	r3, [sp, #0]
 80059c0:	462a      	mov	r2, r5
 80059c2:	4b0f      	ldr	r3, [pc, #60]	@ (8005a00 <_svfiprintf_r+0x1f4>)
 80059c4:	a904      	add	r1, sp, #16
 80059c6:	4638      	mov	r0, r7
 80059c8:	f3af 8000 	nop.w
 80059cc:	1c42      	adds	r2, r0, #1
 80059ce:	4606      	mov	r6, r0
 80059d0:	d1d6      	bne.n	8005980 <_svfiprintf_r+0x174>
 80059d2:	89ab      	ldrh	r3, [r5, #12]
 80059d4:	065b      	lsls	r3, r3, #25
 80059d6:	f53f af2d 	bmi.w	8005834 <_svfiprintf_r+0x28>
 80059da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80059dc:	e72c      	b.n	8005838 <_svfiprintf_r+0x2c>
 80059de:	ab03      	add	r3, sp, #12
 80059e0:	9300      	str	r3, [sp, #0]
 80059e2:	462a      	mov	r2, r5
 80059e4:	4b06      	ldr	r3, [pc, #24]	@ (8005a00 <_svfiprintf_r+0x1f4>)
 80059e6:	a904      	add	r1, sp, #16
 80059e8:	4638      	mov	r0, r7
 80059ea:	f000 f879 	bl	8005ae0 <_printf_i>
 80059ee:	e7ed      	b.n	80059cc <_svfiprintf_r+0x1c0>
 80059f0:	08005f4c 	.word	0x08005f4c
 80059f4:	08005f52 	.word	0x08005f52
 80059f8:	08005f56 	.word	0x08005f56
 80059fc:	00000000 	.word	0x00000000
 8005a00:	08005755 	.word	0x08005755

08005a04 <_printf_common>:
 8005a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a08:	4616      	mov	r6, r2
 8005a0a:	4698      	mov	r8, r3
 8005a0c:	688a      	ldr	r2, [r1, #8]
 8005a0e:	690b      	ldr	r3, [r1, #16]
 8005a10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a14:	4293      	cmp	r3, r2
 8005a16:	bfb8      	it	lt
 8005a18:	4613      	movlt	r3, r2
 8005a1a:	6033      	str	r3, [r6, #0]
 8005a1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005a20:	4607      	mov	r7, r0
 8005a22:	460c      	mov	r4, r1
 8005a24:	b10a      	cbz	r2, 8005a2a <_printf_common+0x26>
 8005a26:	3301      	adds	r3, #1
 8005a28:	6033      	str	r3, [r6, #0]
 8005a2a:	6823      	ldr	r3, [r4, #0]
 8005a2c:	0699      	lsls	r1, r3, #26
 8005a2e:	bf42      	ittt	mi
 8005a30:	6833      	ldrmi	r3, [r6, #0]
 8005a32:	3302      	addmi	r3, #2
 8005a34:	6033      	strmi	r3, [r6, #0]
 8005a36:	6825      	ldr	r5, [r4, #0]
 8005a38:	f015 0506 	ands.w	r5, r5, #6
 8005a3c:	d106      	bne.n	8005a4c <_printf_common+0x48>
 8005a3e:	f104 0a19 	add.w	sl, r4, #25
 8005a42:	68e3      	ldr	r3, [r4, #12]
 8005a44:	6832      	ldr	r2, [r6, #0]
 8005a46:	1a9b      	subs	r3, r3, r2
 8005a48:	42ab      	cmp	r3, r5
 8005a4a:	dc26      	bgt.n	8005a9a <_printf_common+0x96>
 8005a4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005a50:	6822      	ldr	r2, [r4, #0]
 8005a52:	3b00      	subs	r3, #0
 8005a54:	bf18      	it	ne
 8005a56:	2301      	movne	r3, #1
 8005a58:	0692      	lsls	r2, r2, #26
 8005a5a:	d42b      	bmi.n	8005ab4 <_printf_common+0xb0>
 8005a5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005a60:	4641      	mov	r1, r8
 8005a62:	4638      	mov	r0, r7
 8005a64:	47c8      	blx	r9
 8005a66:	3001      	adds	r0, #1
 8005a68:	d01e      	beq.n	8005aa8 <_printf_common+0xa4>
 8005a6a:	6823      	ldr	r3, [r4, #0]
 8005a6c:	6922      	ldr	r2, [r4, #16]
 8005a6e:	f003 0306 	and.w	r3, r3, #6
 8005a72:	2b04      	cmp	r3, #4
 8005a74:	bf02      	ittt	eq
 8005a76:	68e5      	ldreq	r5, [r4, #12]
 8005a78:	6833      	ldreq	r3, [r6, #0]
 8005a7a:	1aed      	subeq	r5, r5, r3
 8005a7c:	68a3      	ldr	r3, [r4, #8]
 8005a7e:	bf0c      	ite	eq
 8005a80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a84:	2500      	movne	r5, #0
 8005a86:	4293      	cmp	r3, r2
 8005a88:	bfc4      	itt	gt
 8005a8a:	1a9b      	subgt	r3, r3, r2
 8005a8c:	18ed      	addgt	r5, r5, r3
 8005a8e:	2600      	movs	r6, #0
 8005a90:	341a      	adds	r4, #26
 8005a92:	42b5      	cmp	r5, r6
 8005a94:	d11a      	bne.n	8005acc <_printf_common+0xc8>
 8005a96:	2000      	movs	r0, #0
 8005a98:	e008      	b.n	8005aac <_printf_common+0xa8>
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	4652      	mov	r2, sl
 8005a9e:	4641      	mov	r1, r8
 8005aa0:	4638      	mov	r0, r7
 8005aa2:	47c8      	blx	r9
 8005aa4:	3001      	adds	r0, #1
 8005aa6:	d103      	bne.n	8005ab0 <_printf_common+0xac>
 8005aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8005aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ab0:	3501      	adds	r5, #1
 8005ab2:	e7c6      	b.n	8005a42 <_printf_common+0x3e>
 8005ab4:	18e1      	adds	r1, r4, r3
 8005ab6:	1c5a      	adds	r2, r3, #1
 8005ab8:	2030      	movs	r0, #48	@ 0x30
 8005aba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005abe:	4422      	add	r2, r4
 8005ac0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005ac4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005ac8:	3302      	adds	r3, #2
 8005aca:	e7c7      	b.n	8005a5c <_printf_common+0x58>
 8005acc:	2301      	movs	r3, #1
 8005ace:	4622      	mov	r2, r4
 8005ad0:	4641      	mov	r1, r8
 8005ad2:	4638      	mov	r0, r7
 8005ad4:	47c8      	blx	r9
 8005ad6:	3001      	adds	r0, #1
 8005ad8:	d0e6      	beq.n	8005aa8 <_printf_common+0xa4>
 8005ada:	3601      	adds	r6, #1
 8005adc:	e7d9      	b.n	8005a92 <_printf_common+0x8e>
	...

08005ae0 <_printf_i>:
 8005ae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ae4:	7e0f      	ldrb	r7, [r1, #24]
 8005ae6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005ae8:	2f78      	cmp	r7, #120	@ 0x78
 8005aea:	4691      	mov	r9, r2
 8005aec:	4680      	mov	r8, r0
 8005aee:	460c      	mov	r4, r1
 8005af0:	469a      	mov	sl, r3
 8005af2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005af6:	d807      	bhi.n	8005b08 <_printf_i+0x28>
 8005af8:	2f62      	cmp	r7, #98	@ 0x62
 8005afa:	d80a      	bhi.n	8005b12 <_printf_i+0x32>
 8005afc:	2f00      	cmp	r7, #0
 8005afe:	f000 80d1 	beq.w	8005ca4 <_printf_i+0x1c4>
 8005b02:	2f58      	cmp	r7, #88	@ 0x58
 8005b04:	f000 80b8 	beq.w	8005c78 <_printf_i+0x198>
 8005b08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005b10:	e03a      	b.n	8005b88 <_printf_i+0xa8>
 8005b12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005b16:	2b15      	cmp	r3, #21
 8005b18:	d8f6      	bhi.n	8005b08 <_printf_i+0x28>
 8005b1a:	a101      	add	r1, pc, #4	@ (adr r1, 8005b20 <_printf_i+0x40>)
 8005b1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b20:	08005b79 	.word	0x08005b79
 8005b24:	08005b8d 	.word	0x08005b8d
 8005b28:	08005b09 	.word	0x08005b09
 8005b2c:	08005b09 	.word	0x08005b09
 8005b30:	08005b09 	.word	0x08005b09
 8005b34:	08005b09 	.word	0x08005b09
 8005b38:	08005b8d 	.word	0x08005b8d
 8005b3c:	08005b09 	.word	0x08005b09
 8005b40:	08005b09 	.word	0x08005b09
 8005b44:	08005b09 	.word	0x08005b09
 8005b48:	08005b09 	.word	0x08005b09
 8005b4c:	08005c8b 	.word	0x08005c8b
 8005b50:	08005bb7 	.word	0x08005bb7
 8005b54:	08005c45 	.word	0x08005c45
 8005b58:	08005b09 	.word	0x08005b09
 8005b5c:	08005b09 	.word	0x08005b09
 8005b60:	08005cad 	.word	0x08005cad
 8005b64:	08005b09 	.word	0x08005b09
 8005b68:	08005bb7 	.word	0x08005bb7
 8005b6c:	08005b09 	.word	0x08005b09
 8005b70:	08005b09 	.word	0x08005b09
 8005b74:	08005c4d 	.word	0x08005c4d
 8005b78:	6833      	ldr	r3, [r6, #0]
 8005b7a:	1d1a      	adds	r2, r3, #4
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	6032      	str	r2, [r6, #0]
 8005b80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e09c      	b.n	8005cc6 <_printf_i+0x1e6>
 8005b8c:	6833      	ldr	r3, [r6, #0]
 8005b8e:	6820      	ldr	r0, [r4, #0]
 8005b90:	1d19      	adds	r1, r3, #4
 8005b92:	6031      	str	r1, [r6, #0]
 8005b94:	0606      	lsls	r6, r0, #24
 8005b96:	d501      	bpl.n	8005b9c <_printf_i+0xbc>
 8005b98:	681d      	ldr	r5, [r3, #0]
 8005b9a:	e003      	b.n	8005ba4 <_printf_i+0xc4>
 8005b9c:	0645      	lsls	r5, r0, #25
 8005b9e:	d5fb      	bpl.n	8005b98 <_printf_i+0xb8>
 8005ba0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005ba4:	2d00      	cmp	r5, #0
 8005ba6:	da03      	bge.n	8005bb0 <_printf_i+0xd0>
 8005ba8:	232d      	movs	r3, #45	@ 0x2d
 8005baa:	426d      	negs	r5, r5
 8005bac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bb0:	4858      	ldr	r0, [pc, #352]	@ (8005d14 <_printf_i+0x234>)
 8005bb2:	230a      	movs	r3, #10
 8005bb4:	e011      	b.n	8005bda <_printf_i+0xfa>
 8005bb6:	6821      	ldr	r1, [r4, #0]
 8005bb8:	6833      	ldr	r3, [r6, #0]
 8005bba:	0608      	lsls	r0, r1, #24
 8005bbc:	f853 5b04 	ldr.w	r5, [r3], #4
 8005bc0:	d402      	bmi.n	8005bc8 <_printf_i+0xe8>
 8005bc2:	0649      	lsls	r1, r1, #25
 8005bc4:	bf48      	it	mi
 8005bc6:	b2ad      	uxthmi	r5, r5
 8005bc8:	2f6f      	cmp	r7, #111	@ 0x6f
 8005bca:	4852      	ldr	r0, [pc, #328]	@ (8005d14 <_printf_i+0x234>)
 8005bcc:	6033      	str	r3, [r6, #0]
 8005bce:	bf14      	ite	ne
 8005bd0:	230a      	movne	r3, #10
 8005bd2:	2308      	moveq	r3, #8
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005bda:	6866      	ldr	r6, [r4, #4]
 8005bdc:	60a6      	str	r6, [r4, #8]
 8005bde:	2e00      	cmp	r6, #0
 8005be0:	db05      	blt.n	8005bee <_printf_i+0x10e>
 8005be2:	6821      	ldr	r1, [r4, #0]
 8005be4:	432e      	orrs	r6, r5
 8005be6:	f021 0104 	bic.w	r1, r1, #4
 8005bea:	6021      	str	r1, [r4, #0]
 8005bec:	d04b      	beq.n	8005c86 <_printf_i+0x1a6>
 8005bee:	4616      	mov	r6, r2
 8005bf0:	fbb5 f1f3 	udiv	r1, r5, r3
 8005bf4:	fb03 5711 	mls	r7, r3, r1, r5
 8005bf8:	5dc7      	ldrb	r7, [r0, r7]
 8005bfa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005bfe:	462f      	mov	r7, r5
 8005c00:	42bb      	cmp	r3, r7
 8005c02:	460d      	mov	r5, r1
 8005c04:	d9f4      	bls.n	8005bf0 <_printf_i+0x110>
 8005c06:	2b08      	cmp	r3, #8
 8005c08:	d10b      	bne.n	8005c22 <_printf_i+0x142>
 8005c0a:	6823      	ldr	r3, [r4, #0]
 8005c0c:	07df      	lsls	r7, r3, #31
 8005c0e:	d508      	bpl.n	8005c22 <_printf_i+0x142>
 8005c10:	6923      	ldr	r3, [r4, #16]
 8005c12:	6861      	ldr	r1, [r4, #4]
 8005c14:	4299      	cmp	r1, r3
 8005c16:	bfde      	ittt	le
 8005c18:	2330      	movle	r3, #48	@ 0x30
 8005c1a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c1e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c22:	1b92      	subs	r2, r2, r6
 8005c24:	6122      	str	r2, [r4, #16]
 8005c26:	f8cd a000 	str.w	sl, [sp]
 8005c2a:	464b      	mov	r3, r9
 8005c2c:	aa03      	add	r2, sp, #12
 8005c2e:	4621      	mov	r1, r4
 8005c30:	4640      	mov	r0, r8
 8005c32:	f7ff fee7 	bl	8005a04 <_printf_common>
 8005c36:	3001      	adds	r0, #1
 8005c38:	d14a      	bne.n	8005cd0 <_printf_i+0x1f0>
 8005c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c3e:	b004      	add	sp, #16
 8005c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c44:	6823      	ldr	r3, [r4, #0]
 8005c46:	f043 0320 	orr.w	r3, r3, #32
 8005c4a:	6023      	str	r3, [r4, #0]
 8005c4c:	4832      	ldr	r0, [pc, #200]	@ (8005d18 <_printf_i+0x238>)
 8005c4e:	2778      	movs	r7, #120	@ 0x78
 8005c50:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005c54:	6823      	ldr	r3, [r4, #0]
 8005c56:	6831      	ldr	r1, [r6, #0]
 8005c58:	061f      	lsls	r7, r3, #24
 8005c5a:	f851 5b04 	ldr.w	r5, [r1], #4
 8005c5e:	d402      	bmi.n	8005c66 <_printf_i+0x186>
 8005c60:	065f      	lsls	r7, r3, #25
 8005c62:	bf48      	it	mi
 8005c64:	b2ad      	uxthmi	r5, r5
 8005c66:	6031      	str	r1, [r6, #0]
 8005c68:	07d9      	lsls	r1, r3, #31
 8005c6a:	bf44      	itt	mi
 8005c6c:	f043 0320 	orrmi.w	r3, r3, #32
 8005c70:	6023      	strmi	r3, [r4, #0]
 8005c72:	b11d      	cbz	r5, 8005c7c <_printf_i+0x19c>
 8005c74:	2310      	movs	r3, #16
 8005c76:	e7ad      	b.n	8005bd4 <_printf_i+0xf4>
 8005c78:	4826      	ldr	r0, [pc, #152]	@ (8005d14 <_printf_i+0x234>)
 8005c7a:	e7e9      	b.n	8005c50 <_printf_i+0x170>
 8005c7c:	6823      	ldr	r3, [r4, #0]
 8005c7e:	f023 0320 	bic.w	r3, r3, #32
 8005c82:	6023      	str	r3, [r4, #0]
 8005c84:	e7f6      	b.n	8005c74 <_printf_i+0x194>
 8005c86:	4616      	mov	r6, r2
 8005c88:	e7bd      	b.n	8005c06 <_printf_i+0x126>
 8005c8a:	6833      	ldr	r3, [r6, #0]
 8005c8c:	6825      	ldr	r5, [r4, #0]
 8005c8e:	6961      	ldr	r1, [r4, #20]
 8005c90:	1d18      	adds	r0, r3, #4
 8005c92:	6030      	str	r0, [r6, #0]
 8005c94:	062e      	lsls	r6, r5, #24
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	d501      	bpl.n	8005c9e <_printf_i+0x1be>
 8005c9a:	6019      	str	r1, [r3, #0]
 8005c9c:	e002      	b.n	8005ca4 <_printf_i+0x1c4>
 8005c9e:	0668      	lsls	r0, r5, #25
 8005ca0:	d5fb      	bpl.n	8005c9a <_printf_i+0x1ba>
 8005ca2:	8019      	strh	r1, [r3, #0]
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	6123      	str	r3, [r4, #16]
 8005ca8:	4616      	mov	r6, r2
 8005caa:	e7bc      	b.n	8005c26 <_printf_i+0x146>
 8005cac:	6833      	ldr	r3, [r6, #0]
 8005cae:	1d1a      	adds	r2, r3, #4
 8005cb0:	6032      	str	r2, [r6, #0]
 8005cb2:	681e      	ldr	r6, [r3, #0]
 8005cb4:	6862      	ldr	r2, [r4, #4]
 8005cb6:	2100      	movs	r1, #0
 8005cb8:	4630      	mov	r0, r6
 8005cba:	f7fa fa69 	bl	8000190 <memchr>
 8005cbe:	b108      	cbz	r0, 8005cc4 <_printf_i+0x1e4>
 8005cc0:	1b80      	subs	r0, r0, r6
 8005cc2:	6060      	str	r0, [r4, #4]
 8005cc4:	6863      	ldr	r3, [r4, #4]
 8005cc6:	6123      	str	r3, [r4, #16]
 8005cc8:	2300      	movs	r3, #0
 8005cca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cce:	e7aa      	b.n	8005c26 <_printf_i+0x146>
 8005cd0:	6923      	ldr	r3, [r4, #16]
 8005cd2:	4632      	mov	r2, r6
 8005cd4:	4649      	mov	r1, r9
 8005cd6:	4640      	mov	r0, r8
 8005cd8:	47d0      	blx	sl
 8005cda:	3001      	adds	r0, #1
 8005cdc:	d0ad      	beq.n	8005c3a <_printf_i+0x15a>
 8005cde:	6823      	ldr	r3, [r4, #0]
 8005ce0:	079b      	lsls	r3, r3, #30
 8005ce2:	d413      	bmi.n	8005d0c <_printf_i+0x22c>
 8005ce4:	68e0      	ldr	r0, [r4, #12]
 8005ce6:	9b03      	ldr	r3, [sp, #12]
 8005ce8:	4298      	cmp	r0, r3
 8005cea:	bfb8      	it	lt
 8005cec:	4618      	movlt	r0, r3
 8005cee:	e7a6      	b.n	8005c3e <_printf_i+0x15e>
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	4632      	mov	r2, r6
 8005cf4:	4649      	mov	r1, r9
 8005cf6:	4640      	mov	r0, r8
 8005cf8:	47d0      	blx	sl
 8005cfa:	3001      	adds	r0, #1
 8005cfc:	d09d      	beq.n	8005c3a <_printf_i+0x15a>
 8005cfe:	3501      	adds	r5, #1
 8005d00:	68e3      	ldr	r3, [r4, #12]
 8005d02:	9903      	ldr	r1, [sp, #12]
 8005d04:	1a5b      	subs	r3, r3, r1
 8005d06:	42ab      	cmp	r3, r5
 8005d08:	dcf2      	bgt.n	8005cf0 <_printf_i+0x210>
 8005d0a:	e7eb      	b.n	8005ce4 <_printf_i+0x204>
 8005d0c:	2500      	movs	r5, #0
 8005d0e:	f104 0619 	add.w	r6, r4, #25
 8005d12:	e7f5      	b.n	8005d00 <_printf_i+0x220>
 8005d14:	08005f5d 	.word	0x08005f5d
 8005d18:	08005f6e 	.word	0x08005f6e

08005d1c <memmove>:
 8005d1c:	4288      	cmp	r0, r1
 8005d1e:	b510      	push	{r4, lr}
 8005d20:	eb01 0402 	add.w	r4, r1, r2
 8005d24:	d902      	bls.n	8005d2c <memmove+0x10>
 8005d26:	4284      	cmp	r4, r0
 8005d28:	4623      	mov	r3, r4
 8005d2a:	d807      	bhi.n	8005d3c <memmove+0x20>
 8005d2c:	1e43      	subs	r3, r0, #1
 8005d2e:	42a1      	cmp	r1, r4
 8005d30:	d008      	beq.n	8005d44 <memmove+0x28>
 8005d32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d3a:	e7f8      	b.n	8005d2e <memmove+0x12>
 8005d3c:	4402      	add	r2, r0
 8005d3e:	4601      	mov	r1, r0
 8005d40:	428a      	cmp	r2, r1
 8005d42:	d100      	bne.n	8005d46 <memmove+0x2a>
 8005d44:	bd10      	pop	{r4, pc}
 8005d46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d4e:	e7f7      	b.n	8005d40 <memmove+0x24>

08005d50 <_sbrk_r>:
 8005d50:	b538      	push	{r3, r4, r5, lr}
 8005d52:	4d06      	ldr	r5, [pc, #24]	@ (8005d6c <_sbrk_r+0x1c>)
 8005d54:	2300      	movs	r3, #0
 8005d56:	4604      	mov	r4, r0
 8005d58:	4608      	mov	r0, r1
 8005d5a:	602b      	str	r3, [r5, #0]
 8005d5c:	f7fa fe04 	bl	8000968 <_sbrk>
 8005d60:	1c43      	adds	r3, r0, #1
 8005d62:	d102      	bne.n	8005d6a <_sbrk_r+0x1a>
 8005d64:	682b      	ldr	r3, [r5, #0]
 8005d66:	b103      	cbz	r3, 8005d6a <_sbrk_r+0x1a>
 8005d68:	6023      	str	r3, [r4, #0]
 8005d6a:	bd38      	pop	{r3, r4, r5, pc}
 8005d6c:	20000574 	.word	0x20000574

08005d70 <memcpy>:
 8005d70:	440a      	add	r2, r1
 8005d72:	4291      	cmp	r1, r2
 8005d74:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d78:	d100      	bne.n	8005d7c <memcpy+0xc>
 8005d7a:	4770      	bx	lr
 8005d7c:	b510      	push	{r4, lr}
 8005d7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d86:	4291      	cmp	r1, r2
 8005d88:	d1f9      	bne.n	8005d7e <memcpy+0xe>
 8005d8a:	bd10      	pop	{r4, pc}

08005d8c <_realloc_r>:
 8005d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d90:	4607      	mov	r7, r0
 8005d92:	4614      	mov	r4, r2
 8005d94:	460d      	mov	r5, r1
 8005d96:	b921      	cbnz	r1, 8005da2 <_realloc_r+0x16>
 8005d98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d9c:	4611      	mov	r1, r2
 8005d9e:	f7ff bc4d 	b.w	800563c <_malloc_r>
 8005da2:	b92a      	cbnz	r2, 8005db0 <_realloc_r+0x24>
 8005da4:	f7ff fbde 	bl	8005564 <_free_r>
 8005da8:	4625      	mov	r5, r4
 8005daa:	4628      	mov	r0, r5
 8005dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005db0:	f000 f81a 	bl	8005de8 <_malloc_usable_size_r>
 8005db4:	4284      	cmp	r4, r0
 8005db6:	4606      	mov	r6, r0
 8005db8:	d802      	bhi.n	8005dc0 <_realloc_r+0x34>
 8005dba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005dbe:	d8f4      	bhi.n	8005daa <_realloc_r+0x1e>
 8005dc0:	4621      	mov	r1, r4
 8005dc2:	4638      	mov	r0, r7
 8005dc4:	f7ff fc3a 	bl	800563c <_malloc_r>
 8005dc8:	4680      	mov	r8, r0
 8005dca:	b908      	cbnz	r0, 8005dd0 <_realloc_r+0x44>
 8005dcc:	4645      	mov	r5, r8
 8005dce:	e7ec      	b.n	8005daa <_realloc_r+0x1e>
 8005dd0:	42b4      	cmp	r4, r6
 8005dd2:	4622      	mov	r2, r4
 8005dd4:	4629      	mov	r1, r5
 8005dd6:	bf28      	it	cs
 8005dd8:	4632      	movcs	r2, r6
 8005dda:	f7ff ffc9 	bl	8005d70 <memcpy>
 8005dde:	4629      	mov	r1, r5
 8005de0:	4638      	mov	r0, r7
 8005de2:	f7ff fbbf 	bl	8005564 <_free_r>
 8005de6:	e7f1      	b.n	8005dcc <_realloc_r+0x40>

08005de8 <_malloc_usable_size_r>:
 8005de8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dec:	1f18      	subs	r0, r3, #4
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	bfbc      	itt	lt
 8005df2:	580b      	ldrlt	r3, [r1, r0]
 8005df4:	18c0      	addlt	r0, r0, r3
 8005df6:	4770      	bx	lr

08005df8 <_init>:
 8005df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dfa:	bf00      	nop
 8005dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dfe:	bc08      	pop	{r3}
 8005e00:	469e      	mov	lr, r3
 8005e02:	4770      	bx	lr

08005e04 <_fini>:
 8005e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e06:	bf00      	nop
 8005e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e0a:	bc08      	pop	{r3}
 8005e0c:	469e      	mov	lr, r3
 8005e0e:	4770      	bx	lr
