
STM32_SubGHz_LoRa_Messenger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007518  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08007658  08007658  00008658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007804  08007804  0000916c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007804  08007804  00008804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800780c  0800780c  0000916c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800780c  0800780c  0000880c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007810  08007810  00008810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000016c  20000000  08007814  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000043c  2000016c  08007980  0000916c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a8  08007980  000095a8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000916c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015cc6  00000000  00000000  00009196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000360c  00000000  00000000  0001ee5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001598  00000000  00000000  00022468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001043  00000000  00000000  00023a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e88e  00000000  00000000  00024a43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015a68  00000000  00000000  000432d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6930  00000000  00000000  00058d39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010f669  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d80  00000000  00000000  0010f6ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0011542c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000016c 	.word	0x2000016c
 800015c:	00000000 	.word	0x00000000
 8000160:	08007640 	.word	0x08007640

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000170 	.word	0x20000170
 800017c:	08007640 	.word	0x08007640

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b988 	b.w	8000558 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	468e      	mov	lr, r1
 8000268:	4604      	mov	r4, r0
 800026a:	4688      	mov	r8, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14a      	bne.n	8000306 <__udivmoddi4+0xa6>
 8000270:	428a      	cmp	r2, r1
 8000272:	4617      	mov	r7, r2
 8000274:	d962      	bls.n	800033c <__udivmoddi4+0xdc>
 8000276:	fab2 f682 	clz	r6, r2
 800027a:	b14e      	cbz	r6, 8000290 <__udivmoddi4+0x30>
 800027c:	f1c6 0320 	rsb	r3, r6, #32
 8000280:	fa01 f806 	lsl.w	r8, r1, r6
 8000284:	fa20 f303 	lsr.w	r3, r0, r3
 8000288:	40b7      	lsls	r7, r6
 800028a:	ea43 0808 	orr.w	r8, r3, r8
 800028e:	40b4      	lsls	r4, r6
 8000290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000294:	fa1f fc87 	uxth.w	ip, r7
 8000298:	fbb8 f1fe 	udiv	r1, r8, lr
 800029c:	0c23      	lsrs	r3, r4, #16
 800029e:	fb0e 8811 	mls	r8, lr, r1, r8
 80002a2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a6:	fb01 f20c 	mul.w	r2, r1, ip
 80002aa:	429a      	cmp	r2, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x62>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002b4:	f080 80ea 	bcs.w	800048c <__udivmoddi4+0x22c>
 80002b8:	429a      	cmp	r2, r3
 80002ba:	f240 80e7 	bls.w	800048c <__udivmoddi4+0x22c>
 80002be:	3902      	subs	r1, #2
 80002c0:	443b      	add	r3, r7
 80002c2:	1a9a      	subs	r2, r3, r2
 80002c4:	b2a3      	uxth	r3, r4
 80002c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002d2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d6:	459c      	cmp	ip, r3
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0x8e>
 80002da:	18fb      	adds	r3, r7, r3
 80002dc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e0:	f080 80d6 	bcs.w	8000490 <__udivmoddi4+0x230>
 80002e4:	459c      	cmp	ip, r3
 80002e6:	f240 80d3 	bls.w	8000490 <__udivmoddi4+0x230>
 80002ea:	443b      	add	r3, r7
 80002ec:	3802      	subs	r0, #2
 80002ee:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f2:	eba3 030c 	sub.w	r3, r3, ip
 80002f6:	2100      	movs	r1, #0
 80002f8:	b11d      	cbz	r5, 8000302 <__udivmoddi4+0xa2>
 80002fa:	40f3      	lsrs	r3, r6
 80002fc:	2200      	movs	r2, #0
 80002fe:	e9c5 3200 	strd	r3, r2, [r5]
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	428b      	cmp	r3, r1
 8000308:	d905      	bls.n	8000316 <__udivmoddi4+0xb6>
 800030a:	b10d      	cbz	r5, 8000310 <__udivmoddi4+0xb0>
 800030c:	e9c5 0100 	strd	r0, r1, [r5]
 8000310:	2100      	movs	r1, #0
 8000312:	4608      	mov	r0, r1
 8000314:	e7f5      	b.n	8000302 <__udivmoddi4+0xa2>
 8000316:	fab3 f183 	clz	r1, r3
 800031a:	2900      	cmp	r1, #0
 800031c:	d146      	bne.n	80003ac <__udivmoddi4+0x14c>
 800031e:	4573      	cmp	r3, lr
 8000320:	d302      	bcc.n	8000328 <__udivmoddi4+0xc8>
 8000322:	4282      	cmp	r2, r0
 8000324:	f200 8105 	bhi.w	8000532 <__udivmoddi4+0x2d2>
 8000328:	1a84      	subs	r4, r0, r2
 800032a:	eb6e 0203 	sbc.w	r2, lr, r3
 800032e:	2001      	movs	r0, #1
 8000330:	4690      	mov	r8, r2
 8000332:	2d00      	cmp	r5, #0
 8000334:	d0e5      	beq.n	8000302 <__udivmoddi4+0xa2>
 8000336:	e9c5 4800 	strd	r4, r8, [r5]
 800033a:	e7e2      	b.n	8000302 <__udivmoddi4+0xa2>
 800033c:	2a00      	cmp	r2, #0
 800033e:	f000 8090 	beq.w	8000462 <__udivmoddi4+0x202>
 8000342:	fab2 f682 	clz	r6, r2
 8000346:	2e00      	cmp	r6, #0
 8000348:	f040 80a4 	bne.w	8000494 <__udivmoddi4+0x234>
 800034c:	1a8a      	subs	r2, r1, r2
 800034e:	0c03      	lsrs	r3, r0, #16
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	b280      	uxth	r0, r0
 8000356:	b2bc      	uxth	r4, r7
 8000358:	2101      	movs	r1, #1
 800035a:	fbb2 fcfe 	udiv	ip, r2, lr
 800035e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000362:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000366:	fb04 f20c 	mul.w	r2, r4, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d907      	bls.n	800037e <__udivmoddi4+0x11e>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000374:	d202      	bcs.n	800037c <__udivmoddi4+0x11c>
 8000376:	429a      	cmp	r2, r3
 8000378:	f200 80e0 	bhi.w	800053c <__udivmoddi4+0x2dc>
 800037c:	46c4      	mov	ip, r8
 800037e:	1a9b      	subs	r3, r3, r2
 8000380:	fbb3 f2fe 	udiv	r2, r3, lr
 8000384:	fb0e 3312 	mls	r3, lr, r2, r3
 8000388:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800038c:	fb02 f404 	mul.w	r4, r2, r4
 8000390:	429c      	cmp	r4, r3
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0x144>
 8000394:	18fb      	adds	r3, r7, r3
 8000396:	f102 30ff 	add.w	r0, r2, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x142>
 800039c:	429c      	cmp	r4, r3
 800039e:	f200 80ca 	bhi.w	8000536 <__udivmoddi4+0x2d6>
 80003a2:	4602      	mov	r2, r0
 80003a4:	1b1b      	subs	r3, r3, r4
 80003a6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003aa:	e7a5      	b.n	80002f8 <__udivmoddi4+0x98>
 80003ac:	f1c1 0620 	rsb	r6, r1, #32
 80003b0:	408b      	lsls	r3, r1
 80003b2:	fa22 f706 	lsr.w	r7, r2, r6
 80003b6:	431f      	orrs	r7, r3
 80003b8:	fa0e f401 	lsl.w	r4, lr, r1
 80003bc:	fa20 f306 	lsr.w	r3, r0, r6
 80003c0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003c4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003c8:	4323      	orrs	r3, r4
 80003ca:	fa00 f801 	lsl.w	r8, r0, r1
 80003ce:	fa1f fc87 	uxth.w	ip, r7
 80003d2:	fbbe f0f9 	udiv	r0, lr, r9
 80003d6:	0c1c      	lsrs	r4, r3, #16
 80003d8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003dc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003e0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ea:	d909      	bls.n	8000400 <__udivmoddi4+0x1a0>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 3aff 	add.w	sl, r0, #4294967295
 80003f2:	f080 809c 	bcs.w	800052e <__udivmoddi4+0x2ce>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f240 8099 	bls.w	800052e <__udivmoddi4+0x2ce>
 80003fc:	3802      	subs	r0, #2
 80003fe:	443c      	add	r4, r7
 8000400:	eba4 040e 	sub.w	r4, r4, lr
 8000404:	fa1f fe83 	uxth.w	lr, r3
 8000408:	fbb4 f3f9 	udiv	r3, r4, r9
 800040c:	fb09 4413 	mls	r4, r9, r3, r4
 8000410:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000414:	fb03 fc0c 	mul.w	ip, r3, ip
 8000418:	45a4      	cmp	ip, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x1ce>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000422:	f080 8082 	bcs.w	800052a <__udivmoddi4+0x2ca>
 8000426:	45a4      	cmp	ip, r4
 8000428:	d97f      	bls.n	800052a <__udivmoddi4+0x2ca>
 800042a:	3b02      	subs	r3, #2
 800042c:	443c      	add	r4, r7
 800042e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000432:	eba4 040c 	sub.w	r4, r4, ip
 8000436:	fba0 ec02 	umull	lr, ip, r0, r2
 800043a:	4564      	cmp	r4, ip
 800043c:	4673      	mov	r3, lr
 800043e:	46e1      	mov	r9, ip
 8000440:	d362      	bcc.n	8000508 <__udivmoddi4+0x2a8>
 8000442:	d05f      	beq.n	8000504 <__udivmoddi4+0x2a4>
 8000444:	b15d      	cbz	r5, 800045e <__udivmoddi4+0x1fe>
 8000446:	ebb8 0203 	subs.w	r2, r8, r3
 800044a:	eb64 0409 	sbc.w	r4, r4, r9
 800044e:	fa04 f606 	lsl.w	r6, r4, r6
 8000452:	fa22 f301 	lsr.w	r3, r2, r1
 8000456:	431e      	orrs	r6, r3
 8000458:	40cc      	lsrs	r4, r1
 800045a:	e9c5 6400 	strd	r6, r4, [r5]
 800045e:	2100      	movs	r1, #0
 8000460:	e74f      	b.n	8000302 <__udivmoddi4+0xa2>
 8000462:	fbb1 fcf2 	udiv	ip, r1, r2
 8000466:	0c01      	lsrs	r1, r0, #16
 8000468:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800046c:	b280      	uxth	r0, r0
 800046e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000472:	463b      	mov	r3, r7
 8000474:	4638      	mov	r0, r7
 8000476:	463c      	mov	r4, r7
 8000478:	46b8      	mov	r8, r7
 800047a:	46be      	mov	lr, r7
 800047c:	2620      	movs	r6, #32
 800047e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000482:	eba2 0208 	sub.w	r2, r2, r8
 8000486:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800048a:	e766      	b.n	800035a <__udivmoddi4+0xfa>
 800048c:	4601      	mov	r1, r0
 800048e:	e718      	b.n	80002c2 <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e72c      	b.n	80002ee <__udivmoddi4+0x8e>
 8000494:	f1c6 0220 	rsb	r2, r6, #32
 8000498:	fa2e f302 	lsr.w	r3, lr, r2
 800049c:	40b7      	lsls	r7, r6
 800049e:	40b1      	lsls	r1, r6
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	430a      	orrs	r2, r1
 80004aa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ae:	b2bc      	uxth	r4, r7
 80004b0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004b4:	0c11      	lsrs	r1, r2, #16
 80004b6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ba:	fb08 f904 	mul.w	r9, r8, r4
 80004be:	40b0      	lsls	r0, r6
 80004c0:	4589      	cmp	r9, r1
 80004c2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004c6:	b280      	uxth	r0, r0
 80004c8:	d93e      	bls.n	8000548 <__udivmoddi4+0x2e8>
 80004ca:	1879      	adds	r1, r7, r1
 80004cc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004d0:	d201      	bcs.n	80004d6 <__udivmoddi4+0x276>
 80004d2:	4589      	cmp	r9, r1
 80004d4:	d81f      	bhi.n	8000516 <__udivmoddi4+0x2b6>
 80004d6:	eba1 0109 	sub.w	r1, r1, r9
 80004da:	fbb1 f9fe 	udiv	r9, r1, lr
 80004de:	fb09 f804 	mul.w	r8, r9, r4
 80004e2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004e6:	b292      	uxth	r2, r2
 80004e8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004ec:	4542      	cmp	r2, r8
 80004ee:	d229      	bcs.n	8000544 <__udivmoddi4+0x2e4>
 80004f0:	18ba      	adds	r2, r7, r2
 80004f2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004f6:	d2c4      	bcs.n	8000482 <__udivmoddi4+0x222>
 80004f8:	4542      	cmp	r2, r8
 80004fa:	d2c2      	bcs.n	8000482 <__udivmoddi4+0x222>
 80004fc:	f1a9 0102 	sub.w	r1, r9, #2
 8000500:	443a      	add	r2, r7
 8000502:	e7be      	b.n	8000482 <__udivmoddi4+0x222>
 8000504:	45f0      	cmp	r8, lr
 8000506:	d29d      	bcs.n	8000444 <__udivmoddi4+0x1e4>
 8000508:	ebbe 0302 	subs.w	r3, lr, r2
 800050c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000510:	3801      	subs	r0, #1
 8000512:	46e1      	mov	r9, ip
 8000514:	e796      	b.n	8000444 <__udivmoddi4+0x1e4>
 8000516:	eba7 0909 	sub.w	r9, r7, r9
 800051a:	4449      	add	r1, r9
 800051c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000520:	fbb1 f9fe 	udiv	r9, r1, lr
 8000524:	fb09 f804 	mul.w	r8, r9, r4
 8000528:	e7db      	b.n	80004e2 <__udivmoddi4+0x282>
 800052a:	4673      	mov	r3, lr
 800052c:	e77f      	b.n	800042e <__udivmoddi4+0x1ce>
 800052e:	4650      	mov	r0, sl
 8000530:	e766      	b.n	8000400 <__udivmoddi4+0x1a0>
 8000532:	4608      	mov	r0, r1
 8000534:	e6fd      	b.n	8000332 <__udivmoddi4+0xd2>
 8000536:	443b      	add	r3, r7
 8000538:	3a02      	subs	r2, #2
 800053a:	e733      	b.n	80003a4 <__udivmoddi4+0x144>
 800053c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000540:	443b      	add	r3, r7
 8000542:	e71c      	b.n	800037e <__udivmoddi4+0x11e>
 8000544:	4649      	mov	r1, r9
 8000546:	e79c      	b.n	8000482 <__udivmoddi4+0x222>
 8000548:	eba1 0109 	sub.w	r1, r1, r9
 800054c:	46c4      	mov	ip, r8
 800054e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000552:	fb09 f804 	mul.w	r8, r9, r4
 8000556:	e7c4      	b.n	80004e2 <__udivmoddi4+0x282>

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000568:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800056a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4313      	orrs	r3, r2
 8000572:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000574:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000578:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4013      	ands	r3, r2
 800057e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000580:	68fb      	ldr	r3, [r7, #12]
}
 8000582:	bf00      	nop
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr

0800058c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a0:	2004      	movs	r0, #4
 80005a2:	f7ff ffdb 	bl	800055c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	2001      	movs	r0, #1
 80005a8:	f7ff ffd8 	bl	800055c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2138      	movs	r1, #56	@ 0x38
 80005b0:	4809      	ldr	r0, [pc, #36]	@ (80005d8 <MX_GPIO_Init+0x4c>)
 80005b2:	f002 fa75 	bl	8002aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 80005b6:	2338      	movs	r3, #56	@ 0x38
 80005b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ba:	2301      	movs	r3, #1
 80005bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005c2:	2303      	movs	r3, #3
 80005c4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	4619      	mov	r1, r3
 80005ca:	4803      	ldr	r0, [pc, #12]	@ (80005d8 <MX_GPIO_Init+0x4c>)
 80005cc:	f002 f908 	bl	80027e0 <HAL_GPIO_Init>

}
 80005d0:	bf00      	nop
 80005d2:	3718      	adds	r7, #24
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	48000800 	.word	0x48000800

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b0c4      	sub	sp, #272	@ 0x110
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f001 fe69 	bl	80022b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f88d 	bl	8000704 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  HAL_Delay(3000);
 80005ea:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80005ee:	f001 fed9 	bl	80023a4 <HAL_Delay>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f2:	f7ff ffcb 	bl	800058c <MX_GPIO_Init>
  MX_SUBGHZ_Init();
 80005f6:	f000 fbbf 	bl	8000d78 <MX_SUBGHZ_Init>
  MX_USART2_UART_Init();
 80005fa:	f000 fc4f 	bl	8000e9c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  BSP_LED_Init(LED_BLUE);	// Connected Master
 80005fe:	2000      	movs	r0, #0
 8000600:	f000 fd28 	bl	8001054 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);	// Connected Slave
 8000604:	2001      	movs	r0, #1
 8000606:	f000 fd25 	bl	8001054 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);	// Disconnected
 800060a:	2002      	movs	r0, #2
 800060c:	f000 fd22 	bl	8001054 <BSP_LED_Init>

  Radio_Init();
 8000610:	f000 f9de 	bl	80009d0 <Radio_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  snprintf((char*)buffer, MAX_BUFFER_SIZE, "\r\nSTM32 SubGHz LoRa Messenger\r\n\r\nPlease Enter an ID: ");
 8000614:	4a30      	ldr	r2, [pc, #192]	@ (80006d8 <main+0xfc>)
 8000616:	21ff      	movs	r1, #255	@ 0xff
 8000618:	4830      	ldr	r0, [pc, #192]	@ (80006dc <main+0x100>)
 800061a:	f006 fb3b 	bl	8006c94 <sniprintf>
  UART_Transmit((char*)buffer);
 800061e:	482f      	ldr	r0, [pc, #188]	@ (80006dc <main+0x100>)
 8000620:	f000 f8c2 	bl	80007a8 <UART_Transmit>
  while(!messageReady) HAL_UART_Receive_IT(&huart2, input, 1);
 8000624:	e004      	b.n	8000630 <main+0x54>
 8000626:	2201      	movs	r2, #1
 8000628:	492d      	ldr	r1, [pc, #180]	@ (80006e0 <main+0x104>)
 800062a:	482e      	ldr	r0, [pc, #184]	@ (80006e4 <main+0x108>)
 800062c:	f004 fb58 	bl	8004ce0 <HAL_UART_Receive_IT>
 8000630:	4b2d      	ldr	r3, [pc, #180]	@ (80006e8 <main+0x10c>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	f083 0301 	eor.w	r3, r3, #1
 8000638:	b2db      	uxtb	r3, r3
 800063a:	2b00      	cmp	r3, #0
 800063c:	d1f3      	bne.n	8000626 <main+0x4a>
  HAL_NVIC_DisableIRQ(USART2_IRQn);
 800063e:	2025      	movs	r0, #37	@ 0x25
 8000640:	f001 fff7 	bl	8002632 <HAL_NVIC_DisableIRQ>
  idLen = snprintf(id, MAX_BUFFER_SIZE, "%s", (char*)output);
 8000644:	4b29      	ldr	r3, [pc, #164]	@ (80006ec <main+0x110>)
 8000646:	4a2a      	ldr	r2, [pc, #168]	@ (80006f0 <main+0x114>)
 8000648:	21ff      	movs	r1, #255	@ 0xff
 800064a:	482a      	ldr	r0, [pc, #168]	@ (80006f4 <main+0x118>)
 800064c:	f006 fb22 	bl	8006c94 <sniprintf>
 8000650:	4603      	mov	r3, r0
 8000652:	4a29      	ldr	r2, [pc, #164]	@ (80006f8 <main+0x11c>)
 8000654:	6013      	str	r3, [r2, #0]
  UART_Transmit(id);
 8000656:	4827      	ldr	r0, [pc, #156]	@ (80006f4 <main+0x118>)
 8000658:	f000 f8a6 	bl	80007a8 <UART_Transmit>
  UART_Transmit("\r\n\r\n");
 800065c:	4827      	ldr	r0, [pc, #156]	@ (80006fc <main+0x120>)
 800065e:	f000 f8a3 	bl	80007a8 <UART_Transmit>
  resetTerminal();
 8000662:	f000 f8b7 	bl	80007d4 <resetTerminal>

  BSP_LED_On(LED_RED); 				// Disconnected at first
 8000666:	2002      	movs	r0, #2
 8000668:	f000 fd2e 	bl	80010c8 <BSP_LED_On>

  SessionContext sessionContext = {
 800066c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000670:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000674:	4618      	mov	r0, r3
 8000676:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800067a:	461a      	mov	r2, r3
 800067c:	2100      	movs	r1, #0
 800067e:	f006 fb61 	bl	8006d44 <memset>
 8000682:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000686:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800068a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000694:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000698:	2264      	movs	r2, #100	@ 0x64
 800069a:	609a      	str	r2, [r3, #8]
		  .state = MASTER,			// Start as Master
		  .rxTimeout = 3000,		// ms
		  .txDelay = 100 			// ms
  };
  start_RX_mode(&sessionContext);	// Start by listening
 800069c:	463b      	mov	r3, r7
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 fa66 	bl	8000b70 <start_RX_mode>

  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006a4:	2025      	movs	r0, #37	@ 0x25
 80006a6:	f001 ffb6 	bl	8002616 <HAL_NVIC_EnableIRQ>
  messageReady = false;
 80006aa:	4b0f      	ldr	r3, [pc, #60]	@ (80006e8 <main+0x10c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]

  while (1)
  {
    /* USER CODE END WHILE */

	currentEvent = NULL;
 80006b0:	4b13      	ldr	r3, [pc, #76]	@ (8000700 <main+0x124>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
	while(!currentEvent) HAL_UART_Receive_IT(&huart2, input, 1);
 80006b6:	e004      	b.n	80006c2 <main+0xe6>
 80006b8:	2201      	movs	r2, #1
 80006ba:	4909      	ldr	r1, [pc, #36]	@ (80006e0 <main+0x104>)
 80006bc:	4809      	ldr	r0, [pc, #36]	@ (80006e4 <main+0x108>)
 80006be:	f004 fb0f 	bl	8004ce0 <HAL_UART_Receive_IT>
 80006c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000700 <main+0x124>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d0f6      	beq.n	80006b8 <main+0xdc>
	currentEvent(&sessionContext);
 80006ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000700 <main+0x124>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	463a      	mov	r2, r7
 80006d0:	4610      	mov	r0, r2
 80006d2:	4798      	blx	r3
	currentEvent = NULL;
 80006d4:	e7ec      	b.n	80006b0 <main+0xd4>
 80006d6:	bf00      	nop
 80006d8:	08007658 	.word	0x08007658
 80006dc:	20000188 	.word	0x20000188
 80006e0:	20000388 	.word	0x20000388
 80006e4:	200003b8 	.word	0x200003b8
 80006e8:	2000038c 	.word	0x2000038c
 80006ec:	20000288 	.word	0x20000288
 80006f0:	08007690 	.word	0x08007690
 80006f4:	20000000 	.word	0x20000000
 80006f8:	20000100 	.word	0x20000100
 80006fc:	08007694 	.word	0x08007694
 8000700:	20000390 	.word	0x20000390

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b09a      	sub	sp, #104	@ 0x68
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 0320 	add.w	r3, r7, #32
 800070e:	2248      	movs	r2, #72	@ 0x48
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f006 fb16 	bl	8006d44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]
 8000726:	615a      	str	r2, [r3, #20]
 8000728:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800072a:	4b1e      	ldr	r3, [pc, #120]	@ (80007a4 <SystemClock_Config+0xa0>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000732:	4a1c      	ldr	r2, [pc, #112]	@ (80007a4 <SystemClock_Config+0xa0>)
 8000734:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000738:	6013      	str	r3, [r2, #0]
 800073a:	4b1a      	ldr	r3, [pc, #104]	@ (80007a4 <SystemClock_Config+0xa0>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000746:	2320      	movs	r3, #32
 8000748:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800074a:	2301      	movs	r3, #1
 800074c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800074e:	2300      	movs	r3, #0
 8000750:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000752:	23b0      	movs	r3, #176	@ 0xb0
 8000754:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000756:	2300      	movs	r3, #0
 8000758:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075a:	f107 0320 	add.w	r3, r7, #32
 800075e:	4618      	mov	r0, r3
 8000760:	f002 fca0 	bl	80030a4 <HAL_RCC_OscConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800076a:	f000 faa0 	bl	8000cae <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800076e:	234f      	movs	r3, #79	@ 0x4f
 8000770:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	2102      	movs	r1, #2
 800078a:	4618      	mov	r0, r3
 800078c:	f003 f80c 	bl	80037a8 <HAL_RCC_ClockConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000796:	f000 fa8a 	bl	8000cae <Error_Handler>
  }
}
 800079a:	bf00      	nop
 800079c:	3768      	adds	r7, #104	@ 0x68
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	58000400 	.word	0x58000400

080007a8 <UART_Transmit>:
 *  APB clocks = AHB = SYSCLK;
 *  flash latency 2.
 *  This is a low-power, simple config suitable for the WL.
 */

void UART_Transmit(const char* string){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)string, strlen(string), HAL_MAX_DELAY);
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f7ff fce5 	bl	8000180 <strlen>
 80007b6:	4603      	mov	r3, r0
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	f04f 33ff 	mov.w	r3, #4294967295
 80007be:	6879      	ldr	r1, [r7, #4]
 80007c0:	4803      	ldr	r0, [pc, #12]	@ (80007d0 <UART_Transmit+0x28>)
 80007c2:	f004 fa06 	bl	8004bd2 <HAL_UART_Transmit>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200003b8 	.word	0x200003b8

080007d4 <resetTerminal>:

void resetTerminal(){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	count = (uint16_t)snprintf((char*)buffer, MAX_BUFFER_SIZE, "%s: ", id);
 80007d8:	4b07      	ldr	r3, [pc, #28]	@ (80007f8 <resetTerminal+0x24>)
 80007da:	4a08      	ldr	r2, [pc, #32]	@ (80007fc <resetTerminal+0x28>)
 80007dc:	21ff      	movs	r1, #255	@ 0xff
 80007de:	4808      	ldr	r0, [pc, #32]	@ (8000800 <resetTerminal+0x2c>)
 80007e0:	f006 fa58 	bl	8006c94 <sniprintf>
 80007e4:	4603      	mov	r3, r0
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <resetTerminal+0x30>)
 80007ea:	801a      	strh	r2, [r3, #0]
	UART_Transmit((char*)buffer);
 80007ec:	4804      	ldr	r0, [pc, #16]	@ (8000800 <resetTerminal+0x2c>)
 80007ee:	f7ff ffdb 	bl	80007a8 <UART_Transmit>
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000000 	.word	0x20000000
 80007fc:	0800769c 	.word	0x0800769c
 8000800:	20000188 	.word	0x20000188
 8000804:	2000038a 	.word	0x2000038a

08000808 <interruptTerminal>:

void interruptTerminal(const char* interruption){
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	for(uint16_t x = 0; x < count; x++) UART_Transmit("\b \b");
 8000810:	2300      	movs	r3, #0
 8000812:	81fb      	strh	r3, [r7, #14]
 8000814:	e005      	b.n	8000822 <interruptTerminal+0x1a>
 8000816:	4810      	ldr	r0, [pc, #64]	@ (8000858 <interruptTerminal+0x50>)
 8000818:	f7ff ffc6 	bl	80007a8 <UART_Transmit>
 800081c:	89fb      	ldrh	r3, [r7, #14]
 800081e:	3301      	adds	r3, #1
 8000820:	81fb      	strh	r3, [r7, #14]
 8000822:	4b0e      	ldr	r3, [pc, #56]	@ (800085c <interruptTerminal+0x54>)
 8000824:	881b      	ldrh	r3, [r3, #0]
 8000826:	89fa      	ldrh	r2, [r7, #14]
 8000828:	429a      	cmp	r2, r3
 800082a:	d3f4      	bcc.n	8000816 <interruptTerminal+0xe>
	UART_Transmit("\r\n");
 800082c:	480c      	ldr	r0, [pc, #48]	@ (8000860 <interruptTerminal+0x58>)
 800082e:	f7ff ffbb 	bl	80007a8 <UART_Transmit>
	UART_Transmit(interruption);
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f7ff ffb8 	bl	80007a8 <UART_Transmit>
	UART_Transmit("\r\n\r\n");
 8000838:	480a      	ldr	r0, [pc, #40]	@ (8000864 <interruptTerminal+0x5c>)
 800083a:	f7ff ffb5 	bl	80007a8 <UART_Transmit>
	HAL_UART_Transmit(&huart2, buffer, count, HAL_MAX_DELAY);
 800083e:	4b07      	ldr	r3, [pc, #28]	@ (800085c <interruptTerminal+0x54>)
 8000840:	881a      	ldrh	r2, [r3, #0]
 8000842:	f04f 33ff 	mov.w	r3, #4294967295
 8000846:	4908      	ldr	r1, [pc, #32]	@ (8000868 <interruptTerminal+0x60>)
 8000848:	4808      	ldr	r0, [pc, #32]	@ (800086c <interruptTerminal+0x64>)
 800084a:	f004 f9c2 	bl	8004bd2 <HAL_UART_Transmit>
}
 800084e:	bf00      	nop
 8000850:	3710      	adds	r7, #16
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	080076a4 	.word	0x080076a4
 800085c:	2000038a 	.word	0x2000038a
 8000860:	080076a8 	.word	0x080076a8
 8000864:	08007694 	.word	0x08007694
 8000868:	20000188 	.word	0x20000188
 800086c:	200003b8 	.word	0x200003b8

08000870 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	switch(input[0]){
 8000878:	4b23      	ldr	r3, [pc, #140]	@ (8000908 <HAL_UART_RxCpltCallback+0x98>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2b08      	cmp	r3, #8
 800087e:	d015      	beq.n	80008ac <HAL_UART_RxCpltCallback+0x3c>
 8000880:	2b0d      	cmp	r3, #13
 8000882:	d125      	bne.n	80008d0 <HAL_UART_RxCpltCallback+0x60>
		case 0xd:
			UART_Transmit("\r\n");
 8000884:	4821      	ldr	r0, [pc, #132]	@ (800090c <HAL_UART_RxCpltCallback+0x9c>)
 8000886:	f7ff ff8f 	bl	80007a8 <UART_Transmit>
			sprintf((char*)output, "%s", (char*)buffer);
 800088a:	4a21      	ldr	r2, [pc, #132]	@ (8000910 <HAL_UART_RxCpltCallback+0xa0>)
 800088c:	4921      	ldr	r1, [pc, #132]	@ (8000914 <HAL_UART_RxCpltCallback+0xa4>)
 800088e:	4822      	ldr	r0, [pc, #136]	@ (8000918 <HAL_UART_RxCpltCallback+0xa8>)
 8000890:	f006 fa36 	bl	8006d00 <siprintf>
			output[count] = '\0';
 8000894:	4b21      	ldr	r3, [pc, #132]	@ (800091c <HAL_UART_RxCpltCallback+0xac>)
 8000896:	881b      	ldrh	r3, [r3, #0]
 8000898:	461a      	mov	r2, r3
 800089a:	4b1f      	ldr	r3, [pc, #124]	@ (8000918 <HAL_UART_RxCpltCallback+0xa8>)
 800089c:	2100      	movs	r1, #0
 800089e:	5499      	strb	r1, [r3, r2]
			messageReady = true;
 80008a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000920 <HAL_UART_RxCpltCallback+0xb0>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	701a      	strb	r2, [r3, #0]
			resetTerminal();
 80008a6:	f7ff ff95 	bl	80007d4 <resetTerminal>
			break;
 80008aa:	e029      	b.n	8000900 <HAL_UART_RxCpltCallback+0x90>

		case 0x8:
			if(count > (idLen + 2)){
 80008ac:	4b1b      	ldr	r3, [pc, #108]	@ (800091c <HAL_UART_RxCpltCallback+0xac>)
 80008ae:	881b      	ldrh	r3, [r3, #0]
 80008b0:	461a      	mov	r2, r3
 80008b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000924 <HAL_UART_RxCpltCallback+0xb4>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	3302      	adds	r3, #2
 80008b8:	429a      	cmp	r2, r3
 80008ba:	dd20      	ble.n	80008fe <HAL_UART_RxCpltCallback+0x8e>
				count--;
 80008bc:	4b17      	ldr	r3, [pc, #92]	@ (800091c <HAL_UART_RxCpltCallback+0xac>)
 80008be:	881b      	ldrh	r3, [r3, #0]
 80008c0:	3b01      	subs	r3, #1
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	4b15      	ldr	r3, [pc, #84]	@ (800091c <HAL_UART_RxCpltCallback+0xac>)
 80008c6:	801a      	strh	r2, [r3, #0]
				UART_Transmit("\b \b");
 80008c8:	4817      	ldr	r0, [pc, #92]	@ (8000928 <HAL_UART_RxCpltCallback+0xb8>)
 80008ca:	f7ff ff6d 	bl	80007a8 <UART_Transmit>
			}
			break;
 80008ce:	e016      	b.n	80008fe <HAL_UART_RxCpltCallback+0x8e>

		default:
			if(count < MAX_BUFFER_SIZE){
 80008d0:	4b12      	ldr	r3, [pc, #72]	@ (800091c <HAL_UART_RxCpltCallback+0xac>)
 80008d2:	881b      	ldrh	r3, [r3, #0]
 80008d4:	2bfe      	cmp	r3, #254	@ 0xfe
 80008d6:	d813      	bhi.n	8000900 <HAL_UART_RxCpltCallback+0x90>
				buffer[count++] = input[0];
 80008d8:	4b10      	ldr	r3, [pc, #64]	@ (800091c <HAL_UART_RxCpltCallback+0xac>)
 80008da:	881b      	ldrh	r3, [r3, #0]
 80008dc:	1c5a      	adds	r2, r3, #1
 80008de:	b291      	uxth	r1, r2
 80008e0:	4a0e      	ldr	r2, [pc, #56]	@ (800091c <HAL_UART_RxCpltCallback+0xac>)
 80008e2:	8011      	strh	r1, [r2, #0]
 80008e4:	461a      	mov	r2, r3
 80008e6:	4b08      	ldr	r3, [pc, #32]	@ (8000908 <HAL_UART_RxCpltCallback+0x98>)
 80008e8:	7819      	ldrb	r1, [r3, #0]
 80008ea:	4b09      	ldr	r3, [pc, #36]	@ (8000910 <HAL_UART_RxCpltCallback+0xa0>)
 80008ec:	5499      	strb	r1, [r3, r2]
				HAL_UART_Transmit(huart, input, 1, HAL_MAX_DELAY);
 80008ee:	f04f 33ff 	mov.w	r3, #4294967295
 80008f2:	2201      	movs	r2, #1
 80008f4:	4904      	ldr	r1, [pc, #16]	@ (8000908 <HAL_UART_RxCpltCallback+0x98>)
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f004 f96b 	bl	8004bd2 <HAL_UART_Transmit>
			}
	}
}
 80008fc:	e000      	b.n	8000900 <HAL_UART_RxCpltCallback+0x90>
			break;
 80008fe:	bf00      	nop
}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000388 	.word	0x20000388
 800090c:	080076a8 	.word	0x080076a8
 8000910:	20000188 	.word	0x20000188
 8000914:	08007690 	.word	0x08007690
 8000918:	20000288 	.word	0x20000288
 800091c:	2000038a 	.word	0x2000038a
 8000920:	2000038c 	.word	0x2000038c
 8000924:	20000100 	.word	0x20000100
 8000928:	080076a4 	.word	0x080076a4

0800092c <Radio_DIO_IRq_Callback_Handler>:

void Radio_DIO_IRq_Callback_Handler(const RadioIrqMasks_t radioIRq){
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	80fb      	strh	r3, [r7, #6]
	switch(radioIRq){
 8000936:	88fb      	ldrh	r3, [r7, #6]
 8000938:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800093c:	d016      	beq.n	800096c <Radio_DIO_IRq_Callback_Handler+0x40>
 800093e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000942:	dc31      	bgt.n	80009a8 <Radio_DIO_IRq_Callback_Handler+0x7c>
 8000944:	2b40      	cmp	r3, #64	@ 0x40
 8000946:	d02b      	beq.n	80009a0 <Radio_DIO_IRq_Callback_Handler+0x74>
 8000948:	2b40      	cmp	r3, #64	@ 0x40
 800094a:	dc2d      	bgt.n	80009a8 <Radio_DIO_IRq_Callback_Handler+0x7c>
 800094c:	2b01      	cmp	r3, #1
 800094e:	d002      	beq.n	8000956 <Radio_DIO_IRq_Callback_Handler+0x2a>
 8000950:	2b02      	cmp	r3, #2
 8000952:	d004      	beq.n	800095e <Radio_DIO_IRq_Callback_Handler+0x32>

		case IRQ_CRC_ERROR: // Rx Error
			interruptTerminal("RX CRC ERROR");

			break;
		default: break;
 8000954:	e028      	b.n	80009a8 <Radio_DIO_IRq_Callback_Handler+0x7c>
			currentEvent = start_RX_mode;
 8000956:	4b17      	ldr	r3, [pc, #92]	@ (80009b4 <Radio_DIO_IRq_Callback_Handler+0x88>)
 8000958:	4a17      	ldr	r2, [pc, #92]	@ (80009b8 <Radio_DIO_IRq_Callback_Handler+0x8c>)
 800095a:	601a      	str	r2, [r3, #0]
			break;
 800095c:	e025      	b.n	80009aa <Radio_DIO_IRq_Callback_Handler+0x7e>
			BSP_LED_Off(LED_RED);
 800095e:	2002      	movs	r0, #2
 8000960:	f000 fbcc 	bl	80010fc <BSP_LED_Off>
			currentEvent = RX_done_event;
 8000964:	4b13      	ldr	r3, [pc, #76]	@ (80009b4 <Radio_DIO_IRq_Callback_Handler+0x88>)
 8000966:	4a15      	ldr	r2, [pc, #84]	@ (80009bc <Radio_DIO_IRq_Callback_Handler+0x90>)
 8000968:	601a      	str	r2, [r3, #0]
			break;
 800096a:	e01e      	b.n	80009aa <Radio_DIO_IRq_Callback_Handler+0x7e>
			switch(SUBGRF_GetOperatingMode()){
 800096c:	f000 fd54 	bl	8001418 <SUBGRF_GetOperatingMode>
 8000970:	4603      	mov	r3, r0
 8000972:	2b04      	cmp	r3, #4
 8000974:	d002      	beq.n	800097c <Radio_DIO_IRq_Callback_Handler+0x50>
 8000976:	2b05      	cmp	r3, #5
 8000978:	d004      	beq.n	8000984 <Radio_DIO_IRq_Callback_Handler+0x58>
				default:break;
 800097a:	e010      	b.n	800099e <Radio_DIO_IRq_Callback_Handler+0x72>
					interruptTerminal("TX TIMEOUT");
 800097c:	4810      	ldr	r0, [pc, #64]	@ (80009c0 <Radio_DIO_IRq_Callback_Handler+0x94>)
 800097e:	f7ff ff43 	bl	8000808 <interruptTerminal>
					break;
 8000982:	e00c      	b.n	800099e <Radio_DIO_IRq_Callback_Handler+0x72>
					BSP_LED_On(LED_RED);
 8000984:	2002      	movs	r0, #2
 8000986:	f000 fb9f 	bl	80010c8 <BSP_LED_On>
					BSP_LED_Off(LED_BLUE|LED_GREEN);
 800098a:	2001      	movs	r0, #1
 800098c:	f000 fbb6 	bl	80010fc <BSP_LED_Off>
					interruptTerminal("RX TIMEOUT");
 8000990:	480c      	ldr	r0, [pc, #48]	@ (80009c4 <Radio_DIO_IRq_Callback_Handler+0x98>)
 8000992:	f7ff ff39 	bl	8000808 <interruptTerminal>
					currentEvent = RX_error_event;
 8000996:	4b07      	ldr	r3, [pc, #28]	@ (80009b4 <Radio_DIO_IRq_Callback_Handler+0x88>)
 8000998:	4a0b      	ldr	r2, [pc, #44]	@ (80009c8 <Radio_DIO_IRq_Callback_Handler+0x9c>)
 800099a:	601a      	str	r2, [r3, #0]
					break;
 800099c:	bf00      	nop
			break;
 800099e:	e004      	b.n	80009aa <Radio_DIO_IRq_Callback_Handler+0x7e>
			interruptTerminal("RX CRC ERROR");
 80009a0:	480a      	ldr	r0, [pc, #40]	@ (80009cc <Radio_DIO_IRq_Callback_Handler+0xa0>)
 80009a2:	f7ff ff31 	bl	8000808 <interruptTerminal>
			break;
 80009a6:	e000      	b.n	80009aa <Radio_DIO_IRq_Callback_Handler+0x7e>
		default: break;
 80009a8:	bf00      	nop
	}
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000390 	.word	0x20000390
 80009b8:	08000b71 	.word	0x08000b71
 80009bc:	08000be3 	.word	0x08000be3
 80009c0:	080076ac 	.word	0x080076ac
 80009c4:	080076b8 	.word	0x080076b8
 80009c8:	08000bbd 	.word	0x08000bbd
 80009cc:	080076c4 	.word	0x080076c4

080009d0 <Radio_Init>:

/** Initialize the Sub-GHz radio and dependent hardware.
  */
void Radio_Init(){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b088      	sub	sp, #32
 80009d4:	af00      	add	r7, sp, #0
	// Initialize the hardware (SPI bus, TCXO control, RF switch) or the SUBGHZ (SX126x) and registers the IRQ callback.
	SUBGRF_Init(Radio_DIO_IRq_Callback_Handler);
 80009d6:	4830      	ldr	r0, [pc, #192]	@ (8000a98 <Radio_Init+0xc8>)
 80009d8:	f000 fcd6 	bl	8001388 <SUBGRF_Init>

	// Use DCDC converter if `DCDC_ENABLE` is defined in radio_conf.h
	// "By default, the SMPS clock detection is disabled and must be enabled before enabling the SMPS." (6.1 in RM0453)
	SUBGRF_WriteRegister(SUBGHZ_SMPSC0R, (SUBGRF_ReadRegister(SUBGHZ_SMPSC0R) | SMPS_CLK_DET_ENABLE));
 80009dc:	f640 1016 	movw	r0, #2326	@ 0x916
 80009e0:	f001 fa8e 	bl	8001f00 <SUBGRF_ReadRegister>
 80009e4:	4603      	mov	r3, r0
 80009e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	4619      	mov	r1, r3
 80009ee:	f640 1016 	movw	r0, #2326	@ 0x916
 80009f2:	f001 fa71 	bl	8001ed8 <SUBGRF_WriteRegister>
	SUBGRF_SetRegulatorMode(); // use DCDC if configured in radio_conf.h
 80009f6:	f000 fe0a 	bl	800160e <SUBGRF_SetRegulatorMode>

	// Use the whole 256-byte buffer for both TX and RX (starting at 0)
	SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 80009fa:	2100      	movs	r1, #0
 80009fc:	2000      	movs	r0, #0
 80009fe:	f001 f9d5 	bl	8001dac <SUBGRF_SetBufferBaseAddress>

	SUBGRF_SetRfFrequency(RF_FREQ);
 8000a02:	4826      	ldr	r0, [pc, #152]	@ (8000a9c <Radio_Init+0xcc>)
 8000a04:	f000 ff2e 	bl	8001864 <SUBGRF_SetRfFrequency>
	SUBGRF_SetRfTxPower(TX_POWER);
 8000a08:	200e      	movs	r0, #14
 8000a0a:	f001 fb5f 	bl	80020cc <SUBGRF_SetRfTxPower>
	SUBGRF_SetStopRxTimerOnPreambleDetect(false);
 8000a0e:	2000      	movs	r0, #0
 8000a10:	f000 fdee 	bl	80015f0 <SUBGRF_SetStopRxTimerOnPreambleDetect>

	SUBGRF_SetPacketType(PACKET_TYPE_LORA);
 8000a14:	2001      	movs	r0, #1
 8000a16:	f000 ff6b 	bl	80018f0 <SUBGRF_SetPacketType>

	// Sets LoRa private syncword (not the public 0x34). Ensures you only talk to your nodes (not public network).
	SUBGRF_WriteRegister(REG_LR_SYNCWORD, (LORA_MAC_PRIVATE_SYNCWORD >> 8) & 0xFF);
 8000a1a:	2114      	movs	r1, #20
 8000a1c:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8000a20:	f001 fa5a 	bl	8001ed8 <SUBGRF_WriteRegister>
	SUBGRF_WriteRegister(REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF);
 8000a24:	2124      	movs	r1, #36	@ 0x24
 8000a26:	f240 7041 	movw	r0, #1857	@ 0x741
 8000a2a:	f001 fa55 	bl	8001ed8 <SUBGRF_WriteRegister>

	// Applies SF/BW/CR. Low data rate optimize off (OK for SF7/BW125).
	ModulationParams_t modulationParams;
	modulationParams.PacketType = PACKET_TYPE_LORA;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	713b      	strb	r3, [r7, #4]
	modulationParams.Params.LoRa.Bandwidth = LORA_BANDWIDTH;
 8000a32:	2304      	movs	r3, #4
 8000a34:	777b      	strb	r3, [r7, #29]
	modulationParams.Params.LoRa.CodingRate = LORA_CODING_RATE;
 8000a36:	2301      	movs	r3, #1
 8000a38:	77bb      	strb	r3, [r7, #30]
	modulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	77fb      	strb	r3, [r7, #31]
	modulationParams.Params.LoRa.SpreadingFactor = LORA_SPREADING_FACTOR;
 8000a3e:	2307      	movs	r3, #7
 8000a40:	773b      	strb	r3, [r7, #28]
	SUBGRF_SetModulationParams(&modulationParams);
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	4618      	mov	r0, r3
 8000a46:	f001 f847 	bl	8001ad8 <SUBGRF_SetModulationParams>

	// CRC on, variable length, normal IQ, long RX FIFO length.
	packetParams.PacketType = PACKET_TYPE_LORA;
 8000a4a:	4b15      	ldr	r3, [pc, #84]	@ (8000aa0 <Radio_Init+0xd0>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	701a      	strb	r2, [r3, #0]
	packetParams.Params.LoRa.CrcMode = LORA_CRC_ON;
 8000a50:	4b13      	ldr	r3, [pc, #76]	@ (8000aa0 <Radio_Init+0xd0>)
 8000a52:	2201      	movs	r2, #1
 8000a54:	749a      	strb	r2, [r3, #18]
	packetParams.Params.LoRa.HeaderType = LORA_PACKET_VARIABLE_LENGTH;
 8000a56:	4b12      	ldr	r3, [pc, #72]	@ (8000aa0 <Radio_Init+0xd0>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	741a      	strb	r2, [r3, #16]
	packetParams.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 8000a5c:	4b10      	ldr	r3, [pc, #64]	@ (8000aa0 <Radio_Init+0xd0>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	74da      	strb	r2, [r3, #19]
	packetParams.Params.LoRa.PayloadLength = 0xFF;
 8000a62:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa0 <Radio_Init+0xd0>)
 8000a64:	22ff      	movs	r2, #255	@ 0xff
 8000a66:	745a      	strb	r2, [r3, #17]
	packetParams.Params.LoRa.PreambleLength = LORA_PREAMBLE_LENGTH;
 8000a68:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa0 <Radio_Init+0xd0>)
 8000a6a:	2208      	movs	r2, #8
 8000a6c:	81da      	strh	r2, [r3, #14]
	SUBGRF_SetPacketParams(&packetParams);
 8000a6e:	480c      	ldr	r0, [pc, #48]	@ (8000aa0 <Radio_Init+0xd0>)
 8000a70:	f001 f900 	bl	8001c74 <SUBGRF_SetPacketParams>

	// WORKAROUND - Optimizing the Inverted IQ Operation, see DS_SX1261-2_V1.2 datasheet chapter 15.4
	// RegIqPolaritySetup @address 0x0736
	// SX126x errata: improves IQ handling (safe even with normal IQ).
	SUBGRF_WriteRegister(0x0736, SUBGRF_ReadRegister(0x0736) | (1 << 2));
 8000a74:	f240 7036 	movw	r0, #1846	@ 0x736
 8000a78:	f001 fa42 	bl	8001f00 <SUBGRF_ReadRegister>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	f043 0304 	orr.w	r3, r3, #4
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	4619      	mov	r1, r3
 8000a86:	f240 7036 	movw	r0, #1846	@ 0x736
 8000a8a:	f001 fa25 	bl	8001ed8 <SUBGRF_WriteRegister>
}
 8000a8e:	bf00      	nop
 8000a90:	3720      	adds	r7, #32
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	0800092d 	.word	0x0800092d
 8000a9c:	33bca100 	.word	0x33bca100
 8000aa0:	20000394 	.word	0x20000394

08000aa4 <SUBGRF_Transmit>:

void SUBGRF_Transmit(uint8_t* payload, const uint8_t size){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	460b      	mov	r3, r1
 8000aae:	70fb      	strb	r3, [r7, #3]
	uint16_t mask = IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT;
 8000ab0:	f240 2301 	movw	r3, #513	@ 0x201
 8000ab4:	81fb      	strh	r3, [r7, #14]
	SUBGRF_SetDioIrqParams(mask, mask, IRQ_RADIO_NONE, IRQ_RADIO_NONE);
 8000ab6:	89f9      	ldrh	r1, [r7, #14]
 8000ab8:	89f8      	ldrh	r0, [r7, #14]
 8000aba:	2300      	movs	r3, #0
 8000abc:	2200      	movs	r2, #0
 8000abe:	f000 fe75 	bl	80017ac <SUBGRF_SetDioIrqParams>
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	f001 fad9 	bl	800207c <SUBGRF_SetSwitch>
	// Workaround 5.1 in DS.SX1261-2.W.APP (before each packet transmission)
	// SX126x errata 5.1: set bit before each TX
	SUBGRF_WriteRegister(0x0889, (SUBGRF_ReadRegister(0x0889) | 0x04));
 8000aca:	f640 0089 	movw	r0, #2185	@ 0x889
 8000ace:	f001 fa17 	bl	8001f00 <SUBGRF_ReadRegister>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	f043 0304 	orr.w	r3, r3, #4
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	4619      	mov	r1, r3
 8000adc:	f640 0089 	movw	r0, #2185	@ 0x889
 8000ae0:	f001 f9fa 	bl	8001ed8 <SUBGRF_WriteRegister>
	packetParams.Params.LoRa.PayloadLength = size;
 8000ae4:	4a07      	ldr	r2, [pc, #28]	@ (8000b04 <SUBGRF_Transmit+0x60>)
 8000ae6:	78fb      	ldrb	r3, [r7, #3]
 8000ae8:	7453      	strb	r3, [r2, #17]
	SUBGRF_SetPacketParams(&packetParams);
 8000aea:	4806      	ldr	r0, [pc, #24]	@ (8000b04 <SUBGRF_Transmit+0x60>)
 8000aec:	f001 f8c2 	bl	8001c74 <SUBGRF_SetPacketParams>
	SUBGRF_SendPayload(payload, size, 0);
 8000af0:	78fb      	ldrb	r3, [r7, #3]
 8000af2:	2200      	movs	r2, #0
 8000af4:	4619      	mov	r1, r3
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f000 fcca 	bl	8001490 <SUBGRF_SendPayload>
}
 8000afc:	bf00      	nop
 8000afe:	3710      	adds	r7, #16
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000394 	.word	0x20000394

08000b08 <start_TX_mode>:

void start_TX_mode(SessionContext *sessionContext)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	HAL_Delay(sessionContext->txDelay);						// Delay to allow one to be fixed as Master and the other as slave
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f001 fc45 	bl	80023a4 <HAL_Delay>

	if(messageReady){										// Send Message if ready instead of \\\PING / \\\PONG
 8000b1a:	4b11      	ldr	r3, [pc, #68]	@ (8000b60 <start_TX_mode+0x58>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d00e      	beq.n	8000b40 <start_TX_mode+0x38>
		SUBGRF_Transmit(output, strlen((char*)output) + 1);	// + 1 for last null character
 8000b22:	4810      	ldr	r0, [pc, #64]	@ (8000b64 <start_TX_mode+0x5c>)
 8000b24:	f7ff fb2c 	bl	8000180 <strlen>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	4619      	mov	r1, r3
 8000b32:	480c      	ldr	r0, [pc, #48]	@ (8000b64 <start_TX_mode+0x5c>)
 8000b34:	f7ff ffb6 	bl	8000aa4 <SUBGRF_Transmit>
		messageReady = false;
 8000b38:	4b09      	ldr	r3, [pc, #36]	@ (8000b60 <start_TX_mode+0x58>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	701a      	strb	r2, [r3, #0]
	}else{
		SUBGRF_Transmit((uint8_t*)((sessionContext->state == MASTER)?"\\\\\\PING":"\\\\\\PONG"), 7);
	}
}
 8000b3e:	e00a      	b.n	8000b56 <start_TX_mode+0x4e>
		SUBGRF_Transmit((uint8_t*)((sessionContext->state == MASTER)?"\\\\\\PING":"\\\\\\PONG"), 7);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d101      	bne.n	8000b4c <start_TX_mode+0x44>
 8000b48:	4b07      	ldr	r3, [pc, #28]	@ (8000b68 <start_TX_mode+0x60>)
 8000b4a:	e000      	b.n	8000b4e <start_TX_mode+0x46>
 8000b4c:	4b07      	ldr	r3, [pc, #28]	@ (8000b6c <start_TX_mode+0x64>)
 8000b4e:	2107      	movs	r1, #7
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff ffa7 	bl	8000aa4 <SUBGRF_Transmit>
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	2000038c 	.word	0x2000038c
 8000b64:	20000288 	.word	0x20000288
 8000b68:	080076d4 	.word	0x080076d4
 8000b6c:	080076dc 	.word	0x080076dc

08000b70 <start_RX_mode>:

void start_RX_mode(SessionContext *sessionContext){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
	sessionContext->subState = RX;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	705a      	strb	r2, [r3, #1]

	uint16_t mask = IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR;
 8000b7e:	f240 2362 	movw	r3, #610	@ 0x262
 8000b82:	81fb      	strh	r3, [r7, #14]
	// Arm radio IRQs for RX done, timeout, CRC error
	SUBGRF_SetDioIrqParams(mask, mask, IRQ_RADIO_NONE, IRQ_RADIO_NONE);
 8000b84:	89f9      	ldrh	r1, [r7, #14]
 8000b86:	89f8      	ldrh	r0, [r7, #14]
 8000b88:	2300      	movs	r3, #0
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f000 fe0e 	bl	80017ac <SUBGRF_SetDioIrqParams>
	// Set RF switch to RX path on low-power PA path
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 8000b90:	2100      	movs	r1, #0
 8000b92:	2001      	movs	r0, #1
 8000b94:	f001 fa72 	bl	800207c <SUBGRF_SetSwitch>

	packetParams.Params.LoRa.PayloadLength = 0xFF;	// Maximum Length
 8000b98:	4b07      	ldr	r3, [pc, #28]	@ (8000bb8 <start_RX_mode+0x48>)
 8000b9a:	22ff      	movs	r2, #255	@ 0xff
 8000b9c:	745a      	strb	r2, [r3, #17]
	SUBGRF_SetPacketParams(&packetParams);
 8000b9e:	4806      	ldr	r0, [pc, #24]	@ (8000bb8 <start_RX_mode+0x48>)
 8000ba0:	f001 f868 	bl	8001c74 <SUBGRF_SetPacketParams>
	// SetRx(timeout): SX126x timeout units are 15.625 µs (1/64 ms). Multiplying ms by 64 = << 6.
	SUBGRF_SetRx(sessionContext->rxTimeout << 6);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	019b      	lsls	r3, r3, #6
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 fd00 	bl	80015b0 <SUBGRF_SetRx>
}
 8000bb0:	bf00      	nop
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000394 	.word	0x20000394

08000bbc <RX_error_event>:

/** MASTER/RX CRC/header error → treat like “no valid frame” and attempt TX "PING" after random backoff.
  * SLAVE/RX → simply re-enter RX.
  */
void RX_error_event(SessionContext *sessionContext){
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	if(sessionContext->state == MASTER){
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d103      	bne.n	8000bd4 <RX_error_event+0x18>
		start_TX_mode(sessionContext);
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f7ff ff9b 	bl	8000b08 <start_TX_mode>
	}else{
		start_RX_mode(sessionContext);
	}
}
 8000bd2:	e002      	b.n	8000bda <RX_error_event+0x1e>
		start_RX_mode(sessionContext);
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f7ff ffcb 	bl	8000b70 <start_RX_mode>
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <RX_done_event>:

void RX_done_event(SessionContext *sessionContext){
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b088      	sub	sp, #32
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
	Led_TypeDef desiredLED, undesiredLED;
	char desiredChar;
	PacketStatus_t packetStatus;

	// Workaround 15.3 in DS.SX1261-2.W.APP (following RX w/ timeout sequence fix)
	SUBGRF_WriteRegister(0x0920, 0x00);
 8000bea:	2100      	movs	r1, #0
 8000bec:	f44f 6012 	mov.w	r0, #2336	@ 0x920
 8000bf0:	f001 f972 	bl	8001ed8 <SUBGRF_WriteRegister>
	SUBGRF_WriteRegister(0x0944, (SUBGRF_ReadRegister(0x0944) | 0x02));
 8000bf4:	f640 1044 	movw	r0, #2372	@ 0x944
 8000bf8:	f001 f982 	bl	8001f00 <SUBGRF_ReadRegister>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	f043 0302 	orr.w	r3, r3, #2
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	4619      	mov	r1, r3
 8000c06:	f640 1044 	movw	r0, #2372	@ 0x944
 8000c0a:	f001 f965 	bl	8001ed8 <SUBGRF_WriteRegister>

	SUBGRF_GetPayload((uint8_t *)sessionContext->rxBuffer, &sessionContext->rxLen, 0xFF);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f103 000d 	add.w	r0, r3, #13
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	330c      	adds	r3, #12
 8000c18:	22ff      	movs	r2, #255	@ 0xff
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	f000 fc16 	bl	800144c <SUBGRF_GetPayload>
	SUBGRF_GetPacketStatus(&packetStatus);
 8000c20:	f107 0308 	add.w	r3, r7, #8
 8000c24:	4618      	mov	r0, r3
 8000c26:	f001 f905 	bl	8001e34 <SUBGRF_GetPacketStatus>

	if(sessionContext->state == MASTER){
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d106      	bne.n	8000c40 <RX_done_event+0x5e>
		desiredChar = 'O';
 8000c32:	234f      	movs	r3, #79	@ 0x4f
 8000c34:	777b      	strb	r3, [r7, #29]
		desiredLED = LED_BLUE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	77fb      	strb	r3, [r7, #31]
		undesiredLED = LED_GREEN;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	77bb      	strb	r3, [r7, #30]
 8000c3e:	e005      	b.n	8000c4c <RX_done_event+0x6a>
	}else{
		desiredChar = 'I';
 8000c40:	2349      	movs	r3, #73	@ 0x49
 8000c42:	777b      	strb	r3, [r7, #29]
		desiredLED = LED_GREEN;
 8000c44:	2301      	movs	r3, #1
 8000c46:	77fb      	strb	r3, [r7, #31]
		undesiredLED = LED_BLUE;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	77bb      	strb	r3, [r7, #30]
	}

	if ((sessionContext->rxBuffer[0] == '\\') && (sessionContext->rxBuffer[1] == '\\') && (sessionContext->rxBuffer[2] == '\\')){
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	7b5b      	ldrb	r3, [r3, #13]
 8000c50:	2b5c      	cmp	r3, #92	@ 0x5c
 8000c52:	d11f      	bne.n	8000c94 <RX_done_event+0xb2>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	7b9b      	ldrb	r3, [r3, #14]
 8000c58:	2b5c      	cmp	r3, #92	@ 0x5c
 8000c5a:	d11b      	bne.n	8000c94 <RX_done_event+0xb2>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	7bdb      	ldrb	r3, [r3, #15]
 8000c60:	2b5c      	cmp	r3, #92	@ 0x5c
 8000c62:	d117      	bne.n	8000c94 <RX_done_event+0xb2>
		if(sessionContext->rxBuffer[4] == desiredChar){
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	7c5b      	ldrb	r3, [r3, #17]
 8000c68:	7f7a      	ldrb	r2, [r7, #29]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d10b      	bne.n	8000c86 <RX_done_event+0xa4>
			BSP_LED_Off(undesiredLED);
 8000c6e:	7fbb      	ldrb	r3, [r7, #30]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 fa43 	bl	80010fc <BSP_LED_Off>
			BSP_LED_Toggle(desiredLED);
 8000c76:	7ffb      	ldrb	r3, [r7, #31]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f000 fa59 	bl	8001130 <BSP_LED_Toggle>
			start_TX_mode(sessionContext);
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f7ff ff42 	bl	8000b08 <start_TX_mode>
		if(sessionContext->rxBuffer[4] == desiredChar){
 8000c84:	e00f      	b.n	8000ca6 <RX_done_event+0xc4>
		}else{
			sessionContext->state = SLAVE;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2201      	movs	r2, #1
 8000c8a:	701a      	strb	r2, [r3, #0]
			start_RX_mode(sessionContext);
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f7ff ff6f 	bl	8000b70 <start_RX_mode>
		if(sessionContext->rxBuffer[4] == desiredChar){
 8000c92:	e008      	b.n	8000ca6 <RX_done_event+0xc4>
		}
	}else{
		interruptTerminal(sessionContext->rxBuffer);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	330d      	adds	r3, #13
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fdb5 	bl	8000808 <interruptTerminal>
		start_RX_mode(sessionContext);
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f7ff ff66 	bl	8000b70 <start_RX_mode>
	}
}
 8000ca4:	bf00      	nop
 8000ca6:	bf00      	nop
 8000ca8:	3720      	adds	r7, #32
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb2:	b672      	cpsid	i
}
 8000cb4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb6:	bf00      	nop
 8000cb8:	e7fd      	b.n	8000cb6 <Error_Handler+0x8>

08000cba <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr

08000cc6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cca:	bf00      	nop
 8000ccc:	e7fd      	b.n	8000cca <NMI_Handler+0x4>

08000cce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd2:	bf00      	nop
 8000cd4:	e7fd      	b.n	8000cd2 <HardFault_Handler+0x4>

08000cd6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cda:	bf00      	nop
 8000cdc:	e7fd      	b.n	8000cda <MemManage_Handler+0x4>

08000cde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce2:	bf00      	nop
 8000ce4:	e7fd      	b.n	8000ce2 <BusFault_Handler+0x4>

08000ce6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cea:	bf00      	nop
 8000cec:	e7fd      	b.n	8000cea <UsageFault_Handler+0x4>

08000cee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bc80      	pop	{r7}
 8000cf8:	4770      	bx	lr

08000cfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bc80      	pop	{r7}
 8000d04:	4770      	bx	lr

08000d06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr

08000d12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d16:	f001 fb29 	bl	800236c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
	...

08000d20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d24:	4802      	ldr	r0, [pc, #8]	@ (8000d30 <USART2_IRQHandler+0x10>)
 8000d26:	f004 f827 	bl	8004d78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	200003b8 	.word	0x200003b8

08000d34 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000d38:	4802      	ldr	r0, [pc, #8]	@ (8000d44 <SUBGHZ_Radio_IRQHandler+0x10>)
 8000d3a:	f003 fd2b 	bl	8004794 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200003a8 	.word	0x200003a8

08000d48 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000d50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d54:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000d56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000d60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d64:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
}
 8000d6e:	bf00      	nop
 8000d70:	3714      	adds	r7, #20
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr

08000d78 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <MX_SUBGHZ_Init+0x20>)
 8000d7e:	2208      	movs	r2, #8
 8000d80:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8000d82:	4805      	ldr	r0, [pc, #20]	@ (8000d98 <MX_SUBGHZ_Init+0x20>)
 8000d84:	f003 fa84 	bl	8004290 <HAL_SUBGHZ_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8000d8e:	f7ff ff8e 	bl	8000cae <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	200003a8 	.word	0x200003a8

08000d9c <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000da4:	2001      	movs	r0, #1
 8000da6:	f7ff ffcf 	bl	8000d48 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2100      	movs	r1, #0
 8000dae:	2032      	movs	r0, #50	@ 0x32
 8000db0:	f001 fc17 	bl	80025e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000db4:	2032      	movs	r0, #50	@ 0x32
 8000db6:	f001 fc2e 	bl	8002616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
	...

08000dc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dcc:	4a14      	ldr	r2, [pc, #80]	@ (8000e20 <_sbrk+0x5c>)
 8000dce:	4b15      	ldr	r3, [pc, #84]	@ (8000e24 <_sbrk+0x60>)
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd8:	4b13      	ldr	r3, [pc, #76]	@ (8000e28 <_sbrk+0x64>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d102      	bne.n	8000de6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de0:	4b11      	ldr	r3, [pc, #68]	@ (8000e28 <_sbrk+0x64>)
 8000de2:	4a12      	ldr	r2, [pc, #72]	@ (8000e2c <_sbrk+0x68>)
 8000de4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000de6:	4b10      	ldr	r3, [pc, #64]	@ (8000e28 <_sbrk+0x64>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d207      	bcs.n	8000e04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df4:	f005 ffae 	bl	8006d54 <__errno>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000e02:	e009      	b.n	8000e18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e04:	4b08      	ldr	r3, [pc, #32]	@ (8000e28 <_sbrk+0x64>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e0a:	4b07      	ldr	r3, [pc, #28]	@ (8000e28 <_sbrk+0x64>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4413      	add	r3, r2
 8000e12:	4a05      	ldr	r2, [pc, #20]	@ (8000e28 <_sbrk+0x64>)
 8000e14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e16:	68fb      	ldr	r3, [r7, #12]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20010000 	.word	0x20010000
 8000e24:	00000400 	.word	0x00000400
 8000e28:	200003b4 	.word	0x200003b4
 8000e2c:	200005a8 	.word	0x200005a8

08000e30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr

08000e3c <LL_AHB2_GRP1_EnableClock>:
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e48:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e58:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e60:	68fb      	ldr	r3, [r7, #12]
}
 8000e62:	bf00      	nop
 8000e64:	3714      	adds	r7, #20
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr

08000e6c <LL_APB1_GRP1_EnableClock>:
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000e74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e78:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000e7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000e84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e88:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e90:	68fb      	ldr	r3, [r7, #12]
}
 8000e92:	bf00      	nop
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr

08000e9c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ea0:	4b22      	ldr	r3, [pc, #136]	@ (8000f2c <MX_USART2_UART_Init+0x90>)
 8000ea2:	4a23      	ldr	r2, [pc, #140]	@ (8000f30 <MX_USART2_UART_Init+0x94>)
 8000ea4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ea6:	4b21      	ldr	r3, [pc, #132]	@ (8000f2c <MX_USART2_UART_Init+0x90>)
 8000ea8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000eac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eae:	4b1f      	ldr	r3, [pc, #124]	@ (8000f2c <MX_USART2_UART_Init+0x90>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000eb4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f2c <MX_USART2_UART_Init+0x90>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eba:	4b1c      	ldr	r3, [pc, #112]	@ (8000f2c <MX_USART2_UART_Init+0x90>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f2c <MX_USART2_UART_Init+0x90>)
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ec6:	4b19      	ldr	r3, [pc, #100]	@ (8000f2c <MX_USART2_UART_Init+0x90>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ecc:	4b17      	ldr	r3, [pc, #92]	@ (8000f2c <MX_USART2_UART_Init+0x90>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ed2:	4b16      	ldr	r3, [pc, #88]	@ (8000f2c <MX_USART2_UART_Init+0x90>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ed8:	4b14      	ldr	r3, [pc, #80]	@ (8000f2c <MX_USART2_UART_Init+0x90>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ede:	4b13      	ldr	r3, [pc, #76]	@ (8000f2c <MX_USART2_UART_Init+0x90>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ee4:	4811      	ldr	r0, [pc, #68]	@ (8000f2c <MX_USART2_UART_Init+0x90>)
 8000ee6:	f003 fe24 	bl	8004b32 <HAL_UART_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ef0:	f7ff fedd 	bl	8000cae <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	480d      	ldr	r0, [pc, #52]	@ (8000f2c <MX_USART2_UART_Init+0x90>)
 8000ef8:	f005 fde7 	bl	8006aca <HAL_UARTEx_SetTxFifoThreshold>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000f02:	f7ff fed4 	bl	8000cae <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f06:	2100      	movs	r1, #0
 8000f08:	4808      	ldr	r0, [pc, #32]	@ (8000f2c <MX_USART2_UART_Init+0x90>)
 8000f0a:	f005 fe1c 	bl	8006b46 <HAL_UARTEx_SetRxFifoThreshold>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000f14:	f7ff fecb 	bl	8000cae <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000f18:	4804      	ldr	r0, [pc, #16]	@ (8000f2c <MX_USART2_UART_Init+0x90>)
 8000f1a:	f005 fd9e 	bl	8006a5a <HAL_UARTEx_DisableFifoMode>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000f24:	f7ff fec3 	bl	8000cae <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	200003b8 	.word	0x200003b8
 8000f30:	40004400 	.word	0x40004400

08000f34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b096      	sub	sp, #88	@ 0x58
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	2238      	movs	r2, #56	@ 0x38
 8000f52:	2100      	movs	r1, #0
 8000f54:	4618      	mov	r0, r3
 8000f56:	f005 fef5 	bl	8006d44 <memset>
  if(uartHandle->Instance==USART2)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a1b      	ldr	r2, [pc, #108]	@ (8000fcc <HAL_UART_MspInit+0x98>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d12e      	bne.n	8000fc2 <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f64:	2302      	movs	r3, #2
 8000f66:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f68:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8000f6c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f6e:	f107 030c 	add.w	r3, r7, #12
 8000f72:	4618      	mov	r0, r3
 8000f74:	f002 ffd8 	bl	8003f28 <HAL_RCCEx_PeriphCLKConfig>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f7e:	f7ff fe96 	bl	8000cae <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f82:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000f86:	f7ff ff71 	bl	8000e6c <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	f7ff ff56 	bl	8000e3c <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000f90:	230c      	movs	r3, #12
 8000f92:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fa0:	2307      	movs	r3, #7
 8000fa2:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fae:	f001 fc17 	bl	80027e0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	2025      	movs	r0, #37	@ 0x25
 8000fb8:	f001 fb13 	bl	80025e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fbc:	2025      	movs	r0, #37	@ 0x25
 8000fbe:	f001 fb2a 	bl	8002616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	3758      	adds	r7, #88	@ 0x58
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40004400 	.word	0x40004400

08000fd0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fd0:	480d      	ldr	r0, [pc, #52]	@ (8001008 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fd2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fd4:	f7ff ff2c 	bl	8000e30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fd8:	480c      	ldr	r0, [pc, #48]	@ (800100c <LoopForever+0x6>)
  ldr r1, =_edata
 8000fda:	490d      	ldr	r1, [pc, #52]	@ (8001010 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fdc:	4a0d      	ldr	r2, [pc, #52]	@ (8001014 <LoopForever+0xe>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe0:	e002      	b.n	8000fe8 <LoopCopyDataInit>

08000fe2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fe2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fe6:	3304      	adds	r3, #4

08000fe8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fec:	d3f9      	bcc.n	8000fe2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fee:	4a0a      	ldr	r2, [pc, #40]	@ (8001018 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ff0:	4c0a      	ldr	r4, [pc, #40]	@ (800101c <LoopForever+0x16>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff4:	e001      	b.n	8000ffa <LoopFillZerobss>

08000ff6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ff6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff8:	3204      	adds	r2, #4

08000ffa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ffa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ffc:	d3fb      	bcc.n	8000ff6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ffe:	f005 feaf 	bl	8006d60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001002:	f7ff faeb 	bl	80005dc <main>

08001006 <LoopForever>:

LoopForever:
    b LoopForever
 8001006:	e7fe      	b.n	8001006 <LoopForever>
  ldr   r0, =_estack
 8001008:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800100c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001010:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8001014:	08007814 	.word	0x08007814
  ldr r2, =_sbss
 8001018:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 800101c:	200005a8 	.word	0x200005a8

08001020 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001020:	e7fe      	b.n	8001020 <ADC_IRQHandler>

08001022 <LL_AHB2_GRP1_EnableClock>:
{
 8001022:	b480      	push	{r7}
 8001024:	b085      	sub	sp, #20
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800102a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800102e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001030:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4313      	orrs	r3, r2
 8001038:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800103a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800103e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4013      	ands	r3, r2
 8001044:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001046:	68fb      	ldr	r3, [r7, #12]
}
 8001048:	bf00      	nop
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr
	...

08001054 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 800105e:	f107 030c 	add.w	r3, r7, #12
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
 800106a:	60da      	str	r2, [r3, #12]
 800106c:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800106e:	2002      	movs	r0, #2
 8001070:	f7ff ffd7 	bl	8001022 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	4a12      	ldr	r2, [pc, #72]	@ (80010c0 <BSP_LED_Init+0x6c>)
 8001078:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800107c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 800107e:	2301      	movs	r3, #1
 8001080:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001086:	2302      	movs	r3, #2
 8001088:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	4a0d      	ldr	r2, [pc, #52]	@ (80010c4 <BSP_LED_Init+0x70>)
 800108e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001092:	f107 020c 	add.w	r2, r7, #12
 8001096:	4611      	mov	r1, r2
 8001098:	4618      	mov	r0, r3
 800109a:	f001 fba1 	bl	80027e0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	4a08      	ldr	r2, [pc, #32]	@ (80010c4 <BSP_LED_Init+0x70>)
 80010a2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	4a05      	ldr	r2, [pc, #20]	@ (80010c0 <BSP_LED_Init+0x6c>)
 80010aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010ae:	2200      	movs	r2, #0
 80010b0:	4619      	mov	r1, r3
 80010b2:	f001 fcf5 	bl	8002aa0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80010b6:	2300      	movs	r3, #0
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3720      	adds	r7, #32
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	080077a0 	.word	0x080077a0
 80010c4:	20000108 	.word	0x20000108

080010c8 <BSP_LED_On>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	4a07      	ldr	r2, [pc, #28]	@ (80010f4 <BSP_LED_On+0x2c>)
 80010d6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	4a06      	ldr	r2, [pc, #24]	@ (80010f8 <BSP_LED_On+0x30>)
 80010de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010e2:	2201      	movs	r2, #1
 80010e4:	4619      	mov	r1, r3
 80010e6:	f001 fcdb 	bl	8002aa0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000108 	.word	0x20000108
 80010f8:	080077a0 	.word	0x080077a0

080010fc <BSP_LED_Off>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	4a07      	ldr	r2, [pc, #28]	@ (8001128 <BSP_LED_Off+0x2c>)
 800110a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	4a06      	ldr	r2, [pc, #24]	@ (800112c <BSP_LED_Off+0x30>)
 8001112:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001116:	2200      	movs	r2, #0
 8001118:	4619      	mov	r1, r3
 800111a:	f001 fcc1 	bl	8002aa0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800111e:	2300      	movs	r3, #0
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000108 	.word	0x20000108
 800112c:	080077a0 	.word	0x080077a0

08001130 <BSP_LED_Toggle>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	4a07      	ldr	r2, [pc, #28]	@ (800115c <BSP_LED_Toggle+0x2c>)
 800113e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	4906      	ldr	r1, [pc, #24]	@ (8001160 <BSP_LED_Toggle+0x30>)
 8001146:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800114a:	4619      	mov	r1, r3
 800114c:	4610      	mov	r0, r2
 800114e:	f001 fcbe 	bl	8002ace <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8001152:	2300      	movs	r3, #0
}
 8001154:	4618      	mov	r0, r3
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000108 	.word	0x20000108
 8001160:	080077a0 	.word	0x080077a0

08001164 <LL_AHB2_GRP1_EnableClock>:
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800116c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001170:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001172:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4313      	orrs	r3, r2
 800117a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800117c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001180:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4013      	ands	r3, r2
 8001186:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001188:	68fb      	ldr	r3, [r7, #12]
}
 800118a:	bf00      	nop
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr

08001194 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 80011a8:	2004      	movs	r0, #4
 80011aa:	f7ff ffdb 	bl	8001164 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 80011ae:	2310      	movs	r3, #16
 80011b0:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80011b2:	2301      	movs	r3, #1
 80011b4:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ba:	2303      	movs	r3, #3
 80011bc:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	4619      	mov	r1, r3
 80011c2:	4812      	ldr	r0, [pc, #72]	@ (800120c <BSP_RADIO_Init+0x78>)
 80011c4:	f001 fb0c 	bl	80027e0 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80011c8:	2320      	movs	r3, #32
 80011ca:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	4619      	mov	r1, r3
 80011d0:	480e      	ldr	r0, [pc, #56]	@ (800120c <BSP_RADIO_Init+0x78>)
 80011d2:	f001 fb05 	bl	80027e0 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 80011d6:	2308      	movs	r3, #8
 80011d8:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	4619      	mov	r1, r3
 80011de:	480b      	ldr	r0, [pc, #44]	@ (800120c <BSP_RADIO_Init+0x78>)
 80011e0:	f001 fafe 	bl	80027e0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80011e4:	2200      	movs	r2, #0
 80011e6:	2120      	movs	r1, #32
 80011e8:	4808      	ldr	r0, [pc, #32]	@ (800120c <BSP_RADIO_Init+0x78>)
 80011ea:	f001 fc59 	bl	8002aa0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80011ee:	2200      	movs	r2, #0
 80011f0:	2110      	movs	r1, #16
 80011f2:	4806      	ldr	r0, [pc, #24]	@ (800120c <BSP_RADIO_Init+0x78>)
 80011f4:	f001 fc54 	bl	8002aa0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 80011f8:	2200      	movs	r2, #0
 80011fa:	2108      	movs	r1, #8
 80011fc:	4803      	ldr	r0, [pc, #12]	@ (800120c <BSP_RADIO_Init+0x78>)
 80011fe:	f001 fc4f 	bl	8002aa0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001202:	2300      	movs	r3, #0
}
 8001204:	4618      	mov	r0, r3
 8001206:	3718      	adds	r7, #24
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	48000800 	.word	0x48000800

08001210 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	2b03      	cmp	r3, #3
 800121e:	d84b      	bhi.n	80012b8 <BSP_RADIO_ConfigRFSwitch+0xa8>
 8001220:	a201      	add	r2, pc, #4	@ (adr r2, 8001228 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8001222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001226:	bf00      	nop
 8001228:	08001239 	.word	0x08001239
 800122c:	08001259 	.word	0x08001259
 8001230:	08001279 	.word	0x08001279
 8001234:	08001299 	.word	0x08001299
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8001238:	2200      	movs	r2, #0
 800123a:	2108      	movs	r1, #8
 800123c:	4821      	ldr	r0, [pc, #132]	@ (80012c4 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800123e:	f001 fc2f 	bl	8002aa0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	2110      	movs	r1, #16
 8001246:	481f      	ldr	r0, [pc, #124]	@ (80012c4 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001248:	f001 fc2a 	bl	8002aa0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800124c:	2200      	movs	r2, #0
 800124e:	2120      	movs	r1, #32
 8001250:	481c      	ldr	r0, [pc, #112]	@ (80012c4 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001252:	f001 fc25 	bl	8002aa0 <HAL_GPIO_WritePin>
      break;      
 8001256:	e030      	b.n	80012ba <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001258:	2201      	movs	r2, #1
 800125a:	2108      	movs	r1, #8
 800125c:	4819      	ldr	r0, [pc, #100]	@ (80012c4 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800125e:	f001 fc1f 	bl	8002aa0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001262:	2201      	movs	r2, #1
 8001264:	2110      	movs	r1, #16
 8001266:	4817      	ldr	r0, [pc, #92]	@ (80012c4 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001268:	f001 fc1a 	bl	8002aa0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 800126c:	2200      	movs	r2, #0
 800126e:	2120      	movs	r1, #32
 8001270:	4814      	ldr	r0, [pc, #80]	@ (80012c4 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001272:	f001 fc15 	bl	8002aa0 <HAL_GPIO_WritePin>
      break;
 8001276:	e020      	b.n	80012ba <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001278:	2201      	movs	r2, #1
 800127a:	2108      	movs	r1, #8
 800127c:	4811      	ldr	r0, [pc, #68]	@ (80012c4 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800127e:	f001 fc0f 	bl	8002aa0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001282:	2201      	movs	r2, #1
 8001284:	2110      	movs	r1, #16
 8001286:	480f      	ldr	r0, [pc, #60]	@ (80012c4 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001288:	f001 fc0a 	bl	8002aa0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800128c:	2201      	movs	r2, #1
 800128e:	2120      	movs	r1, #32
 8001290:	480c      	ldr	r0, [pc, #48]	@ (80012c4 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001292:	f001 fc05 	bl	8002aa0 <HAL_GPIO_WritePin>
      break;
 8001296:	e010      	b.n	80012ba <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001298:	2201      	movs	r2, #1
 800129a:	2108      	movs	r1, #8
 800129c:	4809      	ldr	r0, [pc, #36]	@ (80012c4 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800129e:	f001 fbff 	bl	8002aa0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80012a2:	2200      	movs	r2, #0
 80012a4:	2110      	movs	r1, #16
 80012a6:	4807      	ldr	r0, [pc, #28]	@ (80012c4 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80012a8:	f001 fbfa 	bl	8002aa0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80012ac:	2201      	movs	r2, #1
 80012ae:	2120      	movs	r1, #32
 80012b0:	4804      	ldr	r0, [pc, #16]	@ (80012c4 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80012b2:	f001 fbf5 	bl	8002aa0 <HAL_GPIO_WritePin>
      break;
 80012b6:	e000      	b.n	80012ba <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    default:
      break;    
 80012b8:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 80012ba:	2300      	movs	r3, #0
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	48000800 	.word	0x48000800

080012c8 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr

080012d6 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 80012da:	2301      	movs	r3, #1
}
 80012dc:	4618      	mov	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr

080012e4 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 80012e8:	2301      	movs	r3, #1
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr

080012f2 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b085      	sub	sp, #20
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d102      	bne.n	8001308 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8001302:	230f      	movs	r3, #15
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	e001      	b.n	800130c <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8001308:	2316      	movs	r3, #22
 800130a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800130c:	68fb      	ldr	r3, [r7, #12]
}
 800130e:	4618      	mov	r0, r3
 8001310:	3714      	adds	r7, #20
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr

08001318 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800131c:	f7ff ff3a 	bl	8001194 <BSP_RADIO_Init>
 8001320:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001322:	4618      	mov	r0, r3
 8001324:	bd80      	pop	{r7, pc}

08001326 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	4603      	mov	r3, r0
 800132e:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff ff6c 	bl	8001210 <BSP_RADIO_ConfigRFSwitch>
 8001338:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 8001346:	f7ff ffbf 	bl	80012c8 <BSP_RADIO_GetTxConfig>
 800134a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800134c:	4618      	mov	r0, r3
 800134e:	bd80      	pop	{r7, pc}

08001350 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8001354:	f7ff ffbf 	bl	80012d6 <BSP_RADIO_IsTCXO>
 8001358:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800135a:	4618      	mov	r0, r3
 800135c:	bd80      	pop	{r7, pc}

0800135e <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 8001362:	f7ff ffbf 	bl	80012e4 <BSP_RADIO_IsDCDC>
 8001366:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001368:	4618      	mov	r0, r3
 800136a:	bd80      	pop	{r7, pc}

0800136c <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff ffba 	bl	80012f2 <BSP_RADIO_GetRFOMaxPowerConfig>
 800137e:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8001380:	4618      	mov	r0, r3
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d002      	beq.n	800139c <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8001396:	4a1d      	ldr	r2, [pc, #116]	@ (800140c <SUBGRF_Init+0x84>)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 800139c:	f7ff fcec 	bl	8000d78 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80013a0:	2002      	movs	r0, #2
 80013a2:	f000 ff67 	bl	8002274 <Radio_SMPS_Set>

    ImageCalibrated = false;
 80013a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001410 <SUBGRF_Init+0x88>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 80013ac:	2000      	movs	r0, #0
 80013ae:	f000 f8c3 	bl	8001538 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 80013b2:	f7ff ffcd 	bl	8001350 <RBI_IsTCXO>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d10e      	bne.n	80013da <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 80013bc:	2140      	movs	r1, #64	@ 0x40
 80013be:	2001      	movs	r0, #1
 80013c0:	f000 fa2e 	bl	8001820 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 80013c4:	2100      	movs	r1, #0
 80013c6:	f640 1011 	movw	r0, #2321	@ 0x911
 80013ca:	f000 fd85 	bl	8001ed8 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 80013ce:	237f      	movs	r3, #127	@ 0x7f
 80013d0:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 80013d2:	7b38      	ldrb	r0, [r7, #12]
 80013d4:	f000 f932 	bl	800163c <SUBGRF_Calibrate>
 80013d8:	e009      	b.n	80013ee <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80013da:	2120      	movs	r1, #32
 80013dc:	f640 1011 	movw	r0, #2321	@ 0x911
 80013e0:	f000 fd7a 	bl	8001ed8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80013e4:	2120      	movs	r1, #32
 80013e6:	f640 1012 	movw	r0, #2322	@ 0x912
 80013ea:	f000 fd75 	bl	8001ed8 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80013ee:	210e      	movs	r1, #14
 80013f0:	f640 101f 	movw	r0, #2335	@ 0x91f
 80013f4:	f000 fd70 	bl	8001ed8 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 80013f8:	f7ff ff8e 	bl	8001318 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 80013fc:	4b05      	ldr	r3, [pc, #20]	@ (8001414 <SUBGRF_Init+0x8c>)
 80013fe:	2201      	movs	r2, #1
 8001400:	701a      	strb	r2, [r3, #0]
}
 8001402:	bf00      	nop
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000458 	.word	0x20000458
 8001410:	20000454 	.word	0x20000454
 8001414:	2000044c 	.word	0x2000044c

08001418 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
    return OperatingMode;
 800141c:	4b02      	ldr	r3, [pc, #8]	@ (8001428 <SUBGRF_GetOperatingMode+0x10>)
 800141e:	781b      	ldrb	r3, [r3, #0]
}
 8001420:	4618      	mov	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr
 8001428:	2000044c 	.word	0x2000044c

0800142c <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8001438:	78fb      	ldrb	r3, [r7, #3]
 800143a:	461a      	mov	r2, r3
 800143c:	6879      	ldr	r1, [r7, #4]
 800143e:	2000      	movs	r0, #0
 8001440:	f000 fd94 	bl	8001f6c <SUBGRF_WriteBuffer>
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	4613      	mov	r3, r2
 8001458:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800145e:	f107 0317 	add.w	r3, r7, #23
 8001462:	4619      	mov	r1, r3
 8001464:	68b8      	ldr	r0, [r7, #8]
 8001466:	f000 fcb9 	bl	8001ddc <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	79fa      	ldrb	r2, [r7, #7]
 8001470:	429a      	cmp	r2, r3
 8001472:	d201      	bcs.n	8001478 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8001474:	2301      	movs	r3, #1
 8001476:	e007      	b.n	8001488 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8001478:	7df8      	ldrb	r0, [r7, #23]
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	461a      	mov	r2, r3
 8001480:	68f9      	ldr	r1, [r7, #12]
 8001482:	f000 fd95 	bl	8001fb0 <SUBGRF_ReadBuffer>

    return 0;
 8001486:	2300      	movs	r3, #0
}
 8001488:	4618      	mov	r0, r3
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	460b      	mov	r3, r1
 800149a:	607a      	str	r2, [r7, #4]
 800149c:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 800149e:	7afb      	ldrb	r3, [r7, #11]
 80014a0:	4619      	mov	r1, r3
 80014a2:	68f8      	ldr	r0, [r7, #12]
 80014a4:	f7ff ffc2 	bl	800142c <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f000 f861 	bl	8001570 <SUBGRF_SetTx>
}
 80014ae:	bf00      	nop
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <SUBGRF_SetCrcSeed>:
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
    return 0;
}

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b084      	sub	sp, #16
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	4603      	mov	r3, r0
 80014be:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80014c0:	88fb      	ldrh	r3, [r7, #6]
 80014c2:	0a1b      	lsrs	r3, r3, #8
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80014ca:	88fb      	ldrh	r3, [r7, #6]
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80014d0:	f000 fa2a 	bl	8001928 <SUBGRF_GetPacketType>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d108      	bne.n	80014ec <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80014da:	f107 030c 	add.w	r3, r7, #12
 80014de:	2202      	movs	r2, #2
 80014e0:	4619      	mov	r1, r3
 80014e2:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 80014e6:	f000 fd1f 	bl	8001f28 <SUBGRF_WriteRegisters>
            break;
 80014ea:	e000      	b.n	80014ee <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 80014ec:	bf00      	nop
    }
}
 80014ee:	bf00      	nop
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b084      	sub	sp, #16
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	4603      	mov	r3, r0
 80014fe:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8001500:	88fb      	ldrh	r3, [r7, #6]
 8001502:	0a1b      	lsrs	r3, r3, #8
 8001504:	b29b      	uxth	r3, r3
 8001506:	b2db      	uxtb	r3, r3
 8001508:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800150a:	88fb      	ldrh	r3, [r7, #6]
 800150c:	b2db      	uxtb	r3, r3
 800150e:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8001510:	f000 fa0a 	bl	8001928 <SUBGRF_GetPacketType>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d108      	bne.n	800152c <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800151a:	f107 030c 	add.w	r3, r7, #12
 800151e:	2202      	movs	r2, #2
 8001520:	4619      	mov	r1, r3
 8001522:	f240 60be 	movw	r0, #1726	@ 0x6be
 8001526:	f000 fcff 	bl	8001f28 <SUBGRF_WriteRegisters>
            break;
 800152a:	e000      	b.n	800152e <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800152c:	bf00      	nop
    }
}
 800152e:	bf00      	nop
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
	...

08001538 <SUBGRF_SetStandby>:
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
    OperatingMode = MODE_SLEEP;
}

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8001542:	1dfb      	adds	r3, r7, #7
 8001544:	2201      	movs	r2, #1
 8001546:	4619      	mov	r1, r3
 8001548:	2080      	movs	r0, #128	@ 0x80
 800154a:	f000 fd53 	bl	8001ff4 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d103      	bne.n	800155c <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8001554:	4b05      	ldr	r3, [pc, #20]	@ (800156c <SUBGRF_SetStandby+0x34>)
 8001556:	2201      	movs	r2, #1
 8001558:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 800155a:	e002      	b.n	8001562 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 800155c:	4b03      	ldr	r3, [pc, #12]	@ (800156c <SUBGRF_SetStandby+0x34>)
 800155e:	2202      	movs	r2, #2
 8001560:	701a      	strb	r2, [r3, #0]
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	2000044c 	.word	0x2000044c

08001570 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8001578:	4b0c      	ldr	r3, [pc, #48]	@ (80015ac <SUBGRF_SetTx+0x3c>)
 800157a:	2204      	movs	r2, #4
 800157c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	0c1b      	lsrs	r3, r3, #16
 8001582:	b2db      	uxtb	r3, r3
 8001584:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	0a1b      	lsrs	r3, r3, #8
 800158a:	b2db      	uxtb	r3, r3
 800158c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8001594:	f107 030c 	add.w	r3, r7, #12
 8001598:	2203      	movs	r2, #3
 800159a:	4619      	mov	r1, r3
 800159c:	2083      	movs	r0, #131	@ 0x83
 800159e:	f000 fd29 	bl	8001ff4 <SUBGRF_WriteCommand>
}
 80015a2:	bf00      	nop
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	2000044c 	.word	0x2000044c

080015b0 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 80015b8:	4b0c      	ldr	r3, [pc, #48]	@ (80015ec <SUBGRF_SetRx+0x3c>)
 80015ba:	2205      	movs	r2, #5
 80015bc:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	0c1b      	lsrs	r3, r3, #16
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	0a1b      	lsrs	r3, r3, #8
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80015d4:	f107 030c 	add.w	r3, r7, #12
 80015d8:	2203      	movs	r2, #3
 80015da:	4619      	mov	r1, r3
 80015dc:	2082      	movs	r0, #130	@ 0x82
 80015de:	f000 fd09 	bl	8001ff4 <SUBGRF_WriteCommand>
}
 80015e2:	bf00      	nop
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	2000044c 	.word	0x2000044c

080015f0 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
}

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 80015fa:	1dfb      	adds	r3, r7, #7
 80015fc:	2201      	movs	r2, #1
 80015fe:	4619      	mov	r1, r3
 8001600:	209f      	movs	r0, #159	@ 0x9f
 8001602:	f000 fcf7 	bl	8001ff4 <SUBGRF_WriteCommand>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <SUBGRF_SetRegulatorMode>:
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
    }
}

void SUBGRF_SetRegulatorMode( void )
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8001614:	f7ff fea3 	bl	800135e <RBI_IsDCDC>
 8001618:	4603      	mov	r3, r0
 800161a:	2b01      	cmp	r3, #1
 800161c:	d102      	bne.n	8001624 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 800161e:	2301      	movs	r3, #1
 8001620:	71fb      	strb	r3, [r7, #7]
 8001622:	e001      	b.n	8001628 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8001624:	2300      	movs	r3, #0
 8001626:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8001628:	1dfb      	adds	r3, r7, #7
 800162a:	2201      	movs	r2, #1
 800162c:	4619      	mov	r1, r3
 800162e:	2096      	movs	r0, #150	@ 0x96
 8001630:	f000 fce0 	bl	8001ff4 <SUBGRF_WriteCommand>
}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8001644:	793b      	ldrb	r3, [r7, #4]
 8001646:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800164a:	b2db      	uxtb	r3, r3
 800164c:	b25b      	sxtb	r3, r3
 800164e:	019b      	lsls	r3, r3, #6
 8001650:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8001652:	793b      	ldrb	r3, [r7, #4]
 8001654:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001658:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800165a:	b25b      	sxtb	r3, r3
 800165c:	015b      	lsls	r3, r3, #5
 800165e:	b25b      	sxtb	r3, r3
 8001660:	4313      	orrs	r3, r2
 8001662:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8001664:	793b      	ldrb	r3, [r7, #4]
 8001666:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800166a:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800166c:	b25b      	sxtb	r3, r3
 800166e:	011b      	lsls	r3, r3, #4
 8001670:	b25b      	sxtb	r3, r3
 8001672:	4313      	orrs	r3, r2
 8001674:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8001676:	793b      	ldrb	r3, [r7, #4]
 8001678:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800167c:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800167e:	b25b      	sxtb	r3, r3
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	b25b      	sxtb	r3, r3
 8001684:	4313      	orrs	r3, r2
 8001686:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8001688:	793b      	ldrb	r3, [r7, #4]
 800168a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800168e:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8001690:	b25b      	sxtb	r3, r3
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	b25b      	sxtb	r3, r3
 8001696:	4313      	orrs	r3, r2
 8001698:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800169a:	793b      	ldrb	r3, [r7, #4]
 800169c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80016a0:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80016a2:	b25b      	sxtb	r3, r3
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	b25b      	sxtb	r3, r3
 80016a8:	4313      	orrs	r3, r2
 80016aa:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 80016ac:	793b      	ldrb	r3, [r7, #4]
 80016ae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80016b6:	4313      	orrs	r3, r2
 80016b8:	b25b      	sxtb	r3, r3
 80016ba:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80016bc:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 80016be:	f107 030f 	add.w	r3, r7, #15
 80016c2:	2201      	movs	r2, #1
 80016c4:	4619      	mov	r1, r3
 80016c6:	2089      	movs	r0, #137	@ 0x89
 80016c8:	f000 fc94 	bl	8001ff4 <SUBGRF_WriteCommand>
}
 80016cc:	bf00      	nop
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4a1d      	ldr	r2, [pc, #116]	@ (8001754 <SUBGRF_CalibrateImage+0x80>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d904      	bls.n	80016ee <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 80016e4:	23e1      	movs	r3, #225	@ 0xe1
 80016e6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 80016e8:	23e9      	movs	r3, #233	@ 0xe9
 80016ea:	737b      	strb	r3, [r7, #13]
 80016ec:	e027      	b.n	800173e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a19      	ldr	r2, [pc, #100]	@ (8001758 <SUBGRF_CalibrateImage+0x84>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d904      	bls.n	8001700 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 80016f6:	23d7      	movs	r3, #215	@ 0xd7
 80016f8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 80016fa:	23db      	movs	r3, #219	@ 0xdb
 80016fc:	737b      	strb	r3, [r7, #13]
 80016fe:	e01e      	b.n	800173e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a16      	ldr	r2, [pc, #88]	@ (800175c <SUBGRF_CalibrateImage+0x88>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d904      	bls.n	8001712 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8001708:	23c1      	movs	r3, #193	@ 0xc1
 800170a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 800170c:	23c5      	movs	r3, #197	@ 0xc5
 800170e:	737b      	strb	r3, [r7, #13]
 8001710:	e015      	b.n	800173e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a12      	ldr	r2, [pc, #72]	@ (8001760 <SUBGRF_CalibrateImage+0x8c>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d904      	bls.n	8001724 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800171a:	2375      	movs	r3, #117	@ 0x75
 800171c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800171e:	2381      	movs	r3, #129	@ 0x81
 8001720:	737b      	strb	r3, [r7, #13]
 8001722:	e00c      	b.n	800173e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a0f      	ldr	r2, [pc, #60]	@ (8001764 <SUBGRF_CalibrateImage+0x90>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d904      	bls.n	8001736 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 800172c:	236b      	movs	r3, #107	@ 0x6b
 800172e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8001730:	236f      	movs	r3, #111	@ 0x6f
 8001732:	737b      	strb	r3, [r7, #13]
 8001734:	e003      	b.n	800173e <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 8001736:	2329      	movs	r3, #41	@ 0x29
 8001738:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 800173a:	232b      	movs	r3, #43	@ 0x2b
 800173c:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800173e:	f107 030c 	add.w	r3, r7, #12
 8001742:	2202      	movs	r2, #2
 8001744:	4619      	mov	r1, r3
 8001746:	2098      	movs	r0, #152	@ 0x98
 8001748:	f000 fc54 	bl	8001ff4 <SUBGRF_WriteCommand>
}
 800174c:	bf00      	nop
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	35a4e900 	.word	0x35a4e900
 8001758:	32a9f880 	.word	0x32a9f880
 800175c:	2de54480 	.word	0x2de54480
 8001760:	1b6b0b00 	.word	0x1b6b0b00
 8001764:	1954fc40 	.word	0x1954fc40

08001768 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8001768:	b590      	push	{r4, r7, lr}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	4604      	mov	r4, r0
 8001770:	4608      	mov	r0, r1
 8001772:	4611      	mov	r1, r2
 8001774:	461a      	mov	r2, r3
 8001776:	4623      	mov	r3, r4
 8001778:	71fb      	strb	r3, [r7, #7]
 800177a:	4603      	mov	r3, r0
 800177c:	71bb      	strb	r3, [r7, #6]
 800177e:	460b      	mov	r3, r1
 8001780:	717b      	strb	r3, [r7, #5]
 8001782:	4613      	mov	r3, r2
 8001784:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800178a:	79bb      	ldrb	r3, [r7, #6]
 800178c:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800178e:	797b      	ldrb	r3, [r7, #5]
 8001790:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8001792:	793b      	ldrb	r3, [r7, #4]
 8001794:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8001796:	f107 030c 	add.w	r3, r7, #12
 800179a:	2204      	movs	r2, #4
 800179c:	4619      	mov	r1, r3
 800179e:	2095      	movs	r0, #149	@ 0x95
 80017a0:	f000 fc28 	bl	8001ff4 <SUBGRF_WriteCommand>
}
 80017a4:	bf00      	nop
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd90      	pop	{r4, r7, pc}

080017ac <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 80017ac:	b590      	push	{r4, r7, lr}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4604      	mov	r4, r0
 80017b4:	4608      	mov	r0, r1
 80017b6:	4611      	mov	r1, r2
 80017b8:	461a      	mov	r2, r3
 80017ba:	4623      	mov	r3, r4
 80017bc:	80fb      	strh	r3, [r7, #6]
 80017be:	4603      	mov	r3, r0
 80017c0:	80bb      	strh	r3, [r7, #4]
 80017c2:	460b      	mov	r3, r1
 80017c4:	807b      	strh	r3, [r7, #2]
 80017c6:	4613      	mov	r3, r2
 80017c8:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 80017ca:	88fb      	ldrh	r3, [r7, #6]
 80017cc:	0a1b      	lsrs	r3, r3, #8
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 80017d4:	88fb      	ldrh	r3, [r7, #6]
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 80017da:	88bb      	ldrh	r3, [r7, #4]
 80017dc:	0a1b      	lsrs	r3, r3, #8
 80017de:	b29b      	uxth	r3, r3
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 80017e4:	88bb      	ldrh	r3, [r7, #4]
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 80017ea:	887b      	ldrh	r3, [r7, #2]
 80017ec:	0a1b      	lsrs	r3, r3, #8
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80017f4:	887b      	ldrh	r3, [r7, #2]
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80017fa:	883b      	ldrh	r3, [r7, #0]
 80017fc:	0a1b      	lsrs	r3, r3, #8
 80017fe:	b29b      	uxth	r3, r3
 8001800:	b2db      	uxtb	r3, r3
 8001802:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8001804:	883b      	ldrh	r3, [r7, #0]
 8001806:	b2db      	uxtb	r3, r3
 8001808:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800180a:	f107 0308 	add.w	r3, r7, #8
 800180e:	2208      	movs	r2, #8
 8001810:	4619      	mov	r1, r3
 8001812:	2008      	movs	r0, #8
 8001814:	f000 fbee 	bl	8001ff4 <SUBGRF_WriteCommand>
}
 8001818:	bf00      	nop
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	bd90      	pop	{r4, r7, pc}

08001820 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	6039      	str	r1, [r7, #0]
 800182a:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	b2db      	uxtb	r3, r3
 8001834:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	0c1b      	lsrs	r3, r3, #16
 800183a:	b2db      	uxtb	r3, r3
 800183c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	0a1b      	lsrs	r3, r3, #8
 8001842:	b2db      	uxtb	r3, r3
 8001844:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	b2db      	uxtb	r3, r3
 800184a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800184c:	f107 030c 	add.w	r3, r7, #12
 8001850:	2204      	movs	r2, #4
 8001852:	4619      	mov	r1, r3
 8001854:	2097      	movs	r0, #151	@ 0x97
 8001856:	f000 fbcd 	bl	8001ff4 <SUBGRF_WriteCommand>
}
 800185a:	bf00      	nop
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
	...

08001864 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8001864:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001868:	b084      	sub	sp, #16
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8001872:	4b1d      	ldr	r3, [pc, #116]	@ (80018e8 <SUBGRF_SetRfFrequency+0x84>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	f083 0301 	eor.w	r3, r3, #1
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b00      	cmp	r3, #0
 800187e:	d005      	beq.n	800188c <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff ff27 	bl	80016d4 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8001886:	4b18      	ldr	r3, [pc, #96]	@ (80018e8 <SUBGRF_SetRfFrequency+0x84>)
 8001888:	2201      	movs	r2, #1
 800188a:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	461c      	mov	r4, r3
 8001892:	4615      	mov	r5, r2
 8001894:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8001898:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800189c:	4a13      	ldr	r2, [pc, #76]	@ (80018ec <SUBGRF_SetRfFrequency+0x88>)
 800189e:	f04f 0300 	mov.w	r3, #0
 80018a2:	4640      	mov	r0, r8
 80018a4:	4649      	mov	r1, r9
 80018a6:	f7fe fcc3 	bl	8000230 <__aeabi_uldivmod>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4613      	mov	r3, r2
 80018b0:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	0e1b      	lsrs	r3, r3, #24
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	0c1b      	lsrs	r3, r3, #16
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	0a1b      	lsrs	r3, r3, #8
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 80018d0:	f107 0308 	add.w	r3, r7, #8
 80018d4:	2204      	movs	r2, #4
 80018d6:	4619      	mov	r1, r3
 80018d8:	2086      	movs	r0, #134	@ 0x86
 80018da:	f000 fb8b 	bl	8001ff4 <SUBGRF_WriteCommand>
}
 80018de:	bf00      	nop
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80018e8:	20000454 	.word	0x20000454
 80018ec:	01e84800 	.word	0x01e84800

080018f0 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 80018fa:	79fa      	ldrb	r2, [r7, #7]
 80018fc:	4b09      	ldr	r3, [pc, #36]	@ (8001924 <SUBGRF_SetPacketType+0x34>)
 80018fe:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d104      	bne.n	8001910 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8001906:	2100      	movs	r1, #0
 8001908:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 800190c:	f000 fae4 	bl	8001ed8 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8001910:	1dfb      	adds	r3, r7, #7
 8001912:	2201      	movs	r2, #1
 8001914:	4619      	mov	r1, r3
 8001916:	208a      	movs	r0, #138	@ 0x8a
 8001918:	f000 fb6c 	bl	8001ff4 <SUBGRF_WriteCommand>
}
 800191c:	bf00      	nop
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	2000044d 	.word	0x2000044d

08001928 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
    return PacketType;
 800192c:	4b02      	ldr	r3, [pc, #8]	@ (8001938 <SUBGRF_GetPacketType+0x10>)
 800192e:	781b      	ldrb	r3, [r3, #0]
}
 8001930:	4618      	mov	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr
 8001938:	2000044d 	.word	0x2000044d

0800193c <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	71fb      	strb	r3, [r7, #7]
 8001946:	460b      	mov	r3, r1
 8001948:	71bb      	strb	r3, [r7, #6]
 800194a:	4613      	mov	r3, r2
 800194c:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d149      	bne.n	80019e8 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8001954:	2000      	movs	r0, #0
 8001956:	f7ff fd09 	bl	800136c <RBI_GetRFOMaxPowerConfig>
 800195a:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 800195c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	429a      	cmp	r2, r3
 8001964:	da01      	bge.n	800196a <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2b0e      	cmp	r3, #14
 800196e:	d10e      	bne.n	800198e <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8001970:	2301      	movs	r3, #1
 8001972:	2201      	movs	r2, #1
 8001974:	2100      	movs	r1, #0
 8001976:	2004      	movs	r0, #4
 8001978:	f7ff fef6 	bl	8001768 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800197c:	79ba      	ldrb	r2, [r7, #6]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	b2db      	uxtb	r3, r3
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	b2db      	uxtb	r3, r3
 8001986:	330e      	adds	r3, #14
 8001988:	b2db      	uxtb	r3, r3
 800198a:	71bb      	strb	r3, [r7, #6]
 800198c:	e01f      	b.n	80019ce <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2b0a      	cmp	r3, #10
 8001992:	d10e      	bne.n	80019b2 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8001994:	2301      	movs	r3, #1
 8001996:	2201      	movs	r2, #1
 8001998:	2100      	movs	r1, #0
 800199a:	2001      	movs	r0, #1
 800199c:	f7ff fee4 	bl	8001768 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 80019a0:	79ba      	ldrb	r2, [r7, #6]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	330d      	adds	r3, #13
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	71bb      	strb	r3, [r7, #6]
 80019b0:	e00d      	b.n	80019ce <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 80019b2:	2301      	movs	r3, #1
 80019b4:	2201      	movs	r2, #1
 80019b6:	2100      	movs	r1, #0
 80019b8:	2007      	movs	r0, #7
 80019ba:	f7ff fed5 	bl	8001768 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80019be:	79ba      	ldrb	r2, [r7, #6]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	330e      	adds	r3, #14
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 80019ce:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80019d2:	f113 0f11 	cmn.w	r3, #17
 80019d6:	da01      	bge.n	80019dc <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 80019d8:	23ef      	movs	r3, #239	@ 0xef
 80019da:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 80019dc:	2118      	movs	r1, #24
 80019de:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 80019e2:	f000 fa79 	bl	8001ed8 <SUBGRF_WriteRegister>
 80019e6:	e067      	b.n	8001ab8 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 80019e8:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 80019ec:	f000 fa88 	bl	8001f00 <SUBGRF_ReadRegister>
 80019f0:	4603      	mov	r3, r0
 80019f2:	f043 031e 	orr.w	r3, r3, #30
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	4619      	mov	r1, r3
 80019fa:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 80019fe:	f000 fa6b 	bl	8001ed8 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8001a02:	2001      	movs	r0, #1
 8001a04:	f7ff fcb2 	bl	800136c <RBI_GetRFOMaxPowerConfig>
 8001a08:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 8001a0a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	da01      	bge.n	8001a18 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2b14      	cmp	r3, #20
 8001a1c:	d10e      	bne.n	8001a3c <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8001a1e:	2301      	movs	r3, #1
 8001a20:	2200      	movs	r2, #0
 8001a22:	2105      	movs	r1, #5
 8001a24:	2003      	movs	r0, #3
 8001a26:	f7ff fe9f 	bl	8001768 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8001a2a:	79ba      	ldrb	r2, [r7, #6]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	3316      	adds	r3, #22
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	71bb      	strb	r3, [r7, #6]
 8001a3a:	e031      	b.n	8001aa0 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2b11      	cmp	r3, #17
 8001a40:	d10e      	bne.n	8001a60 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8001a42:	2301      	movs	r3, #1
 8001a44:	2200      	movs	r2, #0
 8001a46:	2103      	movs	r1, #3
 8001a48:	2002      	movs	r0, #2
 8001a4a:	f7ff fe8d 	bl	8001768 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8001a4e:	79ba      	ldrb	r2, [r7, #6]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	3316      	adds	r3, #22
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	71bb      	strb	r3, [r7, #6]
 8001a5e:	e01f      	b.n	8001aa0 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2b0e      	cmp	r3, #14
 8001a64:	d10e      	bne.n	8001a84 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8001a66:	2301      	movs	r3, #1
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2102      	movs	r1, #2
 8001a6c:	2002      	movs	r0, #2
 8001a6e:	f7ff fe7b 	bl	8001768 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8001a72:	79ba      	ldrb	r2, [r7, #6]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	330e      	adds	r3, #14
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	71bb      	strb	r3, [r7, #6]
 8001a82:	e00d      	b.n	8001aa0 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8001a84:	2301      	movs	r3, #1
 8001a86:	2200      	movs	r2, #0
 8001a88:	2107      	movs	r1, #7
 8001a8a:	2004      	movs	r0, #4
 8001a8c:	f7ff fe6c 	bl	8001768 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8001a90:	79ba      	ldrb	r2, [r7, #6]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	3316      	adds	r3, #22
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8001aa0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001aa4:	f113 0f09 	cmn.w	r3, #9
 8001aa8:	da01      	bge.n	8001aae <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8001aaa:	23f7      	movs	r3, #247	@ 0xf7
 8001aac:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8001aae:	2138      	movs	r1, #56	@ 0x38
 8001ab0:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8001ab4:	f000 fa10 	bl	8001ed8 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8001ab8:	79bb      	ldrb	r3, [r7, #6]
 8001aba:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8001abc:	797b      	ldrb	r3, [r7, #5]
 8001abe:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8001ac0:	f107 0308 	add.w	r3, r7, #8
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	208e      	movs	r0, #142	@ 0x8e
 8001aca:	f000 fa93 	bl	8001ff4 <SUBGRF_WriteCommand>
}
 8001ace:	bf00      	nop
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
	...

08001ad8 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8001ad8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001adc:	b086      	sub	sp, #24
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001ae6:	f107 0308 	add.w	r3, r7, #8
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	605a      	str	r2, [r3, #4]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	781a      	ldrb	r2, [r3, #0]
 8001af4:	4b5c      	ldr	r3, [pc, #368]	@ (8001c68 <SUBGRF_SetModulationParams+0x190>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d004      	beq.n	8001b06 <SUBGRF_SetModulationParams+0x2e>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff fef5 	bl	80018f0 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b03      	cmp	r3, #3
 8001b0c:	f200 80a5 	bhi.w	8001c5a <SUBGRF_SetModulationParams+0x182>
 8001b10:	a201      	add	r2, pc, #4	@ (adr r2, 8001b18 <SUBGRF_SetModulationParams+0x40>)
 8001b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b16:	bf00      	nop
 8001b18:	08001b29 	.word	0x08001b29
 8001b1c:	08001be9 	.word	0x08001be9
 8001b20:	08001bab 	.word	0x08001bab
 8001b24:	08001c17 	.word	0x08001c17
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8001b28:	2308      	movs	r3, #8
 8001b2a:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	4a4e      	ldr	r2, [pc, #312]	@ (8001c6c <SUBGRF_SetModulationParams+0x194>)
 8001b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b36:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	0c1b      	lsrs	r3, r3, #16
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	0a1b      	lsrs	r3, r3, #8
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	7b1b      	ldrb	r3, [r3, #12]
 8001b52:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	7b5b      	ldrb	r3, [r3, #13]
 8001b58:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	461c      	mov	r4, r3
 8001b62:	4615      	mov	r5, r2
 8001b64:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8001b68:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8001b6c:	4a40      	ldr	r2, [pc, #256]	@ (8001c70 <SUBGRF_SetModulationParams+0x198>)
 8001b6e:	f04f 0300 	mov.w	r3, #0
 8001b72:	4640      	mov	r0, r8
 8001b74:	4649      	mov	r1, r9
 8001b76:	f7fe fb5b 	bl	8000230 <__aeabi_uldivmod>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4613      	mov	r3, r2
 8001b80:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	0c1b      	lsrs	r3, r3, #16
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	0a1b      	lsrs	r3, r3, #8
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8001b98:	7cfb      	ldrb	r3, [r7, #19]
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	f107 0308 	add.w	r3, r7, #8
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	208b      	movs	r0, #139	@ 0x8b
 8001ba4:	f000 fa26 	bl	8001ff4 <SUBGRF_WriteCommand>
        break;
 8001ba8:	e058      	b.n	8001c5c <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_BPSK:
        n = 4;
 8001baa:	2304      	movs	r3, #4
 8001bac:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	4a2e      	ldr	r2, [pc, #184]	@ (8001c6c <SUBGRF_SetModulationParams+0x194>)
 8001bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb8:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	0c1b      	lsrs	r3, r3, #16
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	0a1b      	lsrs	r3, r3, #8
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	7d1b      	ldrb	r3, [r3, #20]
 8001bd4:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8001bd6:	7cfb      	ldrb	r3, [r7, #19]
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	f107 0308 	add.w	r3, r7, #8
 8001bde:	4619      	mov	r1, r3
 8001be0:	208b      	movs	r0, #139	@ 0x8b
 8001be2:	f000 fa07 	bl	8001ff4 <SUBGRF_WriteCommand>
        break;
 8001be6:	e039      	b.n	8001c5c <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_LORA:
        n = 4;
 8001be8:	2304      	movs	r3, #4
 8001bea:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	7e1b      	ldrb	r3, [r3, #24]
 8001bf0:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	7e5b      	ldrb	r3, [r3, #25]
 8001bf6:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	7e9b      	ldrb	r3, [r3, #26]
 8001bfc:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	7edb      	ldrb	r3, [r3, #27]
 8001c02:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8001c04:	7cfb      	ldrb	r3, [r7, #19]
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	f107 0308 	add.w	r3, r7, #8
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	208b      	movs	r0, #139	@ 0x8b
 8001c10:	f000 f9f0 	bl	8001ff4 <SUBGRF_WriteCommand>

        break;
 8001c14:	e022      	b.n	8001c5c <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_GMSK:
        n = 5;
 8001c16:	2305      	movs	r3, #5
 8001c18:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	4a13      	ldr	r2, [pc, #76]	@ (8001c6c <SUBGRF_SetModulationParams+0x194>)
 8001c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c24:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	0c1b      	lsrs	r3, r3, #16
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	0a1b      	lsrs	r3, r3, #8
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	7b1b      	ldrb	r3, [r3, #12]
 8001c40:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	7b5b      	ldrb	r3, [r3, #13]
 8001c46:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8001c48:	7cfb      	ldrb	r3, [r7, #19]
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	f107 0308 	add.w	r3, r7, #8
 8001c50:	4619      	mov	r1, r3
 8001c52:	208b      	movs	r0, #139	@ 0x8b
 8001c54:	f000 f9ce 	bl	8001ff4 <SUBGRF_WriteCommand>
        break;
 8001c58:	e000      	b.n	8001c5c <SUBGRF_SetModulationParams+0x184>
    default:
    case PACKET_TYPE_NONE:
      break;
 8001c5a:	bf00      	nop
    }
}
 8001c5c:	bf00      	nop
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c66:	bf00      	nop
 8001c68:	2000044d 	.word	0x2000044d
 8001c6c:	3d090000 	.word	0x3d090000
 8001c70:	01e84800 	.word	0x01e84800

08001c74 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001c80:	f107 030c 	add.w	r3, r7, #12
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	721a      	strb	r2, [r3, #8]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	781a      	ldrb	r2, [r3, #0]
 8001c90:	4b44      	ldr	r3, [pc, #272]	@ (8001da4 <SUBGRF_SetPacketParams+0x130>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d004      	beq.n	8001ca2 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff fe27 	bl	80018f0 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b03      	cmp	r3, #3
 8001ca8:	d878      	bhi.n	8001d9c <SUBGRF_SetPacketParams+0x128>
 8001caa:	a201      	add	r2, pc, #4	@ (adr r2, 8001cb0 <SUBGRF_SetPacketParams+0x3c>)
 8001cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb0:	08001cc1 	.word	0x08001cc1
 8001cb4:	08001d51 	.word	0x08001d51
 8001cb8:	08001d45 	.word	0x08001d45
 8001cbc:	08001cc1 	.word	0x08001cc1
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	7a5b      	ldrb	r3, [r3, #9]
 8001cc4:	2bf1      	cmp	r3, #241	@ 0xf1
 8001cc6:	d10a      	bne.n	8001cde <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8001cc8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001ccc:	f7ff fbf3 	bl	80014b6 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8001cd0:	f248 0005 	movw	r0, #32773	@ 0x8005
 8001cd4:	f7ff fc0f 	bl	80014f6 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	75bb      	strb	r3, [r7, #22]
 8001cdc:	e011      	b.n	8001d02 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	7a5b      	ldrb	r3, [r3, #9]
 8001ce2:	2bf2      	cmp	r3, #242	@ 0xf2
 8001ce4:	d10a      	bne.n	8001cfc <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8001ce6:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 8001cea:	f7ff fbe4 	bl	80014b6 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8001cee:	f241 0021 	movw	r0, #4129	@ 0x1021
 8001cf2:	f7ff fc00 	bl	80014f6 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8001cf6:	2306      	movs	r3, #6
 8001cf8:	75bb      	strb	r3, [r7, #22]
 8001cfa:	e002      	b.n	8001d02 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	7a5b      	ldrb	r3, [r3, #9]
 8001d00:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8001d02:	2309      	movs	r3, #9
 8001d04:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	885b      	ldrh	r3, [r3, #2]
 8001d0a:	0a1b      	lsrs	r3, r3, #8
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	885b      	ldrh	r3, [r3, #2]
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	791b      	ldrb	r3, [r3, #4]
 8001d1e:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	795b      	ldrb	r3, [r3, #5]
 8001d24:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	799b      	ldrb	r3, [r3, #6]
 8001d2a:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	79db      	ldrb	r3, [r3, #7]
 8001d30:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	7a1b      	ldrb	r3, [r3, #8]
 8001d36:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8001d38:	7dbb      	ldrb	r3, [r7, #22]
 8001d3a:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	7a9b      	ldrb	r3, [r3, #10]
 8001d40:	753b      	strb	r3, [r7, #20]
        break;
 8001d42:	e022      	b.n	8001d8a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8001d44:	2301      	movs	r3, #1
 8001d46:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	7b1b      	ldrb	r3, [r3, #12]
 8001d4c:	733b      	strb	r3, [r7, #12]
        break;
 8001d4e:	e01c      	b.n	8001d8a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8001d50:	2306      	movs	r3, #6
 8001d52:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	89db      	ldrh	r3, [r3, #14]
 8001d58:	0a1b      	lsrs	r3, r3, #8
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	89db      	ldrh	r3, [r3, #14]
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	7c1a      	ldrb	r2, [r3, #16]
 8001d6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001da8 <SUBGRF_SetPacketParams+0x134>)
 8001d6e:	4611      	mov	r1, r2
 8001d70:	7019      	strb	r1, [r3, #0]
 8001d72:	4613      	mov	r3, r2
 8001d74:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	7c5b      	ldrb	r3, [r3, #17]
 8001d7a:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	7c9b      	ldrb	r3, [r3, #18]
 8001d80:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	7cdb      	ldrb	r3, [r3, #19]
 8001d86:	747b      	strb	r3, [r7, #17]
        break;
 8001d88:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8001d8a:	7dfb      	ldrb	r3, [r7, #23]
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	f107 030c 	add.w	r3, r7, #12
 8001d92:	4619      	mov	r1, r3
 8001d94:	208c      	movs	r0, #140	@ 0x8c
 8001d96:	f000 f92d 	bl	8001ff4 <SUBGRF_WriteCommand>
 8001d9a:	e000      	b.n	8001d9e <SUBGRF_SetPacketParams+0x12a>
        return;
 8001d9c:	bf00      	nop
}
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	2000044d 	.word	0x2000044d
 8001da8:	2000044e 	.word	0x2000044e

08001dac <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	460a      	mov	r2, r1
 8001db6:	71fb      	strb	r3, [r7, #7]
 8001db8:	4613      	mov	r3, r2
 8001dba:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8001dc0:	79bb      	ldrb	r3, [r7, #6]
 8001dc2:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8001dc4:	f107 030c 	add.w	r3, r7, #12
 8001dc8:	2202      	movs	r2, #2
 8001dca:	4619      	mov	r1, r3
 8001dcc:	208f      	movs	r0, #143	@ 0x8f
 8001dce:	f000 f911 	bl	8001ff4 <SUBGRF_WriteCommand>
}
 8001dd2:	bf00      	nop
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <SUBGRF_GetRxBufferStatus>:
    rssi = -buf[0] >> 1;
    return rssi;
}

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8001de6:	f107 030c 	add.w	r3, r7, #12
 8001dea:	2202      	movs	r2, #2
 8001dec:	4619      	mov	r1, r3
 8001dee:	2013      	movs	r0, #19
 8001df0:	f000 f922 	bl	8002038 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8001df4:	f7ff fd98 	bl	8001928 <SUBGRF_GetPacketType>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d10d      	bne.n	8001e1a <SUBGRF_GetRxBufferStatus+0x3e>
 8001dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8001e30 <SUBGRF_GetRxBufferStatus+0x54>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d108      	bne.n	8001e1a <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8001e08:	f240 7002 	movw	r0, #1794	@ 0x702
 8001e0c:	f000 f878 	bl	8001f00 <SUBGRF_ReadRegister>
 8001e10:	4603      	mov	r3, r0
 8001e12:	461a      	mov	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	701a      	strb	r2, [r3, #0]
 8001e18:	e002      	b.n	8001e20 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8001e1a:	7b3a      	ldrb	r2, [r7, #12]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8001e20:	7b7a      	ldrb	r2, [r7, #13]
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	701a      	strb	r2, [r3, #0]
}
 8001e26:	bf00      	nop
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	2000044e 	.word	0x2000044e

08001e34 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8001e3c:	f107 030c 	add.w	r3, r7, #12
 8001e40:	2203      	movs	r2, #3
 8001e42:	4619      	mov	r1, r3
 8001e44:	2014      	movs	r0, #20
 8001e46:	f000 f8f7 	bl	8002038 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8001e4a:	f7ff fd6d 	bl	8001928 <SUBGRF_GetPacketType>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	461a      	mov	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d002      	beq.n	8001e64 <SUBGRF_GetPacketStatus+0x30>
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d013      	beq.n	8001e8a <SUBGRF_GetPacketStatus+0x56>
 8001e62:	e02a      	b.n	8001eba <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8001e64:	7b3a      	ldrb	r2, [r7, #12]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8001e6a:	7b7b      	ldrb	r3, [r7, #13]
 8001e6c:	425b      	negs	r3, r3
 8001e6e:	105b      	asrs	r3, r3, #1
 8001e70:	b25a      	sxtb	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8001e76:	7bbb      	ldrb	r3, [r7, #14]
 8001e78:	425b      	negs	r3, r3
 8001e7a:	105b      	asrs	r3, r3, #1
 8001e7c:	b25a      	sxtb	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	609a      	str	r2, [r3, #8]
            break;
 8001e88:	e020      	b.n	8001ecc <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8001e8a:	7b3b      	ldrb	r3, [r7, #12]
 8001e8c:	425b      	negs	r3, r3
 8001e8e:	105b      	asrs	r3, r3, #1
 8001e90:	b25a      	sxtb	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8001e96:	7b7b      	ldrb	r3, [r7, #13]
 8001e98:	b25b      	sxtb	r3, r3
 8001e9a:	3302      	adds	r3, #2
 8001e9c:	109b      	asrs	r3, r3, #2
 8001e9e:	b25a      	sxtb	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8001ea4:	7bbb      	ldrb	r3, [r7, #14]
 8001ea6:	425b      	negs	r3, r3
 8001ea8:	105b      	asrs	r3, r3, #1
 8001eaa:	b25a      	sxtb	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8001eb0:	4b08      	ldr	r3, [pc, #32]	@ (8001ed4 <SUBGRF_GetPacketStatus+0xa0>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	611a      	str	r2, [r3, #16]
            break;
 8001eb8:	e008      	b.n	8001ecc <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8001eba:	2214      	movs	r2, #20
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f004 fecc 	bl	8006c5c <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	220f      	movs	r2, #15
 8001ec8:	701a      	strb	r2, [r3, #0]
            break;
 8001eca:	bf00      	nop
    }
}
 8001ecc:	bf00      	nop
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20000450 	.word	0x20000450

08001ed8 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	460a      	mov	r2, r1
 8001ee2:	80fb      	strh	r3, [r7, #6]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8001ee8:	1d7a      	adds	r2, r7, #5
 8001eea:	88f9      	ldrh	r1, [r7, #6]
 8001eec:	2301      	movs	r3, #1
 8001eee:	4803      	ldr	r0, [pc, #12]	@ (8001efc <SUBGRF_WriteRegister+0x24>)
 8001ef0:	f002 fa32 	bl	8004358 <HAL_SUBGHZ_WriteRegisters>
}
 8001ef4:	bf00      	nop
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	200003a8 	.word	0x200003a8

08001f00 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8001f0a:	f107 020f 	add.w	r2, r7, #15
 8001f0e:	88f9      	ldrh	r1, [r7, #6]
 8001f10:	2301      	movs	r3, #1
 8001f12:	4804      	ldr	r0, [pc, #16]	@ (8001f24 <SUBGRF_ReadRegister+0x24>)
 8001f14:	f002 fa7f 	bl	8004416 <HAL_SUBGHZ_ReadRegisters>
    return data;
 8001f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	200003a8 	.word	0x200003a8

08001f28 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	6039      	str	r1, [r7, #0]
 8001f32:	80fb      	strh	r3, [r7, #6]
 8001f34:	4613      	mov	r3, r2
 8001f36:	80bb      	strh	r3, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f38:	f3ef 8310 	mrs	r3, PRIMASK
 8001f3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8001f40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f42:	b672      	cpsid	i
}
 8001f44:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8001f46:	88bb      	ldrh	r3, [r7, #4]
 8001f48:	88f9      	ldrh	r1, [r7, #6]
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	4806      	ldr	r0, [pc, #24]	@ (8001f68 <SUBGRF_WriteRegisters+0x40>)
 8001f4e:	f002 fa03 	bl	8004358 <HAL_SUBGHZ_WriteRegisters>
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	f383 8810 	msr	PRIMASK, r3
}
 8001f5c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8001f5e:	bf00      	nop
 8001f60:	3718      	adds	r7, #24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	200003a8 	.word	0x200003a8

08001f6c <SUBGRF_WriteBuffer>:
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	6039      	str	r1, [r7, #0]
 8001f76:	71fb      	strb	r3, [r7, #7]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f7c:	f3ef 8310 	mrs	r3, PRIMASK
 8001f80:	60fb      	str	r3, [r7, #12]
  return(result);
 8001f82:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8001f84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f86:	b672      	cpsid	i
}
 8001f88:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8001f8a:	79bb      	ldrb	r3, [r7, #6]
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	79f9      	ldrb	r1, [r7, #7]
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	4806      	ldr	r0, [pc, #24]	@ (8001fac <SUBGRF_WriteBuffer+0x40>)
 8001f94:	f002 fb53 	bl	800463e <HAL_SUBGHZ_WriteBuffer>
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	f383 8810 	msr	PRIMASK, r3
}
 8001fa2:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8001fa4:	bf00      	nop
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	200003a8 	.word	0x200003a8

08001fb0 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	6039      	str	r1, [r7, #0]
 8001fba:	71fb      	strb	r3, [r7, #7]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fc0:	f3ef 8310 	mrs	r3, PRIMASK
 8001fc4:	60fb      	str	r3, [r7, #12]
  return(result);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8001fc8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001fca:	b672      	cpsid	i
}
 8001fcc:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8001fce:	79bb      	ldrb	r3, [r7, #6]
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	79f9      	ldrb	r1, [r7, #7]
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	4806      	ldr	r0, [pc, #24]	@ (8001ff0 <SUBGRF_ReadBuffer+0x40>)
 8001fd8:	f002 fb84 	bl	80046e4 <HAL_SUBGHZ_ReadBuffer>
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	f383 8810 	msr	PRIMASK, r3
}
 8001fe6:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8001fe8:	bf00      	nop
 8001fea:	3718      	adds	r7, #24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	200003a8 	.word	0x200003a8

08001ff4 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	6039      	str	r1, [r7, #0]
 8001ffe:	71fb      	strb	r3, [r7, #7]
 8002000:	4613      	mov	r3, r2
 8002002:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002004:	f3ef 8310 	mrs	r3, PRIMASK
 8002008:	60fb      	str	r3, [r7, #12]
  return(result);
 800200a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800200c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800200e:	b672      	cpsid	i
}
 8002010:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8002012:	88bb      	ldrh	r3, [r7, #4]
 8002014:	79f9      	ldrb	r1, [r7, #7]
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	4806      	ldr	r0, [pc, #24]	@ (8002034 <SUBGRF_WriteCommand+0x40>)
 800201a:	f002 fa5d 	bl	80044d8 <HAL_SUBGHZ_ExecSetCmd>
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	f383 8810 	msr	PRIMASK, r3
}
 8002028:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800202a:	bf00      	nop
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	200003a8 	.word	0x200003a8

08002038 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	6039      	str	r1, [r7, #0]
 8002042:	71fb      	strb	r3, [r7, #7]
 8002044:	4613      	mov	r3, r2
 8002046:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002048:	f3ef 8310 	mrs	r3, PRIMASK
 800204c:	60fb      	str	r3, [r7, #12]
  return(result);
 800204e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8002050:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002052:	b672      	cpsid	i
}
 8002054:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8002056:	88bb      	ldrh	r3, [r7, #4]
 8002058:	79f9      	ldrb	r1, [r7, #7]
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	4806      	ldr	r0, [pc, #24]	@ (8002078 <SUBGRF_ReadCommand+0x40>)
 800205e:	f002 fa9a 	bl	8004596 <HAL_SUBGHZ_ExecGetCmd>
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	f383 8810 	msr	PRIMASK, r3
}
 800206c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800206e:	bf00      	nop
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	200003a8 	.word	0x200003a8

0800207c <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	460a      	mov	r2, r1
 8002086:	71fb      	strb	r3, [r7, #7]
 8002088:	4613      	mov	r3, r2
 800208a:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800208c:	2301      	movs	r3, #1
 800208e:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8002090:	79bb      	ldrb	r3, [r7, #6]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d10d      	bne.n	80020b2 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8002096:	79fb      	ldrb	r3, [r7, #7]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d104      	bne.n	80020a6 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800209c:	2302      	movs	r3, #2
 800209e:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 80020a0:	2004      	movs	r0, #4
 80020a2:	f000 f8e7 	bl	8002274 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d107      	bne.n	80020bc <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 80020ac:	2303      	movs	r3, #3
 80020ae:	73fb      	strb	r3, [r7, #15]
 80020b0:	e004      	b.n	80020bc <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 80020b2:	79bb      	ldrb	r3, [r7, #6]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 80020b8:	2301      	movs	r3, #1
 80020ba:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff f931 	bl	8001326 <RBI_ConfigRFSwitch>
}
 80020c4:	bf00      	nop
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 80020d6:	2301      	movs	r3, #1
 80020d8:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 80020da:	f7ff f932 	bl	8001342 <RBI_GetTxConfig>
 80020de:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d016      	beq.n	8002114 <SUBGRF_SetRfTxPower+0x48>
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	dc16      	bgt.n	800211a <SUBGRF_SetRfTxPower+0x4e>
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <SUBGRF_SetRfTxPower+0x2e>
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d00a      	beq.n	800210e <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 80020f8:	e00f      	b.n	800211a <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 80020fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fe:	2b0f      	cmp	r3, #15
 8002100:	dd02      	ble.n	8002108 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8002102:	2302      	movs	r3, #2
 8002104:	73fb      	strb	r3, [r7, #15]
            break;
 8002106:	e009      	b.n	800211c <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8002108:	2301      	movs	r3, #1
 800210a:	73fb      	strb	r3, [r7, #15]
            break;
 800210c:	e006      	b.n	800211c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800210e:	2301      	movs	r3, #1
 8002110:	73fb      	strb	r3, [r7, #15]
            break;
 8002112:	e003      	b.n	800211c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8002114:	2302      	movs	r3, #2
 8002116:	73fb      	strb	r3, [r7, #15]
            break;
 8002118:	e000      	b.n	800211c <SUBGRF_SetRfTxPower+0x50>
            break;
 800211a:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800211c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8002120:	7bfb      	ldrb	r3, [r7, #15]
 8002122:	2202      	movs	r2, #2
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff fc09 	bl	800193c <SUBGRF_SetTxParams>

    return paSelect;
 800212a:	7bfb      	ldrb	r3, [r7, #15]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <HAL_SUBGHZ_TxCpltCallback>:
    return RF_WAKEUP_TIME;
}

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800213c:	4b03      	ldr	r3, [pc, #12]	@ (800214c <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2001      	movs	r0, #1
 8002142:	4798      	blx	r3
}
 8002144:	bf00      	nop
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	20000458 	.word	0x20000458

08002150 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8002158:	4b03      	ldr	r3, [pc, #12]	@ (8002168 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2002      	movs	r0, #2
 800215e:	4798      	blx	r3
}
 8002160:	bf00      	nop
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	20000458 	.word	0x20000458

0800216c <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8002174:	4b03      	ldr	r3, [pc, #12]	@ (8002184 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2040      	movs	r0, #64	@ 0x40
 800217a:	4798      	blx	r3
}
 800217c:	bf00      	nop
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	20000458 	.word	0x20000458

08002188 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8002194:	78fb      	ldrb	r3, [r7, #3]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d002      	beq.n	80021a0 <HAL_SUBGHZ_CADStatusCallback+0x18>
 800219a:	2b01      	cmp	r3, #1
 800219c:	d005      	beq.n	80021aa <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800219e:	e00a      	b.n	80021b6 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 80021a0:	4b07      	ldr	r3, [pc, #28]	@ (80021c0 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2080      	movs	r0, #128	@ 0x80
 80021a6:	4798      	blx	r3
            break;
 80021a8:	e005      	b.n	80021b6 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 80021aa:	4b05      	ldr	r3, [pc, #20]	@ (80021c0 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80021b2:	4798      	blx	r3
            break;
 80021b4:	bf00      	nop
    }
}
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20000458 	.word	0x20000458

080021c4 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 80021cc:	4b04      	ldr	r3, [pc, #16]	@ (80021e0 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80021d4:	4798      	blx	r3
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20000458 	.word	0x20000458

080021e4 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 80021ec:	4b03      	ldr	r3, [pc, #12]	@ (80021fc <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2020      	movs	r0, #32
 80021f2:	4798      	blx	r3
}
 80021f4:	bf00      	nop
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20000458 	.word	0x20000458

08002200 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8002208:	4b03      	ldr	r3, [pc, #12]	@ (8002218 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2004      	movs	r0, #4
 800220e:	4798      	blx	r3
}
 8002210:	bf00      	nop
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	20000458 	.word	0x20000458

0800221c <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8002224:	4b03      	ldr	r3, [pc, #12]	@ (8002234 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2008      	movs	r0, #8
 800222a:	4798      	blx	r3
}
 800222c:	bf00      	nop
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	20000458 	.word	0x20000458

08002238 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8002240:	4b03      	ldr	r3, [pc, #12]	@ (8002250 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2010      	movs	r0, #16
 8002246:	4798      	blx	r3
}
 8002248:	bf00      	nop
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	20000458 	.word	0x20000458

08002254 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 800225c:	4b04      	ldr	r3, [pc, #16]	@ (8002270 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002264:	4798      	blx	r3
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	20000458 	.word	0x20000458

08002274 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800227e:	f7ff f86e 	bl	800135e <RBI_IsDCDC>
 8002282:	4603      	mov	r3, r0
 8002284:	2b01      	cmp	r3, #1
 8002286:	d112      	bne.n	80022ae <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8002288:	f640 1023 	movw	r0, #2339	@ 0x923
 800228c:	f7ff fe38 	bl	8001f00 <SUBGRF_ReadRegister>
 8002290:	4603      	mov	r3, r0
 8002292:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8002294:	7bfb      	ldrb	r3, [r7, #15]
 8002296:	f023 0306 	bic.w	r3, r3, #6
 800229a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800229c:	7bfa      	ldrb	r2, [r7, #15]
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	4619      	mov	r1, r3
 80022a6:	f640 1023 	movw	r0, #2339	@ 0x923
 80022aa:	f7ff fe15 	bl	8001ed8 <SUBGRF_WriteRegister>
  }
}
 80022ae:	bf00      	nop
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022be:	2300      	movs	r3, #0
 80022c0:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022c2:	2003      	movs	r0, #3
 80022c4:	f000 f982 	bl	80025cc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80022c8:	f001 fc50 	bl	8003b6c <HAL_RCC_GetHCLKFreq>
 80022cc:	4603      	mov	r3, r0
 80022ce:	4a09      	ldr	r2, [pc, #36]	@ (80022f4 <HAL_Init+0x3c>)
 80022d0:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022d2:	2000      	movs	r0, #0
 80022d4:	f000 f810 	bl	80022f8 <HAL_InitTick>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d002      	beq.n	80022e4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	71fb      	strb	r3, [r7, #7]
 80022e2:	e001      	b.n	80022e8 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022e4:	f7fe fce9 	bl	8000cba <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022e8:	79fb      	ldrb	r3, [r7, #7]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20000104 	.word	0x20000104

080022f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002300:	2300      	movs	r3, #0
 8002302:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002304:	4b17      	ldr	r3, [pc, #92]	@ (8002364 <HAL_InitTick+0x6c>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d024      	beq.n	8002356 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800230c:	f001 fc2e 	bl	8003b6c <HAL_RCC_GetHCLKFreq>
 8002310:	4602      	mov	r2, r0
 8002312:	4b14      	ldr	r3, [pc, #80]	@ (8002364 <HAL_InitTick+0x6c>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	4619      	mov	r1, r3
 8002318:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800231c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002320:	fbb2 f3f3 	udiv	r3, r2, r3
 8002324:	4618      	mov	r0, r3
 8002326:	f000 f992 	bl	800264e <HAL_SYSTICK_Config>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d10f      	bne.n	8002350 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b0f      	cmp	r3, #15
 8002334:	d809      	bhi.n	800234a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002336:	2200      	movs	r2, #0
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	f04f 30ff 	mov.w	r0, #4294967295
 800233e:	f000 f950 	bl	80025e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002342:	4a09      	ldr	r2, [pc, #36]	@ (8002368 <HAL_InitTick+0x70>)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6013      	str	r3, [r2, #0]
 8002348:	e007      	b.n	800235a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	73fb      	strb	r3, [r7, #15]
 800234e:	e004      	b.n	800235a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	73fb      	strb	r3, [r7, #15]
 8002354:	e001      	b.n	800235a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800235a:	7bfb      	ldrb	r3, [r7, #15]
}
 800235c:	4618      	mov	r0, r3
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	20000118 	.word	0x20000118
 8002368:	20000114 	.word	0x20000114

0800236c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002370:	4b05      	ldr	r3, [pc, #20]	@ (8002388 <HAL_IncTick+0x1c>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	461a      	mov	r2, r3
 8002376:	4b05      	ldr	r3, [pc, #20]	@ (800238c <HAL_IncTick+0x20>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4413      	add	r3, r2
 800237c:	4a03      	ldr	r2, [pc, #12]	@ (800238c <HAL_IncTick+0x20>)
 800237e:	6013      	str	r3, [r2, #0]
}
 8002380:	bf00      	nop
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr
 8002388:	20000118 	.word	0x20000118
 800238c:	2000045c 	.word	0x2000045c

08002390 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  return uwTick;
 8002394:	4b02      	ldr	r3, [pc, #8]	@ (80023a0 <HAL_GetTick+0x10>)
 8002396:	681b      	ldr	r3, [r3, #0]
}
 8002398:	4618      	mov	r0, r3
 800239a:	46bd      	mov	sp, r7
 800239c:	bc80      	pop	{r7}
 800239e:	4770      	bx	lr
 80023a0:	2000045c 	.word	0x2000045c

080023a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023ac:	f7ff fff0 	bl	8002390 <HAL_GetTick>
 80023b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023bc:	d005      	beq.n	80023ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023be:	4b0a      	ldr	r3, [pc, #40]	@ (80023e8 <HAL_Delay+0x44>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	461a      	mov	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	4413      	add	r3, r2
 80023c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023ca:	bf00      	nop
 80023cc:	f7ff ffe0 	bl	8002390 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d8f7      	bhi.n	80023cc <HAL_Delay+0x28>
  {
  }
}
 80023dc:	bf00      	nop
 80023de:	bf00      	nop
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20000118 	.word	0x20000118

080023ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002430 <__NVIC_SetPriorityGrouping+0x44>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002408:	4013      	ands	r3, r2
 800240a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002414:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002418:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800241c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800241e:	4a04      	ldr	r2, [pc, #16]	@ (8002430 <__NVIC_SetPriorityGrouping+0x44>)
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	60d3      	str	r3, [r2, #12]
}
 8002424:	bf00      	nop
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	bc80      	pop	{r7}
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	e000ed00 	.word	0xe000ed00

08002434 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002438:	4b04      	ldr	r3, [pc, #16]	@ (800244c <__NVIC_GetPriorityGrouping+0x18>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	0a1b      	lsrs	r3, r3, #8
 800243e:	f003 0307 	and.w	r3, r3, #7
}
 8002442:	4618      	mov	r0, r3
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	e000ed00 	.word	0xe000ed00

08002450 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800245a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245e:	2b00      	cmp	r3, #0
 8002460:	db0b      	blt.n	800247a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	f003 021f 	and.w	r2, r3, #31
 8002468:	4906      	ldr	r1, [pc, #24]	@ (8002484 <__NVIC_EnableIRQ+0x34>)
 800246a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246e:	095b      	lsrs	r3, r3, #5
 8002470:	2001      	movs	r0, #1
 8002472:	fa00 f202 	lsl.w	r2, r0, r2
 8002476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr
 8002484:	e000e100 	.word	0xe000e100

08002488 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002496:	2b00      	cmp	r3, #0
 8002498:	db12      	blt.n	80024c0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800249a:	79fb      	ldrb	r3, [r7, #7]
 800249c:	f003 021f 	and.w	r2, r3, #31
 80024a0:	490a      	ldr	r1, [pc, #40]	@ (80024cc <__NVIC_DisableIRQ+0x44>)
 80024a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a6:	095b      	lsrs	r3, r3, #5
 80024a8:	2001      	movs	r0, #1
 80024aa:	fa00 f202 	lsl.w	r2, r0, r2
 80024ae:	3320      	adds	r3, #32
 80024b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80024b4:	f3bf 8f4f 	dsb	sy
}
 80024b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80024ba:	f3bf 8f6f 	isb	sy
}
 80024be:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	e000e100 	.word	0xe000e100

080024d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	6039      	str	r1, [r7, #0]
 80024da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	db0a      	blt.n	80024fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	b2da      	uxtb	r2, r3
 80024e8:	490c      	ldr	r1, [pc, #48]	@ (800251c <__NVIC_SetPriority+0x4c>)
 80024ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ee:	0112      	lsls	r2, r2, #4
 80024f0:	b2d2      	uxtb	r2, r2
 80024f2:	440b      	add	r3, r1
 80024f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024f8:	e00a      	b.n	8002510 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	4908      	ldr	r1, [pc, #32]	@ (8002520 <__NVIC_SetPriority+0x50>)
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	3b04      	subs	r3, #4
 8002508:	0112      	lsls	r2, r2, #4
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	440b      	add	r3, r1
 800250e:	761a      	strb	r2, [r3, #24]
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	bc80      	pop	{r7}
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	e000e100 	.word	0xe000e100
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002524:	b480      	push	{r7}
 8002526:	b089      	sub	sp, #36	@ 0x24
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f1c3 0307 	rsb	r3, r3, #7
 800253e:	2b04      	cmp	r3, #4
 8002540:	bf28      	it	cs
 8002542:	2304      	movcs	r3, #4
 8002544:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	3304      	adds	r3, #4
 800254a:	2b06      	cmp	r3, #6
 800254c:	d902      	bls.n	8002554 <NVIC_EncodePriority+0x30>
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	3b03      	subs	r3, #3
 8002552:	e000      	b.n	8002556 <NVIC_EncodePriority+0x32>
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002558:	f04f 32ff 	mov.w	r2, #4294967295
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43da      	mvns	r2, r3
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	401a      	ands	r2, r3
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800256c:	f04f 31ff 	mov.w	r1, #4294967295
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	fa01 f303 	lsl.w	r3, r1, r3
 8002576:	43d9      	mvns	r1, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800257c:	4313      	orrs	r3, r2
         );
}
 800257e:	4618      	mov	r0, r3
 8002580:	3724      	adds	r7, #36	@ 0x24
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr

08002588 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3b01      	subs	r3, #1
 8002594:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002598:	d301      	bcc.n	800259e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800259a:	2301      	movs	r3, #1
 800259c:	e00f      	b.n	80025be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800259e:	4a0a      	ldr	r2, [pc, #40]	@ (80025c8 <SysTick_Config+0x40>)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025a6:	210f      	movs	r1, #15
 80025a8:	f04f 30ff 	mov.w	r0, #4294967295
 80025ac:	f7ff ff90 	bl	80024d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025b0:	4b05      	ldr	r3, [pc, #20]	@ (80025c8 <SysTick_Config+0x40>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025b6:	4b04      	ldr	r3, [pc, #16]	@ (80025c8 <SysTick_Config+0x40>)
 80025b8:	2207      	movs	r2, #7
 80025ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	e000e010 	.word	0xe000e010

080025cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff ff09 	bl	80023ec <__NVIC_SetPriorityGrouping>
}
 80025da:	bf00      	nop
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b086      	sub	sp, #24
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	4603      	mov	r3, r0
 80025ea:	60b9      	str	r1, [r7, #8]
 80025ec:	607a      	str	r2, [r7, #4]
 80025ee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025f0:	f7ff ff20 	bl	8002434 <__NVIC_GetPriorityGrouping>
 80025f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	68b9      	ldr	r1, [r7, #8]
 80025fa:	6978      	ldr	r0, [r7, #20]
 80025fc:	f7ff ff92 	bl	8002524 <NVIC_EncodePriority>
 8002600:	4602      	mov	r2, r0
 8002602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002606:	4611      	mov	r1, r2
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff ff61 	bl	80024d0 <__NVIC_SetPriority>
}
 800260e:	bf00      	nop
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b082      	sub	sp, #8
 800261a:	af00      	add	r7, sp, #0
 800261c:	4603      	mov	r3, r0
 800261e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff ff13 	bl	8002450 <__NVIC_EnableIRQ>
}
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b082      	sub	sp, #8
 8002636:	af00      	add	r7, sp, #0
 8002638:	4603      	mov	r3, r0
 800263a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800263c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff ff21 	bl	8002488 <__NVIC_DisableIRQ>
}
 8002646:	bf00      	nop
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b082      	sub	sp, #8
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7ff ff96 	bl	8002588 <SysTick_Config>
 800265c:	4603      	mov	r3, r0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e04f      	b.n	8002718 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d008      	beq.n	8002696 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2204      	movs	r2, #4
 8002688:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e040      	b.n	8002718 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 020e 	bic.w	r2, r2, #14
 80026a4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 0201 	bic.w	r2, r2, #1
 80026c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ca:	f003 021c 	and.w	r2, r3, #28
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d2:	2101      	movs	r1, #1
 80026d4:	fa01 f202 	lsl.w	r2, r1, r2
 80026d8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80026e2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00c      	beq.n	8002706 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026fa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002704:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr

08002722 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b084      	sub	sp, #16
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800272a:	2300      	movs	r3, #0
 800272c:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d005      	beq.n	8002746 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2204      	movs	r2, #4
 800273e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	73fb      	strb	r3, [r7, #15]
 8002744:	e047      	b.n	80027d6 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 020e 	bic.w	r2, r2, #14
 8002754:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 0201 	bic.w	r2, r2, #1
 8002764:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002770:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002774:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800277a:	f003 021c 	and.w	r2, r3, #28
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002782:	2101      	movs	r1, #1
 8002784:	fa01 f202 	lsl.w	r2, r1, r2
 8002788:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002792:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00c      	beq.n	80027b6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027aa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80027b4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	4798      	blx	r3
    }
  }
  return status;
 80027d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b087      	sub	sp, #28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027ea:	2300      	movs	r3, #0
 80027ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027ee:	e140      	b.n	8002a72 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	2101      	movs	r1, #1
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	fa01 f303 	lsl.w	r3, r1, r3
 80027fc:	4013      	ands	r3, r2
 80027fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2b00      	cmp	r3, #0
 8002804:	f000 8132 	beq.w	8002a6c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 0303 	and.w	r3, r3, #3
 8002810:	2b01      	cmp	r3, #1
 8002812:	d005      	beq.n	8002820 <HAL_GPIO_Init+0x40>
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f003 0303 	and.w	r3, r3, #3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d130      	bne.n	8002882 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	2203      	movs	r2, #3
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	43db      	mvns	r3, r3
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	4013      	ands	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	68da      	ldr	r2, [r3, #12]
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	4313      	orrs	r3, r2
 8002848:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002856:	2201      	movs	r2, #1
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	43db      	mvns	r3, r3
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	4013      	ands	r3, r2
 8002864:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	091b      	lsrs	r3, r3, #4
 800286c:	f003 0201 	and.w	r2, r3, #1
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	4313      	orrs	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f003 0303 	and.w	r3, r3, #3
 800288a:	2b03      	cmp	r3, #3
 800288c:	d017      	beq.n	80028be <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	2203      	movs	r2, #3
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43db      	mvns	r3, r3
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	4013      	ands	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 0303 	and.w	r3, r3, #3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d123      	bne.n	8002912 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	08da      	lsrs	r2, r3, #3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	3208      	adds	r2, #8
 80028d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	220f      	movs	r2, #15
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	43db      	mvns	r3, r3
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	4013      	ands	r3, r2
 80028ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	691a      	ldr	r2, [r3, #16]
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	4313      	orrs	r3, r2
 8002902:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	08da      	lsrs	r2, r3, #3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3208      	adds	r2, #8
 800290c:	6939      	ldr	r1, [r7, #16]
 800290e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	2203      	movs	r2, #3
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	43db      	mvns	r3, r3
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	4013      	ands	r3, r2
 8002928:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f003 0203 	and.w	r2, r3, #3
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	4313      	orrs	r3, r2
 800293e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 808c 	beq.w	8002a6c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002954:	4a4e      	ldr	r2, [pc, #312]	@ (8002a90 <HAL_GPIO_Init+0x2b0>)
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	089b      	lsrs	r3, r3, #2
 800295a:	3302      	adds	r3, #2
 800295c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002960:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	f003 0303 	and.w	r3, r3, #3
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	2207      	movs	r2, #7
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	4013      	ands	r3, r2
 8002976:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800297e:	d00d      	beq.n	800299c <HAL_GPIO_Init+0x1bc>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a44      	ldr	r2, [pc, #272]	@ (8002a94 <HAL_GPIO_Init+0x2b4>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d007      	beq.n	8002998 <HAL_GPIO_Init+0x1b8>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a43      	ldr	r2, [pc, #268]	@ (8002a98 <HAL_GPIO_Init+0x2b8>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d101      	bne.n	8002994 <HAL_GPIO_Init+0x1b4>
 8002990:	2302      	movs	r3, #2
 8002992:	e004      	b.n	800299e <HAL_GPIO_Init+0x1be>
 8002994:	2307      	movs	r3, #7
 8002996:	e002      	b.n	800299e <HAL_GPIO_Init+0x1be>
 8002998:	2301      	movs	r3, #1
 800299a:	e000      	b.n	800299e <HAL_GPIO_Init+0x1be>
 800299c:	2300      	movs	r3, #0
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	f002 0203 	and.w	r2, r2, #3
 80029a4:	0092      	lsls	r2, r2, #2
 80029a6:	4093      	lsls	r3, r2
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029ae:	4938      	ldr	r1, [pc, #224]	@ (8002a90 <HAL_GPIO_Init+0x2b0>)
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	089b      	lsrs	r3, r3, #2
 80029b4:	3302      	adds	r3, #2
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029bc:	4b37      	ldr	r3, [pc, #220]	@ (8002a9c <HAL_GPIO_Init+0x2bc>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	43db      	mvns	r3, r3
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	4013      	ands	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	4313      	orrs	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029e0:	4a2e      	ldr	r2, [pc, #184]	@ (8002a9c <HAL_GPIO_Init+0x2bc>)
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80029e6:	4b2d      	ldr	r3, [pc, #180]	@ (8002a9c <HAL_GPIO_Init+0x2bc>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	43db      	mvns	r3, r3
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	4013      	ands	r3, r2
 80029f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a0a:	4a24      	ldr	r2, [pc, #144]	@ (8002a9c <HAL_GPIO_Init+0x2bc>)
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002a10:	4b22      	ldr	r3, [pc, #136]	@ (8002a9c <HAL_GPIO_Init+0x2bc>)
 8002a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a16:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d003      	beq.n	8002a36 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002a36:	4a19      	ldr	r2, [pc, #100]	@ (8002a9c <HAL_GPIO_Init+0x2bc>)
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002a3e:	4b17      	ldr	r3, [pc, #92]	@ (8002a9c <HAL_GPIO_Init+0x2bc>)
 8002a40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a44:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002a64:	4a0d      	ldr	r2, [pc, #52]	@ (8002a9c <HAL_GPIO_Init+0x2bc>)
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	3301      	adds	r3, #1
 8002a70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	fa22 f303 	lsr.w	r3, r2, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f47f aeb7 	bne.w	80027f0 <HAL_GPIO_Init+0x10>
  }
}
 8002a82:	bf00      	nop
 8002a84:	bf00      	nop
 8002a86:	371c      	adds	r7, #28
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bc80      	pop	{r7}
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40010000 	.word	0x40010000
 8002a94:	48000400 	.word	0x48000400
 8002a98:	48000800 	.word	0x48000800
 8002a9c:	58000800 	.word	0x58000800

08002aa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	807b      	strh	r3, [r7, #2]
 8002aac:	4613      	mov	r3, r2
 8002aae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ab0:	787b      	ldrb	r3, [r7, #1]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ab6:	887a      	ldrh	r2, [r7, #2]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002abc:	e002      	b.n	8002ac4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002abe:	887a      	ldrh	r2, [r7, #2]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bc80      	pop	{r7}
 8002acc:	4770      	bx	lr

08002ace <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b085      	sub	sp, #20
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ae0:	887a      	ldrh	r2, [r7, #2]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	041a      	lsls	r2, r3, #16
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	43d9      	mvns	r1, r3
 8002aec:	887b      	ldrh	r3, [r7, #2]
 8002aee:	400b      	ands	r3, r1
 8002af0:	431a      	orrs	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	619a      	str	r2, [r3, #24]
}
 8002af6:	bf00      	nop
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bc80      	pop	{r7}
 8002afe:	4770      	bx	lr

08002b00 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b04:	4b04      	ldr	r3, [pc, #16]	@ (8002b18 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a03      	ldr	r2, [pc, #12]	@ (8002b18 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002b0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b0e:	6013      	str	r3, [r2, #0]
}
 8002b10:	bf00      	nop
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bc80      	pop	{r7}
 8002b16:	4770      	bx	lr
 8002b18:	58000400 	.word	0x58000400

08002b1c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002b20:	4b03      	ldr	r3, [pc, #12]	@ (8002b30 <HAL_PWREx_GetVoltageRange+0x14>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr
 8002b30:	58000400 	.word	0x58000400

08002b34 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002b38:	4b06      	ldr	r3, [pc, #24]	@ (8002b54 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b44:	d101      	bne.n	8002b4a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002b46:	2301      	movs	r3, #1
 8002b48:	e000      	b.n	8002b4c <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr
 8002b54:	58000400 	.word	0x58000400

08002b58 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002b5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b66:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002b6a:	6013      	str	r3, [r2, #0]
}
 8002b6c:	bf00      	nop
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr

08002b74 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002b78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b82:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002b86:	6013      	str	r3, [r2, #0]
}
 8002b88:	bf00      	nop
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr

08002b90 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002b94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ba2:	d101      	bne.n	8002ba8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e000      	b.n	8002baa <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr

08002bb2 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002bb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bc4:	6013      	str	r3, [r2, #0]
}
 8002bc6:	bf00      	nop
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bc80      	pop	{r7}
 8002bcc:	4770      	bx	lr

08002bce <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002bd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002be0:	6013      	str	r3, [r2, #0]
}
 8002be2:	bf00      	nop
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bc80      	pop	{r7}
 8002be8:	4770      	bx	lr

08002bea <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002bea:	b480      	push	{r7}
 8002bec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002bee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002bfc:	d101      	bne.n	8002c02 <LL_RCC_HSE_IsReady+0x18>
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e000      	b.n	8002c04 <LL_RCC_HSE_IsReady+0x1a>
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr

08002c0c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002c10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c1e:	6013      	str	r3, [r2, #0]
}
 8002c20:	bf00      	nop
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bc80      	pop	{r7}
 8002c26:	4770      	bx	lr

08002c28 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002c2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c36:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c3a:	6013      	str	r3, [r2, #0]
}
 8002c3c:	bf00      	nop
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr

08002c44 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002c48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c56:	d101      	bne.n	8002c5c <LL_RCC_HSI_IsReady+0x18>
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e000      	b.n	8002c5e <LL_RCC_HSI_IsReady+0x1a>
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bc80      	pop	{r7}
 8002c64:	4770      	bx	lr

08002c66 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b083      	sub	sp, #12
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002c6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	061b      	lsls	r3, r3, #24
 8002c7c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c80:	4313      	orrs	r3, r2
 8002c82:	604b      	str	r3, [r1, #4]
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bc80      	pop	{r7}
 8002c8c:	4770      	bx	lr

08002c8e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002c92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d101      	bne.n	8002ca6 <LL_RCC_LSE_IsReady+0x18>
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <LL_RCC_LSE_IsReady+0x1a>
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bc80      	pop	{r7}
 8002cae:	4770      	bx	lr

08002cb0 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002cb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cbc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002cc0:	f043 0301 	orr.w	r3, r3, #1
 8002cc4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002cc8:	bf00      	nop
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr

08002cd0 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002cd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cdc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ce0:	f023 0301 	bic.w	r3, r3, #1
 8002ce4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002ce8:	bf00      	nop
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bc80      	pop	{r7}
 8002cee:	4770      	bx	lr

08002cf0 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002cf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d101      	bne.n	8002d08 <LL_RCC_LSI_IsReady+0x18>
 8002d04:	2301      	movs	r3, #1
 8002d06:	e000      	b.n	8002d0a <LL_RCC_LSI_IsReady+0x1a>
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bc80      	pop	{r7}
 8002d10:	4770      	bx	lr

08002d12 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002d12:	b480      	push	{r7}
 8002d14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002d16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d20:	f043 0301 	orr.w	r3, r3, #1
 8002d24:	6013      	str	r3, [r2, #0]
}
 8002d26:	bf00      	nop
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr

08002d2e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002d32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d3c:	f023 0301 	bic.w	r3, r3, #1
 8002d40:	6013      	str	r3, [r2, #0]
}
 8002d42:	bf00      	nop
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bc80      	pop	{r7}
 8002d48:	4770      	bx	lr

08002d4a <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002d4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d101      	bne.n	8002d60 <LL_RCC_MSI_IsReady+0x16>
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e000      	b.n	8002d62 <LL_RCC_MSI_IsReady+0x18>
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bc80      	pop	{r7}
 8002d68:	4770      	bx	lr

08002d6a <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002d6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0308 	and.w	r3, r3, #8
 8002d78:	2b08      	cmp	r3, #8
 8002d7a:	d101      	bne.n	8002d80 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e000      	b.n	8002d82 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bc80      	pop	{r7}
 8002d88:	4770      	bx	lr

08002d8a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002d8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr

08002da0 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002da4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002da8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dac:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr

08002db8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002dc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	021b      	lsls	r3, r3, #8
 8002dce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	604b      	str	r3, [r1, #4]
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bc80      	pop	{r7}
 8002dde:	4770      	bx	lr

08002de0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002de8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f023 0203 	bic.w	r2, r3, #3
 8002df2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	608b      	str	r3, [r1, #8]
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bc80      	pop	{r7}
 8002e04:	4770      	bx	lr

08002e06 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002e06:	b480      	push	{r7}
 8002e08:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002e0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f003 030c 	and.w	r3, r3, #12
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr

08002e1c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002e24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	608b      	str	r3, [r1, #8]
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bc80      	pop	{r7}
 8002e40:	4770      	bx	lr

08002e42 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b083      	sub	sp, #12
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002e4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e4e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002e52:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002e62:	bf00      	nop
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bc80      	pop	{r7}
 8002e6a:	4770      	bx	lr

08002e6c <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002e74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e78:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002e7c:	f023 020f 	bic.w	r2, r3, #15
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	091b      	lsrs	r3, r3, #4
 8002e84:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bc80      	pop	{r7}
 8002e96:	4770      	bx	lr

08002e98 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002ea0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002eaa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	608b      	str	r3, [r1, #8]
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bc80      	pop	{r7}
 8002ebc:	4770      	bx	lr

08002ebe <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b083      	sub	sp, #12
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002ec6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ed0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	608b      	str	r3, [r1, #8]
}
 8002eda:	bf00      	nop
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bc80      	pop	{r7}
 8002ee2:	4770      	bx	lr

08002ee4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002ee8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bc80      	pop	{r7}
 8002ef8:	4770      	bx	lr

08002efa <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8002efa:	b480      	push	{r7}
 8002efc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002efe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f02:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002f06:	011b      	lsls	r3, r3, #4
 8002f08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr

08002f14 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002f18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bc80      	pop	{r7}
 8002f28:	4770      	bx	lr

08002f2a <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002f2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bc80      	pop	{r7}
 8002f3e:	4770      	bx	lr

08002f40 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002f44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f52:	6013      	str	r3, [r2, #0]
}
 8002f54:	bf00      	nop
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr

08002f5c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002f60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f6e:	6013      	str	r3, [r2, #0]
}
 8002f70:	bf00      	nop
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bc80      	pop	{r7}
 8002f76:	4770      	bx	lr

08002f78 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002f7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f8a:	d101      	bne.n	8002f90 <LL_RCC_PLL_IsReady+0x18>
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e000      	b.n	8002f92 <LL_RCC_PLL_IsReady+0x1a>
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bc80      	pop	{r7}
 8002f98:	4770      	bx	lr

08002f9a <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002f9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	0a1b      	lsrs	r3, r3, #8
 8002fa6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bc80      	pop	{r7}
 8002fb0:	4770      	bx	lr

08002fb2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002fb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr

08002fc8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002fcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bc80      	pop	{r7}
 8002fdc:	4770      	bx	lr

08002fde <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002fe2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	f003 0303 	and.w	r3, r3, #3
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bc80      	pop	{r7}
 8002ff2:	4770      	bx	lr

08002ff4 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002ff8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003002:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003006:	d101      	bne.n	800300c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003008:	2301      	movs	r3, #1
 800300a:	e000      	b.n	800300e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	46bd      	mov	sp, r7
 8003012:	bc80      	pop	{r7}
 8003014:	4770      	bx	lr

08003016 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003016:	b480      	push	{r7}
 8003018:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800301a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800301e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003026:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800302a:	d101      	bne.n	8003030 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800302c:	2301      	movs	r3, #1
 800302e:	e000      	b.n	8003032 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	46bd      	mov	sp, r7
 8003036:	bc80      	pop	{r7}
 8003038:	4770      	bx	lr

0800303a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800303a:	b480      	push	{r7}
 800303c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800303e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003042:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003046:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800304a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800304e:	d101      	bne.n	8003054 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003050:	2301      	movs	r3, #1
 8003052:	e000      	b.n	8003056 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	46bd      	mov	sp, r7
 800305a:	bc80      	pop	{r7}
 800305c:	4770      	bx	lr

0800305e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800305e:	b480      	push	{r7}
 8003060:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003062:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800306c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003070:	d101      	bne.n	8003076 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003072:	2301      	movs	r3, #1
 8003074:	e000      	b.n	8003078 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	46bd      	mov	sp, r7
 800307c:	bc80      	pop	{r7}
 800307e:	4770      	bx	lr

08003080 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003084:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800308e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003092:	d101      	bne.n	8003098 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003094:	2301      	movs	r3, #1
 8003096:	e000      	b.n	800309a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	46bd      	mov	sp, r7
 800309e:	bc80      	pop	{r7}
 80030a0:	4770      	bx	lr
	...

080030a4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b088      	sub	sp, #32
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e36f      	b.n	8003796 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030b6:	f7ff fea6 	bl	8002e06 <LL_RCC_GetSysClkSource>
 80030ba:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030bc:	f7ff ff8f 	bl	8002fde <LL_RCC_PLL_GetMainSource>
 80030c0:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0320 	and.w	r3, r3, #32
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f000 80c4 	beq.w	8003258 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d005      	beq.n	80030e2 <HAL_RCC_OscConfig+0x3e>
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	2b0c      	cmp	r3, #12
 80030da:	d176      	bne.n	80031ca <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d173      	bne.n	80031ca <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e353      	b.n	8003796 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0308 	and.w	r3, r3, #8
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d005      	beq.n	800310c <HAL_RCC_OscConfig+0x68>
 8003100:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800310a:	e006      	b.n	800311a <HAL_RCC_OscConfig+0x76>
 800310c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003110:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003114:	091b      	lsrs	r3, r3, #4
 8003116:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800311a:	4293      	cmp	r3, r2
 800311c:	d222      	bcs.n	8003164 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003122:	4618      	mov	r0, r3
 8003124:	f000 fd5a 	bl	8003bdc <RCC_SetFlashLatencyFromMSIRange>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e331      	b.n	8003796 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003132:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800313c:	f043 0308 	orr.w	r3, r3, #8
 8003140:	6013      	str	r3, [r2, #0]
 8003142:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003150:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003154:	4313      	orrs	r3, r2
 8003156:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff fe2b 	bl	8002db8 <LL_RCC_MSI_SetCalibTrimming>
 8003162:	e021      	b.n	80031a8 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003164:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800316e:	f043 0308 	orr.w	r3, r3, #8
 8003172:	6013      	str	r3, [r2, #0]
 8003174:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003182:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003186:	4313      	orrs	r3, r2
 8003188:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318e:	4618      	mov	r0, r3
 8003190:	f7ff fe12 	bl	8002db8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003198:	4618      	mov	r0, r3
 800319a:	f000 fd1f 	bl	8003bdc <RCC_SetFlashLatencyFromMSIRange>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e2f6      	b.n	8003796 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80031a8:	f000 fce0 	bl	8003b6c <HAL_RCC_GetHCLKFreq>
 80031ac:	4603      	mov	r3, r0
 80031ae:	4aa7      	ldr	r2, [pc, #668]	@ (800344c <HAL_RCC_OscConfig+0x3a8>)
 80031b0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80031b2:	4ba7      	ldr	r3, [pc, #668]	@ (8003450 <HAL_RCC_OscConfig+0x3ac>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff f89e 	bl	80022f8 <HAL_InitTick>
 80031bc:	4603      	mov	r3, r0
 80031be:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80031c0:	7cfb      	ldrb	r3, [r7, #19]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d047      	beq.n	8003256 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80031c6:	7cfb      	ldrb	r3, [r7, #19]
 80031c8:	e2e5      	b.n	8003796 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d02c      	beq.n	800322c <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80031d2:	f7ff fd9e 	bl	8002d12 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031d6:	f7ff f8db 	bl	8002390 <HAL_GetTick>
 80031da:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031de:	f7ff f8d7 	bl	8002390 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e2d2      	b.n	8003796 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80031f0:	f7ff fdab 	bl	8002d4a <LL_RCC_MSI_IsReady>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0f1      	beq.n	80031de <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003204:	f043 0308 	orr.w	r3, r3, #8
 8003208:	6013      	str	r3, [r2, #0]
 800320a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003218:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800321c:	4313      	orrs	r3, r2
 800321e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff fdc7 	bl	8002db8 <LL_RCC_MSI_SetCalibTrimming>
 800322a:	e015      	b.n	8003258 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800322c:	f7ff fd7f 	bl	8002d2e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003230:	f7ff f8ae 	bl	8002390 <HAL_GetTick>
 8003234:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003238:	f7ff f8aa 	bl	8002390 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e2a5      	b.n	8003796 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800324a:	f7ff fd7e 	bl	8002d4a <LL_RCC_MSI_IsReady>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1f1      	bne.n	8003238 <HAL_RCC_OscConfig+0x194>
 8003254:	e000      	b.n	8003258 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003256:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b00      	cmp	r3, #0
 8003262:	d058      	beq.n	8003316 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	2b08      	cmp	r3, #8
 8003268:	d005      	beq.n	8003276 <HAL_RCC_OscConfig+0x1d2>
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	2b0c      	cmp	r3, #12
 800326e:	d108      	bne.n	8003282 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	2b03      	cmp	r3, #3
 8003274:	d105      	bne.n	8003282 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d14b      	bne.n	8003316 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e289      	b.n	8003796 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8003282:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003294:	4313      	orrs	r3, r2
 8003296:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032a0:	d102      	bne.n	80032a8 <HAL_RCC_OscConfig+0x204>
 80032a2:	f7ff fc86 	bl	8002bb2 <LL_RCC_HSE_Enable>
 80032a6:	e00d      	b.n	80032c4 <HAL_RCC_OscConfig+0x220>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 80032b0:	d104      	bne.n	80032bc <HAL_RCC_OscConfig+0x218>
 80032b2:	f7ff fc51 	bl	8002b58 <LL_RCC_HSE_EnableTcxo>
 80032b6:	f7ff fc7c 	bl	8002bb2 <LL_RCC_HSE_Enable>
 80032ba:	e003      	b.n	80032c4 <HAL_RCC_OscConfig+0x220>
 80032bc:	f7ff fc87 	bl	8002bce <LL_RCC_HSE_Disable>
 80032c0:	f7ff fc58 	bl	8002b74 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d012      	beq.n	80032f2 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032cc:	f7ff f860 	bl	8002390 <HAL_GetTick>
 80032d0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032d4:	f7ff f85c 	bl	8002390 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b64      	cmp	r3, #100	@ 0x64
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e257      	b.n	8003796 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80032e6:	f7ff fc80 	bl	8002bea <LL_RCC_HSE_IsReady>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0f1      	beq.n	80032d4 <HAL_RCC_OscConfig+0x230>
 80032f0:	e011      	b.n	8003316 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f2:	f7ff f84d 	bl	8002390 <HAL_GetTick>
 80032f6:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80032f8:	e008      	b.n	800330c <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032fa:	f7ff f849 	bl	8002390 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b64      	cmp	r3, #100	@ 0x64
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e244      	b.n	8003796 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 800330c:	f7ff fc6d 	bl	8002bea <LL_RCC_HSE_IsReady>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f1      	bne.n	80032fa <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d046      	beq.n	80033b0 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	2b04      	cmp	r3, #4
 8003326:	d005      	beq.n	8003334 <HAL_RCC_OscConfig+0x290>
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	2b0c      	cmp	r3, #12
 800332c:	d10e      	bne.n	800334c <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	2b02      	cmp	r3, #2
 8003332:	d10b      	bne.n	800334c <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e22a      	b.n	8003796 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff fc8e 	bl	8002c66 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800334a:	e031      	b.n	80033b0 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d019      	beq.n	8003388 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003354:	f7ff fc5a 	bl	8002c0c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003358:	f7ff f81a 	bl	8002390 <HAL_GetTick>
 800335c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003360:	f7ff f816 	bl	8002390 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e211      	b.n	8003796 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003372:	f7ff fc67 	bl	8002c44 <LL_RCC_HSI_IsReady>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d0f1      	beq.n	8003360 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	695b      	ldr	r3, [r3, #20]
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff fc70 	bl	8002c66 <LL_RCC_HSI_SetCalibTrimming>
 8003386:	e013      	b.n	80033b0 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003388:	f7ff fc4e 	bl	8002c28 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338c:	f7ff f800 	bl	8002390 <HAL_GetTick>
 8003390:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003394:	f7fe fffc 	bl	8002390 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e1f7      	b.n	8003796 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80033a6:	f7ff fc4d 	bl	8002c44 <LL_RCC_HSI_IsReady>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1f1      	bne.n	8003394 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0308 	and.w	r3, r3, #8
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d06e      	beq.n	800349a <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d056      	beq.n	8003472 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80033c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033cc:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69da      	ldr	r2, [r3, #28]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f003 0310 	and.w	r3, r3, #16
 80033d8:	429a      	cmp	r2, r3
 80033da:	d031      	beq.n	8003440 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d006      	beq.n	80033f4 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d101      	bne.n	80033f4 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e1d0      	b.n	8003796 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d013      	beq.n	8003426 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80033fe:	f7ff fc67 	bl	8002cd0 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003402:	f7fe ffc5 	bl	8002390 <HAL_GetTick>
 8003406:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800340a:	f7fe ffc1 	bl	8002390 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b11      	cmp	r3, #17
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e1bc      	b.n	8003796 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 800341c:	f7ff fc68 	bl	8002cf0 <LL_RCC_LSI_IsReady>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1f1      	bne.n	800340a <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8003426:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800342a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800342e:	f023 0210 	bic.w	r2, r3, #16
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800343a:	4313      	orrs	r3, r2
 800343c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003440:	f7ff fc36 	bl	8002cb0 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003444:	f7fe ffa4 	bl	8002390 <HAL_GetTick>
 8003448:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800344a:	e00c      	b.n	8003466 <HAL_RCC_OscConfig+0x3c2>
 800344c:	20000104 	.word	0x20000104
 8003450:	20000114 	.word	0x20000114
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003454:	f7fe ff9c 	bl	8002390 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b11      	cmp	r3, #17
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e197      	b.n	8003796 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8003466:	f7ff fc43 	bl	8002cf0 <LL_RCC_LSI_IsReady>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0f1      	beq.n	8003454 <HAL_RCC_OscConfig+0x3b0>
 8003470:	e013      	b.n	800349a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003472:	f7ff fc2d 	bl	8002cd0 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003476:	f7fe ff8b 	bl	8002390 <HAL_GetTick>
 800347a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800347e:	f7fe ff87 	bl	8002390 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b11      	cmp	r3, #17
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e182      	b.n	8003796 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8003490:	f7ff fc2e 	bl	8002cf0 <LL_RCC_LSI_IsReady>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1f1      	bne.n	800347e <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0304 	and.w	r3, r3, #4
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 80d8 	beq.w	8003658 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80034a8:	f7ff fb44 	bl	8002b34 <LL_PWR_IsEnabledBkUpAccess>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d113      	bne.n	80034da <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80034b2:	f7ff fb25 	bl	8002b00 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034b6:	f7fe ff6b 	bl	8002390 <HAL_GetTick>
 80034ba:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80034bc:	e008      	b.n	80034d0 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034be:	f7fe ff67 	bl	8002390 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e162      	b.n	8003796 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80034d0:	f7ff fb30 	bl	8002b34 <LL_PWR_IsEnabledBkUpAccess>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d0f1      	beq.n	80034be <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d07b      	beq.n	80035da <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	2b85      	cmp	r3, #133	@ 0x85
 80034e8:	d003      	beq.n	80034f2 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	2b05      	cmp	r3, #5
 80034f0:	d109      	bne.n	8003506 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80034f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80034fe:	f043 0304 	orr.w	r3, r3, #4
 8003502:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003506:	f7fe ff43 	bl	8002390 <HAL_GetTick>
 800350a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800350c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003514:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003518:	f043 0301 	orr.w	r3, r3, #1
 800351c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003520:	e00a      	b.n	8003538 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003522:	f7fe ff35 	bl	8002390 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003530:	4293      	cmp	r3, r2
 8003532:	d901      	bls.n	8003538 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e12e      	b.n	8003796 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003538:	f7ff fba9 	bl	8002c8e <LL_RCC_LSE_IsReady>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0ef      	beq.n	8003522 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	2b81      	cmp	r3, #129	@ 0x81
 8003548:	d003      	beq.n	8003552 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	2b85      	cmp	r3, #133	@ 0x85
 8003550:	d121      	bne.n	8003596 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003552:	f7fe ff1d 	bl	8002390 <HAL_GetTick>
 8003556:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003558:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800355c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003560:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003564:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003568:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800356c:	e00a      	b.n	8003584 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800356e:	f7fe ff0f 	bl	8002390 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	f241 3288 	movw	r2, #5000	@ 0x1388
 800357c:	4293      	cmp	r3, r2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e108      	b.n	8003796 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003584:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800358c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0ec      	beq.n	800356e <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003594:	e060      	b.n	8003658 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003596:	f7fe fefb 	bl	8002390 <HAL_GetTick>
 800359a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800359c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80035a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80035b0:	e00a      	b.n	80035c8 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035b2:	f7fe feed 	bl	8002390 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e0e6      	b.n	8003796 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80035c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1ec      	bne.n	80035b2 <HAL_RCC_OscConfig+0x50e>
 80035d8:	e03e      	b.n	8003658 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035da:	f7fe fed9 	bl	8002390 <HAL_GetTick>
 80035de:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80035e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80035ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80035f4:	e00a      	b.n	800360c <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035f6:	f7fe fecb 	bl	8002390 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003604:	4293      	cmp	r3, r2
 8003606:	d901      	bls.n	800360c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e0c4      	b.n	8003796 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800360c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003610:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003614:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1ec      	bne.n	80035f6 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800361c:	f7fe feb8 	bl	8002390 <HAL_GetTick>
 8003620:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003622:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800362a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800362e:	f023 0301 	bic.w	r3, r3, #1
 8003632:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003636:	e00a      	b.n	800364e <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003638:	f7fe feaa 	bl	8002390 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003646:	4293      	cmp	r3, r2
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e0a3      	b.n	8003796 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800364e:	f7ff fb1e 	bl	8002c8e <LL_RCC_LSE_IsReady>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1ef      	bne.n	8003638 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 8099 	beq.w	8003794 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	2b0c      	cmp	r3, #12
 8003666:	d06c      	beq.n	8003742 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800366c:	2b02      	cmp	r3, #2
 800366e:	d14b      	bne.n	8003708 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003670:	f7ff fc74 	bl	8002f5c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003674:	f7fe fe8c 	bl	8002390 <HAL_GetTick>
 8003678:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800367a:	e008      	b.n	800368e <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800367c:	f7fe fe88 	bl	8002390 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b0a      	cmp	r3, #10
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e083      	b.n	8003796 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800368e:	f7ff fc73 	bl	8002f78 <LL_RCC_PLL_IsReady>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1f1      	bne.n	800367c <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003698:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800369c:	68da      	ldr	r2, [r3, #12]
 800369e:	4b40      	ldr	r3, [pc, #256]	@ (80037a0 <HAL_RCC_OscConfig+0x6fc>)
 80036a0:	4013      	ands	r3, r2
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80036aa:	4311      	orrs	r1, r2
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80036b0:	0212      	lsls	r2, r2, #8
 80036b2:	4311      	orrs	r1, r2
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80036b8:	4311      	orrs	r1, r2
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80036be:	4311      	orrs	r1, r2
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80036c4:	430a      	orrs	r2, r1
 80036c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80036ca:	4313      	orrs	r3, r2
 80036cc:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036ce:	f7ff fc37 	bl	8002f40 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80036dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036e0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e2:	f7fe fe55 	bl	8002390 <HAL_GetTick>
 80036e6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80036e8:	e008      	b.n	80036fc <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ea:	f7fe fe51 	bl	8002390 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b0a      	cmp	r3, #10
 80036f6:	d901      	bls.n	80036fc <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e04c      	b.n	8003796 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80036fc:	f7ff fc3c 	bl	8002f78 <LL_RCC_PLL_IsReady>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d0f1      	beq.n	80036ea <HAL_RCC_OscConfig+0x646>
 8003706:	e045      	b.n	8003794 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003708:	f7ff fc28 	bl	8002f5c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370c:	f7fe fe40 	bl	8002390 <HAL_GetTick>
 8003710:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003714:	f7fe fe3c 	bl	8002390 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b0a      	cmp	r3, #10
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e037      	b.n	8003796 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003726:	f7ff fc27 	bl	8002f78 <LL_RCC_PLL_IsReady>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1f1      	bne.n	8003714 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003730:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003734:	68da      	ldr	r2, [r3, #12]
 8003736:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800373a:	4b1a      	ldr	r3, [pc, #104]	@ (80037a4 <HAL_RCC_OscConfig+0x700>)
 800373c:	4013      	ands	r3, r2
 800373e:	60cb      	str	r3, [r1, #12]
 8003740:	e028      	b.n	8003794 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003746:	2b01      	cmp	r3, #1
 8003748:	d101      	bne.n	800374e <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e023      	b.n	8003796 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800374e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	f003 0203 	and.w	r2, r3, #3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003760:	429a      	cmp	r2, r3
 8003762:	d115      	bne.n	8003790 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800376e:	429a      	cmp	r2, r3
 8003770:	d10e      	bne.n	8003790 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800377c:	021b      	lsls	r3, r3, #8
 800377e:	429a      	cmp	r2, r3
 8003780:	d106      	bne.n	8003790 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800378c:	429a      	cmp	r2, r3
 800378e:	d001      	beq.n	8003794 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e000      	b.n	8003796 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3720      	adds	r7, #32
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	11c1808c 	.word	0x11c1808c
 80037a4:	eefefffc 	.word	0xeefefffc

080037a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e12c      	b.n	8003a16 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037bc:	4b98      	ldr	r3, [pc, #608]	@ (8003a20 <HAL_RCC_ClockConfig+0x278>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d91b      	bls.n	8003802 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ca:	4b95      	ldr	r3, [pc, #596]	@ (8003a20 <HAL_RCC_ClockConfig+0x278>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f023 0207 	bic.w	r2, r3, #7
 80037d2:	4993      	ldr	r1, [pc, #588]	@ (8003a20 <HAL_RCC_ClockConfig+0x278>)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037da:	f7fe fdd9 	bl	8002390 <HAL_GetTick>
 80037de:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037e0:	e008      	b.n	80037f4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80037e2:	f7fe fdd5 	bl	8002390 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e110      	b.n	8003a16 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037f4:	4b8a      	ldr	r3, [pc, #552]	@ (8003a20 <HAL_RCC_ClockConfig+0x278>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0307 	and.w	r3, r3, #7
 80037fc:	683a      	ldr	r2, [r7, #0]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d1ef      	bne.n	80037e2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d016      	beq.n	800383c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	4618      	mov	r0, r3
 8003814:	f7ff fb02 	bl	8002e1c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003818:	f7fe fdba 	bl	8002390 <HAL_GetTick>
 800381c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800381e:	e008      	b.n	8003832 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003820:	f7fe fdb6 	bl	8002390 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e0f1      	b.n	8003a16 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003832:	f7ff fbdf 	bl	8002ff4 <LL_RCC_IsActiveFlag_HPRE>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d0f1      	beq.n	8003820 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0320 	and.w	r3, r3, #32
 8003844:	2b00      	cmp	r3, #0
 8003846:	d016      	beq.n	8003876 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	4618      	mov	r0, r3
 800384e:	f7ff faf8 	bl	8002e42 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003852:	f7fe fd9d 	bl	8002390 <HAL_GetTick>
 8003856:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003858:	e008      	b.n	800386c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800385a:	f7fe fd99 	bl	8002390 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d901      	bls.n	800386c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e0d4      	b.n	8003a16 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800386c:	f7ff fbd3 	bl	8003016 <LL_RCC_IsActiveFlag_C2HPRE>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0f1      	beq.n	800385a <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800387e:	2b00      	cmp	r3, #0
 8003880:	d016      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff faf0 	bl	8002e6c <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800388c:	f7fe fd80 	bl	8002390 <HAL_GetTick>
 8003890:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003894:	f7fe fd7c 	bl	8002390 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e0b7      	b.n	8003a16 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80038a6:	f7ff fbc8 	bl	800303a <LL_RCC_IsActiveFlag_SHDHPRE>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0f1      	beq.n	8003894 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d016      	beq.n	80038ea <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff fae9 	bl	8002e98 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80038c6:	f7fe fd63 	bl	8002390 <HAL_GetTick>
 80038ca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80038cc:	e008      	b.n	80038e0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80038ce:	f7fe fd5f 	bl	8002390 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e09a      	b.n	8003a16 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80038e0:	f7ff fbbd 	bl	800305e <LL_RCC_IsActiveFlag_PPRE1>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d0f1      	beq.n	80038ce <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0308 	and.w	r3, r3, #8
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d017      	beq.n	8003926 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7ff fade 	bl	8002ebe <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003902:	f7fe fd45 	bl	8002390 <HAL_GetTick>
 8003906:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003908:	e008      	b.n	800391c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800390a:	f7fe fd41 	bl	8002390 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d901      	bls.n	800391c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e07c      	b.n	8003a16 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800391c:	f7ff fbb0 	bl	8003080 <LL_RCC_IsActiveFlag_PPRE2>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d0f1      	beq.n	800390a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d043      	beq.n	80039ba <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	2b02      	cmp	r3, #2
 8003938:	d106      	bne.n	8003948 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800393a:	f7ff f956 	bl	8002bea <LL_RCC_HSE_IsReady>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d11e      	bne.n	8003982 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e066      	b.n	8003a16 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	2b03      	cmp	r3, #3
 800394e:	d106      	bne.n	800395e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003950:	f7ff fb12 	bl	8002f78 <LL_RCC_PLL_IsReady>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d113      	bne.n	8003982 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e05b      	b.n	8003a16 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d106      	bne.n	8003974 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003966:	f7ff f9f0 	bl	8002d4a <LL_RCC_MSI_IsReady>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d108      	bne.n	8003982 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e050      	b.n	8003a16 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003974:	f7ff f966 	bl	8002c44 <LL_RCC_HSI_IsReady>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e049      	b.n	8003a16 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff fa2a 	bl	8002de0 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800398c:	f7fe fd00 	bl	8002390 <HAL_GetTick>
 8003990:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003992:	e00a      	b.n	80039aa <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003994:	f7fe fcfc 	bl	8002390 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e035      	b.n	8003a16 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039aa:	f7ff fa2c 	bl	8002e06 <LL_RCC_GetSysClkSource>
 80039ae:	4602      	mov	r2, r0
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d1ec      	bne.n	8003994 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039ba:	4b19      	ldr	r3, [pc, #100]	@ (8003a20 <HAL_RCC_ClockConfig+0x278>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d21b      	bcs.n	8003a00 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039c8:	4b15      	ldr	r3, [pc, #84]	@ (8003a20 <HAL_RCC_ClockConfig+0x278>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f023 0207 	bic.w	r2, r3, #7
 80039d0:	4913      	ldr	r1, [pc, #76]	@ (8003a20 <HAL_RCC_ClockConfig+0x278>)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039d8:	f7fe fcda 	bl	8002390 <HAL_GetTick>
 80039dc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80039e0:	f7fe fcd6 	bl	8002390 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e011      	b.n	8003a16 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003a20 <HAL_RCC_ClockConfig+0x278>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0307 	and.w	r3, r3, #7
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d1ef      	bne.n	80039e0 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003a00:	f000 f8b4 	bl	8003b6c <HAL_RCC_GetHCLKFreq>
 8003a04:	4603      	mov	r3, r0
 8003a06:	4a07      	ldr	r2, [pc, #28]	@ (8003a24 <HAL_RCC_ClockConfig+0x27c>)
 8003a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8003a0a:	4b07      	ldr	r3, [pc, #28]	@ (8003a28 <HAL_RCC_ClockConfig+0x280>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fe fc72 	bl	80022f8 <HAL_InitTick>
 8003a14:	4603      	mov	r3, r0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	58004000 	.word	0x58004000
 8003a24:	20000104 	.word	0x20000104
 8003a28:	20000114 	.word	0x20000114

08003a2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a2c:	b590      	push	{r4, r7, lr}
 8003a2e:	b087      	sub	sp, #28
 8003a30:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8003a32:	2300      	movs	r3, #0
 8003a34:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8003a36:	2300      	movs	r3, #0
 8003a38:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a3a:	f7ff f9e4 	bl	8002e06 <LL_RCC_GetSysClkSource>
 8003a3e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a40:	f7ff facd 	bl	8002fde <LL_RCC_PLL_GetMainSource>
 8003a44:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d005      	beq.n	8003a58 <HAL_RCC_GetSysClockFreq+0x2c>
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	2b0c      	cmp	r3, #12
 8003a50:	d139      	bne.n	8003ac6 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d136      	bne.n	8003ac6 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003a58:	f7ff f987 	bl	8002d6a <LL_RCC_MSI_IsEnabledRangeSelect>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d115      	bne.n	8003a8e <HAL_RCC_GetSysClockFreq+0x62>
 8003a62:	f7ff f982 	bl	8002d6a <LL_RCC_MSI_IsEnabledRangeSelect>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d106      	bne.n	8003a7a <HAL_RCC_GetSysClockFreq+0x4e>
 8003a6c:	f7ff f98d 	bl	8002d8a <LL_RCC_MSI_GetRange>
 8003a70:	4603      	mov	r3, r0
 8003a72:	0a1b      	lsrs	r3, r3, #8
 8003a74:	f003 030f 	and.w	r3, r3, #15
 8003a78:	e005      	b.n	8003a86 <HAL_RCC_GetSysClockFreq+0x5a>
 8003a7a:	f7ff f991 	bl	8002da0 <LL_RCC_MSI_GetRangeAfterStandby>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	0a1b      	lsrs	r3, r3, #8
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	4a36      	ldr	r2, [pc, #216]	@ (8003b60 <HAL_RCC_GetSysClockFreq+0x134>)
 8003a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a8c:	e014      	b.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x8c>
 8003a8e:	f7ff f96c 	bl	8002d6a <LL_RCC_MSI_IsEnabledRangeSelect>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d106      	bne.n	8003aa6 <HAL_RCC_GetSysClockFreq+0x7a>
 8003a98:	f7ff f977 	bl	8002d8a <LL_RCC_MSI_GetRange>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	091b      	lsrs	r3, r3, #4
 8003aa0:	f003 030f 	and.w	r3, r3, #15
 8003aa4:	e005      	b.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x86>
 8003aa6:	f7ff f97b 	bl	8002da0 <LL_RCC_MSI_GetRangeAfterStandby>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	091b      	lsrs	r3, r3, #4
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	4a2b      	ldr	r2, [pc, #172]	@ (8003b60 <HAL_RCC_GetSysClockFreq+0x134>)
 8003ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ab8:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d115      	bne.n	8003aec <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003ac4:	e012      	b.n	8003aec <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	2b04      	cmp	r3, #4
 8003aca:	d102      	bne.n	8003ad2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003acc:	4b25      	ldr	r3, [pc, #148]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x138>)
 8003ace:	617b      	str	r3, [r7, #20]
 8003ad0:	e00c      	b.n	8003aec <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	2b08      	cmp	r3, #8
 8003ad6:	d109      	bne.n	8003aec <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003ad8:	f7ff f85a 	bl	8002b90 <LL_RCC_HSE_IsEnabledDiv2>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d102      	bne.n	8003ae8 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003ae2:	4b20      	ldr	r3, [pc, #128]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x138>)
 8003ae4:	617b      	str	r3, [r7, #20]
 8003ae6:	e001      	b.n	8003aec <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003ae8:	4b1f      	ldr	r3, [pc, #124]	@ (8003b68 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003aea:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003aec:	f7ff f98b 	bl	8002e06 <LL_RCC_GetSysClkSource>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b0c      	cmp	r3, #12
 8003af4:	d12f      	bne.n	8003b56 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003af6:	f7ff fa72 	bl	8002fde <LL_RCC_PLL_GetMainSource>
 8003afa:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d003      	beq.n	8003b0a <HAL_RCC_GetSysClockFreq+0xde>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b03      	cmp	r3, #3
 8003b06:	d003      	beq.n	8003b10 <HAL_RCC_GetSysClockFreq+0xe4>
 8003b08:	e00d      	b.n	8003b26 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003b0a:	4b16      	ldr	r3, [pc, #88]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x138>)
 8003b0c:	60fb      	str	r3, [r7, #12]
        break;
 8003b0e:	e00d      	b.n	8003b2c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003b10:	f7ff f83e 	bl	8002b90 <LL_RCC_HSE_IsEnabledDiv2>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d102      	bne.n	8003b20 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003b1a:	4b12      	ldr	r3, [pc, #72]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x138>)
 8003b1c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003b1e:	e005      	b.n	8003b2c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003b20:	4b11      	ldr	r3, [pc, #68]	@ (8003b68 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003b22:	60fb      	str	r3, [r7, #12]
        break;
 8003b24:	e002      	b.n	8003b2c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	60fb      	str	r3, [r7, #12]
        break;
 8003b2a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003b2c:	f7ff fa35 	bl	8002f9a <LL_RCC_PLL_GetN>
 8003b30:	4602      	mov	r2, r0
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	fb03 f402 	mul.w	r4, r3, r2
 8003b38:	f7ff fa46 	bl	8002fc8 <LL_RCC_PLL_GetDivider>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	091b      	lsrs	r3, r3, #4
 8003b40:	3301      	adds	r3, #1
 8003b42:	fbb4 f4f3 	udiv	r4, r4, r3
 8003b46:	f7ff fa34 	bl	8002fb2 <LL_RCC_PLL_GetR>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	0f5b      	lsrs	r3, r3, #29
 8003b4e:	3301      	adds	r3, #1
 8003b50:	fbb4 f3f3 	udiv	r3, r4, r3
 8003b54:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003b56:	697b      	ldr	r3, [r7, #20]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	371c      	adds	r7, #28
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd90      	pop	{r4, r7, pc}
 8003b60:	08007760 	.word	0x08007760
 8003b64:	00f42400 	.word	0x00f42400
 8003b68:	01e84800 	.word	0x01e84800

08003b6c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b6c:	b598      	push	{r3, r4, r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003b70:	f7ff ff5c 	bl	8003a2c <HAL_RCC_GetSysClockFreq>
 8003b74:	4604      	mov	r4, r0
 8003b76:	f7ff f9b5 	bl	8002ee4 <LL_RCC_GetAHBPrescaler>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	091b      	lsrs	r3, r3, #4
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	4a03      	ldr	r2, [pc, #12]	@ (8003b90 <HAL_RCC_GetHCLKFreq+0x24>)
 8003b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b88:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	bd98      	pop	{r3, r4, r7, pc}
 8003b90:	08007700 	.word	0x08007700

08003b94 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b94:	b598      	push	{r3, r4, r7, lr}
 8003b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003b98:	f7ff ffe8 	bl	8003b6c <HAL_RCC_GetHCLKFreq>
 8003b9c:	4604      	mov	r4, r0
 8003b9e:	f7ff f9b9 	bl	8002f14 <LL_RCC_GetAPB1Prescaler>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	0a1b      	lsrs	r3, r3, #8
 8003ba6:	4a03      	ldr	r2, [pc, #12]	@ (8003bb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bac:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	bd98      	pop	{r3, r4, r7, pc}
 8003bb4:	08007740 	.word	0x08007740

08003bb8 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bb8:	b598      	push	{r3, r4, r7, lr}
 8003bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003bbc:	f7ff ffd6 	bl	8003b6c <HAL_RCC_GetHCLKFreq>
 8003bc0:	4604      	mov	r4, r0
 8003bc2:	f7ff f9b2 	bl	8002f2a <LL_RCC_GetAPB2Prescaler>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	0adb      	lsrs	r3, r3, #11
 8003bca:	4a03      	ldr	r2, [pc, #12]	@ (8003bd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bd0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	bd98      	pop	{r3, r4, r7, pc}
 8003bd8:	08007740 	.word	0x08007740

08003bdc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003bdc:	b590      	push	{r4, r7, lr}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	091b      	lsrs	r3, r3, #4
 8003be8:	f003 030f 	and.w	r3, r3, #15
 8003bec:	4a10      	ldr	r2, [pc, #64]	@ (8003c30 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf2:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003bf4:	f7ff f981 	bl	8002efa <LL_RCC_GetAHB3Prescaler>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	091b      	lsrs	r3, r3, #4
 8003bfc:	f003 030f 	and.w	r3, r3, #15
 8003c00:	4a0c      	ldr	r2, [pc, #48]	@ (8003c34 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	4a09      	ldr	r2, [pc, #36]	@ (8003c38 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003c12:	fba2 2303 	umull	r2, r3, r2, r3
 8003c16:	0c9c      	lsrs	r4, r3, #18
 8003c18:	f7fe ff80 	bl	8002b1c <HAL_PWREx_GetVoltageRange>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	4619      	mov	r1, r3
 8003c20:	4620      	mov	r0, r4
 8003c22:	f000 f80b 	bl	8003c3c <RCC_SetFlashLatency>
 8003c26:	4603      	mov	r3, r0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3714      	adds	r7, #20
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd90      	pop	{r4, r7, pc}
 8003c30:	08007760 	.word	0x08007760
 8003c34:	08007700 	.word	0x08007700
 8003c38:	431bde83 	.word	0x431bde83

08003c3c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08e      	sub	sp, #56	@ 0x38
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003c46:	4a3a      	ldr	r2, [pc, #232]	@ (8003d30 <RCC_SetFlashLatency+0xf4>)
 8003c48:	f107 0320 	add.w	r3, r7, #32
 8003c4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c50:	6018      	str	r0, [r3, #0]
 8003c52:	3304      	adds	r3, #4
 8003c54:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003c56:	4a37      	ldr	r2, [pc, #220]	@ (8003d34 <RCC_SetFlashLatency+0xf8>)
 8003c58:	f107 0318 	add.w	r3, r7, #24
 8003c5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c60:	6018      	str	r0, [r3, #0]
 8003c62:	3304      	adds	r3, #4
 8003c64:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003c66:	4a34      	ldr	r2, [pc, #208]	@ (8003d38 <RCC_SetFlashLatency+0xfc>)
 8003c68:	f107 030c 	add.w	r3, r7, #12
 8003c6c:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003c72:	2300      	movs	r3, #0
 8003c74:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c7c:	d11b      	bne.n	8003cb6 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003c7e:	2300      	movs	r3, #0
 8003c80:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c82:	e014      	b.n	8003cae <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	3338      	adds	r3, #56	@ 0x38
 8003c8a:	443b      	add	r3, r7
 8003c8c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003c90:	461a      	mov	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d807      	bhi.n	8003ca8 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	3338      	adds	r3, #56	@ 0x38
 8003c9e:	443b      	add	r3, r7
 8003ca0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003ca4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003ca6:	e021      	b.n	8003cec <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003caa:	3301      	adds	r3, #1
 8003cac:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d9e7      	bls.n	8003c84 <RCC_SetFlashLatency+0x48>
 8003cb4:	e01a      	b.n	8003cec <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cba:	e014      	b.n	8003ce6 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	3338      	adds	r3, #56	@ 0x38
 8003cc2:	443b      	add	r3, r7
 8003cc4:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003cc8:	461a      	mov	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d807      	bhi.n	8003ce0 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	3338      	adds	r3, #56	@ 0x38
 8003cd6:	443b      	add	r3, r7
 8003cd8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003cdc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003cde:	e005      	b.n	8003cec <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d9e7      	bls.n	8003cbc <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003cec:	4b13      	ldr	r3, [pc, #76]	@ (8003d3c <RCC_SetFlashLatency+0x100>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f023 0207 	bic.w	r2, r3, #7
 8003cf4:	4911      	ldr	r1, [pc, #68]	@ (8003d3c <RCC_SetFlashLatency+0x100>)
 8003cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003cfc:	f7fe fb48 	bl	8002390 <HAL_GetTick>
 8003d00:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003d02:	e008      	b.n	8003d16 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003d04:	f7fe fb44 	bl	8002390 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d901      	bls.n	8003d16 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e007      	b.n	8003d26 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003d16:	4b09      	ldr	r3, [pc, #36]	@ (8003d3c <RCC_SetFlashLatency+0x100>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0307 	and.w	r3, r3, #7
 8003d1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d1ef      	bne.n	8003d04 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3738      	adds	r7, #56	@ 0x38
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	080076e4 	.word	0x080076e4
 8003d34:	080076ec 	.word	0x080076ec
 8003d38:	080076f4 	.word	0x080076f4
 8003d3c:	58004000 	.word	0x58004000

08003d40 <LL_RCC_LSE_IsReady>:
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003d44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d101      	bne.n	8003d58 <LL_RCC_LSE_IsReady+0x18>
 8003d54:	2301      	movs	r3, #1
 8003d56:	e000      	b.n	8003d5a <LL_RCC_LSE_IsReady+0x1a>
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bc80      	pop	{r7}
 8003d60:	4770      	bx	lr

08003d62 <LL_RCC_SetUSARTClockSource>:
{
 8003d62:	b480      	push	{r7}
 8003d64:	b083      	sub	sp, #12
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003d6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d6e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	0c1b      	lsrs	r3, r3, #16
 8003d76:	43db      	mvns	r3, r3
 8003d78:	401a      	ands	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d82:	4313      	orrs	r3, r2
 8003d84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bc80      	pop	{r7}
 8003d90:	4770      	bx	lr

08003d92 <LL_RCC_SetI2SClockSource>:
{
 8003d92:	b480      	push	{r7}
 8003d94:	b083      	sub	sp, #12
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003d9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003da2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003da6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bc80      	pop	{r7}
 8003dba:	4770      	bx	lr

08003dbc <LL_RCC_SetLPUARTClockSource>:
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003dc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dcc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003dd0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bc80      	pop	{r7}
 8003de4:	4770      	bx	lr

08003de6 <LL_RCC_SetI2CClockSource>:
{
 8003de6:	b480      	push	{r7}
 8003de8:	b083      	sub	sp, #12
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003dee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003df2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	091b      	lsrs	r3, r3, #4
 8003dfa:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003dfe:	43db      	mvns	r3, r3
 8003e00:	401a      	ands	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	011b      	lsls	r3, r3, #4
 8003e06:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003e0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bc80      	pop	{r7}
 8003e1c:	4770      	bx	lr

08003e1e <LL_RCC_SetLPTIMClockSource>:
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003e26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e2a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	0c1b      	lsrs	r3, r3, #16
 8003e32:	041b      	lsls	r3, r3, #16
 8003e34:	43db      	mvns	r3, r3
 8003e36:	401a      	ands	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	041b      	lsls	r3, r3, #16
 8003e3c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e40:	4313      	orrs	r3, r2
 8003e42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003e46:	bf00      	nop
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bc80      	pop	{r7}
 8003e4e:	4770      	bx	lr

08003e50 <LL_RCC_SetRNGClockSource>:
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003e58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e60:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003e64:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bc80      	pop	{r7}
 8003e78:	4770      	bx	lr

08003e7a <LL_RCC_SetADCClockSource>:
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b083      	sub	sp, #12
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003e82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e8a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003e8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003e9a:	bf00      	nop
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bc80      	pop	{r7}
 8003ea2:	4770      	bx	lr

08003ea4 <LL_RCC_SetRTCClockSource>:
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003eac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eb4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003eb8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bc80      	pop	{r7}
 8003ecc:	4770      	bx	lr

08003ece <LL_RCC_GetRTCClockSource>:
{
 8003ece:	b480      	push	{r7}
 8003ed0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003ed2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bc80      	pop	{r7}
 8003ee4:	4770      	bx	lr

08003ee6 <LL_RCC_ForceBackupDomainReset>:
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003eea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ef2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ef6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003efa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003efe:	bf00      	nop
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bc80      	pop	{r7}
 8003f04:	4770      	bx	lr

08003f06 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003f06:	b480      	push	{r7}
 8003f08:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003f0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003f1e:	bf00      	nop
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bc80      	pop	{r7}
 8003f24:	4770      	bx	lr
	...

08003f28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003f30:	2300      	movs	r3, #0
 8003f32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003f34:	2300      	movs	r3, #0
 8003f36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003f38:	2300      	movs	r3, #0
 8003f3a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d058      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003f48:	f7fe fdda 	bl	8002b00 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f4c:	f7fe fa20 	bl	8002390 <HAL_GetTick>
 8003f50:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003f52:	e009      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f54:	f7fe fa1c 	bl	8002390 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d902      	bls.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	74fb      	strb	r3, [r7, #19]
        break;
 8003f66:	e006      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003f68:	4b7b      	ldr	r3, [pc, #492]	@ (8004158 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f74:	d1ee      	bne.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003f76:	7cfb      	ldrb	r3, [r7, #19]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d13c      	bne.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003f7c:	f7ff ffa7 	bl	8003ece <LL_RCC_GetRTCClockSource>
 8003f80:	4602      	mov	r2, r0
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d00f      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f96:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f98:	f7ff ffa5 	bl	8003ee6 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f9c:	f7ff ffb3 	bl	8003f06 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003fa0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d014      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb4:	f7fe f9ec 	bl	8002390 <HAL_GetTick>
 8003fb8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003fba:	e00b      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fbc:	f7fe f9e8 	bl	8002390 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d902      	bls.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	74fb      	strb	r3, [r7, #19]
            break;
 8003fd2:	e004      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003fd4:	f7ff feb4 	bl	8003d40 <LL_RCC_LSE_IsReady>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d1ee      	bne.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003fde:	7cfb      	ldrb	r3, [r7, #19]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d105      	bne.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7ff ff5b 	bl	8003ea4 <LL_RCC_SetRTCClockSource>
 8003fee:	e004      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ff0:	7cfb      	ldrb	r3, [r7, #19]
 8003ff2:	74bb      	strb	r3, [r7, #18]
 8003ff4:	e001      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff6:	7cfb      	ldrb	r3, [r7, #19]
 8003ff8:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	d004      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	4618      	mov	r0, r3
 800400c:	f7ff fea9 	bl	8003d62 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d004      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	4618      	mov	r0, r3
 8004022:	f7ff fe9e 	bl	8003d62 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0320 	and.w	r3, r3, #32
 800402e:	2b00      	cmp	r3, #0
 8004030:	d004      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	4618      	mov	r0, r3
 8004038:	f7ff fec0 	bl	8003dbc <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004044:	2b00      	cmp	r3, #0
 8004046:	d004      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	4618      	mov	r0, r3
 800404e:	f7ff fee6 	bl	8003e1e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800405a:	2b00      	cmp	r3, #0
 800405c:	d004      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004062:	4618      	mov	r0, r3
 8004064:	f7ff fedb 	bl	8003e1e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004070:	2b00      	cmp	r3, #0
 8004072:	d004      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff fed0 	bl	8003e1e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004086:	2b00      	cmp	r3, #0
 8004088:	d004      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	4618      	mov	r0, r3
 8004090:	f7ff fea9 	bl	8003de6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800409c:	2b00      	cmp	r3, #0
 800409e:	d004      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7ff fe9e 	bl	8003de6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d004      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7ff fe93 	bl	8003de6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0310 	and.w	r3, r3, #16
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d011      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7ff fe5e 	bl	8003d92 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040de:	d107      	bne.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80040e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040ee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d010      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004100:	4618      	mov	r0, r3
 8004102:	f7ff fea5 	bl	8003e50 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800410a:	2b00      	cmp	r3, #0
 800410c:	d107      	bne.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800410e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004118:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800411c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d011      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800412e:	4618      	mov	r0, r3
 8004130:	f7ff fea3 	bl	8003e7a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004138:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800413c:	d107      	bne.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800413e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004148:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800414c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800414e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004150:	4618      	mov	r0, r3
 8004152:	3718      	adds	r7, #24
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	58000400 	.word	0x58000400

0800415c <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8004164:	4b06      	ldr	r3, [pc, #24]	@ (8004180 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800416c:	4904      	ldr	r1, [pc, #16]	@ (8004180 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4313      	orrs	r3, r2
 8004172:	608b      	str	r3, [r1, #8]
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	bc80      	pop	{r7}
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	58000400 	.word	0x58000400

08004184 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004188:	4b05      	ldr	r3, [pc, #20]	@ (80041a0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800418a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800418e:	4a04      	ldr	r2, [pc, #16]	@ (80041a0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8004190:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004194:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004198:	bf00      	nop
 800419a:	46bd      	mov	sp, r7
 800419c:	bc80      	pop	{r7}
 800419e:	4770      	bx	lr
 80041a0:	58000400 	.word	0x58000400

080041a4 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80041a8:	4b05      	ldr	r3, [pc, #20]	@ (80041c0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80041aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ae:	4a04      	ldr	r2, [pc, #16]	@ (80041c0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80041b0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80041b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80041b8:	bf00      	nop
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bc80      	pop	{r7}
 80041be:	4770      	bx	lr
 80041c0:	58000400 	.word	0x58000400

080041c4 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80041c8:	4b03      	ldr	r3, [pc, #12]	@ (80041d8 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80041ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80041ce:	619a      	str	r2, [r3, #24]
}
 80041d0:	bf00      	nop
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bc80      	pop	{r7}
 80041d6:	4770      	bx	lr
 80041d8:	58000400 	.word	0x58000400

080041dc <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 80041dc:	b480      	push	{r7}
 80041de:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80041e0:	4b06      	ldr	r3, [pc, #24]	@ (80041fc <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d101      	bne.n	80041f0 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80041ec:	2301      	movs	r3, #1
 80041ee:	e000      	b.n	80041f2 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bc80      	pop	{r7}
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	58000400 	.word	0x58000400

08004200 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8004204:	4b06      	ldr	r3, [pc, #24]	@ (8004220 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	f003 0304 	and.w	r3, r3, #4
 800420c:	2b04      	cmp	r3, #4
 800420e:	d101      	bne.n	8004214 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8004210:	2301      	movs	r3, #1
 8004212:	e000      	b.n	8004216 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	46bd      	mov	sp, r7
 800421a:	bc80      	pop	{r7}
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	58000400 	.word	0x58000400

08004224 <LL_RCC_RF_DisableReset>:
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8004228:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800422c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004230:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004234:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004238:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800423c:	bf00      	nop
 800423e:	46bd      	mov	sp, r7
 8004240:	bc80      	pop	{r7}
 8004242:	4770      	bx	lr

08004244 <LL_RCC_IsRFUnderReset>:
{
 8004244:	b480      	push	{r7}
 8004246:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8004248:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800424c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004250:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004254:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004258:	d101      	bne.n	800425e <LL_RCC_IsRFUnderReset+0x1a>
 800425a:	2301      	movs	r3, #1
 800425c:	e000      	b.n	8004260 <LL_RCC_IsRFUnderReset+0x1c>
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	46bd      	mov	sp, r7
 8004264:	bc80      	pop	{r7}
 8004266:	4770      	bx	lr

08004268 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8004270:	4b06      	ldr	r3, [pc, #24]	@ (800428c <LL_EXTI_EnableIT_32_63+0x24>)
 8004272:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004276:	4905      	ldr	r1, [pc, #20]	@ (800428c <LL_EXTI_EnableIT_32_63+0x24>)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4313      	orrs	r3, r2
 800427c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	bc80      	pop	{r7}
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	58000800 	.word	0x58000800

08004290 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d103      	bne.n	80042a6 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	73fb      	strb	r3, [r7, #15]
    return status;
 80042a2:	7bfb      	ldrb	r3, [r7, #15]
 80042a4:	e052      	b.n	800434c <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 80042a6:	2300      	movs	r3, #0
 80042a8:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	799b      	ldrb	r3, [r3, #6]
 80042ae:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 80042b0:	7bbb      	ldrb	r3, [r7, #14]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d002      	beq.n	80042bc <HAL_SUBGHZ_Init+0x2c>
 80042b6:	7bbb      	ldrb	r3, [r7, #14]
 80042b8:	2b03      	cmp	r3, #3
 80042ba:	d109      	bne.n	80042d0 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7fc fd6a 	bl	8000d9c <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80042c8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80042cc:	f7ff ffcc 	bl	8004268 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 80042d0:	7bbb      	ldrb	r3, [r7, #14]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d126      	bne.n	8004324 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2202      	movs	r2, #2
 80042da:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 80042dc:	f7ff ffa2 	bl	8004224 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80042e0:	4b1c      	ldr	r3, [pc, #112]	@ (8004354 <HAL_SUBGHZ_Init+0xc4>)
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	4613      	mov	r3, r2
 80042e6:	00db      	lsls	r3, r3, #3
 80042e8:	1a9b      	subs	r3, r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	0cdb      	lsrs	r3, r3, #19
 80042ee:	2264      	movs	r2, #100	@ 0x64
 80042f0:	fb02 f303 	mul.w	r3, r2, r3
 80042f4:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d105      	bne.n	8004308 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	609a      	str	r2, [r3, #8]
        break;
 8004306:	e007      	b.n	8004318 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	3b01      	subs	r3, #1
 800430c:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 800430e:	f7ff ff99 	bl	8004244 <LL_RCC_IsRFUnderReset>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1ee      	bne.n	80042f6 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004318:	f7ff ff34 	bl	8004184 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 800431c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004320:	f7ff ff1c 	bl	800415c <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8004324:	f7ff ff4e 	bl	80041c4 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8004328:	7bfb      	ldrb	r3, [r7, #15]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10a      	bne.n	8004344 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f000 fabc 	bl	80048b0 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	719a      	strb	r2, [r3, #6]

  return status;
 800434a:	7bfb      	ldrb	r3, [r7, #15]
}
 800434c:	4618      	mov	r0, r3
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	20000104 	.word	0x20000104

08004358 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b086      	sub	sp, #24
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	607a      	str	r2, [r7, #4]
 8004362:	461a      	mov	r2, r3
 8004364:	460b      	mov	r3, r1
 8004366:	817b      	strh	r3, [r7, #10]
 8004368:	4613      	mov	r3, r2
 800436a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	799b      	ldrb	r3, [r3, #6]
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b01      	cmp	r3, #1
 8004374:	d14a      	bne.n	800440c <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	795b      	ldrb	r3, [r3, #5]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d101      	bne.n	8004382 <HAL_SUBGHZ_WriteRegisters+0x2a>
 800437e:	2302      	movs	r3, #2
 8004380:	e045      	b.n	800440e <HAL_SUBGHZ_WriteRegisters+0xb6>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2201      	movs	r2, #1
 8004386:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2202      	movs	r2, #2
 800438c:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f000 fb5c 	bl	8004a4c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004394:	f7ff ff06 	bl	80041a4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8004398:	210d      	movs	r1, #13
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f000 faa8 	bl	80048f0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80043a0:	897b      	ldrh	r3, [r7, #10]
 80043a2:	0a1b      	lsrs	r3, r3, #8
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	4619      	mov	r1, r3
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f000 faa0 	bl	80048f0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80043b0:	897b      	ldrh	r3, [r7, #10]
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	4619      	mov	r1, r3
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 fa9a 	bl	80048f0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80043bc:	2300      	movs	r3, #0
 80043be:	82bb      	strh	r3, [r7, #20]
 80043c0:	e00a      	b.n	80043d8 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80043c2:	8abb      	ldrh	r3, [r7, #20]
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	4413      	add	r3, r2
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	4619      	mov	r1, r3
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f000 fa8f 	bl	80048f0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80043d2:	8abb      	ldrh	r3, [r7, #20]
 80043d4:	3301      	adds	r3, #1
 80043d6:	82bb      	strh	r3, [r7, #20]
 80043d8:	8aba      	ldrh	r2, [r7, #20]
 80043da:	893b      	ldrh	r3, [r7, #8]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d3f0      	bcc.n	80043c2 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80043e0:	f7ff fed0 	bl	8004184 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f000 fb55 	bl	8004a94 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d002      	beq.n	80043f8 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	75fb      	strb	r3, [r7, #23]
 80043f6:	e001      	b.n	80043fc <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80043f8:	2300      	movs	r3, #0
 80043fa:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2201      	movs	r2, #1
 8004400:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	715a      	strb	r2, [r3, #5]

    return status;
 8004408:	7dfb      	ldrb	r3, [r7, #23]
 800440a:	e000      	b.n	800440e <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800440c:	2302      	movs	r3, #2
  }
}
 800440e:	4618      	mov	r0, r3
 8004410:	3718      	adds	r7, #24
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b088      	sub	sp, #32
 800441a:	af00      	add	r7, sp, #0
 800441c:	60f8      	str	r0, [r7, #12]
 800441e:	607a      	str	r2, [r7, #4]
 8004420:	461a      	mov	r2, r3
 8004422:	460b      	mov	r3, r1
 8004424:	817b      	strh	r3, [r7, #10]
 8004426:	4613      	mov	r3, r2
 8004428:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	799b      	ldrb	r3, [r3, #6]
 8004432:	b2db      	uxtb	r3, r3
 8004434:	2b01      	cmp	r3, #1
 8004436:	d14a      	bne.n	80044ce <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	795b      	ldrb	r3, [r3, #5]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d101      	bne.n	8004444 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8004440:	2302      	movs	r3, #2
 8004442:	e045      	b.n	80044d0 <HAL_SUBGHZ_ReadRegisters+0xba>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2201      	movs	r2, #1
 8004448:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f000 fafe 	bl	8004a4c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004450:	f7ff fea8 	bl	80041a4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8004454:	211d      	movs	r1, #29
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f000 fa4a 	bl	80048f0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800445c:	897b      	ldrh	r3, [r7, #10]
 800445e:	0a1b      	lsrs	r3, r3, #8
 8004460:	b29b      	uxth	r3, r3
 8004462:	b2db      	uxtb	r3, r3
 8004464:	4619      	mov	r1, r3
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f000 fa42 	bl	80048f0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800446c:	897b      	ldrh	r3, [r7, #10]
 800446e:	b2db      	uxtb	r3, r3
 8004470:	4619      	mov	r1, r3
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f000 fa3c 	bl	80048f0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8004478:	2100      	movs	r1, #0
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f000 fa38 	bl	80048f0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004480:	2300      	movs	r3, #0
 8004482:	82fb      	strh	r3, [r7, #22]
 8004484:	e009      	b.n	800449a <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004486:	69b9      	ldr	r1, [r7, #24]
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f000 fa87 	bl	800499c <SUBGHZSPI_Receive>
      pData++;
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	3301      	adds	r3, #1
 8004492:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004494:	8afb      	ldrh	r3, [r7, #22]
 8004496:	3301      	adds	r3, #1
 8004498:	82fb      	strh	r3, [r7, #22]
 800449a:	8afa      	ldrh	r2, [r7, #22]
 800449c:	893b      	ldrh	r3, [r7, #8]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d3f1      	bcc.n	8004486 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80044a2:	f7ff fe6f 	bl	8004184 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f000 faf4 	bl	8004a94 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d002      	beq.n	80044ba <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	77fb      	strb	r3, [r7, #31]
 80044b8:	e001      	b.n	80044be <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80044ba:	2300      	movs	r3, #0
 80044bc:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2201      	movs	r2, #1
 80044c2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	715a      	strb	r2, [r3, #5]

    return status;
 80044ca:	7ffb      	ldrb	r3, [r7, #31]
 80044cc:	e000      	b.n	80044d0 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80044ce:	2302      	movs	r3, #2
  }
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3720      	adds	r7, #32
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	607a      	str	r2, [r7, #4]
 80044e2:	461a      	mov	r2, r3
 80044e4:	460b      	mov	r3, r1
 80044e6:	72fb      	strb	r3, [r7, #11]
 80044e8:	4613      	mov	r3, r2
 80044ea:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	799b      	ldrb	r3, [r3, #6]
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d14a      	bne.n	800458c <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	795b      	ldrb	r3, [r3, #5]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d101      	bne.n	8004502 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 80044fe:	2302      	movs	r3, #2
 8004500:	e045      	b.n	800458e <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2201      	movs	r2, #1
 8004506:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f000 fa9f 	bl	8004a4c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800450e:	7afb      	ldrb	r3, [r7, #11]
 8004510:	2b84      	cmp	r3, #132	@ 0x84
 8004512:	d002      	beq.n	800451a <HAL_SUBGHZ_ExecSetCmd+0x42>
 8004514:	7afb      	ldrb	r3, [r7, #11]
 8004516:	2b94      	cmp	r3, #148	@ 0x94
 8004518:	d103      	bne.n	8004522 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2201      	movs	r2, #1
 800451e:	711a      	strb	r2, [r3, #4]
 8004520:	e002      	b.n	8004528 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004528:	f7ff fe3c 	bl	80041a4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800452c:	7afb      	ldrb	r3, [r7, #11]
 800452e:	4619      	mov	r1, r3
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f000 f9dd 	bl	80048f0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004536:	2300      	movs	r3, #0
 8004538:	82bb      	strh	r3, [r7, #20]
 800453a:	e00a      	b.n	8004552 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800453c:	8abb      	ldrh	r3, [r7, #20]
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	4413      	add	r3, r2
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	4619      	mov	r1, r3
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f000 f9d2 	bl	80048f0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800454c:	8abb      	ldrh	r3, [r7, #20]
 800454e:	3301      	adds	r3, #1
 8004550:	82bb      	strh	r3, [r7, #20]
 8004552:	8aba      	ldrh	r2, [r7, #20]
 8004554:	893b      	ldrh	r3, [r7, #8]
 8004556:	429a      	cmp	r2, r3
 8004558:	d3f0      	bcc.n	800453c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800455a:	f7ff fe13 	bl	8004184 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800455e:	7afb      	ldrb	r3, [r7, #11]
 8004560:	2b84      	cmp	r3, #132	@ 0x84
 8004562:	d002      	beq.n	800456a <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f000 fa95 	bl	8004a94 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d002      	beq.n	8004578 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	75fb      	strb	r3, [r7, #23]
 8004576:	e001      	b.n	800457c <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8004578:	2300      	movs	r3, #0
 800457a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2201      	movs	r2, #1
 8004580:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	715a      	strb	r2, [r3, #5]

    return status;
 8004588:	7dfb      	ldrb	r3, [r7, #23]
 800458a:	e000      	b.n	800458e <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800458c:	2302      	movs	r3, #2
  }
}
 800458e:	4618      	mov	r0, r3
 8004590:	3718      	adds	r7, #24
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004596:	b580      	push	{r7, lr}
 8004598:	b088      	sub	sp, #32
 800459a:	af00      	add	r7, sp, #0
 800459c:	60f8      	str	r0, [r7, #12]
 800459e:	607a      	str	r2, [r7, #4]
 80045a0:	461a      	mov	r2, r3
 80045a2:	460b      	mov	r3, r1
 80045a4:	72fb      	strb	r3, [r7, #11]
 80045a6:	4613      	mov	r3, r2
 80045a8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	799b      	ldrb	r3, [r3, #6]
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d13d      	bne.n	8004634 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	795b      	ldrb	r3, [r3, #5]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d101      	bne.n	80045c4 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80045c0:	2302      	movs	r3, #2
 80045c2:	e038      	b.n	8004636 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2201      	movs	r2, #1
 80045c8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f000 fa3e 	bl	8004a4c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80045d0:	f7ff fde8 	bl	80041a4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80045d4:	7afb      	ldrb	r3, [r7, #11]
 80045d6:	4619      	mov	r1, r3
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f000 f989 	bl	80048f0 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80045de:	2100      	movs	r1, #0
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f000 f985 	bl	80048f0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80045e6:	2300      	movs	r3, #0
 80045e8:	82fb      	strh	r3, [r7, #22]
 80045ea:	e009      	b.n	8004600 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80045ec:	69b9      	ldr	r1, [r7, #24]
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f000 f9d4 	bl	800499c <SUBGHZSPI_Receive>
      pData++;
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	3301      	adds	r3, #1
 80045f8:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80045fa:	8afb      	ldrh	r3, [r7, #22]
 80045fc:	3301      	adds	r3, #1
 80045fe:	82fb      	strh	r3, [r7, #22]
 8004600:	8afa      	ldrh	r2, [r7, #22]
 8004602:	893b      	ldrh	r3, [r7, #8]
 8004604:	429a      	cmp	r2, r3
 8004606:	d3f1      	bcc.n	80045ec <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004608:	f7ff fdbc 	bl	8004184 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f000 fa41 	bl	8004a94 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d002      	beq.n	8004620 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	77fb      	strb	r3, [r7, #31]
 800461e:	e001      	b.n	8004624 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8004620:	2300      	movs	r3, #0
 8004622:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2201      	movs	r2, #1
 8004628:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	715a      	strb	r2, [r3, #5]

    return status;
 8004630:	7ffb      	ldrb	r3, [r7, #31]
 8004632:	e000      	b.n	8004636 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004634:	2302      	movs	r3, #2
  }
}
 8004636:	4618      	mov	r0, r3
 8004638:	3720      	adds	r7, #32
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b086      	sub	sp, #24
 8004642:	af00      	add	r7, sp, #0
 8004644:	60f8      	str	r0, [r7, #12]
 8004646:	607a      	str	r2, [r7, #4]
 8004648:	461a      	mov	r2, r3
 800464a:	460b      	mov	r3, r1
 800464c:	72fb      	strb	r3, [r7, #11]
 800464e:	4613      	mov	r3, r2
 8004650:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	799b      	ldrb	r3, [r3, #6]
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b01      	cmp	r3, #1
 800465a:	d13e      	bne.n	80046da <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	795b      	ldrb	r3, [r3, #5]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d101      	bne.n	8004668 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8004664:	2302      	movs	r3, #2
 8004666:	e039      	b.n	80046dc <HAL_SUBGHZ_WriteBuffer+0x9e>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2201      	movs	r2, #1
 800466c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f000 f9ec 	bl	8004a4c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004674:	f7ff fd96 	bl	80041a4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8004678:	210e      	movs	r1, #14
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f000 f938 	bl	80048f0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004680:	7afb      	ldrb	r3, [r7, #11]
 8004682:	4619      	mov	r1, r3
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	f000 f933 	bl	80048f0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800468a:	2300      	movs	r3, #0
 800468c:	82bb      	strh	r3, [r7, #20]
 800468e:	e00a      	b.n	80046a6 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004690:	8abb      	ldrh	r3, [r7, #20]
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	4413      	add	r3, r2
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	4619      	mov	r1, r3
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 f928 	bl	80048f0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80046a0:	8abb      	ldrh	r3, [r7, #20]
 80046a2:	3301      	adds	r3, #1
 80046a4:	82bb      	strh	r3, [r7, #20]
 80046a6:	8aba      	ldrh	r2, [r7, #20]
 80046a8:	893b      	ldrh	r3, [r7, #8]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d3f0      	bcc.n	8004690 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80046ae:	f7ff fd69 	bl	8004184 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f000 f9ee 	bl	8004a94 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d002      	beq.n	80046c6 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	75fb      	strb	r3, [r7, #23]
 80046c4:	e001      	b.n	80046ca <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80046c6:	2300      	movs	r3, #0
 80046c8:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2201      	movs	r2, #1
 80046ce:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	715a      	strb	r2, [r3, #5]

    return status;
 80046d6:	7dfb      	ldrb	r3, [r7, #23]
 80046d8:	e000      	b.n	80046dc <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80046da:	2302      	movs	r3, #2
  }
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3718      	adds	r7, #24
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b088      	sub	sp, #32
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	607a      	str	r2, [r7, #4]
 80046ee:	461a      	mov	r2, r3
 80046f0:	460b      	mov	r3, r1
 80046f2:	72fb      	strb	r3, [r7, #11]
 80046f4:	4613      	mov	r3, r2
 80046f6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	799b      	ldrb	r3, [r3, #6]
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b01      	cmp	r3, #1
 8004704:	d141      	bne.n	800478a <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	795b      	ldrb	r3, [r3, #5]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d101      	bne.n	8004712 <HAL_SUBGHZ_ReadBuffer+0x2e>
 800470e:	2302      	movs	r3, #2
 8004710:	e03c      	b.n	800478c <HAL_SUBGHZ_ReadBuffer+0xa8>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2201      	movs	r2, #1
 8004716:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f000 f997 	bl	8004a4c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800471e:	f7ff fd41 	bl	80041a4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8004722:	211e      	movs	r1, #30
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 f8e3 	bl	80048f0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800472a:	7afb      	ldrb	r3, [r7, #11]
 800472c:	4619      	mov	r1, r3
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f000 f8de 	bl	80048f0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004734:	2100      	movs	r1, #0
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f000 f8da 	bl	80048f0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800473c:	2300      	movs	r3, #0
 800473e:	82fb      	strh	r3, [r7, #22]
 8004740:	e009      	b.n	8004756 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004742:	69b9      	ldr	r1, [r7, #24]
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f000 f929 	bl	800499c <SUBGHZSPI_Receive>
      pData++;
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	3301      	adds	r3, #1
 800474e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004750:	8afb      	ldrh	r3, [r7, #22]
 8004752:	3301      	adds	r3, #1
 8004754:	82fb      	strh	r3, [r7, #22]
 8004756:	8afa      	ldrh	r2, [r7, #22]
 8004758:	893b      	ldrh	r3, [r7, #8]
 800475a:	429a      	cmp	r2, r3
 800475c:	d3f1      	bcc.n	8004742 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800475e:	f7ff fd11 	bl	8004184 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f000 f996 	bl	8004a94 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d002      	beq.n	8004776 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	77fb      	strb	r3, [r7, #31]
 8004774:	e001      	b.n	800477a <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8004776:	2300      	movs	r3, #0
 8004778:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2201      	movs	r2, #1
 800477e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	715a      	strb	r2, [r3, #5]

    return status;
 8004786:	7ffb      	ldrb	r3, [r7, #31]
 8004788:	e000      	b.n	800478c <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800478a:	2302      	movs	r3, #2
  }
}
 800478c:	4618      	mov	r0, r3
 800478e:	3720      	adds	r7, #32
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 800479c:	2300      	movs	r3, #0
 800479e:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 80047a0:	f107 020c 	add.w	r2, r7, #12
 80047a4:	2302      	movs	r3, #2
 80047a6:	2112      	movs	r1, #18
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f7ff fef4 	bl	8004596 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 80047ae:	7b3b      	ldrb	r3, [r7, #12]
 80047b0:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 80047b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80047b6:	021b      	lsls	r3, r3, #8
 80047b8:	b21a      	sxth	r2, r3
 80047ba:	7b7b      	ldrb	r3, [r7, #13]
 80047bc:	b21b      	sxth	r3, r3
 80047be:	4313      	orrs	r3, r2
 80047c0:	b21b      	sxth	r3, r3
 80047c2:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 80047c4:	f107 020c 	add.w	r2, r7, #12
 80047c8:	2302      	movs	r3, #2
 80047ca:	2102      	movs	r1, #2
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f7ff fe83 	bl	80044d8 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80047d2:	89fb      	ldrh	r3, [r7, #14]
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d002      	beq.n	80047e2 <HAL_SUBGHZ_IRQHandler+0x4e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f7fd fca9 	bl	8002134 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 80047e2:	89fb      	ldrh	r3, [r7, #14]
 80047e4:	085b      	lsrs	r3, r3, #1
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d008      	beq.n	8004800 <HAL_SUBGHZ_IRQHandler+0x6c>
      (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) == RESET))
 80047ee:	89fb      	ldrh	r3, [r7, #14]
 80047f0:	099b      	lsrs	r3, r3, #6
 80047f2:	f003 0301 	and.w	r3, r3, #1
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d102      	bne.n	8004800 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7fd fca8 	bl	8002150 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8004800:	89fb      	ldrh	r3, [r7, #14]
 8004802:	089b      	lsrs	r3, r3, #2
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	2b00      	cmp	r3, #0
 800480a:	d002      	beq.n	8004812 <HAL_SUBGHZ_IRQHandler+0x7e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7fd fcf7 	bl	8002200 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8004812:	89fb      	ldrh	r3, [r7, #14]
 8004814:	08db      	lsrs	r3, r3, #3
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b00      	cmp	r3, #0
 800481c:	d002      	beq.n	8004824 <HAL_SUBGHZ_IRQHandler+0x90>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7fd fcfc 	bl	800221c <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8004824:	89fb      	ldrh	r3, [r7, #14]
 8004826:	091b      	lsrs	r3, r3, #4
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	2b00      	cmp	r3, #0
 800482e:	d002      	beq.n	8004836 <HAL_SUBGHZ_IRQHandler+0xa2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f7fd fd01 	bl	8002238 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8004836:	89fb      	ldrh	r3, [r7, #14]
 8004838:	095b      	lsrs	r3, r3, #5
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d002      	beq.n	8004848 <HAL_SUBGHZ_IRQHandler+0xb4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f7fd fcce 	bl	80021e4 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8004848:	89fb      	ldrh	r3, [r7, #14]
 800484a:	099b      	lsrs	r3, r3, #6
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <HAL_SUBGHZ_IRQHandler+0xc6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7fd fc89 	bl	800216c <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800485a:	89fb      	ldrh	r3, [r7, #14]
 800485c:	09db      	lsrs	r3, r3, #7
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00e      	beq.n	8004884 <HAL_SUBGHZ_IRQHandler+0xf0>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8004866:	89fb      	ldrh	r3, [r7, #14]
 8004868:	0a1b      	lsrs	r3, r3, #8
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d004      	beq.n	800487c <HAL_SUBGHZ_IRQHandler+0xe8>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8004872:	2101      	movs	r1, #1
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f7fd fc87 	bl	8002188 <HAL_SUBGHZ_CADStatusCallback>
 800487a:	e003      	b.n	8004884 <HAL_SUBGHZ_IRQHandler+0xf0>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800487c:	2100      	movs	r1, #0
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7fd fc82 	bl	8002188 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8004884:	89fb      	ldrh	r3, [r7, #14]
 8004886:	0a5b      	lsrs	r3, r3, #9
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	2b00      	cmp	r3, #0
 800488e:	d002      	beq.n	8004896 <HAL_SUBGHZ_IRQHandler+0x102>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f7fd fc97 	bl	80021c4 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8004896:	89fb      	ldrh	r3, [r7, #14]
 8004898:	0b9b      	lsrs	r3, r3, #14
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d002      	beq.n	80048a8 <HAL_SUBGHZ_IRQHandler+0x114>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7fd fcd6 	bl	8002254 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 80048a8:	bf00      	nop
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80048b8:	4b0c      	ldr	r3, [pc, #48]	@ (80048ec <SUBGHZSPI_Init+0x3c>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a0b      	ldr	r2, [pc, #44]	@ (80048ec <SUBGHZSPI_Init+0x3c>)
 80048be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048c2:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80048c4:	4a09      	ldr	r2, [pc, #36]	@ (80048ec <SUBGHZSPI_Init+0x3c>)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 80048cc:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80048ce:	4b07      	ldr	r3, [pc, #28]	@ (80048ec <SUBGHZSPI_Init+0x3c>)
 80048d0:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 80048d4:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80048d6:	4b05      	ldr	r3, [pc, #20]	@ (80048ec <SUBGHZSPI_Init+0x3c>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a04      	ldr	r2, [pc, #16]	@ (80048ec <SUBGHZSPI_Init+0x3c>)
 80048dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048e0:	6013      	str	r3, [r2, #0]
}
 80048e2:	bf00      	nop
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bc80      	pop	{r7}
 80048ea:	4770      	bx	lr
 80048ec:	58010000 	.word	0x58010000

080048f0 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b087      	sub	sp, #28
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	460b      	mov	r3, r1
 80048fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80048fc:	2300      	movs	r3, #0
 80048fe:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004900:	4b23      	ldr	r3, [pc, #140]	@ (8004990 <SUBGHZSPI_Transmit+0xa0>)
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	4613      	mov	r3, r2
 8004906:	00db      	lsls	r3, r3, #3
 8004908:	1a9b      	subs	r3, r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	0cdb      	lsrs	r3, r3, #19
 800490e:	2264      	movs	r2, #100	@ 0x64
 8004910:	fb02 f303 	mul.w	r3, r2, r3
 8004914:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d105      	bne.n	8004928 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	609a      	str	r2, [r3, #8]
      break;
 8004926:	e008      	b.n	800493a <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	3b01      	subs	r3, #1
 800492c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800492e:	4b19      	ldr	r3, [pc, #100]	@ (8004994 <SUBGHZSPI_Transmit+0xa4>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b02      	cmp	r3, #2
 8004938:	d1ed      	bne.n	8004916 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800493a:	4b17      	ldr	r3, [pc, #92]	@ (8004998 <SUBGHZSPI_Transmit+0xa8>)
 800493c:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	78fa      	ldrb	r2, [r7, #3]
 8004942:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004944:	4b12      	ldr	r3, [pc, #72]	@ (8004990 <SUBGHZSPI_Transmit+0xa0>)
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	4613      	mov	r3, r2
 800494a:	00db      	lsls	r3, r3, #3
 800494c:	1a9b      	subs	r3, r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	0cdb      	lsrs	r3, r3, #19
 8004952:	2264      	movs	r2, #100	@ 0x64
 8004954:	fb02 f303 	mul.w	r3, r2, r3
 8004958:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d105      	bne.n	800496c <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	609a      	str	r2, [r3, #8]
      break;
 800496a:	e008      	b.n	800497e <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	3b01      	subs	r3, #1
 8004970:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004972:	4b08      	ldr	r3, [pc, #32]	@ (8004994 <SUBGHZSPI_Transmit+0xa4>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b01      	cmp	r3, #1
 800497c:	d1ed      	bne.n	800495a <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800497e:	4b05      	ldr	r3, [pc, #20]	@ (8004994 <SUBGHZSPI_Transmit+0xa4>)
 8004980:	68db      	ldr	r3, [r3, #12]

  return status;
 8004982:	7dfb      	ldrb	r3, [r7, #23]
}
 8004984:	4618      	mov	r0, r3
 8004986:	371c      	adds	r7, #28
 8004988:	46bd      	mov	sp, r7
 800498a:	bc80      	pop	{r7}
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	20000104 	.word	0x20000104
 8004994:	58010000 	.word	0x58010000
 8004998:	5801000c 	.word	0x5801000c

0800499c <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 800499c:	b480      	push	{r7}
 800499e:	b087      	sub	sp, #28
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049a6:	2300      	movs	r3, #0
 80049a8:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80049aa:	4b25      	ldr	r3, [pc, #148]	@ (8004a40 <SUBGHZSPI_Receive+0xa4>)
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	4613      	mov	r3, r2
 80049b0:	00db      	lsls	r3, r3, #3
 80049b2:	1a9b      	subs	r3, r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	0cdb      	lsrs	r3, r3, #19
 80049b8:	2264      	movs	r2, #100	@ 0x64
 80049ba:	fb02 f303 	mul.w	r3, r2, r3
 80049be:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d105      	bne.n	80049d2 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	609a      	str	r2, [r3, #8]
      break;
 80049d0:	e008      	b.n	80049e4 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	3b01      	subs	r3, #1
 80049d6:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80049d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004a44 <SUBGHZSPI_Receive+0xa8>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d1ed      	bne.n	80049c0 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80049e4:	4b18      	ldr	r3, [pc, #96]	@ (8004a48 <SUBGHZSPI_Receive+0xac>)
 80049e6:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	22ff      	movs	r2, #255	@ 0xff
 80049ec:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80049ee:	4b14      	ldr	r3, [pc, #80]	@ (8004a40 <SUBGHZSPI_Receive+0xa4>)
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	4613      	mov	r3, r2
 80049f4:	00db      	lsls	r3, r3, #3
 80049f6:	1a9b      	subs	r3, r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	0cdb      	lsrs	r3, r3, #19
 80049fc:	2264      	movs	r2, #100	@ 0x64
 80049fe:	fb02 f303 	mul.w	r3, r2, r3
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d105      	bne.n	8004a16 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2201      	movs	r2, #1
 8004a12:	609a      	str	r2, [r3, #8]
      break;
 8004a14:	e008      	b.n	8004a28 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004a1c:	4b09      	ldr	r3, [pc, #36]	@ (8004a44 <SUBGHZSPI_Receive+0xa8>)
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d1ed      	bne.n	8004a04 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8004a28:	4b06      	ldr	r3, [pc, #24]	@ (8004a44 <SUBGHZSPI_Receive+0xa8>)
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	b2da      	uxtb	r2, r3
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	701a      	strb	r2, [r3, #0]

  return status;
 8004a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	371c      	adds	r7, #28
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bc80      	pop	{r7}
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	20000104 	.word	0x20000104
 8004a44:	58010000 	.word	0x58010000
 8004a48:	5801000c 	.word	0x5801000c

08004a4c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	791b      	ldrb	r3, [r3, #4]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d111      	bne.n	8004a80 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8004a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8004a90 <SUBGHZ_CheckDeviceReady+0x44>)
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	4613      	mov	r3, r2
 8004a62:	005b      	lsls	r3, r3, #1
 8004a64:	4413      	add	r3, r2
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	0c1b      	lsrs	r3, r3, #16
 8004a6a:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004a6c:	f7ff fb9a 	bl	80041a4 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	3b01      	subs	r3, #1
 8004a74:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1f9      	bne.n	8004a70 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004a7c:	f7ff fb82 	bl	8004184 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 f807 	bl	8004a94 <SUBGHZ_WaitOnBusy>
 8004a86:	4603      	mov	r3, r0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	20000104 	.word	0x20000104

08004a94 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8004aa0:	4b12      	ldr	r3, [pc, #72]	@ (8004aec <SUBGHZ_WaitOnBusy+0x58>)
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	4413      	add	r3, r2
 8004aaa:	00db      	lsls	r3, r3, #3
 8004aac:	0d1b      	lsrs	r3, r3, #20
 8004aae:	2264      	movs	r2, #100	@ 0x64
 8004ab0:	fb02 f303 	mul.w	r3, r2, r3
 8004ab4:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8004ab6:	f7ff fba3 	bl	8004200 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8004aba:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d105      	bne.n	8004ace <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2202      	movs	r2, #2
 8004aca:	609a      	str	r2, [r3, #8]
      break;
 8004acc:	e009      	b.n	8004ae2 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8004ad4:	f7ff fb82 	bl	80041dc <LL_PWR_IsActiveFlag_RFBUSYS>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	4013      	ands	r3, r2
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d0e9      	beq.n	8004ab6 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8004ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3718      	adds	r7, #24
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	20000104 	.word	0x20000104

08004af0 <LL_RCC_GetUSARTClockSource>:
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004af8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004afc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	401a      	ands	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	041b      	lsls	r3, r3, #16
 8004b08:	4313      	orrs	r3, r2
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bc80      	pop	{r7}
 8004b12:	4770      	bx	lr

08004b14 <LL_RCC_GetLPUARTClockSource>:
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004b1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b20:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4013      	ands	r3, r2
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bc80      	pop	{r7}
 8004b30:	4770      	bx	lr

08004b32 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b082      	sub	sp, #8
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e042      	b.n	8004bca <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d106      	bne.n	8004b5c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f7fc f9ec 	bl	8000f34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2224      	movs	r2, #36	@ 0x24
 8004b60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 0201 	bic.w	r2, r2, #1
 8004b72:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d002      	beq.n	8004b82 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 feb1 	bl	80058e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 fc3a 	bl	80053fc <UART_SetConfig>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d101      	bne.n	8004b92 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e01b      	b.n	8004bca <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ba0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004bb0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f042 0201 	orr.w	r2, r2, #1
 8004bc0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 ff2f 	bl	8005a26 <UART_CheckIdleState>
 8004bc8:	4603      	mov	r3, r0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b08a      	sub	sp, #40	@ 0x28
 8004bd6:	af02      	add	r7, sp, #8
 8004bd8:	60f8      	str	r0, [r7, #12]
 8004bda:	60b9      	str	r1, [r7, #8]
 8004bdc:	603b      	str	r3, [r7, #0]
 8004bde:	4613      	mov	r3, r2
 8004be0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004be8:	2b20      	cmp	r3, #32
 8004bea:	d173      	bne.n	8004cd4 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d002      	beq.n	8004bf8 <HAL_UART_Transmit+0x26>
 8004bf2:	88fb      	ldrh	r3, [r7, #6]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e06c      	b.n	8004cd6 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2221      	movs	r2, #33	@ 0x21
 8004c08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c0c:	f7fd fbc0 	bl	8002390 <HAL_GetTick>
 8004c10:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	88fa      	ldrh	r2, [r7, #6]
 8004c16:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	88fa      	ldrh	r2, [r7, #6]
 8004c1e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c2a:	d108      	bne.n	8004c3e <HAL_UART_Transmit+0x6c>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d104      	bne.n	8004c3e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c34:	2300      	movs	r3, #0
 8004c36:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	61bb      	str	r3, [r7, #24]
 8004c3c:	e003      	b.n	8004c46 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c42:	2300      	movs	r3, #0
 8004c44:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c46:	e02c      	b.n	8004ca2 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	9300      	str	r3, [sp, #0]
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	2180      	movs	r1, #128	@ 0x80
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f000 ff35 	bl	8005ac2 <UART_WaitOnFlagUntilTimeout>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e039      	b.n	8004cd6 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10b      	bne.n	8004c80 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	881b      	ldrh	r3, [r3, #0]
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c76:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	3302      	adds	r3, #2
 8004c7c:	61bb      	str	r3, [r7, #24]
 8004c7e:	e007      	b.n	8004c90 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	781a      	ldrb	r2, [r3, #0]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1cc      	bne.n	8004c48 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	2140      	movs	r1, #64	@ 0x40
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f000 ff02 	bl	8005ac2 <UART_WaitOnFlagUntilTimeout>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d001      	beq.n	8004cc8 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e006      	b.n	8004cd6 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	e000      	b.n	8004cd6 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8004cd4:	2302      	movs	r3, #2
  }
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3720      	adds	r7, #32
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
	...

08004ce0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b08a      	sub	sp, #40	@ 0x28
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	4613      	mov	r3, r2
 8004cec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004cf4:	2b20      	cmp	r3, #32
 8004cf6:	d137      	bne.n	8004d68 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d002      	beq.n	8004d04 <HAL_UART_Receive_IT+0x24>
 8004cfe:	88fb      	ldrh	r3, [r7, #6]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d101      	bne.n	8004d08 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e030      	b.n	8004d6a <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a18      	ldr	r2, [pc, #96]	@ (8004d74 <HAL_UART_Receive_IT+0x94>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d01f      	beq.n	8004d58 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d018      	beq.n	8004d58 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	e853 3f00 	ldrex	r3, [r3]
 8004d32:	613b      	str	r3, [r7, #16]
   return(result);
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	461a      	mov	r2, r3
 8004d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d44:	623b      	str	r3, [r7, #32]
 8004d46:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d48:	69f9      	ldr	r1, [r7, #28]
 8004d4a:	6a3a      	ldr	r2, [r7, #32]
 8004d4c:	e841 2300 	strex	r3, r2, [r1]
 8004d50:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1e6      	bne.n	8004d26 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004d58:	88fb      	ldrh	r3, [r7, #6]
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	68b9      	ldr	r1, [r7, #8]
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f000 ff7e 	bl	8005c60 <UART_Start_Receive_IT>
 8004d64:	4603      	mov	r3, r0
 8004d66:	e000      	b.n	8004d6a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d68:	2302      	movs	r3, #2
  }
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3728      	adds	r7, #40	@ 0x28
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	40008000 	.word	0x40008000

08004d78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b0ba      	sub	sp, #232	@ 0xe8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	69db      	ldr	r3, [r3, #28]
 8004d86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004d9e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004da2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004da6:	4013      	ands	r3, r2
 8004da8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004dac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d11b      	bne.n	8004dec <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004db8:	f003 0320 	and.w	r3, r3, #32
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d015      	beq.n	8004dec <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dc4:	f003 0320 	and.w	r3, r3, #32
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d105      	bne.n	8004dd8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004dcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d009      	beq.n	8004dec <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f000 82e3 	beq.w	80053a8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	4798      	blx	r3
      }
      return;
 8004dea:	e2dd      	b.n	80053a8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004dec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f000 8123 	beq.w	800503c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004df6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004dfa:	4b8d      	ldr	r3, [pc, #564]	@ (8005030 <HAL_UART_IRQHandler+0x2b8>)
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d106      	bne.n	8004e10 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004e02:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004e06:	4b8b      	ldr	r3, [pc, #556]	@ (8005034 <HAL_UART_IRQHandler+0x2bc>)
 8004e08:	4013      	ands	r3, r2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f000 8116 	beq.w	800503c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d011      	beq.n	8004e40 <HAL_UART_IRQHandler+0xc8>
 8004e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00b      	beq.n	8004e40 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e36:	f043 0201 	orr.w	r2, r3, #1
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e44:	f003 0302 	and.w	r3, r3, #2
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d011      	beq.n	8004e70 <HAL_UART_IRQHandler+0xf8>
 8004e4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00b      	beq.n	8004e70 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2202      	movs	r2, #2
 8004e5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e66:	f043 0204 	orr.w	r2, r3, #4
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e74:	f003 0304 	and.w	r3, r3, #4
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d011      	beq.n	8004ea0 <HAL_UART_IRQHandler+0x128>
 8004e7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e80:	f003 0301 	and.w	r3, r3, #1
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00b      	beq.n	8004ea0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2204      	movs	r2, #4
 8004e8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e96:	f043 0202 	orr.w	r2, r3, #2
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ea4:	f003 0308 	and.w	r3, r3, #8
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d017      	beq.n	8004edc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004eb0:	f003 0320 	and.w	r3, r3, #32
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d105      	bne.n	8004ec4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004eb8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004ebc:	4b5c      	ldr	r3, [pc, #368]	@ (8005030 <HAL_UART_IRQHandler+0x2b8>)
 8004ebe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00b      	beq.n	8004edc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2208      	movs	r2, #8
 8004eca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ed2:	f043 0208 	orr.w	r2, r3, #8
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ee0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d012      	beq.n	8004f0e <HAL_UART_IRQHandler+0x196>
 8004ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004eec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00c      	beq.n	8004f0e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004efc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f04:	f043 0220 	orr.w	r2, r3, #32
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f000 8249 	beq.w	80053ac <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f1e:	f003 0320 	and.w	r3, r3, #32
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d013      	beq.n	8004f4e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004f26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f2a:	f003 0320 	and.w	r3, r3, #32
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d105      	bne.n	8004f3e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004f32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d007      	beq.n	8004f4e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d003      	beq.n	8004f4e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f54:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f62:	2b40      	cmp	r3, #64	@ 0x40
 8004f64:	d005      	beq.n	8004f72 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004f66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f6a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d054      	beq.n	800501c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 ff94 	bl	8005ea0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f82:	2b40      	cmp	r3, #64	@ 0x40
 8004f84:	d146      	bne.n	8005014 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	3308      	adds	r3, #8
 8004f8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004f94:	e853 3f00 	ldrex	r3, [r3]
 8004f98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004f9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004fa0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fa4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	3308      	adds	r3, #8
 8004fae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004fb2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004fb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004fbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004fc2:	e841 2300 	strex	r3, r2, [r1]
 8004fc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004fca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1d9      	bne.n	8004f86 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d017      	beq.n	800500c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fe2:	4a15      	ldr	r2, [pc, #84]	@ (8005038 <HAL_UART_IRQHandler+0x2c0>)
 8004fe4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fec:	4618      	mov	r0, r3
 8004fee:	f7fd fb98 	bl	8002722 <HAL_DMA_Abort_IT>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d019      	beq.n	800502c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005006:	4610      	mov	r0, r2
 8005008:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800500a:	e00f      	b.n	800502c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 f9e0 	bl	80053d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005012:	e00b      	b.n	800502c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 f9dc 	bl	80053d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800501a:	e007      	b.n	800502c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 f9d8 	bl	80053d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800502a:	e1bf      	b.n	80053ac <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800502c:	bf00      	nop
    return;
 800502e:	e1bd      	b.n	80053ac <HAL_UART_IRQHandler+0x634>
 8005030:	10000001 	.word	0x10000001
 8005034:	04000120 	.word	0x04000120
 8005038:	08005f6b 	.word	0x08005f6b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005040:	2b01      	cmp	r3, #1
 8005042:	f040 8153 	bne.w	80052ec <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800504a:	f003 0310 	and.w	r3, r3, #16
 800504e:	2b00      	cmp	r3, #0
 8005050:	f000 814c 	beq.w	80052ec <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005058:	f003 0310 	and.w	r3, r3, #16
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 8145 	beq.w	80052ec <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2210      	movs	r2, #16
 8005068:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005074:	2b40      	cmp	r3, #64	@ 0x40
 8005076:	f040 80bb 	bne.w	80051f0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005088:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 818f 	beq.w	80053b0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005098:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800509c:	429a      	cmp	r2, r3
 800509e:	f080 8187 	bcs.w	80053b0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80050a8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0320 	and.w	r3, r3, #32
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f040 8087 	bne.w	80051ce <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80050cc:	e853 3f00 	ldrex	r3, [r3]
 80050d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80050d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80050d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	461a      	mov	r2, r3
 80050e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80050ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80050ee:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80050f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80050fa:	e841 2300 	strex	r3, r2, [r1]
 80050fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005102:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1da      	bne.n	80050c0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	3308      	adds	r3, #8
 8005110:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005112:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005114:	e853 3f00 	ldrex	r3, [r3]
 8005118:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800511a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800511c:	f023 0301 	bic.w	r3, r3, #1
 8005120:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	3308      	adds	r3, #8
 800512a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800512e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005132:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005134:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005136:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800513a:	e841 2300 	strex	r3, r2, [r1]
 800513e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005140:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1e1      	bne.n	800510a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	3308      	adds	r3, #8
 800514c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005150:	e853 3f00 	ldrex	r3, [r3]
 8005154:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005156:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005158:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800515c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	3308      	adds	r3, #8
 8005166:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800516a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800516c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005170:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005172:	e841 2300 	strex	r3, r2, [r1]
 8005176:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005178:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1e3      	bne.n	8005146 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2220      	movs	r2, #32
 8005182:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005192:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005194:	e853 3f00 	ldrex	r3, [r3]
 8005198:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800519a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800519c:	f023 0310 	bic.w	r3, r3, #16
 80051a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	461a      	mov	r2, r3
 80051aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80051ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 80051b0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80051b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80051b6:	e841 2300 	strex	r3, r2, [r1]
 80051ba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80051bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1e4      	bne.n	800518c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7fd fa4c 	bl	8002666 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2202      	movs	r2, #2
 80051d2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	4619      	mov	r1, r3
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 f8fb 	bl	80053e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80051ee:	e0df      	b.n	80053b0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800520a:	b29b      	uxth	r3, r3
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 80d1 	beq.w	80053b4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8005212:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 80cc 	beq.w	80053b4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005224:	e853 3f00 	ldrex	r3, [r3]
 8005228:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800522a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800522c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005230:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	461a      	mov	r2, r3
 800523a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800523e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005240:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005242:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005244:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005246:	e841 2300 	strex	r3, r2, [r1]
 800524a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800524c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1e4      	bne.n	800521c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	3308      	adds	r3, #8
 8005258:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525c:	e853 3f00 	ldrex	r3, [r3]
 8005260:	623b      	str	r3, [r7, #32]
   return(result);
 8005262:	6a3b      	ldr	r3, [r7, #32]
 8005264:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005268:	f023 0301 	bic.w	r3, r3, #1
 800526c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	3308      	adds	r3, #8
 8005276:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800527a:	633a      	str	r2, [r7, #48]	@ 0x30
 800527c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005280:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005282:	e841 2300 	strex	r3, r2, [r1]
 8005286:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1e1      	bne.n	8005252 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2220      	movs	r2, #32
 8005292:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	e853 3f00 	ldrex	r3, [r3]
 80052ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f023 0310 	bic.w	r3, r3, #16
 80052b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	461a      	mov	r2, r3
 80052c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80052c4:	61fb      	str	r3, [r7, #28]
 80052c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c8:	69b9      	ldr	r1, [r7, #24]
 80052ca:	69fa      	ldr	r2, [r7, #28]
 80052cc:	e841 2300 	strex	r3, r2, [r1]
 80052d0:	617b      	str	r3, [r7, #20]
   return(result);
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1e4      	bne.n	80052a2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2202      	movs	r2, #2
 80052dc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80052e2:	4619      	mov	r1, r3
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 f87d 	bl	80053e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80052ea:	e063      	b.n	80053b4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80052ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00e      	beq.n	8005316 <HAL_UART_IRQHandler+0x59e>
 80052f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d008      	beq.n	8005316 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800530c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f001 fb88 	bl	8006a24 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005314:	e051      	b.n	80053ba <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800531a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800531e:	2b00      	cmp	r3, #0
 8005320:	d014      	beq.n	800534c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005322:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005326:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800532a:	2b00      	cmp	r3, #0
 800532c:	d105      	bne.n	800533a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800532e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005332:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d008      	beq.n	800534c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800533e:	2b00      	cmp	r3, #0
 8005340:	d03a      	beq.n	80053b8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	4798      	blx	r3
    }
    return;
 800534a:	e035      	b.n	80053b8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800534c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005354:	2b00      	cmp	r3, #0
 8005356:	d009      	beq.n	800536c <HAL_UART_IRQHandler+0x5f4>
 8005358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800535c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005360:	2b00      	cmp	r3, #0
 8005362:	d003      	beq.n	800536c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 fe16 	bl	8005f96 <UART_EndTransmit_IT>
    return;
 800536a:	e026      	b.n	80053ba <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800536c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005370:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d009      	beq.n	800538c <HAL_UART_IRQHandler+0x614>
 8005378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800537c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d003      	beq.n	800538c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f001 fb5f 	bl	8006a48 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800538a:	e016      	b.n	80053ba <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800538c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005390:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d010      	beq.n	80053ba <HAL_UART_IRQHandler+0x642>
 8005398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800539c:	2b00      	cmp	r3, #0
 800539e:	da0c      	bge.n	80053ba <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f001 fb48 	bl	8006a36 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80053a6:	e008      	b.n	80053ba <HAL_UART_IRQHandler+0x642>
      return;
 80053a8:	bf00      	nop
 80053aa:	e006      	b.n	80053ba <HAL_UART_IRQHandler+0x642>
    return;
 80053ac:	bf00      	nop
 80053ae:	e004      	b.n	80053ba <HAL_UART_IRQHandler+0x642>
      return;
 80053b0:	bf00      	nop
 80053b2:	e002      	b.n	80053ba <HAL_UART_IRQHandler+0x642>
      return;
 80053b4:	bf00      	nop
 80053b6:	e000      	b.n	80053ba <HAL_UART_IRQHandler+0x642>
    return;
 80053b8:	bf00      	nop
  }
}
 80053ba:	37e8      	adds	r7, #232	@ 0xe8
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bc80      	pop	{r7}
 80053d0:	4770      	bx	lr

080053d2 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b083      	sub	sp, #12
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80053da:	bf00      	nop
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	bc80      	pop	{r7}
 80053e2:	4770      	bx	lr

080053e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	460b      	mov	r3, r1
 80053ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bc80      	pop	{r7}
 80053f8:	4770      	bx	lr
	...

080053fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005400:	b08c      	sub	sp, #48	@ 0x30
 8005402:	af00      	add	r7, sp, #0
 8005404:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005406:	2300      	movs	r3, #0
 8005408:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	689a      	ldr	r2, [r3, #8]
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	431a      	orrs	r2, r3
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	431a      	orrs	r2, r3
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	69db      	ldr	r3, [r3, #28]
 8005420:	4313      	orrs	r3, r2
 8005422:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	4b94      	ldr	r3, [pc, #592]	@ (800567c <UART_SetConfig+0x280>)
 800542c:	4013      	ands	r3, r2
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	6812      	ldr	r2, [r2, #0]
 8005432:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005434:	430b      	orrs	r3, r1
 8005436:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	68da      	ldr	r2, [r3, #12]
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	430a      	orrs	r2, r1
 800544c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a89      	ldr	r2, [pc, #548]	@ (8005680 <UART_SetConfig+0x284>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d004      	beq.n	8005468 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005464:	4313      	orrs	r3, r2
 8005466:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005472:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	6812      	ldr	r2, [r2, #0]
 800547a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800547c:	430b      	orrs	r3, r1
 800547e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005486:	f023 010f 	bic.w	r1, r3, #15
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a7a      	ldr	r2, [pc, #488]	@ (8005684 <UART_SetConfig+0x288>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d127      	bne.n	80054f0 <UART_SetConfig+0xf4>
 80054a0:	2003      	movs	r0, #3
 80054a2:	f7ff fb25 	bl	8004af0 <LL_RCC_GetUSARTClockSource>
 80054a6:	4603      	mov	r3, r0
 80054a8:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 80054ac:	2b03      	cmp	r3, #3
 80054ae:	d81b      	bhi.n	80054e8 <UART_SetConfig+0xec>
 80054b0:	a201      	add	r2, pc, #4	@ (adr r2, 80054b8 <UART_SetConfig+0xbc>)
 80054b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b6:	bf00      	nop
 80054b8:	080054c9 	.word	0x080054c9
 80054bc:	080054d9 	.word	0x080054d9
 80054c0:	080054d1 	.word	0x080054d1
 80054c4:	080054e1 	.word	0x080054e1
 80054c8:	2301      	movs	r3, #1
 80054ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054ce:	e080      	b.n	80055d2 <UART_SetConfig+0x1d6>
 80054d0:	2302      	movs	r3, #2
 80054d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054d6:	e07c      	b.n	80055d2 <UART_SetConfig+0x1d6>
 80054d8:	2304      	movs	r3, #4
 80054da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054de:	e078      	b.n	80055d2 <UART_SetConfig+0x1d6>
 80054e0:	2308      	movs	r3, #8
 80054e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054e6:	e074      	b.n	80055d2 <UART_SetConfig+0x1d6>
 80054e8:	2310      	movs	r3, #16
 80054ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054ee:	e070      	b.n	80055d2 <UART_SetConfig+0x1d6>
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a64      	ldr	r2, [pc, #400]	@ (8005688 <UART_SetConfig+0x28c>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d138      	bne.n	800556c <UART_SetConfig+0x170>
 80054fa:	200c      	movs	r0, #12
 80054fc:	f7ff faf8 	bl	8004af0 <LL_RCC_GetUSARTClockSource>
 8005500:	4603      	mov	r3, r0
 8005502:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8005506:	2b0c      	cmp	r3, #12
 8005508:	d82c      	bhi.n	8005564 <UART_SetConfig+0x168>
 800550a:	a201      	add	r2, pc, #4	@ (adr r2, 8005510 <UART_SetConfig+0x114>)
 800550c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005510:	08005545 	.word	0x08005545
 8005514:	08005565 	.word	0x08005565
 8005518:	08005565 	.word	0x08005565
 800551c:	08005565 	.word	0x08005565
 8005520:	08005555 	.word	0x08005555
 8005524:	08005565 	.word	0x08005565
 8005528:	08005565 	.word	0x08005565
 800552c:	08005565 	.word	0x08005565
 8005530:	0800554d 	.word	0x0800554d
 8005534:	08005565 	.word	0x08005565
 8005538:	08005565 	.word	0x08005565
 800553c:	08005565 	.word	0x08005565
 8005540:	0800555d 	.word	0x0800555d
 8005544:	2300      	movs	r3, #0
 8005546:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800554a:	e042      	b.n	80055d2 <UART_SetConfig+0x1d6>
 800554c:	2302      	movs	r3, #2
 800554e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005552:	e03e      	b.n	80055d2 <UART_SetConfig+0x1d6>
 8005554:	2304      	movs	r3, #4
 8005556:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800555a:	e03a      	b.n	80055d2 <UART_SetConfig+0x1d6>
 800555c:	2308      	movs	r3, #8
 800555e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005562:	e036      	b.n	80055d2 <UART_SetConfig+0x1d6>
 8005564:	2310      	movs	r3, #16
 8005566:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800556a:	e032      	b.n	80055d2 <UART_SetConfig+0x1d6>
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a43      	ldr	r2, [pc, #268]	@ (8005680 <UART_SetConfig+0x284>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d12a      	bne.n	80055cc <UART_SetConfig+0x1d0>
 8005576:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800557a:	f7ff facb 	bl	8004b14 <LL_RCC_GetLPUARTClockSource>
 800557e:	4603      	mov	r3, r0
 8005580:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005584:	d01a      	beq.n	80055bc <UART_SetConfig+0x1c0>
 8005586:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800558a:	d81b      	bhi.n	80055c4 <UART_SetConfig+0x1c8>
 800558c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005590:	d00c      	beq.n	80055ac <UART_SetConfig+0x1b0>
 8005592:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005596:	d815      	bhi.n	80055c4 <UART_SetConfig+0x1c8>
 8005598:	2b00      	cmp	r3, #0
 800559a:	d003      	beq.n	80055a4 <UART_SetConfig+0x1a8>
 800559c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055a0:	d008      	beq.n	80055b4 <UART_SetConfig+0x1b8>
 80055a2:	e00f      	b.n	80055c4 <UART_SetConfig+0x1c8>
 80055a4:	2300      	movs	r3, #0
 80055a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055aa:	e012      	b.n	80055d2 <UART_SetConfig+0x1d6>
 80055ac:	2302      	movs	r3, #2
 80055ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055b2:	e00e      	b.n	80055d2 <UART_SetConfig+0x1d6>
 80055b4:	2304      	movs	r3, #4
 80055b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055ba:	e00a      	b.n	80055d2 <UART_SetConfig+0x1d6>
 80055bc:	2308      	movs	r3, #8
 80055be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055c2:	e006      	b.n	80055d2 <UART_SetConfig+0x1d6>
 80055c4:	2310      	movs	r3, #16
 80055c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055ca:	e002      	b.n	80055d2 <UART_SetConfig+0x1d6>
 80055cc:	2310      	movs	r3, #16
 80055ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a2a      	ldr	r2, [pc, #168]	@ (8005680 <UART_SetConfig+0x284>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	f040 80a4 	bne.w	8005726 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80055de:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80055e2:	2b08      	cmp	r3, #8
 80055e4:	d823      	bhi.n	800562e <UART_SetConfig+0x232>
 80055e6:	a201      	add	r2, pc, #4	@ (adr r2, 80055ec <UART_SetConfig+0x1f0>)
 80055e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ec:	08005611 	.word	0x08005611
 80055f0:	0800562f 	.word	0x0800562f
 80055f4:	08005619 	.word	0x08005619
 80055f8:	0800562f 	.word	0x0800562f
 80055fc:	0800561f 	.word	0x0800561f
 8005600:	0800562f 	.word	0x0800562f
 8005604:	0800562f 	.word	0x0800562f
 8005608:	0800562f 	.word	0x0800562f
 800560c:	08005627 	.word	0x08005627
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005610:	f7fe fac0 	bl	8003b94 <HAL_RCC_GetPCLK1Freq>
 8005614:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005616:	e010      	b.n	800563a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005618:	4b1c      	ldr	r3, [pc, #112]	@ (800568c <UART_SetConfig+0x290>)
 800561a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800561c:	e00d      	b.n	800563a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800561e:	f7fe fa05 	bl	8003a2c <HAL_RCC_GetSysClockFreq>
 8005622:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005624:	e009      	b.n	800563a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005626:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800562a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800562c:	e005      	b.n	800563a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800562e:	2300      	movs	r3, #0
 8005630:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005638:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800563a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 8137 	beq.w	80058b0 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005646:	4a12      	ldr	r2, [pc, #72]	@ (8005690 <UART_SetConfig+0x294>)
 8005648:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800564c:	461a      	mov	r2, r3
 800564e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005650:	fbb3 f3f2 	udiv	r3, r3, r2
 8005654:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	685a      	ldr	r2, [r3, #4]
 800565a:	4613      	mov	r3, r2
 800565c:	005b      	lsls	r3, r3, #1
 800565e:	4413      	add	r3, r2
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	429a      	cmp	r2, r3
 8005664:	d305      	bcc.n	8005672 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800566c:	69ba      	ldr	r2, [r7, #24]
 800566e:	429a      	cmp	r2, r3
 8005670:	d910      	bls.n	8005694 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005678:	e11a      	b.n	80058b0 <UART_SetConfig+0x4b4>
 800567a:	bf00      	nop
 800567c:	cfff69f3 	.word	0xcfff69f3
 8005680:	40008000 	.word	0x40008000
 8005684:	40013800 	.word	0x40013800
 8005688:	40004400 	.word	0x40004400
 800568c:	00f42400 	.word	0x00f42400
 8005690:	080077a8 	.word	0x080077a8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005696:	2200      	movs	r2, #0
 8005698:	60bb      	str	r3, [r7, #8]
 800569a:	60fa      	str	r2, [r7, #12]
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a0:	4a8e      	ldr	r2, [pc, #568]	@ (80058dc <UART_SetConfig+0x4e0>)
 80056a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	2200      	movs	r2, #0
 80056aa:	603b      	str	r3, [r7, #0]
 80056ac:	607a      	str	r2, [r7, #4]
 80056ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80056b6:	f7fa fdbb 	bl	8000230 <__aeabi_uldivmod>
 80056ba:	4602      	mov	r2, r0
 80056bc:	460b      	mov	r3, r1
 80056be:	4610      	mov	r0, r2
 80056c0:	4619      	mov	r1, r3
 80056c2:	f04f 0200 	mov.w	r2, #0
 80056c6:	f04f 0300 	mov.w	r3, #0
 80056ca:	020b      	lsls	r3, r1, #8
 80056cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80056d0:	0202      	lsls	r2, r0, #8
 80056d2:	6979      	ldr	r1, [r7, #20]
 80056d4:	6849      	ldr	r1, [r1, #4]
 80056d6:	0849      	lsrs	r1, r1, #1
 80056d8:	2000      	movs	r0, #0
 80056da:	460c      	mov	r4, r1
 80056dc:	4605      	mov	r5, r0
 80056de:	eb12 0804 	adds.w	r8, r2, r4
 80056e2:	eb43 0905 	adc.w	r9, r3, r5
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	469a      	mov	sl, r3
 80056ee:	4693      	mov	fp, r2
 80056f0:	4652      	mov	r2, sl
 80056f2:	465b      	mov	r3, fp
 80056f4:	4640      	mov	r0, r8
 80056f6:	4649      	mov	r1, r9
 80056f8:	f7fa fd9a 	bl	8000230 <__aeabi_uldivmod>
 80056fc:	4602      	mov	r2, r0
 80056fe:	460b      	mov	r3, r1
 8005700:	4613      	mov	r3, r2
 8005702:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005704:	6a3b      	ldr	r3, [r7, #32]
 8005706:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800570a:	d308      	bcc.n	800571e <UART_SetConfig+0x322>
 800570c:	6a3b      	ldr	r3, [r7, #32]
 800570e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005712:	d204      	bcs.n	800571e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6a3a      	ldr	r2, [r7, #32]
 800571a:	60da      	str	r2, [r3, #12]
 800571c:	e0c8      	b.n	80058b0 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005724:	e0c4      	b.n	80058b0 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	69db      	ldr	r3, [r3, #28]
 800572a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800572e:	d167      	bne.n	8005800 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8005730:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005734:	2b08      	cmp	r3, #8
 8005736:	d828      	bhi.n	800578a <UART_SetConfig+0x38e>
 8005738:	a201      	add	r2, pc, #4	@ (adr r2, 8005740 <UART_SetConfig+0x344>)
 800573a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800573e:	bf00      	nop
 8005740:	08005765 	.word	0x08005765
 8005744:	0800576d 	.word	0x0800576d
 8005748:	08005775 	.word	0x08005775
 800574c:	0800578b 	.word	0x0800578b
 8005750:	0800577b 	.word	0x0800577b
 8005754:	0800578b 	.word	0x0800578b
 8005758:	0800578b 	.word	0x0800578b
 800575c:	0800578b 	.word	0x0800578b
 8005760:	08005783 	.word	0x08005783
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005764:	f7fe fa16 	bl	8003b94 <HAL_RCC_GetPCLK1Freq>
 8005768:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800576a:	e014      	b.n	8005796 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800576c:	f7fe fa24 	bl	8003bb8 <HAL_RCC_GetPCLK2Freq>
 8005770:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005772:	e010      	b.n	8005796 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005774:	4b5a      	ldr	r3, [pc, #360]	@ (80058e0 <UART_SetConfig+0x4e4>)
 8005776:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005778:	e00d      	b.n	8005796 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800577a:	f7fe f957 	bl	8003a2c <HAL_RCC_GetSysClockFreq>
 800577e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005780:	e009      	b.n	8005796 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005782:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005786:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005788:	e005      	b.n	8005796 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800578a:	2300      	movs	r3, #0
 800578c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005794:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005798:	2b00      	cmp	r3, #0
 800579a:	f000 8089 	beq.w	80058b0 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a2:	4a4e      	ldr	r2, [pc, #312]	@ (80058dc <UART_SetConfig+0x4e0>)
 80057a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057a8:	461a      	mov	r2, r3
 80057aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80057b0:	005a      	lsls	r2, r3, #1
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	085b      	lsrs	r3, r3, #1
 80057b8:	441a      	add	r2, r3
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057c4:	6a3b      	ldr	r3, [r7, #32]
 80057c6:	2b0f      	cmp	r3, #15
 80057c8:	d916      	bls.n	80057f8 <UART_SetConfig+0x3fc>
 80057ca:	6a3b      	ldr	r3, [r7, #32]
 80057cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057d0:	d212      	bcs.n	80057f8 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057d2:	6a3b      	ldr	r3, [r7, #32]
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	f023 030f 	bic.w	r3, r3, #15
 80057da:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057dc:	6a3b      	ldr	r3, [r7, #32]
 80057de:	085b      	lsrs	r3, r3, #1
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	f003 0307 	and.w	r3, r3, #7
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	8bfb      	ldrh	r3, [r7, #30]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	8bfa      	ldrh	r2, [r7, #30]
 80057f4:	60da      	str	r2, [r3, #12]
 80057f6:	e05b      	b.n	80058b0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80057fe:	e057      	b.n	80058b0 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005800:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005804:	2b08      	cmp	r3, #8
 8005806:	d828      	bhi.n	800585a <UART_SetConfig+0x45e>
 8005808:	a201      	add	r2, pc, #4	@ (adr r2, 8005810 <UART_SetConfig+0x414>)
 800580a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800580e:	bf00      	nop
 8005810:	08005835 	.word	0x08005835
 8005814:	0800583d 	.word	0x0800583d
 8005818:	08005845 	.word	0x08005845
 800581c:	0800585b 	.word	0x0800585b
 8005820:	0800584b 	.word	0x0800584b
 8005824:	0800585b 	.word	0x0800585b
 8005828:	0800585b 	.word	0x0800585b
 800582c:	0800585b 	.word	0x0800585b
 8005830:	08005853 	.word	0x08005853
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005834:	f7fe f9ae 	bl	8003b94 <HAL_RCC_GetPCLK1Freq>
 8005838:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800583a:	e014      	b.n	8005866 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800583c:	f7fe f9bc 	bl	8003bb8 <HAL_RCC_GetPCLK2Freq>
 8005840:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005842:	e010      	b.n	8005866 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005844:	4b26      	ldr	r3, [pc, #152]	@ (80058e0 <UART_SetConfig+0x4e4>)
 8005846:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005848:	e00d      	b.n	8005866 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800584a:	f7fe f8ef 	bl	8003a2c <HAL_RCC_GetSysClockFreq>
 800584e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005850:	e009      	b.n	8005866 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005852:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005856:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005858:	e005      	b.n	8005866 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800585a:	2300      	movs	r3, #0
 800585c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005864:	bf00      	nop
    }

    if (pclk != 0U)
 8005866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005868:	2b00      	cmp	r3, #0
 800586a:	d021      	beq.n	80058b0 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005870:	4a1a      	ldr	r2, [pc, #104]	@ (80058dc <UART_SetConfig+0x4e0>)
 8005872:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005876:	461a      	mov	r2, r3
 8005878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587a:	fbb3 f2f2 	udiv	r2, r3, r2
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	085b      	lsrs	r3, r3, #1
 8005884:	441a      	add	r2, r3
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	fbb2 f3f3 	udiv	r3, r2, r3
 800588e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005890:	6a3b      	ldr	r3, [r7, #32]
 8005892:	2b0f      	cmp	r3, #15
 8005894:	d909      	bls.n	80058aa <UART_SetConfig+0x4ae>
 8005896:	6a3b      	ldr	r3, [r7, #32]
 8005898:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800589c:	d205      	bcs.n	80058aa <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800589e:	6a3b      	ldr	r3, [r7, #32]
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	60da      	str	r2, [r3, #12]
 80058a8:	e002      	b.n	80058b0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	2200      	movs	r2, #0
 80058c4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	2200      	movs	r2, #0
 80058ca:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80058cc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3730      	adds	r7, #48	@ 0x30
 80058d4:	46bd      	mov	sp, r7
 80058d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058da:	bf00      	nop
 80058dc:	080077a8 	.word	0x080077a8
 80058e0:	00f42400 	.word	0x00f42400

080058e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058f0:	f003 0308 	and.w	r3, r3, #8
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d00a      	beq.n	800590e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	430a      	orrs	r2, r1
 800590c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00a      	beq.n	8005930 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	430a      	orrs	r2, r1
 800592e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005934:	f003 0302 	and.w	r3, r3, #2
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00a      	beq.n	8005952 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	430a      	orrs	r2, r1
 8005950:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005956:	f003 0304 	and.w	r3, r3, #4
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00a      	beq.n	8005974 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	430a      	orrs	r2, r1
 8005972:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005978:	f003 0310 	and.w	r3, r3, #16
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00a      	beq.n	8005996 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	430a      	orrs	r2, r1
 8005994:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800599a:	f003 0320 	and.w	r3, r3, #32
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00a      	beq.n	80059b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	430a      	orrs	r2, r1
 80059b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d01a      	beq.n	80059fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	430a      	orrs	r2, r1
 80059d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059e2:	d10a      	bne.n	80059fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	430a      	orrs	r2, r1
 80059f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00a      	beq.n	8005a1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	605a      	str	r2, [r3, #4]
  }
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bc80      	pop	{r7}
 8005a24:	4770      	bx	lr

08005a26 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b086      	sub	sp, #24
 8005a2a:	af02      	add	r7, sp, #8
 8005a2c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a36:	f7fc fcab 	bl	8002390 <HAL_GetTick>
 8005a3a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0308 	and.w	r3, r3, #8
 8005a46:	2b08      	cmp	r3, #8
 8005a48:	d10e      	bne.n	8005a68 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a4a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a4e:	9300      	str	r3, [sp, #0]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 f832 	bl	8005ac2 <UART_WaitOnFlagUntilTimeout>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d001      	beq.n	8005a68 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e028      	b.n	8005aba <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0304 	and.w	r3, r3, #4
 8005a72:	2b04      	cmp	r3, #4
 8005a74:	d10e      	bne.n	8005a94 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a76:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a7a:	9300      	str	r3, [sp, #0]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 f81c 	bl	8005ac2 <UART_WaitOnFlagUntilTimeout>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d001      	beq.n	8005a94 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e012      	b.n	8005aba <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2220      	movs	r2, #32
 8005a98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b09c      	sub	sp, #112	@ 0x70
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	60f8      	str	r0, [r7, #12]
 8005aca:	60b9      	str	r1, [r7, #8]
 8005acc:	603b      	str	r3, [r7, #0]
 8005ace:	4613      	mov	r3, r2
 8005ad0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ad2:	e0af      	b.n	8005c34 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ad4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ada:	f000 80ab 	beq.w	8005c34 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ade:	f7fc fc57 	bl	8002390 <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d302      	bcc.n	8005af4 <UART_WaitOnFlagUntilTimeout+0x32>
 8005aee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d140      	bne.n	8005b76 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005afc:	e853 3f00 	ldrex	r3, [r3]
 8005b00:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005b02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b04:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005b08:	667b      	str	r3, [r7, #100]	@ 0x64
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b12:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b14:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b16:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005b18:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005b1a:	e841 2300 	strex	r3, r2, [r1]
 8005b1e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005b20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1e6      	bne.n	8005af4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	3308      	adds	r3, #8
 8005b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b30:	e853 3f00 	ldrex	r3, [r3]
 8005b34:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b38:	f023 0301 	bic.w	r3, r3, #1
 8005b3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	3308      	adds	r3, #8
 8005b44:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005b46:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005b48:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005b4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b4e:	e841 2300 	strex	r3, r2, [r1]
 8005b52:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005b54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1e5      	bne.n	8005b26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2220      	movs	r2, #32
 8005b5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2220      	movs	r2, #32
 8005b66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e06f      	b.n	8005c56 <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0304 	and.w	r3, r3, #4
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d057      	beq.n	8005c34 <UART_WaitOnFlagUntilTimeout+0x172>
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	2b80      	cmp	r3, #128	@ 0x80
 8005b88:	d054      	beq.n	8005c34 <UART_WaitOnFlagUntilTimeout+0x172>
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	2b40      	cmp	r3, #64	@ 0x40
 8005b8e:	d051      	beq.n	8005c34 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b9e:	d149      	bne.n	8005c34 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ba8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bb2:	e853 3f00 	ldrex	r3, [r3]
 8005bb6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bba:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005bbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005bc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bca:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bcc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005bce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005bd0:	e841 2300 	strex	r3, r2, [r1]
 8005bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1e6      	bne.n	8005baa <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	3308      	adds	r3, #8
 8005be2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	e853 3f00 	ldrex	r3, [r3]
 8005bea:	613b      	str	r3, [r7, #16]
   return(result);
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	f023 0301 	bic.w	r3, r3, #1
 8005bf2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	3308      	adds	r3, #8
 8005bfa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005bfc:	623a      	str	r2, [r7, #32]
 8005bfe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c00:	69f9      	ldr	r1, [r7, #28]
 8005c02:	6a3a      	ldr	r2, [r7, #32]
 8005c04:	e841 2300 	strex	r3, r2, [r1]
 8005c08:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1e5      	bne.n	8005bdc <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2220      	movs	r2, #32
 8005c14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2220      	movs	r2, #32
 8005c24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005c30:	2303      	movs	r3, #3
 8005c32:	e010      	b.n	8005c56 <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	69da      	ldr	r2, [r3, #28]
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	68ba      	ldr	r2, [r7, #8]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	bf0c      	ite	eq
 8005c44:	2301      	moveq	r3, #1
 8005c46:	2300      	movne	r3, #0
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	79fb      	ldrb	r3, [r7, #7]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	f43f af40 	beq.w	8005ad4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3770      	adds	r7, #112	@ 0x70
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
	...

08005c60 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b0a3      	sub	sp, #140	@ 0x8c
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	68ba      	ldr	r2, [r7, #8]
 8005c72:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	88fa      	ldrh	r2, [r7, #6]
 8005c78:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	88fa      	ldrh	r2, [r7, #6]
 8005c80:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2200      	movs	r2, #0
 8005c88:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c92:	d10e      	bne.n	8005cb2 <UART_Start_Receive_IT+0x52>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d105      	bne.n	8005ca8 <UART_Start_Receive_IT+0x48>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005ca2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005ca6:	e02d      	b.n	8005d04 <UART_Start_Receive_IT+0xa4>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	22ff      	movs	r2, #255	@ 0xff
 8005cac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005cb0:	e028      	b.n	8005d04 <UART_Start_Receive_IT+0xa4>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d10d      	bne.n	8005cd6 <UART_Start_Receive_IT+0x76>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d104      	bne.n	8005ccc <UART_Start_Receive_IT+0x6c>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	22ff      	movs	r2, #255	@ 0xff
 8005cc6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005cca:	e01b      	b.n	8005d04 <UART_Start_Receive_IT+0xa4>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	227f      	movs	r2, #127	@ 0x7f
 8005cd0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005cd4:	e016      	b.n	8005d04 <UART_Start_Receive_IT+0xa4>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005cde:	d10d      	bne.n	8005cfc <UART_Start_Receive_IT+0x9c>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d104      	bne.n	8005cf2 <UART_Start_Receive_IT+0x92>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	227f      	movs	r2, #127	@ 0x7f
 8005cec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005cf0:	e008      	b.n	8005d04 <UART_Start_Receive_IT+0xa4>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	223f      	movs	r2, #63	@ 0x3f
 8005cf6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005cfa:	e003      	b.n	8005d04 <UART_Start_Receive_IT+0xa4>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2222      	movs	r2, #34	@ 0x22
 8005d10:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	3308      	adds	r3, #8
 8005d1a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d1e:	e853 3f00 	ldrex	r3, [r3]
 8005d22:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8005d24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d26:	f043 0301 	orr.w	r3, r3, #1
 8005d2a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	3308      	adds	r3, #8
 8005d34:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005d38:	673a      	str	r2, [r7, #112]	@ 0x70
 8005d3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8005d3e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8005d40:	e841 2300 	strex	r3, r2, [r1]
 8005d44:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8005d46:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1e3      	bne.n	8005d14 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d54:	d14f      	bne.n	8005df6 <UART_Start_Receive_IT+0x196>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005d5c:	88fa      	ldrh	r2, [r7, #6]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d349      	bcc.n	8005df6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d6a:	d107      	bne.n	8005d7c <UART_Start_Receive_IT+0x11c>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d103      	bne.n	8005d7c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	4a46      	ldr	r2, [pc, #280]	@ (8005e90 <UART_Start_Receive_IT+0x230>)
 8005d78:	675a      	str	r2, [r3, #116]	@ 0x74
 8005d7a:	e002      	b.n	8005d82 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	4a45      	ldr	r2, [pc, #276]	@ (8005e94 <UART_Start_Receive_IT+0x234>)
 8005d80:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d01a      	beq.n	8005dc0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d92:	e853 3f00 	ldrex	r3, [r3]
 8005d96:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005d98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d9e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	461a      	mov	r2, r3
 8005da8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005dac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005dae:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005db2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005db4:	e841 2300 	strex	r3, r2, [r1]
 8005db8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005dba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1e4      	bne.n	8005d8a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	3308      	adds	r3, #8
 8005dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dca:	e853 3f00 	ldrex	r3, [r3]
 8005dce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005dd6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	3308      	adds	r3, #8
 8005dde:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005de0:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005de2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005de6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005de8:	e841 2300 	strex	r3, r2, [r1]
 8005dec:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005dee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d1e5      	bne.n	8005dc0 <UART_Start_Receive_IT+0x160>
 8005df4:	e046      	b.n	8005e84 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dfe:	d107      	bne.n	8005e10 <UART_Start_Receive_IT+0x1b0>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d103      	bne.n	8005e10 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	4a23      	ldr	r2, [pc, #140]	@ (8005e98 <UART_Start_Receive_IT+0x238>)
 8005e0c:	675a      	str	r2, [r3, #116]	@ 0x74
 8005e0e:	e002      	b.n	8005e16 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	4a22      	ldr	r2, [pc, #136]	@ (8005e9c <UART_Start_Receive_IT+0x23c>)
 8005e14:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d019      	beq.n	8005e52 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e26:	e853 3f00 	ldrex	r3, [r3]
 8005e2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e2e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005e32:	677b      	str	r3, [r7, #116]	@ 0x74
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	461a      	mov	r2, r3
 8005e3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e3e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e40:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005e42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e44:	e841 2300 	strex	r3, r2, [r1]
 8005e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d1e6      	bne.n	8005e1e <UART_Start_Receive_IT+0x1be>
 8005e50:	e018      	b.n	8005e84 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	e853 3f00 	ldrex	r3, [r3]
 8005e5e:	613b      	str	r3, [r7, #16]
   return(result);
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	f043 0320 	orr.w	r3, r3, #32
 8005e66:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e70:	623b      	str	r3, [r7, #32]
 8005e72:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e74:	69f9      	ldr	r1, [r7, #28]
 8005e76:	6a3a      	ldr	r2, [r7, #32]
 8005e78:	e841 2300 	strex	r3, r2, [r1]
 8005e7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d1e6      	bne.n	8005e52 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	378c      	adds	r7, #140	@ 0x8c
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bc80      	pop	{r7}
 8005e8e:	4770      	bx	lr
 8005e90:	080066bd 	.word	0x080066bd
 8005e94:	0800635d 	.word	0x0800635d
 8005e98:	080061a5 	.word	0x080061a5
 8005e9c:	08005fed 	.word	0x08005fed

08005ea0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b095      	sub	sp, #84	@ 0x54
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eb0:	e853 3f00 	ldrex	r3, [r3]
 8005eb4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ebc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ec6:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ec8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ecc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ece:	e841 2300 	strex	r3, r2, [r1]
 8005ed2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d1e6      	bne.n	8005ea8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	3308      	adds	r3, #8
 8005ee0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee2:	6a3b      	ldr	r3, [r7, #32]
 8005ee4:	e853 3f00 	ldrex	r3, [r3]
 8005ee8:	61fb      	str	r3, [r7, #28]
   return(result);
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ef0:	f023 0301 	bic.w	r3, r3, #1
 8005ef4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	3308      	adds	r3, #8
 8005efc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005efe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f00:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f06:	e841 2300 	strex	r3, r2, [r1]
 8005f0a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1e3      	bne.n	8005eda <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d118      	bne.n	8005f4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	e853 3f00 	ldrex	r3, [r3]
 8005f26:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	f023 0310 	bic.w	r3, r3, #16
 8005f2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	461a      	mov	r2, r3
 8005f36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f38:	61bb      	str	r3, [r7, #24]
 8005f3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3c:	6979      	ldr	r1, [r7, #20]
 8005f3e:	69ba      	ldr	r2, [r7, #24]
 8005f40:	e841 2300 	strex	r3, r2, [r1]
 8005f44:	613b      	str	r3, [r7, #16]
   return(result);
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1e6      	bne.n	8005f1a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2220      	movs	r2, #32
 8005f50:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005f60:	bf00      	nop
 8005f62:	3754      	adds	r7, #84	@ 0x54
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bc80      	pop	{r7}
 8005f68:	4770      	bx	lr

08005f6a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b084      	sub	sp, #16
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f7ff fa22 	bl	80053d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f8e:	bf00      	nop
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b088      	sub	sp, #32
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	e853 3f00 	ldrex	r3, [r3]
 8005faa:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fb2:	61fb      	str	r3, [r7, #28]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	461a      	mov	r2, r3
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	61bb      	str	r3, [r7, #24]
 8005fbe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc0:	6979      	ldr	r1, [r7, #20]
 8005fc2:	69ba      	ldr	r2, [r7, #24]
 8005fc4:	e841 2300 	strex	r3, r2, [r1]
 8005fc8:	613b      	str	r3, [r7, #16]
   return(result);
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1e6      	bne.n	8005f9e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2220      	movs	r2, #32
 8005fd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f7ff f9ee 	bl	80053c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fe4:	bf00      	nop
 8005fe6:	3720      	adds	r7, #32
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b09c      	sub	sp, #112	@ 0x70
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005ffa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006004:	2b22      	cmp	r3, #34	@ 0x22
 8006006:	f040 80be 	bne.w	8006186 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006010:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006014:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006018:	b2d9      	uxtb	r1, r3
 800601a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800601e:	b2da      	uxtb	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006024:	400a      	ands	r2, r1
 8006026:	b2d2      	uxtb	r2, r2
 8006028:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800602e:	1c5a      	adds	r2, r3, #1
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800603a:	b29b      	uxth	r3, r3
 800603c:	3b01      	subs	r3, #1
 800603e:	b29a      	uxth	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800604c:	b29b      	uxth	r3, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	f040 80a1 	bne.w	8006196 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800605c:	e853 3f00 	ldrex	r3, [r3]
 8006060:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006062:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006064:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006068:	66bb      	str	r3, [r7, #104]	@ 0x68
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	461a      	mov	r2, r3
 8006070:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006072:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006074:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006076:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006078:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800607a:	e841 2300 	strex	r3, r2, [r1]
 800607e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006080:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1e6      	bne.n	8006054 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	3308      	adds	r3, #8
 800608c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006090:	e853 3f00 	ldrex	r3, [r3]
 8006094:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006098:	f023 0301 	bic.w	r3, r3, #1
 800609c:	667b      	str	r3, [r7, #100]	@ 0x64
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	3308      	adds	r3, #8
 80060a4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80060a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80060a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80060ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060ae:	e841 2300 	strex	r3, r2, [r1]
 80060b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80060b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1e5      	bne.n	8006086 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2220      	movs	r2, #32
 80060be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a33      	ldr	r2, [pc, #204]	@ (80061a0 <UART_RxISR_8BIT+0x1b4>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d01f      	beq.n	8006118 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d018      	beq.n	8006118 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ee:	e853 3f00 	ldrex	r3, [r3]
 80060f2:	623b      	str	r3, [r7, #32]
   return(result);
 80060f4:	6a3b      	ldr	r3, [r7, #32]
 80060f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80060fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	461a      	mov	r2, r3
 8006102:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006104:	633b      	str	r3, [r7, #48]	@ 0x30
 8006106:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006108:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800610a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800610c:	e841 2300 	strex	r3, r2, [r1]
 8006110:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1e6      	bne.n	80060e6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800611c:	2b01      	cmp	r3, #1
 800611e:	d12e      	bne.n	800617e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	e853 3f00 	ldrex	r3, [r3]
 8006132:	60fb      	str	r3, [r7, #12]
   return(result);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f023 0310 	bic.w	r3, r3, #16
 800613a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	461a      	mov	r2, r3
 8006142:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006144:	61fb      	str	r3, [r7, #28]
 8006146:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006148:	69b9      	ldr	r1, [r7, #24]
 800614a:	69fa      	ldr	r2, [r7, #28]
 800614c:	e841 2300 	strex	r3, r2, [r1]
 8006150:	617b      	str	r3, [r7, #20]
   return(result);
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1e6      	bne.n	8006126 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	69db      	ldr	r3, [r3, #28]
 800615e:	f003 0310 	and.w	r3, r3, #16
 8006162:	2b10      	cmp	r3, #16
 8006164:	d103      	bne.n	800616e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2210      	movs	r2, #16
 800616c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006174:	4619      	mov	r1, r3
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f7ff f934 	bl	80053e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800617c:	e00b      	b.n	8006196 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7fa fb76 	bl	8000870 <HAL_UART_RxCpltCallback>
}
 8006184:	e007      	b.n	8006196 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	699a      	ldr	r2, [r3, #24]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f042 0208 	orr.w	r2, r2, #8
 8006194:	619a      	str	r2, [r3, #24]
}
 8006196:	bf00      	nop
 8006198:	3770      	adds	r7, #112	@ 0x70
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	40008000 	.word	0x40008000

080061a4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b09c      	sub	sp, #112	@ 0x70
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80061b2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80061bc:	2b22      	cmp	r3, #34	@ 0x22
 80061be:	f040 80be 	bne.w	800633e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061d0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80061d2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80061d6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80061da:	4013      	ands	r3, r2
 80061dc:	b29a      	uxth	r2, r3
 80061de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80061e0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061e6:	1c9a      	adds	r2, r3, #2
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	3b01      	subs	r3, #1
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006204:	b29b      	uxth	r3, r3
 8006206:	2b00      	cmp	r3, #0
 8006208:	f040 80a1 	bne.w	800634e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006212:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006214:	e853 3f00 	ldrex	r3, [r3]
 8006218:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800621a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800621c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006220:	667b      	str	r3, [r7, #100]	@ 0x64
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	461a      	mov	r2, r3
 8006228:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800622a:	657b      	str	r3, [r7, #84]	@ 0x54
 800622c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006230:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006232:	e841 2300 	strex	r3, r2, [r1]
 8006236:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006238:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1e6      	bne.n	800620c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	3308      	adds	r3, #8
 8006244:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006248:	e853 3f00 	ldrex	r3, [r3]
 800624c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800624e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006250:	f023 0301 	bic.w	r3, r3, #1
 8006254:	663b      	str	r3, [r7, #96]	@ 0x60
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	3308      	adds	r3, #8
 800625c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800625e:	643a      	str	r2, [r7, #64]	@ 0x40
 8006260:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006262:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006264:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006266:	e841 2300 	strex	r3, r2, [r1]
 800626a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800626c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800626e:	2b00      	cmp	r3, #0
 8006270:	d1e5      	bne.n	800623e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2220      	movs	r2, #32
 8006276:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a33      	ldr	r2, [pc, #204]	@ (8006358 <UART_RxISR_16BIT+0x1b4>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d01f      	beq.n	80062d0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d018      	beq.n	80062d0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a4:	6a3b      	ldr	r3, [r7, #32]
 80062a6:	e853 3f00 	ldrex	r3, [r3]
 80062aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80062b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	461a      	mov	r2, r3
 80062ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80062bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062be:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80062c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062c4:	e841 2300 	strex	r3, r2, [r1]
 80062c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80062ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1e6      	bne.n	800629e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d12e      	bne.n	8006336 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	e853 3f00 	ldrex	r3, [r3]
 80062ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	f023 0310 	bic.w	r3, r3, #16
 80062f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	461a      	mov	r2, r3
 80062fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80062fc:	61bb      	str	r3, [r7, #24]
 80062fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006300:	6979      	ldr	r1, [r7, #20]
 8006302:	69ba      	ldr	r2, [r7, #24]
 8006304:	e841 2300 	strex	r3, r2, [r1]
 8006308:	613b      	str	r3, [r7, #16]
   return(result);
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d1e6      	bne.n	80062de <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	69db      	ldr	r3, [r3, #28]
 8006316:	f003 0310 	and.w	r3, r3, #16
 800631a:	2b10      	cmp	r3, #16
 800631c:	d103      	bne.n	8006326 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2210      	movs	r2, #16
 8006324:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800632c:	4619      	mov	r1, r3
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f7ff f858 	bl	80053e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006334:	e00b      	b.n	800634e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f7fa fa9a 	bl	8000870 <HAL_UART_RxCpltCallback>
}
 800633c:	e007      	b.n	800634e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	699a      	ldr	r2, [r3, #24]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f042 0208 	orr.w	r2, r2, #8
 800634c:	619a      	str	r2, [r3, #24]
}
 800634e:	bf00      	nop
 8006350:	3770      	adds	r7, #112	@ 0x70
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	40008000 	.word	0x40008000

0800635c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b0ac      	sub	sp, #176	@ 0xb0
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800636a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	69db      	ldr	r3, [r3, #28]
 8006374:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006392:	2b22      	cmp	r3, #34	@ 0x22
 8006394:	f040 8182 	bne.w	800669c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800639e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80063a2:	e125      	b.n	80065f0 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063aa:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80063ae:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80063b2:	b2d9      	uxtb	r1, r3
 80063b4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80063b8:	b2da      	uxtb	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063be:	400a      	ands	r2, r1
 80063c0:	b2d2      	uxtb	r2, r2
 80063c2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063c8:	1c5a      	adds	r2, r3, #1
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	3b01      	subs	r3, #1
 80063d8:	b29a      	uxth	r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	69db      	ldr	r3, [r3, #28]
 80063e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80063ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80063ee:	f003 0307 	and.w	r3, r3, #7
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d053      	beq.n	800649e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80063f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80063fa:	f003 0301 	and.w	r3, r3, #1
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d011      	beq.n	8006426 <UART_RxISR_8BIT_FIFOEN+0xca>
 8006402:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006406:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00b      	beq.n	8006426 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2201      	movs	r2, #1
 8006414:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800641c:	f043 0201 	orr.w	r2, r3, #1
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006426:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800642a:	f003 0302 	and.w	r3, r3, #2
 800642e:	2b00      	cmp	r3, #0
 8006430:	d011      	beq.n	8006456 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006432:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006436:	f003 0301 	and.w	r3, r3, #1
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00b      	beq.n	8006456 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2202      	movs	r2, #2
 8006444:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800644c:	f043 0204 	orr.w	r2, r3, #4
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006456:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800645a:	f003 0304 	and.w	r3, r3, #4
 800645e:	2b00      	cmp	r3, #0
 8006460:	d011      	beq.n	8006486 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006462:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00b      	beq.n	8006486 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2204      	movs	r2, #4
 8006474:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800647c:	f043 0202 	orr.w	r2, r3, #2
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800648c:	2b00      	cmp	r3, #0
 800648e:	d006      	beq.n	800649e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f7fe ff9e 	bl	80053d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f040 80a2 	bne.w	80065f0 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80064b4:	e853 3f00 	ldrex	r3, [r3]
 80064b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80064ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	461a      	mov	r2, r3
 80064ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80064ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80064d0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80064d4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80064d6:	e841 2300 	strex	r3, r2, [r1]
 80064da:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80064dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1e4      	bne.n	80064ac <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	3308      	adds	r3, #8
 80064e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80064ec:	e853 3f00 	ldrex	r3, [r3]
 80064f0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80064f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80064f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80064f8:	f023 0301 	bic.w	r3, r3, #1
 80064fc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	3308      	adds	r3, #8
 8006506:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800650a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800650c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800650e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8006510:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006512:	e841 2300 	strex	r3, r2, [r1]
 8006516:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006518:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800651a:	2b00      	cmp	r3, #0
 800651c:	d1e1      	bne.n	80064e2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2220      	movs	r2, #32
 8006522:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a5f      	ldr	r2, [pc, #380]	@ (80066b4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d021      	beq.n	8006580 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d01a      	beq.n	8006580 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006550:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006552:	e853 3f00 	ldrex	r3, [r3]
 8006556:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006558:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800655a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800655e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	461a      	mov	r2, r3
 8006568:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800656c:	657b      	str	r3, [r7, #84]	@ 0x54
 800656e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006570:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006572:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006574:	e841 2300 	strex	r3, r2, [r1]
 8006578:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800657a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1e4      	bne.n	800654a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006584:	2b01      	cmp	r3, #1
 8006586:	d130      	bne.n	80065ea <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006596:	e853 3f00 	ldrex	r3, [r3]
 800659a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800659c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800659e:	f023 0310 	bic.w	r3, r3, #16
 80065a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	461a      	mov	r2, r3
 80065ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80065b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80065b2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80065b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80065b8:	e841 2300 	strex	r3, r2, [r1]
 80065bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80065be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d1e4      	bne.n	800658e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	69db      	ldr	r3, [r3, #28]
 80065ca:	f003 0310 	and.w	r3, r3, #16
 80065ce:	2b10      	cmp	r3, #16
 80065d0:	d103      	bne.n	80065da <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2210      	movs	r2, #16
 80065d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80065e0:	4619      	mov	r1, r3
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f7fe fefe 	bl	80053e4 <HAL_UARTEx_RxEventCallback>
 80065e8:	e002      	b.n	80065f0 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f7fa f940 	bl	8000870 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80065f0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d006      	beq.n	8006606 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80065f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80065fc:	f003 0320 	and.w	r3, r3, #32
 8006600:	2b00      	cmp	r3, #0
 8006602:	f47f aecf 	bne.w	80063a4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800660c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006610:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006614:	2b00      	cmp	r3, #0
 8006616:	d049      	beq.n	80066ac <UART_RxISR_8BIT_FIFOEN+0x350>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800661e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8006622:	429a      	cmp	r2, r3
 8006624:	d242      	bcs.n	80066ac <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	3308      	adds	r3, #8
 800662c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662e:	6a3b      	ldr	r3, [r7, #32]
 8006630:	e853 3f00 	ldrex	r3, [r3]
 8006634:	61fb      	str	r3, [r7, #28]
   return(result);
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800663c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	3308      	adds	r3, #8
 8006646:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800664a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800664c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006650:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006652:	e841 2300 	strex	r3, r2, [r1]
 8006656:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1e3      	bne.n	8006626 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a15      	ldr	r2, [pc, #84]	@ (80066b8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006662:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	e853 3f00 	ldrex	r3, [r3]
 8006670:	60bb      	str	r3, [r7, #8]
   return(result);
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	f043 0320 	orr.w	r3, r3, #32
 8006678:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	461a      	mov	r2, r3
 8006682:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006686:	61bb      	str	r3, [r7, #24]
 8006688:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668a:	6979      	ldr	r1, [r7, #20]
 800668c:	69ba      	ldr	r2, [r7, #24]
 800668e:	e841 2300 	strex	r3, r2, [r1]
 8006692:	613b      	str	r3, [r7, #16]
   return(result);
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1e4      	bne.n	8006664 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800669a:	e007      	b.n	80066ac <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	699a      	ldr	r2, [r3, #24]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f042 0208 	orr.w	r2, r2, #8
 80066aa:	619a      	str	r2, [r3, #24]
}
 80066ac:	bf00      	nop
 80066ae:	37b0      	adds	r7, #176	@ 0xb0
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	40008000 	.word	0x40008000
 80066b8:	08005fed 	.word	0x08005fed

080066bc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b0ae      	sub	sp, #184	@ 0xb8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80066ca:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	69db      	ldr	r3, [r3, #28]
 80066d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066f2:	2b22      	cmp	r3, #34	@ 0x22
 80066f4:	f040 8186 	bne.w	8006a04 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80066fe:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006702:	e129      	b.n	8006958 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800670a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006712:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8006716:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800671a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800671e:	4013      	ands	r3, r2
 8006720:	b29a      	uxth	r2, r3
 8006722:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006726:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800672c:	1c9a      	adds	r2, r3, #2
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006738:	b29b      	uxth	r3, r3
 800673a:	3b01      	subs	r3, #1
 800673c:	b29a      	uxth	r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	69db      	ldr	r3, [r3, #28]
 800674a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800674e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006752:	f003 0307 	and.w	r3, r3, #7
 8006756:	2b00      	cmp	r3, #0
 8006758:	d053      	beq.n	8006802 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800675a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800675e:	f003 0301 	and.w	r3, r3, #1
 8006762:	2b00      	cmp	r3, #0
 8006764:	d011      	beq.n	800678a <UART_RxISR_16BIT_FIFOEN+0xce>
 8006766:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800676a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00b      	beq.n	800678a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2201      	movs	r2, #1
 8006778:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006780:	f043 0201 	orr.w	r2, r3, #1
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800678a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800678e:	f003 0302 	and.w	r3, r3, #2
 8006792:	2b00      	cmp	r3, #0
 8006794:	d011      	beq.n	80067ba <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006796:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00b      	beq.n	80067ba <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2202      	movs	r2, #2
 80067a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067b0:	f043 0204 	orr.w	r2, r3, #4
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80067be:	f003 0304 	and.w	r3, r3, #4
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d011      	beq.n	80067ea <UART_RxISR_16BIT_FIFOEN+0x12e>
 80067c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00b      	beq.n	80067ea <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	2204      	movs	r2, #4
 80067d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067e0:	f043 0202 	orr.w	r2, r3, #2
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d006      	beq.n	8006802 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f7fe fdec 	bl	80053d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006808:	b29b      	uxth	r3, r3
 800680a:	2b00      	cmp	r3, #0
 800680c:	f040 80a4 	bne.w	8006958 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006816:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006818:	e853 3f00 	ldrex	r3, [r3]
 800681c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800681e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006820:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006824:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	461a      	mov	r2, r3
 800682e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006832:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006836:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006838:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800683a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800683e:	e841 2300 	strex	r3, r2, [r1]
 8006842:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006844:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1e2      	bne.n	8006810 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	3308      	adds	r3, #8
 8006850:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006852:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006854:	e853 3f00 	ldrex	r3, [r3]
 8006858:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800685a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800685c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006860:	f023 0301 	bic.w	r3, r3, #1
 8006864:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	3308      	adds	r3, #8
 800686e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8006872:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006874:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006876:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006878:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800687a:	e841 2300 	strex	r3, r2, [r1]
 800687e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006880:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1e1      	bne.n	800684a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2220      	movs	r2, #32
 800688a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a5f      	ldr	r2, [pc, #380]	@ (8006a1c <UART_RxISR_16BIT_FIFOEN+0x360>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d021      	beq.n	80068e8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d01a      	beq.n	80068e8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068ba:	e853 3f00 	ldrex	r3, [r3]
 80068be:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80068c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80068c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	461a      	mov	r2, r3
 80068d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80068d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80068d6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80068da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80068dc:	e841 2300 	strex	r3, r2, [r1]
 80068e0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80068e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d1e4      	bne.n	80068b2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d130      	bne.n	8006952 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068fe:	e853 3f00 	ldrex	r3, [r3]
 8006902:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006906:	f023 0310 	bic.w	r3, r3, #16
 800690a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	461a      	mov	r2, r3
 8006914:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006918:	647b      	str	r3, [r7, #68]	@ 0x44
 800691a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800691e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006920:	e841 2300 	strex	r3, r2, [r1]
 8006924:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006926:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006928:	2b00      	cmp	r3, #0
 800692a:	d1e4      	bne.n	80068f6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	69db      	ldr	r3, [r3, #28]
 8006932:	f003 0310 	and.w	r3, r3, #16
 8006936:	2b10      	cmp	r3, #16
 8006938:	d103      	bne.n	8006942 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2210      	movs	r2, #16
 8006940:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006948:	4619      	mov	r1, r3
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f7fe fd4a 	bl	80053e4 <HAL_UARTEx_RxEventCallback>
 8006950:	e002      	b.n	8006958 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f7f9 ff8c 	bl	8000870 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006958:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800695c:	2b00      	cmp	r3, #0
 800695e:	d006      	beq.n	800696e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8006960:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006964:	f003 0320 	and.w	r3, r3, #32
 8006968:	2b00      	cmp	r3, #0
 800696a:	f47f aecb 	bne.w	8006704 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006974:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006978:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800697c:	2b00      	cmp	r3, #0
 800697e:	d049      	beq.n	8006a14 <UART_RxISR_16BIT_FIFOEN+0x358>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006986:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800698a:	429a      	cmp	r2, r3
 800698c:	d242      	bcs.n	8006a14 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	3308      	adds	r3, #8
 8006994:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006998:	e853 3f00 	ldrex	r3, [r3]
 800699c:	623b      	str	r3, [r7, #32]
   return(result);
 800699e:	6a3b      	ldr	r3, [r7, #32]
 80069a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	3308      	adds	r3, #8
 80069ae:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80069b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80069b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069ba:	e841 2300 	strex	r3, r2, [r1]
 80069be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80069c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1e3      	bne.n	800698e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a15      	ldr	r2, [pc, #84]	@ (8006a20 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80069ca:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	e853 3f00 	ldrex	r3, [r3]
 80069d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f043 0320 	orr.w	r3, r3, #32
 80069e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	461a      	mov	r2, r3
 80069ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80069ee:	61fb      	str	r3, [r7, #28]
 80069f0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f2:	69b9      	ldr	r1, [r7, #24]
 80069f4:	69fa      	ldr	r2, [r7, #28]
 80069f6:	e841 2300 	strex	r3, r2, [r1]
 80069fa:	617b      	str	r3, [r7, #20]
   return(result);
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1e4      	bne.n	80069cc <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a02:	e007      	b.n	8006a14 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	699a      	ldr	r2, [r3, #24]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f042 0208 	orr.w	r2, r2, #8
 8006a12:	619a      	str	r2, [r3, #24]
}
 8006a14:	bf00      	nop
 8006a16:	37b8      	adds	r7, #184	@ 0xb8
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	40008000 	.word	0x40008000
 8006a20:	080061a5 	.word	0x080061a5

08006a24 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006a2c:	bf00      	nop
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bc80      	pop	{r7}
 8006a34:	4770      	bx	lr

08006a36 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006a36:	b480      	push	{r7}
 8006a38:	b083      	sub	sp, #12
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006a3e:	bf00      	nop
 8006a40:	370c      	adds	r7, #12
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bc80      	pop	{r7}
 8006a46:	4770      	bx	lr

08006a48 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bc80      	pop	{r7}
 8006a58:	4770      	bx	lr

08006a5a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b085      	sub	sp, #20
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d101      	bne.n	8006a70 <HAL_UARTEx_DisableFifoMode+0x16>
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	e027      	b.n	8006ac0 <HAL_UARTEx_DisableFifoMode+0x66>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2224      	movs	r2, #36	@ 0x24
 8006a7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f022 0201 	bic.w	r2, r2, #1
 8006a96:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006a9e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2220      	movs	r2, #32
 8006ab2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3714      	adds	r7, #20
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bc80      	pop	{r7}
 8006ac8:	4770      	bx	lr

08006aca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b084      	sub	sp, #16
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
 8006ad2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d101      	bne.n	8006ae2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006ade:	2302      	movs	r3, #2
 8006ae0:	e02d      	b.n	8006b3e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2224      	movs	r2, #36	@ 0x24
 8006aee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f022 0201 	bic.w	r2, r2, #1
 8006b08:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	683a      	ldr	r2, [r7, #0]
 8006b1a:	430a      	orrs	r2, r1
 8006b1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 f850 	bl	8006bc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2220      	movs	r2, #32
 8006b30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b084      	sub	sp, #16
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
 8006b4e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d101      	bne.n	8006b5e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006b5a:	2302      	movs	r3, #2
 8006b5c:	e02d      	b.n	8006bba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2224      	movs	r2, #36	@ 0x24
 8006b6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f022 0201 	bic.w	r2, r2, #1
 8006b84:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	683a      	ldr	r2, [r7, #0]
 8006b96:	430a      	orrs	r2, r1
 8006b98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 f812 	bl	8006bc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2220      	movs	r2, #32
 8006bac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3710      	adds	r7, #16
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
	...

08006bc4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d108      	bne.n	8006be6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006be4:	e031      	b.n	8006c4a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006be6:	2308      	movs	r3, #8
 8006be8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006bea:	2308      	movs	r3, #8
 8006bec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	0e5b      	lsrs	r3, r3, #25
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	f003 0307 	and.w	r3, r3, #7
 8006bfc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	0f5b      	lsrs	r3, r3, #29
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	f003 0307 	and.w	r3, r3, #7
 8006c0c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c0e:	7bbb      	ldrb	r3, [r7, #14]
 8006c10:	7b3a      	ldrb	r2, [r7, #12]
 8006c12:	4910      	ldr	r1, [pc, #64]	@ (8006c54 <UARTEx_SetNbDataToProcess+0x90>)
 8006c14:	5c8a      	ldrb	r2, [r1, r2]
 8006c16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006c1a:	7b3a      	ldrb	r2, [r7, #12]
 8006c1c:	490e      	ldr	r1, [pc, #56]	@ (8006c58 <UARTEx_SetNbDataToProcess+0x94>)
 8006c1e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c20:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c2c:	7bfb      	ldrb	r3, [r7, #15]
 8006c2e:	7b7a      	ldrb	r2, [r7, #13]
 8006c30:	4908      	ldr	r1, [pc, #32]	@ (8006c54 <UARTEx_SetNbDataToProcess+0x90>)
 8006c32:	5c8a      	ldrb	r2, [r1, r2]
 8006c34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006c38:	7b7a      	ldrb	r2, [r7, #13]
 8006c3a:	4907      	ldr	r1, [pc, #28]	@ (8006c58 <UARTEx_SetNbDataToProcess+0x94>)
 8006c3c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c3e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c42:	b29a      	uxth	r2, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006c4a:	bf00      	nop
 8006c4c:	3714      	adds	r7, #20
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bc80      	pop	{r7}
 8006c52:	4770      	bx	lr
 8006c54:	080077c0 	.word	0x080077c0
 8006c58:	080077c8 	.word	0x080077c8

08006c5c <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	460b      	mov	r3, r1
 8006c66:	70fb      	strb	r3, [r7, #3]
 8006c68:	4613      	mov	r3, r2
 8006c6a:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	60fb      	str	r3, [r7, #12]
  while( size-- )
 8006c70:	e004      	b.n	8006c7c <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	1c5a      	adds	r2, r3, #1
 8006c76:	60fa      	str	r2, [r7, #12]
 8006c78:	78fa      	ldrb	r2, [r7, #3]
 8006c7a:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8006c7c:	883b      	ldrh	r3, [r7, #0]
 8006c7e:	1e5a      	subs	r2, r3, #1
 8006c80:	803a      	strh	r2, [r7, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1f5      	bne.n	8006c72 <UTIL_MEM_set_8+0x16>
  }
}
 8006c86:	bf00      	nop
 8006c88:	bf00      	nop
 8006c8a:	3714      	adds	r7, #20
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bc80      	pop	{r7}
 8006c90:	4770      	bx	lr
	...

08006c94 <sniprintf>:
 8006c94:	b40c      	push	{r2, r3}
 8006c96:	b530      	push	{r4, r5, lr}
 8006c98:	4b18      	ldr	r3, [pc, #96]	@ (8006cfc <sniprintf+0x68>)
 8006c9a:	1e0c      	subs	r4, r1, #0
 8006c9c:	681d      	ldr	r5, [r3, #0]
 8006c9e:	b09d      	sub	sp, #116	@ 0x74
 8006ca0:	da08      	bge.n	8006cb4 <sniprintf+0x20>
 8006ca2:	238b      	movs	r3, #139	@ 0x8b
 8006ca4:	602b      	str	r3, [r5, #0]
 8006ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8006caa:	b01d      	add	sp, #116	@ 0x74
 8006cac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006cb0:	b002      	add	sp, #8
 8006cb2:	4770      	bx	lr
 8006cb4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006cb8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006cbc:	f04f 0300 	mov.w	r3, #0
 8006cc0:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006cc2:	bf14      	ite	ne
 8006cc4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006cc8:	4623      	moveq	r3, r4
 8006cca:	9304      	str	r3, [sp, #16]
 8006ccc:	9307      	str	r3, [sp, #28]
 8006cce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006cd2:	9002      	str	r0, [sp, #8]
 8006cd4:	9006      	str	r0, [sp, #24]
 8006cd6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006cda:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006cdc:	ab21      	add	r3, sp, #132	@ 0x84
 8006cde:	a902      	add	r1, sp, #8
 8006ce0:	4628      	mov	r0, r5
 8006ce2:	9301      	str	r3, [sp, #4]
 8006ce4:	f000 f9b6 	bl	8007054 <_svfiprintf_r>
 8006ce8:	1c43      	adds	r3, r0, #1
 8006cea:	bfbc      	itt	lt
 8006cec:	238b      	movlt	r3, #139	@ 0x8b
 8006cee:	602b      	strlt	r3, [r5, #0]
 8006cf0:	2c00      	cmp	r4, #0
 8006cf2:	d0da      	beq.n	8006caa <sniprintf+0x16>
 8006cf4:	9b02      	ldr	r3, [sp, #8]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	701a      	strb	r2, [r3, #0]
 8006cfa:	e7d6      	b.n	8006caa <sniprintf+0x16>
 8006cfc:	2000011c 	.word	0x2000011c

08006d00 <siprintf>:
 8006d00:	b40e      	push	{r1, r2, r3}
 8006d02:	b510      	push	{r4, lr}
 8006d04:	b09d      	sub	sp, #116	@ 0x74
 8006d06:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006d08:	9002      	str	r0, [sp, #8]
 8006d0a:	9006      	str	r0, [sp, #24]
 8006d0c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006d10:	480a      	ldr	r0, [pc, #40]	@ (8006d3c <siprintf+0x3c>)
 8006d12:	9107      	str	r1, [sp, #28]
 8006d14:	9104      	str	r1, [sp, #16]
 8006d16:	490a      	ldr	r1, [pc, #40]	@ (8006d40 <siprintf+0x40>)
 8006d18:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d1c:	9105      	str	r1, [sp, #20]
 8006d1e:	2400      	movs	r4, #0
 8006d20:	a902      	add	r1, sp, #8
 8006d22:	6800      	ldr	r0, [r0, #0]
 8006d24:	9301      	str	r3, [sp, #4]
 8006d26:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006d28:	f000 f994 	bl	8007054 <_svfiprintf_r>
 8006d2c:	9b02      	ldr	r3, [sp, #8]
 8006d2e:	701c      	strb	r4, [r3, #0]
 8006d30:	b01d      	add	sp, #116	@ 0x74
 8006d32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d36:	b003      	add	sp, #12
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	2000011c 	.word	0x2000011c
 8006d40:	ffff0208 	.word	0xffff0208

08006d44 <memset>:
 8006d44:	4402      	add	r2, r0
 8006d46:	4603      	mov	r3, r0
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d100      	bne.n	8006d4e <memset+0xa>
 8006d4c:	4770      	bx	lr
 8006d4e:	f803 1b01 	strb.w	r1, [r3], #1
 8006d52:	e7f9      	b.n	8006d48 <memset+0x4>

08006d54 <__errno>:
 8006d54:	4b01      	ldr	r3, [pc, #4]	@ (8006d5c <__errno+0x8>)
 8006d56:	6818      	ldr	r0, [r3, #0]
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop
 8006d5c:	2000011c 	.word	0x2000011c

08006d60 <__libc_init_array>:
 8006d60:	b570      	push	{r4, r5, r6, lr}
 8006d62:	4d0d      	ldr	r5, [pc, #52]	@ (8006d98 <__libc_init_array+0x38>)
 8006d64:	4c0d      	ldr	r4, [pc, #52]	@ (8006d9c <__libc_init_array+0x3c>)
 8006d66:	1b64      	subs	r4, r4, r5
 8006d68:	10a4      	asrs	r4, r4, #2
 8006d6a:	2600      	movs	r6, #0
 8006d6c:	42a6      	cmp	r6, r4
 8006d6e:	d109      	bne.n	8006d84 <__libc_init_array+0x24>
 8006d70:	4d0b      	ldr	r5, [pc, #44]	@ (8006da0 <__libc_init_array+0x40>)
 8006d72:	4c0c      	ldr	r4, [pc, #48]	@ (8006da4 <__libc_init_array+0x44>)
 8006d74:	f000 fc64 	bl	8007640 <_init>
 8006d78:	1b64      	subs	r4, r4, r5
 8006d7a:	10a4      	asrs	r4, r4, #2
 8006d7c:	2600      	movs	r6, #0
 8006d7e:	42a6      	cmp	r6, r4
 8006d80:	d105      	bne.n	8006d8e <__libc_init_array+0x2e>
 8006d82:	bd70      	pop	{r4, r5, r6, pc}
 8006d84:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d88:	4798      	blx	r3
 8006d8a:	3601      	adds	r6, #1
 8006d8c:	e7ee      	b.n	8006d6c <__libc_init_array+0xc>
 8006d8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d92:	4798      	blx	r3
 8006d94:	3601      	adds	r6, #1
 8006d96:	e7f2      	b.n	8006d7e <__libc_init_array+0x1e>
 8006d98:	0800780c 	.word	0x0800780c
 8006d9c:	0800780c 	.word	0x0800780c
 8006da0:	0800780c 	.word	0x0800780c
 8006da4:	08007810 	.word	0x08007810

08006da8 <__retarget_lock_acquire_recursive>:
 8006da8:	4770      	bx	lr

08006daa <__retarget_lock_release_recursive>:
 8006daa:	4770      	bx	lr

08006dac <_free_r>:
 8006dac:	b538      	push	{r3, r4, r5, lr}
 8006dae:	4605      	mov	r5, r0
 8006db0:	2900      	cmp	r1, #0
 8006db2:	d041      	beq.n	8006e38 <_free_r+0x8c>
 8006db4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006db8:	1f0c      	subs	r4, r1, #4
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	bfb8      	it	lt
 8006dbe:	18e4      	addlt	r4, r4, r3
 8006dc0:	f000 f8e0 	bl	8006f84 <__malloc_lock>
 8006dc4:	4a1d      	ldr	r2, [pc, #116]	@ (8006e3c <_free_r+0x90>)
 8006dc6:	6813      	ldr	r3, [r2, #0]
 8006dc8:	b933      	cbnz	r3, 8006dd8 <_free_r+0x2c>
 8006dca:	6063      	str	r3, [r4, #4]
 8006dcc:	6014      	str	r4, [r2, #0]
 8006dce:	4628      	mov	r0, r5
 8006dd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006dd4:	f000 b8dc 	b.w	8006f90 <__malloc_unlock>
 8006dd8:	42a3      	cmp	r3, r4
 8006dda:	d908      	bls.n	8006dee <_free_r+0x42>
 8006ddc:	6820      	ldr	r0, [r4, #0]
 8006dde:	1821      	adds	r1, r4, r0
 8006de0:	428b      	cmp	r3, r1
 8006de2:	bf01      	itttt	eq
 8006de4:	6819      	ldreq	r1, [r3, #0]
 8006de6:	685b      	ldreq	r3, [r3, #4]
 8006de8:	1809      	addeq	r1, r1, r0
 8006dea:	6021      	streq	r1, [r4, #0]
 8006dec:	e7ed      	b.n	8006dca <_free_r+0x1e>
 8006dee:	461a      	mov	r2, r3
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	b10b      	cbz	r3, 8006df8 <_free_r+0x4c>
 8006df4:	42a3      	cmp	r3, r4
 8006df6:	d9fa      	bls.n	8006dee <_free_r+0x42>
 8006df8:	6811      	ldr	r1, [r2, #0]
 8006dfa:	1850      	adds	r0, r2, r1
 8006dfc:	42a0      	cmp	r0, r4
 8006dfe:	d10b      	bne.n	8006e18 <_free_r+0x6c>
 8006e00:	6820      	ldr	r0, [r4, #0]
 8006e02:	4401      	add	r1, r0
 8006e04:	1850      	adds	r0, r2, r1
 8006e06:	4283      	cmp	r3, r0
 8006e08:	6011      	str	r1, [r2, #0]
 8006e0a:	d1e0      	bne.n	8006dce <_free_r+0x22>
 8006e0c:	6818      	ldr	r0, [r3, #0]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	6053      	str	r3, [r2, #4]
 8006e12:	4408      	add	r0, r1
 8006e14:	6010      	str	r0, [r2, #0]
 8006e16:	e7da      	b.n	8006dce <_free_r+0x22>
 8006e18:	d902      	bls.n	8006e20 <_free_r+0x74>
 8006e1a:	230c      	movs	r3, #12
 8006e1c:	602b      	str	r3, [r5, #0]
 8006e1e:	e7d6      	b.n	8006dce <_free_r+0x22>
 8006e20:	6820      	ldr	r0, [r4, #0]
 8006e22:	1821      	adds	r1, r4, r0
 8006e24:	428b      	cmp	r3, r1
 8006e26:	bf04      	itt	eq
 8006e28:	6819      	ldreq	r1, [r3, #0]
 8006e2a:	685b      	ldreq	r3, [r3, #4]
 8006e2c:	6063      	str	r3, [r4, #4]
 8006e2e:	bf04      	itt	eq
 8006e30:	1809      	addeq	r1, r1, r0
 8006e32:	6021      	streq	r1, [r4, #0]
 8006e34:	6054      	str	r4, [r2, #4]
 8006e36:	e7ca      	b.n	8006dce <_free_r+0x22>
 8006e38:	bd38      	pop	{r3, r4, r5, pc}
 8006e3a:	bf00      	nop
 8006e3c:	200005a4 	.word	0x200005a4

08006e40 <sbrk_aligned>:
 8006e40:	b570      	push	{r4, r5, r6, lr}
 8006e42:	4e0f      	ldr	r6, [pc, #60]	@ (8006e80 <sbrk_aligned+0x40>)
 8006e44:	460c      	mov	r4, r1
 8006e46:	6831      	ldr	r1, [r6, #0]
 8006e48:	4605      	mov	r5, r0
 8006e4a:	b911      	cbnz	r1, 8006e52 <sbrk_aligned+0x12>
 8006e4c:	f000 fba4 	bl	8007598 <_sbrk_r>
 8006e50:	6030      	str	r0, [r6, #0]
 8006e52:	4621      	mov	r1, r4
 8006e54:	4628      	mov	r0, r5
 8006e56:	f000 fb9f 	bl	8007598 <_sbrk_r>
 8006e5a:	1c43      	adds	r3, r0, #1
 8006e5c:	d103      	bne.n	8006e66 <sbrk_aligned+0x26>
 8006e5e:	f04f 34ff 	mov.w	r4, #4294967295
 8006e62:	4620      	mov	r0, r4
 8006e64:	bd70      	pop	{r4, r5, r6, pc}
 8006e66:	1cc4      	adds	r4, r0, #3
 8006e68:	f024 0403 	bic.w	r4, r4, #3
 8006e6c:	42a0      	cmp	r0, r4
 8006e6e:	d0f8      	beq.n	8006e62 <sbrk_aligned+0x22>
 8006e70:	1a21      	subs	r1, r4, r0
 8006e72:	4628      	mov	r0, r5
 8006e74:	f000 fb90 	bl	8007598 <_sbrk_r>
 8006e78:	3001      	adds	r0, #1
 8006e7a:	d1f2      	bne.n	8006e62 <sbrk_aligned+0x22>
 8006e7c:	e7ef      	b.n	8006e5e <sbrk_aligned+0x1e>
 8006e7e:	bf00      	nop
 8006e80:	200005a0 	.word	0x200005a0

08006e84 <_malloc_r>:
 8006e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e88:	1ccd      	adds	r5, r1, #3
 8006e8a:	f025 0503 	bic.w	r5, r5, #3
 8006e8e:	3508      	adds	r5, #8
 8006e90:	2d0c      	cmp	r5, #12
 8006e92:	bf38      	it	cc
 8006e94:	250c      	movcc	r5, #12
 8006e96:	2d00      	cmp	r5, #0
 8006e98:	4606      	mov	r6, r0
 8006e9a:	db01      	blt.n	8006ea0 <_malloc_r+0x1c>
 8006e9c:	42a9      	cmp	r1, r5
 8006e9e:	d904      	bls.n	8006eaa <_malloc_r+0x26>
 8006ea0:	230c      	movs	r3, #12
 8006ea2:	6033      	str	r3, [r6, #0]
 8006ea4:	2000      	movs	r0, #0
 8006ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006eaa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f80 <_malloc_r+0xfc>
 8006eae:	f000 f869 	bl	8006f84 <__malloc_lock>
 8006eb2:	f8d8 3000 	ldr.w	r3, [r8]
 8006eb6:	461c      	mov	r4, r3
 8006eb8:	bb44      	cbnz	r4, 8006f0c <_malloc_r+0x88>
 8006eba:	4629      	mov	r1, r5
 8006ebc:	4630      	mov	r0, r6
 8006ebe:	f7ff ffbf 	bl	8006e40 <sbrk_aligned>
 8006ec2:	1c43      	adds	r3, r0, #1
 8006ec4:	4604      	mov	r4, r0
 8006ec6:	d158      	bne.n	8006f7a <_malloc_r+0xf6>
 8006ec8:	f8d8 4000 	ldr.w	r4, [r8]
 8006ecc:	4627      	mov	r7, r4
 8006ece:	2f00      	cmp	r7, #0
 8006ed0:	d143      	bne.n	8006f5a <_malloc_r+0xd6>
 8006ed2:	2c00      	cmp	r4, #0
 8006ed4:	d04b      	beq.n	8006f6e <_malloc_r+0xea>
 8006ed6:	6823      	ldr	r3, [r4, #0]
 8006ed8:	4639      	mov	r1, r7
 8006eda:	4630      	mov	r0, r6
 8006edc:	eb04 0903 	add.w	r9, r4, r3
 8006ee0:	f000 fb5a 	bl	8007598 <_sbrk_r>
 8006ee4:	4581      	cmp	r9, r0
 8006ee6:	d142      	bne.n	8006f6e <_malloc_r+0xea>
 8006ee8:	6821      	ldr	r1, [r4, #0]
 8006eea:	1a6d      	subs	r5, r5, r1
 8006eec:	4629      	mov	r1, r5
 8006eee:	4630      	mov	r0, r6
 8006ef0:	f7ff ffa6 	bl	8006e40 <sbrk_aligned>
 8006ef4:	3001      	adds	r0, #1
 8006ef6:	d03a      	beq.n	8006f6e <_malloc_r+0xea>
 8006ef8:	6823      	ldr	r3, [r4, #0]
 8006efa:	442b      	add	r3, r5
 8006efc:	6023      	str	r3, [r4, #0]
 8006efe:	f8d8 3000 	ldr.w	r3, [r8]
 8006f02:	685a      	ldr	r2, [r3, #4]
 8006f04:	bb62      	cbnz	r2, 8006f60 <_malloc_r+0xdc>
 8006f06:	f8c8 7000 	str.w	r7, [r8]
 8006f0a:	e00f      	b.n	8006f2c <_malloc_r+0xa8>
 8006f0c:	6822      	ldr	r2, [r4, #0]
 8006f0e:	1b52      	subs	r2, r2, r5
 8006f10:	d420      	bmi.n	8006f54 <_malloc_r+0xd0>
 8006f12:	2a0b      	cmp	r2, #11
 8006f14:	d917      	bls.n	8006f46 <_malloc_r+0xc2>
 8006f16:	1961      	adds	r1, r4, r5
 8006f18:	42a3      	cmp	r3, r4
 8006f1a:	6025      	str	r5, [r4, #0]
 8006f1c:	bf18      	it	ne
 8006f1e:	6059      	strne	r1, [r3, #4]
 8006f20:	6863      	ldr	r3, [r4, #4]
 8006f22:	bf08      	it	eq
 8006f24:	f8c8 1000 	streq.w	r1, [r8]
 8006f28:	5162      	str	r2, [r4, r5]
 8006f2a:	604b      	str	r3, [r1, #4]
 8006f2c:	4630      	mov	r0, r6
 8006f2e:	f000 f82f 	bl	8006f90 <__malloc_unlock>
 8006f32:	f104 000b 	add.w	r0, r4, #11
 8006f36:	1d23      	adds	r3, r4, #4
 8006f38:	f020 0007 	bic.w	r0, r0, #7
 8006f3c:	1ac2      	subs	r2, r0, r3
 8006f3e:	bf1c      	itt	ne
 8006f40:	1a1b      	subne	r3, r3, r0
 8006f42:	50a3      	strne	r3, [r4, r2]
 8006f44:	e7af      	b.n	8006ea6 <_malloc_r+0x22>
 8006f46:	6862      	ldr	r2, [r4, #4]
 8006f48:	42a3      	cmp	r3, r4
 8006f4a:	bf0c      	ite	eq
 8006f4c:	f8c8 2000 	streq.w	r2, [r8]
 8006f50:	605a      	strne	r2, [r3, #4]
 8006f52:	e7eb      	b.n	8006f2c <_malloc_r+0xa8>
 8006f54:	4623      	mov	r3, r4
 8006f56:	6864      	ldr	r4, [r4, #4]
 8006f58:	e7ae      	b.n	8006eb8 <_malloc_r+0x34>
 8006f5a:	463c      	mov	r4, r7
 8006f5c:	687f      	ldr	r7, [r7, #4]
 8006f5e:	e7b6      	b.n	8006ece <_malloc_r+0x4a>
 8006f60:	461a      	mov	r2, r3
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	42a3      	cmp	r3, r4
 8006f66:	d1fb      	bne.n	8006f60 <_malloc_r+0xdc>
 8006f68:	2300      	movs	r3, #0
 8006f6a:	6053      	str	r3, [r2, #4]
 8006f6c:	e7de      	b.n	8006f2c <_malloc_r+0xa8>
 8006f6e:	230c      	movs	r3, #12
 8006f70:	6033      	str	r3, [r6, #0]
 8006f72:	4630      	mov	r0, r6
 8006f74:	f000 f80c 	bl	8006f90 <__malloc_unlock>
 8006f78:	e794      	b.n	8006ea4 <_malloc_r+0x20>
 8006f7a:	6005      	str	r5, [r0, #0]
 8006f7c:	e7d6      	b.n	8006f2c <_malloc_r+0xa8>
 8006f7e:	bf00      	nop
 8006f80:	200005a4 	.word	0x200005a4

08006f84 <__malloc_lock>:
 8006f84:	4801      	ldr	r0, [pc, #4]	@ (8006f8c <__malloc_lock+0x8>)
 8006f86:	f7ff bf0f 	b.w	8006da8 <__retarget_lock_acquire_recursive>
 8006f8a:	bf00      	nop
 8006f8c:	2000059c 	.word	0x2000059c

08006f90 <__malloc_unlock>:
 8006f90:	4801      	ldr	r0, [pc, #4]	@ (8006f98 <__malloc_unlock+0x8>)
 8006f92:	f7ff bf0a 	b.w	8006daa <__retarget_lock_release_recursive>
 8006f96:	bf00      	nop
 8006f98:	2000059c 	.word	0x2000059c

08006f9c <__ssputs_r>:
 8006f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fa0:	688e      	ldr	r6, [r1, #8]
 8006fa2:	461f      	mov	r7, r3
 8006fa4:	42be      	cmp	r6, r7
 8006fa6:	680b      	ldr	r3, [r1, #0]
 8006fa8:	4682      	mov	sl, r0
 8006faa:	460c      	mov	r4, r1
 8006fac:	4690      	mov	r8, r2
 8006fae:	d82d      	bhi.n	800700c <__ssputs_r+0x70>
 8006fb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006fb4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006fb8:	d026      	beq.n	8007008 <__ssputs_r+0x6c>
 8006fba:	6965      	ldr	r5, [r4, #20]
 8006fbc:	6909      	ldr	r1, [r1, #16]
 8006fbe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fc2:	eba3 0901 	sub.w	r9, r3, r1
 8006fc6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006fca:	1c7b      	adds	r3, r7, #1
 8006fcc:	444b      	add	r3, r9
 8006fce:	106d      	asrs	r5, r5, #1
 8006fd0:	429d      	cmp	r5, r3
 8006fd2:	bf38      	it	cc
 8006fd4:	461d      	movcc	r5, r3
 8006fd6:	0553      	lsls	r3, r2, #21
 8006fd8:	d527      	bpl.n	800702a <__ssputs_r+0x8e>
 8006fda:	4629      	mov	r1, r5
 8006fdc:	f7ff ff52 	bl	8006e84 <_malloc_r>
 8006fe0:	4606      	mov	r6, r0
 8006fe2:	b360      	cbz	r0, 800703e <__ssputs_r+0xa2>
 8006fe4:	6921      	ldr	r1, [r4, #16]
 8006fe6:	464a      	mov	r2, r9
 8006fe8:	f000 fae6 	bl	80075b8 <memcpy>
 8006fec:	89a3      	ldrh	r3, [r4, #12]
 8006fee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006ff2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ff6:	81a3      	strh	r3, [r4, #12]
 8006ff8:	6126      	str	r6, [r4, #16]
 8006ffa:	6165      	str	r5, [r4, #20]
 8006ffc:	444e      	add	r6, r9
 8006ffe:	eba5 0509 	sub.w	r5, r5, r9
 8007002:	6026      	str	r6, [r4, #0]
 8007004:	60a5      	str	r5, [r4, #8]
 8007006:	463e      	mov	r6, r7
 8007008:	42be      	cmp	r6, r7
 800700a:	d900      	bls.n	800700e <__ssputs_r+0x72>
 800700c:	463e      	mov	r6, r7
 800700e:	6820      	ldr	r0, [r4, #0]
 8007010:	4632      	mov	r2, r6
 8007012:	4641      	mov	r1, r8
 8007014:	f000 faa6 	bl	8007564 <memmove>
 8007018:	68a3      	ldr	r3, [r4, #8]
 800701a:	1b9b      	subs	r3, r3, r6
 800701c:	60a3      	str	r3, [r4, #8]
 800701e:	6823      	ldr	r3, [r4, #0]
 8007020:	4433      	add	r3, r6
 8007022:	6023      	str	r3, [r4, #0]
 8007024:	2000      	movs	r0, #0
 8007026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800702a:	462a      	mov	r2, r5
 800702c:	f000 fad2 	bl	80075d4 <_realloc_r>
 8007030:	4606      	mov	r6, r0
 8007032:	2800      	cmp	r0, #0
 8007034:	d1e0      	bne.n	8006ff8 <__ssputs_r+0x5c>
 8007036:	6921      	ldr	r1, [r4, #16]
 8007038:	4650      	mov	r0, sl
 800703a:	f7ff feb7 	bl	8006dac <_free_r>
 800703e:	230c      	movs	r3, #12
 8007040:	f8ca 3000 	str.w	r3, [sl]
 8007044:	89a3      	ldrh	r3, [r4, #12]
 8007046:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800704a:	81a3      	strh	r3, [r4, #12]
 800704c:	f04f 30ff 	mov.w	r0, #4294967295
 8007050:	e7e9      	b.n	8007026 <__ssputs_r+0x8a>
	...

08007054 <_svfiprintf_r>:
 8007054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007058:	4698      	mov	r8, r3
 800705a:	898b      	ldrh	r3, [r1, #12]
 800705c:	061b      	lsls	r3, r3, #24
 800705e:	b09d      	sub	sp, #116	@ 0x74
 8007060:	4607      	mov	r7, r0
 8007062:	460d      	mov	r5, r1
 8007064:	4614      	mov	r4, r2
 8007066:	d510      	bpl.n	800708a <_svfiprintf_r+0x36>
 8007068:	690b      	ldr	r3, [r1, #16]
 800706a:	b973      	cbnz	r3, 800708a <_svfiprintf_r+0x36>
 800706c:	2140      	movs	r1, #64	@ 0x40
 800706e:	f7ff ff09 	bl	8006e84 <_malloc_r>
 8007072:	6028      	str	r0, [r5, #0]
 8007074:	6128      	str	r0, [r5, #16]
 8007076:	b930      	cbnz	r0, 8007086 <_svfiprintf_r+0x32>
 8007078:	230c      	movs	r3, #12
 800707a:	603b      	str	r3, [r7, #0]
 800707c:	f04f 30ff 	mov.w	r0, #4294967295
 8007080:	b01d      	add	sp, #116	@ 0x74
 8007082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007086:	2340      	movs	r3, #64	@ 0x40
 8007088:	616b      	str	r3, [r5, #20]
 800708a:	2300      	movs	r3, #0
 800708c:	9309      	str	r3, [sp, #36]	@ 0x24
 800708e:	2320      	movs	r3, #32
 8007090:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007094:	f8cd 800c 	str.w	r8, [sp, #12]
 8007098:	2330      	movs	r3, #48	@ 0x30
 800709a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007238 <_svfiprintf_r+0x1e4>
 800709e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80070a2:	f04f 0901 	mov.w	r9, #1
 80070a6:	4623      	mov	r3, r4
 80070a8:	469a      	mov	sl, r3
 80070aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070ae:	b10a      	cbz	r2, 80070b4 <_svfiprintf_r+0x60>
 80070b0:	2a25      	cmp	r2, #37	@ 0x25
 80070b2:	d1f9      	bne.n	80070a8 <_svfiprintf_r+0x54>
 80070b4:	ebba 0b04 	subs.w	fp, sl, r4
 80070b8:	d00b      	beq.n	80070d2 <_svfiprintf_r+0x7e>
 80070ba:	465b      	mov	r3, fp
 80070bc:	4622      	mov	r2, r4
 80070be:	4629      	mov	r1, r5
 80070c0:	4638      	mov	r0, r7
 80070c2:	f7ff ff6b 	bl	8006f9c <__ssputs_r>
 80070c6:	3001      	adds	r0, #1
 80070c8:	f000 80a7 	beq.w	800721a <_svfiprintf_r+0x1c6>
 80070cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80070ce:	445a      	add	r2, fp
 80070d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80070d2:	f89a 3000 	ldrb.w	r3, [sl]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	f000 809f 	beq.w	800721a <_svfiprintf_r+0x1c6>
 80070dc:	2300      	movs	r3, #0
 80070de:	f04f 32ff 	mov.w	r2, #4294967295
 80070e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070e6:	f10a 0a01 	add.w	sl, sl, #1
 80070ea:	9304      	str	r3, [sp, #16]
 80070ec:	9307      	str	r3, [sp, #28]
 80070ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80070f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80070f4:	4654      	mov	r4, sl
 80070f6:	2205      	movs	r2, #5
 80070f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070fc:	484e      	ldr	r0, [pc, #312]	@ (8007238 <_svfiprintf_r+0x1e4>)
 80070fe:	f7f9 f847 	bl	8000190 <memchr>
 8007102:	9a04      	ldr	r2, [sp, #16]
 8007104:	b9d8      	cbnz	r0, 800713e <_svfiprintf_r+0xea>
 8007106:	06d0      	lsls	r0, r2, #27
 8007108:	bf44      	itt	mi
 800710a:	2320      	movmi	r3, #32
 800710c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007110:	0711      	lsls	r1, r2, #28
 8007112:	bf44      	itt	mi
 8007114:	232b      	movmi	r3, #43	@ 0x2b
 8007116:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800711a:	f89a 3000 	ldrb.w	r3, [sl]
 800711e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007120:	d015      	beq.n	800714e <_svfiprintf_r+0xfa>
 8007122:	9a07      	ldr	r2, [sp, #28]
 8007124:	4654      	mov	r4, sl
 8007126:	2000      	movs	r0, #0
 8007128:	f04f 0c0a 	mov.w	ip, #10
 800712c:	4621      	mov	r1, r4
 800712e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007132:	3b30      	subs	r3, #48	@ 0x30
 8007134:	2b09      	cmp	r3, #9
 8007136:	d94b      	bls.n	80071d0 <_svfiprintf_r+0x17c>
 8007138:	b1b0      	cbz	r0, 8007168 <_svfiprintf_r+0x114>
 800713a:	9207      	str	r2, [sp, #28]
 800713c:	e014      	b.n	8007168 <_svfiprintf_r+0x114>
 800713e:	eba0 0308 	sub.w	r3, r0, r8
 8007142:	fa09 f303 	lsl.w	r3, r9, r3
 8007146:	4313      	orrs	r3, r2
 8007148:	9304      	str	r3, [sp, #16]
 800714a:	46a2      	mov	sl, r4
 800714c:	e7d2      	b.n	80070f4 <_svfiprintf_r+0xa0>
 800714e:	9b03      	ldr	r3, [sp, #12]
 8007150:	1d19      	adds	r1, r3, #4
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	9103      	str	r1, [sp, #12]
 8007156:	2b00      	cmp	r3, #0
 8007158:	bfbb      	ittet	lt
 800715a:	425b      	neglt	r3, r3
 800715c:	f042 0202 	orrlt.w	r2, r2, #2
 8007160:	9307      	strge	r3, [sp, #28]
 8007162:	9307      	strlt	r3, [sp, #28]
 8007164:	bfb8      	it	lt
 8007166:	9204      	strlt	r2, [sp, #16]
 8007168:	7823      	ldrb	r3, [r4, #0]
 800716a:	2b2e      	cmp	r3, #46	@ 0x2e
 800716c:	d10a      	bne.n	8007184 <_svfiprintf_r+0x130>
 800716e:	7863      	ldrb	r3, [r4, #1]
 8007170:	2b2a      	cmp	r3, #42	@ 0x2a
 8007172:	d132      	bne.n	80071da <_svfiprintf_r+0x186>
 8007174:	9b03      	ldr	r3, [sp, #12]
 8007176:	1d1a      	adds	r2, r3, #4
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	9203      	str	r2, [sp, #12]
 800717c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007180:	3402      	adds	r4, #2
 8007182:	9305      	str	r3, [sp, #20]
 8007184:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800723c <_svfiprintf_r+0x1e8>
 8007188:	7821      	ldrb	r1, [r4, #0]
 800718a:	2203      	movs	r2, #3
 800718c:	4650      	mov	r0, sl
 800718e:	f7f8 ffff 	bl	8000190 <memchr>
 8007192:	b138      	cbz	r0, 80071a4 <_svfiprintf_r+0x150>
 8007194:	9b04      	ldr	r3, [sp, #16]
 8007196:	eba0 000a 	sub.w	r0, r0, sl
 800719a:	2240      	movs	r2, #64	@ 0x40
 800719c:	4082      	lsls	r2, r0
 800719e:	4313      	orrs	r3, r2
 80071a0:	3401      	adds	r4, #1
 80071a2:	9304      	str	r3, [sp, #16]
 80071a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071a8:	4825      	ldr	r0, [pc, #148]	@ (8007240 <_svfiprintf_r+0x1ec>)
 80071aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80071ae:	2206      	movs	r2, #6
 80071b0:	f7f8 ffee 	bl	8000190 <memchr>
 80071b4:	2800      	cmp	r0, #0
 80071b6:	d036      	beq.n	8007226 <_svfiprintf_r+0x1d2>
 80071b8:	4b22      	ldr	r3, [pc, #136]	@ (8007244 <_svfiprintf_r+0x1f0>)
 80071ba:	bb1b      	cbnz	r3, 8007204 <_svfiprintf_r+0x1b0>
 80071bc:	9b03      	ldr	r3, [sp, #12]
 80071be:	3307      	adds	r3, #7
 80071c0:	f023 0307 	bic.w	r3, r3, #7
 80071c4:	3308      	adds	r3, #8
 80071c6:	9303      	str	r3, [sp, #12]
 80071c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071ca:	4433      	add	r3, r6
 80071cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80071ce:	e76a      	b.n	80070a6 <_svfiprintf_r+0x52>
 80071d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80071d4:	460c      	mov	r4, r1
 80071d6:	2001      	movs	r0, #1
 80071d8:	e7a8      	b.n	800712c <_svfiprintf_r+0xd8>
 80071da:	2300      	movs	r3, #0
 80071dc:	3401      	adds	r4, #1
 80071de:	9305      	str	r3, [sp, #20]
 80071e0:	4619      	mov	r1, r3
 80071e2:	f04f 0c0a 	mov.w	ip, #10
 80071e6:	4620      	mov	r0, r4
 80071e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071ec:	3a30      	subs	r2, #48	@ 0x30
 80071ee:	2a09      	cmp	r2, #9
 80071f0:	d903      	bls.n	80071fa <_svfiprintf_r+0x1a6>
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d0c6      	beq.n	8007184 <_svfiprintf_r+0x130>
 80071f6:	9105      	str	r1, [sp, #20]
 80071f8:	e7c4      	b.n	8007184 <_svfiprintf_r+0x130>
 80071fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80071fe:	4604      	mov	r4, r0
 8007200:	2301      	movs	r3, #1
 8007202:	e7f0      	b.n	80071e6 <_svfiprintf_r+0x192>
 8007204:	ab03      	add	r3, sp, #12
 8007206:	9300      	str	r3, [sp, #0]
 8007208:	462a      	mov	r2, r5
 800720a:	4b0f      	ldr	r3, [pc, #60]	@ (8007248 <_svfiprintf_r+0x1f4>)
 800720c:	a904      	add	r1, sp, #16
 800720e:	4638      	mov	r0, r7
 8007210:	f3af 8000 	nop.w
 8007214:	1c42      	adds	r2, r0, #1
 8007216:	4606      	mov	r6, r0
 8007218:	d1d6      	bne.n	80071c8 <_svfiprintf_r+0x174>
 800721a:	89ab      	ldrh	r3, [r5, #12]
 800721c:	065b      	lsls	r3, r3, #25
 800721e:	f53f af2d 	bmi.w	800707c <_svfiprintf_r+0x28>
 8007222:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007224:	e72c      	b.n	8007080 <_svfiprintf_r+0x2c>
 8007226:	ab03      	add	r3, sp, #12
 8007228:	9300      	str	r3, [sp, #0]
 800722a:	462a      	mov	r2, r5
 800722c:	4b06      	ldr	r3, [pc, #24]	@ (8007248 <_svfiprintf_r+0x1f4>)
 800722e:	a904      	add	r1, sp, #16
 8007230:	4638      	mov	r0, r7
 8007232:	f000 f879 	bl	8007328 <_printf_i>
 8007236:	e7ed      	b.n	8007214 <_svfiprintf_r+0x1c0>
 8007238:	080077d0 	.word	0x080077d0
 800723c:	080077d6 	.word	0x080077d6
 8007240:	080077da 	.word	0x080077da
 8007244:	00000000 	.word	0x00000000
 8007248:	08006f9d 	.word	0x08006f9d

0800724c <_printf_common>:
 800724c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007250:	4616      	mov	r6, r2
 8007252:	4698      	mov	r8, r3
 8007254:	688a      	ldr	r2, [r1, #8]
 8007256:	690b      	ldr	r3, [r1, #16]
 8007258:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800725c:	4293      	cmp	r3, r2
 800725e:	bfb8      	it	lt
 8007260:	4613      	movlt	r3, r2
 8007262:	6033      	str	r3, [r6, #0]
 8007264:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007268:	4607      	mov	r7, r0
 800726a:	460c      	mov	r4, r1
 800726c:	b10a      	cbz	r2, 8007272 <_printf_common+0x26>
 800726e:	3301      	adds	r3, #1
 8007270:	6033      	str	r3, [r6, #0]
 8007272:	6823      	ldr	r3, [r4, #0]
 8007274:	0699      	lsls	r1, r3, #26
 8007276:	bf42      	ittt	mi
 8007278:	6833      	ldrmi	r3, [r6, #0]
 800727a:	3302      	addmi	r3, #2
 800727c:	6033      	strmi	r3, [r6, #0]
 800727e:	6825      	ldr	r5, [r4, #0]
 8007280:	f015 0506 	ands.w	r5, r5, #6
 8007284:	d106      	bne.n	8007294 <_printf_common+0x48>
 8007286:	f104 0a19 	add.w	sl, r4, #25
 800728a:	68e3      	ldr	r3, [r4, #12]
 800728c:	6832      	ldr	r2, [r6, #0]
 800728e:	1a9b      	subs	r3, r3, r2
 8007290:	42ab      	cmp	r3, r5
 8007292:	dc26      	bgt.n	80072e2 <_printf_common+0x96>
 8007294:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007298:	6822      	ldr	r2, [r4, #0]
 800729a:	3b00      	subs	r3, #0
 800729c:	bf18      	it	ne
 800729e:	2301      	movne	r3, #1
 80072a0:	0692      	lsls	r2, r2, #26
 80072a2:	d42b      	bmi.n	80072fc <_printf_common+0xb0>
 80072a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80072a8:	4641      	mov	r1, r8
 80072aa:	4638      	mov	r0, r7
 80072ac:	47c8      	blx	r9
 80072ae:	3001      	adds	r0, #1
 80072b0:	d01e      	beq.n	80072f0 <_printf_common+0xa4>
 80072b2:	6823      	ldr	r3, [r4, #0]
 80072b4:	6922      	ldr	r2, [r4, #16]
 80072b6:	f003 0306 	and.w	r3, r3, #6
 80072ba:	2b04      	cmp	r3, #4
 80072bc:	bf02      	ittt	eq
 80072be:	68e5      	ldreq	r5, [r4, #12]
 80072c0:	6833      	ldreq	r3, [r6, #0]
 80072c2:	1aed      	subeq	r5, r5, r3
 80072c4:	68a3      	ldr	r3, [r4, #8]
 80072c6:	bf0c      	ite	eq
 80072c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072cc:	2500      	movne	r5, #0
 80072ce:	4293      	cmp	r3, r2
 80072d0:	bfc4      	itt	gt
 80072d2:	1a9b      	subgt	r3, r3, r2
 80072d4:	18ed      	addgt	r5, r5, r3
 80072d6:	2600      	movs	r6, #0
 80072d8:	341a      	adds	r4, #26
 80072da:	42b5      	cmp	r5, r6
 80072dc:	d11a      	bne.n	8007314 <_printf_common+0xc8>
 80072de:	2000      	movs	r0, #0
 80072e0:	e008      	b.n	80072f4 <_printf_common+0xa8>
 80072e2:	2301      	movs	r3, #1
 80072e4:	4652      	mov	r2, sl
 80072e6:	4641      	mov	r1, r8
 80072e8:	4638      	mov	r0, r7
 80072ea:	47c8      	blx	r9
 80072ec:	3001      	adds	r0, #1
 80072ee:	d103      	bne.n	80072f8 <_printf_common+0xac>
 80072f0:	f04f 30ff 	mov.w	r0, #4294967295
 80072f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072f8:	3501      	adds	r5, #1
 80072fa:	e7c6      	b.n	800728a <_printf_common+0x3e>
 80072fc:	18e1      	adds	r1, r4, r3
 80072fe:	1c5a      	adds	r2, r3, #1
 8007300:	2030      	movs	r0, #48	@ 0x30
 8007302:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007306:	4422      	add	r2, r4
 8007308:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800730c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007310:	3302      	adds	r3, #2
 8007312:	e7c7      	b.n	80072a4 <_printf_common+0x58>
 8007314:	2301      	movs	r3, #1
 8007316:	4622      	mov	r2, r4
 8007318:	4641      	mov	r1, r8
 800731a:	4638      	mov	r0, r7
 800731c:	47c8      	blx	r9
 800731e:	3001      	adds	r0, #1
 8007320:	d0e6      	beq.n	80072f0 <_printf_common+0xa4>
 8007322:	3601      	adds	r6, #1
 8007324:	e7d9      	b.n	80072da <_printf_common+0x8e>
	...

08007328 <_printf_i>:
 8007328:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800732c:	7e0f      	ldrb	r7, [r1, #24]
 800732e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007330:	2f78      	cmp	r7, #120	@ 0x78
 8007332:	4691      	mov	r9, r2
 8007334:	4680      	mov	r8, r0
 8007336:	460c      	mov	r4, r1
 8007338:	469a      	mov	sl, r3
 800733a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800733e:	d807      	bhi.n	8007350 <_printf_i+0x28>
 8007340:	2f62      	cmp	r7, #98	@ 0x62
 8007342:	d80a      	bhi.n	800735a <_printf_i+0x32>
 8007344:	2f00      	cmp	r7, #0
 8007346:	f000 80d1 	beq.w	80074ec <_printf_i+0x1c4>
 800734a:	2f58      	cmp	r7, #88	@ 0x58
 800734c:	f000 80b8 	beq.w	80074c0 <_printf_i+0x198>
 8007350:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007354:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007358:	e03a      	b.n	80073d0 <_printf_i+0xa8>
 800735a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800735e:	2b15      	cmp	r3, #21
 8007360:	d8f6      	bhi.n	8007350 <_printf_i+0x28>
 8007362:	a101      	add	r1, pc, #4	@ (adr r1, 8007368 <_printf_i+0x40>)
 8007364:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007368:	080073c1 	.word	0x080073c1
 800736c:	080073d5 	.word	0x080073d5
 8007370:	08007351 	.word	0x08007351
 8007374:	08007351 	.word	0x08007351
 8007378:	08007351 	.word	0x08007351
 800737c:	08007351 	.word	0x08007351
 8007380:	080073d5 	.word	0x080073d5
 8007384:	08007351 	.word	0x08007351
 8007388:	08007351 	.word	0x08007351
 800738c:	08007351 	.word	0x08007351
 8007390:	08007351 	.word	0x08007351
 8007394:	080074d3 	.word	0x080074d3
 8007398:	080073ff 	.word	0x080073ff
 800739c:	0800748d 	.word	0x0800748d
 80073a0:	08007351 	.word	0x08007351
 80073a4:	08007351 	.word	0x08007351
 80073a8:	080074f5 	.word	0x080074f5
 80073ac:	08007351 	.word	0x08007351
 80073b0:	080073ff 	.word	0x080073ff
 80073b4:	08007351 	.word	0x08007351
 80073b8:	08007351 	.word	0x08007351
 80073bc:	08007495 	.word	0x08007495
 80073c0:	6833      	ldr	r3, [r6, #0]
 80073c2:	1d1a      	adds	r2, r3, #4
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	6032      	str	r2, [r6, #0]
 80073c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80073cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80073d0:	2301      	movs	r3, #1
 80073d2:	e09c      	b.n	800750e <_printf_i+0x1e6>
 80073d4:	6833      	ldr	r3, [r6, #0]
 80073d6:	6820      	ldr	r0, [r4, #0]
 80073d8:	1d19      	adds	r1, r3, #4
 80073da:	6031      	str	r1, [r6, #0]
 80073dc:	0606      	lsls	r6, r0, #24
 80073de:	d501      	bpl.n	80073e4 <_printf_i+0xbc>
 80073e0:	681d      	ldr	r5, [r3, #0]
 80073e2:	e003      	b.n	80073ec <_printf_i+0xc4>
 80073e4:	0645      	lsls	r5, r0, #25
 80073e6:	d5fb      	bpl.n	80073e0 <_printf_i+0xb8>
 80073e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80073ec:	2d00      	cmp	r5, #0
 80073ee:	da03      	bge.n	80073f8 <_printf_i+0xd0>
 80073f0:	232d      	movs	r3, #45	@ 0x2d
 80073f2:	426d      	negs	r5, r5
 80073f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073f8:	4858      	ldr	r0, [pc, #352]	@ (800755c <_printf_i+0x234>)
 80073fa:	230a      	movs	r3, #10
 80073fc:	e011      	b.n	8007422 <_printf_i+0xfa>
 80073fe:	6821      	ldr	r1, [r4, #0]
 8007400:	6833      	ldr	r3, [r6, #0]
 8007402:	0608      	lsls	r0, r1, #24
 8007404:	f853 5b04 	ldr.w	r5, [r3], #4
 8007408:	d402      	bmi.n	8007410 <_printf_i+0xe8>
 800740a:	0649      	lsls	r1, r1, #25
 800740c:	bf48      	it	mi
 800740e:	b2ad      	uxthmi	r5, r5
 8007410:	2f6f      	cmp	r7, #111	@ 0x6f
 8007412:	4852      	ldr	r0, [pc, #328]	@ (800755c <_printf_i+0x234>)
 8007414:	6033      	str	r3, [r6, #0]
 8007416:	bf14      	ite	ne
 8007418:	230a      	movne	r3, #10
 800741a:	2308      	moveq	r3, #8
 800741c:	2100      	movs	r1, #0
 800741e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007422:	6866      	ldr	r6, [r4, #4]
 8007424:	60a6      	str	r6, [r4, #8]
 8007426:	2e00      	cmp	r6, #0
 8007428:	db05      	blt.n	8007436 <_printf_i+0x10e>
 800742a:	6821      	ldr	r1, [r4, #0]
 800742c:	432e      	orrs	r6, r5
 800742e:	f021 0104 	bic.w	r1, r1, #4
 8007432:	6021      	str	r1, [r4, #0]
 8007434:	d04b      	beq.n	80074ce <_printf_i+0x1a6>
 8007436:	4616      	mov	r6, r2
 8007438:	fbb5 f1f3 	udiv	r1, r5, r3
 800743c:	fb03 5711 	mls	r7, r3, r1, r5
 8007440:	5dc7      	ldrb	r7, [r0, r7]
 8007442:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007446:	462f      	mov	r7, r5
 8007448:	42bb      	cmp	r3, r7
 800744a:	460d      	mov	r5, r1
 800744c:	d9f4      	bls.n	8007438 <_printf_i+0x110>
 800744e:	2b08      	cmp	r3, #8
 8007450:	d10b      	bne.n	800746a <_printf_i+0x142>
 8007452:	6823      	ldr	r3, [r4, #0]
 8007454:	07df      	lsls	r7, r3, #31
 8007456:	d508      	bpl.n	800746a <_printf_i+0x142>
 8007458:	6923      	ldr	r3, [r4, #16]
 800745a:	6861      	ldr	r1, [r4, #4]
 800745c:	4299      	cmp	r1, r3
 800745e:	bfde      	ittt	le
 8007460:	2330      	movle	r3, #48	@ 0x30
 8007462:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007466:	f106 36ff 	addle.w	r6, r6, #4294967295
 800746a:	1b92      	subs	r2, r2, r6
 800746c:	6122      	str	r2, [r4, #16]
 800746e:	f8cd a000 	str.w	sl, [sp]
 8007472:	464b      	mov	r3, r9
 8007474:	aa03      	add	r2, sp, #12
 8007476:	4621      	mov	r1, r4
 8007478:	4640      	mov	r0, r8
 800747a:	f7ff fee7 	bl	800724c <_printf_common>
 800747e:	3001      	adds	r0, #1
 8007480:	d14a      	bne.n	8007518 <_printf_i+0x1f0>
 8007482:	f04f 30ff 	mov.w	r0, #4294967295
 8007486:	b004      	add	sp, #16
 8007488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800748c:	6823      	ldr	r3, [r4, #0]
 800748e:	f043 0320 	orr.w	r3, r3, #32
 8007492:	6023      	str	r3, [r4, #0]
 8007494:	4832      	ldr	r0, [pc, #200]	@ (8007560 <_printf_i+0x238>)
 8007496:	2778      	movs	r7, #120	@ 0x78
 8007498:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800749c:	6823      	ldr	r3, [r4, #0]
 800749e:	6831      	ldr	r1, [r6, #0]
 80074a0:	061f      	lsls	r7, r3, #24
 80074a2:	f851 5b04 	ldr.w	r5, [r1], #4
 80074a6:	d402      	bmi.n	80074ae <_printf_i+0x186>
 80074a8:	065f      	lsls	r7, r3, #25
 80074aa:	bf48      	it	mi
 80074ac:	b2ad      	uxthmi	r5, r5
 80074ae:	6031      	str	r1, [r6, #0]
 80074b0:	07d9      	lsls	r1, r3, #31
 80074b2:	bf44      	itt	mi
 80074b4:	f043 0320 	orrmi.w	r3, r3, #32
 80074b8:	6023      	strmi	r3, [r4, #0]
 80074ba:	b11d      	cbz	r5, 80074c4 <_printf_i+0x19c>
 80074bc:	2310      	movs	r3, #16
 80074be:	e7ad      	b.n	800741c <_printf_i+0xf4>
 80074c0:	4826      	ldr	r0, [pc, #152]	@ (800755c <_printf_i+0x234>)
 80074c2:	e7e9      	b.n	8007498 <_printf_i+0x170>
 80074c4:	6823      	ldr	r3, [r4, #0]
 80074c6:	f023 0320 	bic.w	r3, r3, #32
 80074ca:	6023      	str	r3, [r4, #0]
 80074cc:	e7f6      	b.n	80074bc <_printf_i+0x194>
 80074ce:	4616      	mov	r6, r2
 80074d0:	e7bd      	b.n	800744e <_printf_i+0x126>
 80074d2:	6833      	ldr	r3, [r6, #0]
 80074d4:	6825      	ldr	r5, [r4, #0]
 80074d6:	6961      	ldr	r1, [r4, #20]
 80074d8:	1d18      	adds	r0, r3, #4
 80074da:	6030      	str	r0, [r6, #0]
 80074dc:	062e      	lsls	r6, r5, #24
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	d501      	bpl.n	80074e6 <_printf_i+0x1be>
 80074e2:	6019      	str	r1, [r3, #0]
 80074e4:	e002      	b.n	80074ec <_printf_i+0x1c4>
 80074e6:	0668      	lsls	r0, r5, #25
 80074e8:	d5fb      	bpl.n	80074e2 <_printf_i+0x1ba>
 80074ea:	8019      	strh	r1, [r3, #0]
 80074ec:	2300      	movs	r3, #0
 80074ee:	6123      	str	r3, [r4, #16]
 80074f0:	4616      	mov	r6, r2
 80074f2:	e7bc      	b.n	800746e <_printf_i+0x146>
 80074f4:	6833      	ldr	r3, [r6, #0]
 80074f6:	1d1a      	adds	r2, r3, #4
 80074f8:	6032      	str	r2, [r6, #0]
 80074fa:	681e      	ldr	r6, [r3, #0]
 80074fc:	6862      	ldr	r2, [r4, #4]
 80074fe:	2100      	movs	r1, #0
 8007500:	4630      	mov	r0, r6
 8007502:	f7f8 fe45 	bl	8000190 <memchr>
 8007506:	b108      	cbz	r0, 800750c <_printf_i+0x1e4>
 8007508:	1b80      	subs	r0, r0, r6
 800750a:	6060      	str	r0, [r4, #4]
 800750c:	6863      	ldr	r3, [r4, #4]
 800750e:	6123      	str	r3, [r4, #16]
 8007510:	2300      	movs	r3, #0
 8007512:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007516:	e7aa      	b.n	800746e <_printf_i+0x146>
 8007518:	6923      	ldr	r3, [r4, #16]
 800751a:	4632      	mov	r2, r6
 800751c:	4649      	mov	r1, r9
 800751e:	4640      	mov	r0, r8
 8007520:	47d0      	blx	sl
 8007522:	3001      	adds	r0, #1
 8007524:	d0ad      	beq.n	8007482 <_printf_i+0x15a>
 8007526:	6823      	ldr	r3, [r4, #0]
 8007528:	079b      	lsls	r3, r3, #30
 800752a:	d413      	bmi.n	8007554 <_printf_i+0x22c>
 800752c:	68e0      	ldr	r0, [r4, #12]
 800752e:	9b03      	ldr	r3, [sp, #12]
 8007530:	4298      	cmp	r0, r3
 8007532:	bfb8      	it	lt
 8007534:	4618      	movlt	r0, r3
 8007536:	e7a6      	b.n	8007486 <_printf_i+0x15e>
 8007538:	2301      	movs	r3, #1
 800753a:	4632      	mov	r2, r6
 800753c:	4649      	mov	r1, r9
 800753e:	4640      	mov	r0, r8
 8007540:	47d0      	blx	sl
 8007542:	3001      	adds	r0, #1
 8007544:	d09d      	beq.n	8007482 <_printf_i+0x15a>
 8007546:	3501      	adds	r5, #1
 8007548:	68e3      	ldr	r3, [r4, #12]
 800754a:	9903      	ldr	r1, [sp, #12]
 800754c:	1a5b      	subs	r3, r3, r1
 800754e:	42ab      	cmp	r3, r5
 8007550:	dcf2      	bgt.n	8007538 <_printf_i+0x210>
 8007552:	e7eb      	b.n	800752c <_printf_i+0x204>
 8007554:	2500      	movs	r5, #0
 8007556:	f104 0619 	add.w	r6, r4, #25
 800755a:	e7f5      	b.n	8007548 <_printf_i+0x220>
 800755c:	080077e1 	.word	0x080077e1
 8007560:	080077f2 	.word	0x080077f2

08007564 <memmove>:
 8007564:	4288      	cmp	r0, r1
 8007566:	b510      	push	{r4, lr}
 8007568:	eb01 0402 	add.w	r4, r1, r2
 800756c:	d902      	bls.n	8007574 <memmove+0x10>
 800756e:	4284      	cmp	r4, r0
 8007570:	4623      	mov	r3, r4
 8007572:	d807      	bhi.n	8007584 <memmove+0x20>
 8007574:	1e43      	subs	r3, r0, #1
 8007576:	42a1      	cmp	r1, r4
 8007578:	d008      	beq.n	800758c <memmove+0x28>
 800757a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800757e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007582:	e7f8      	b.n	8007576 <memmove+0x12>
 8007584:	4402      	add	r2, r0
 8007586:	4601      	mov	r1, r0
 8007588:	428a      	cmp	r2, r1
 800758a:	d100      	bne.n	800758e <memmove+0x2a>
 800758c:	bd10      	pop	{r4, pc}
 800758e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007592:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007596:	e7f7      	b.n	8007588 <memmove+0x24>

08007598 <_sbrk_r>:
 8007598:	b538      	push	{r3, r4, r5, lr}
 800759a:	4d06      	ldr	r5, [pc, #24]	@ (80075b4 <_sbrk_r+0x1c>)
 800759c:	2300      	movs	r3, #0
 800759e:	4604      	mov	r4, r0
 80075a0:	4608      	mov	r0, r1
 80075a2:	602b      	str	r3, [r5, #0]
 80075a4:	f7f9 fc0e 	bl	8000dc4 <_sbrk>
 80075a8:	1c43      	adds	r3, r0, #1
 80075aa:	d102      	bne.n	80075b2 <_sbrk_r+0x1a>
 80075ac:	682b      	ldr	r3, [r5, #0]
 80075ae:	b103      	cbz	r3, 80075b2 <_sbrk_r+0x1a>
 80075b0:	6023      	str	r3, [r4, #0]
 80075b2:	bd38      	pop	{r3, r4, r5, pc}
 80075b4:	20000598 	.word	0x20000598

080075b8 <memcpy>:
 80075b8:	440a      	add	r2, r1
 80075ba:	4291      	cmp	r1, r2
 80075bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80075c0:	d100      	bne.n	80075c4 <memcpy+0xc>
 80075c2:	4770      	bx	lr
 80075c4:	b510      	push	{r4, lr}
 80075c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075ce:	4291      	cmp	r1, r2
 80075d0:	d1f9      	bne.n	80075c6 <memcpy+0xe>
 80075d2:	bd10      	pop	{r4, pc}

080075d4 <_realloc_r>:
 80075d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075d8:	4607      	mov	r7, r0
 80075da:	4614      	mov	r4, r2
 80075dc:	460d      	mov	r5, r1
 80075de:	b921      	cbnz	r1, 80075ea <_realloc_r+0x16>
 80075e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075e4:	4611      	mov	r1, r2
 80075e6:	f7ff bc4d 	b.w	8006e84 <_malloc_r>
 80075ea:	b92a      	cbnz	r2, 80075f8 <_realloc_r+0x24>
 80075ec:	f7ff fbde 	bl	8006dac <_free_r>
 80075f0:	4625      	mov	r5, r4
 80075f2:	4628      	mov	r0, r5
 80075f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075f8:	f000 f81a 	bl	8007630 <_malloc_usable_size_r>
 80075fc:	4284      	cmp	r4, r0
 80075fe:	4606      	mov	r6, r0
 8007600:	d802      	bhi.n	8007608 <_realloc_r+0x34>
 8007602:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007606:	d8f4      	bhi.n	80075f2 <_realloc_r+0x1e>
 8007608:	4621      	mov	r1, r4
 800760a:	4638      	mov	r0, r7
 800760c:	f7ff fc3a 	bl	8006e84 <_malloc_r>
 8007610:	4680      	mov	r8, r0
 8007612:	b908      	cbnz	r0, 8007618 <_realloc_r+0x44>
 8007614:	4645      	mov	r5, r8
 8007616:	e7ec      	b.n	80075f2 <_realloc_r+0x1e>
 8007618:	42b4      	cmp	r4, r6
 800761a:	4622      	mov	r2, r4
 800761c:	4629      	mov	r1, r5
 800761e:	bf28      	it	cs
 8007620:	4632      	movcs	r2, r6
 8007622:	f7ff ffc9 	bl	80075b8 <memcpy>
 8007626:	4629      	mov	r1, r5
 8007628:	4638      	mov	r0, r7
 800762a:	f7ff fbbf 	bl	8006dac <_free_r>
 800762e:	e7f1      	b.n	8007614 <_realloc_r+0x40>

08007630 <_malloc_usable_size_r>:
 8007630:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007634:	1f18      	subs	r0, r3, #4
 8007636:	2b00      	cmp	r3, #0
 8007638:	bfbc      	itt	lt
 800763a:	580b      	ldrlt	r3, [r1, r0]
 800763c:	18c0      	addlt	r0, r0, r3
 800763e:	4770      	bx	lr

08007640 <_init>:
 8007640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007642:	bf00      	nop
 8007644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007646:	bc08      	pop	{r3}
 8007648:	469e      	mov	lr, r3
 800764a:	4770      	bx	lr

0800764c <_fini>:
 800764c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800764e:	bf00      	nop
 8007650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007652:	bc08      	pop	{r3}
 8007654:	469e      	mov	lr, r3
 8007656:	4770      	bx	lr
