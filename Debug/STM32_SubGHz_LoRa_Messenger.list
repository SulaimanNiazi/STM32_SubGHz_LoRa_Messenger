
STM32_SubGHz_LoRa_Messenger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dbc  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08006efc  08006efc  00007efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070a4  080070a4  0000916c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080070a4  080070a4  000080a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070ac  080070ac  0000916c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070ac  080070ac  000080ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080070b0  080070b0  000080b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000016c  20000000  080070b4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000434  2000016c  08007220  0000916c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a0  08007220  000095a0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000916c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015800  00000000  00000000  00009196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000353a  00000000  00000000  0001e996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001538  00000000  00000000  00021ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ffe  00000000  00000000  00023408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e53d  00000000  00000000  00024406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015208  00000000  00000000  00042943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6868  00000000  00000000  00057b4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010e3b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c20  00000000  00000000  0010e3f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00114018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000016c 	.word	0x2000016c
 800015c:	00000000 	.word	0x00000000
 8000160:	08006ee4 	.word	0x08006ee4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000170 	.word	0x20000170
 800017c:	08006ee4 	.word	0x08006ee4

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b988 	b.w	8000558 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	468e      	mov	lr, r1
 8000268:	4604      	mov	r4, r0
 800026a:	4688      	mov	r8, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14a      	bne.n	8000306 <__udivmoddi4+0xa6>
 8000270:	428a      	cmp	r2, r1
 8000272:	4617      	mov	r7, r2
 8000274:	d962      	bls.n	800033c <__udivmoddi4+0xdc>
 8000276:	fab2 f682 	clz	r6, r2
 800027a:	b14e      	cbz	r6, 8000290 <__udivmoddi4+0x30>
 800027c:	f1c6 0320 	rsb	r3, r6, #32
 8000280:	fa01 f806 	lsl.w	r8, r1, r6
 8000284:	fa20 f303 	lsr.w	r3, r0, r3
 8000288:	40b7      	lsls	r7, r6
 800028a:	ea43 0808 	orr.w	r8, r3, r8
 800028e:	40b4      	lsls	r4, r6
 8000290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000294:	fa1f fc87 	uxth.w	ip, r7
 8000298:	fbb8 f1fe 	udiv	r1, r8, lr
 800029c:	0c23      	lsrs	r3, r4, #16
 800029e:	fb0e 8811 	mls	r8, lr, r1, r8
 80002a2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a6:	fb01 f20c 	mul.w	r2, r1, ip
 80002aa:	429a      	cmp	r2, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x62>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002b4:	f080 80ea 	bcs.w	800048c <__udivmoddi4+0x22c>
 80002b8:	429a      	cmp	r2, r3
 80002ba:	f240 80e7 	bls.w	800048c <__udivmoddi4+0x22c>
 80002be:	3902      	subs	r1, #2
 80002c0:	443b      	add	r3, r7
 80002c2:	1a9a      	subs	r2, r3, r2
 80002c4:	b2a3      	uxth	r3, r4
 80002c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002d2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d6:	459c      	cmp	ip, r3
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0x8e>
 80002da:	18fb      	adds	r3, r7, r3
 80002dc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e0:	f080 80d6 	bcs.w	8000490 <__udivmoddi4+0x230>
 80002e4:	459c      	cmp	ip, r3
 80002e6:	f240 80d3 	bls.w	8000490 <__udivmoddi4+0x230>
 80002ea:	443b      	add	r3, r7
 80002ec:	3802      	subs	r0, #2
 80002ee:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f2:	eba3 030c 	sub.w	r3, r3, ip
 80002f6:	2100      	movs	r1, #0
 80002f8:	b11d      	cbz	r5, 8000302 <__udivmoddi4+0xa2>
 80002fa:	40f3      	lsrs	r3, r6
 80002fc:	2200      	movs	r2, #0
 80002fe:	e9c5 3200 	strd	r3, r2, [r5]
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	428b      	cmp	r3, r1
 8000308:	d905      	bls.n	8000316 <__udivmoddi4+0xb6>
 800030a:	b10d      	cbz	r5, 8000310 <__udivmoddi4+0xb0>
 800030c:	e9c5 0100 	strd	r0, r1, [r5]
 8000310:	2100      	movs	r1, #0
 8000312:	4608      	mov	r0, r1
 8000314:	e7f5      	b.n	8000302 <__udivmoddi4+0xa2>
 8000316:	fab3 f183 	clz	r1, r3
 800031a:	2900      	cmp	r1, #0
 800031c:	d146      	bne.n	80003ac <__udivmoddi4+0x14c>
 800031e:	4573      	cmp	r3, lr
 8000320:	d302      	bcc.n	8000328 <__udivmoddi4+0xc8>
 8000322:	4282      	cmp	r2, r0
 8000324:	f200 8105 	bhi.w	8000532 <__udivmoddi4+0x2d2>
 8000328:	1a84      	subs	r4, r0, r2
 800032a:	eb6e 0203 	sbc.w	r2, lr, r3
 800032e:	2001      	movs	r0, #1
 8000330:	4690      	mov	r8, r2
 8000332:	2d00      	cmp	r5, #0
 8000334:	d0e5      	beq.n	8000302 <__udivmoddi4+0xa2>
 8000336:	e9c5 4800 	strd	r4, r8, [r5]
 800033a:	e7e2      	b.n	8000302 <__udivmoddi4+0xa2>
 800033c:	2a00      	cmp	r2, #0
 800033e:	f000 8090 	beq.w	8000462 <__udivmoddi4+0x202>
 8000342:	fab2 f682 	clz	r6, r2
 8000346:	2e00      	cmp	r6, #0
 8000348:	f040 80a4 	bne.w	8000494 <__udivmoddi4+0x234>
 800034c:	1a8a      	subs	r2, r1, r2
 800034e:	0c03      	lsrs	r3, r0, #16
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	b280      	uxth	r0, r0
 8000356:	b2bc      	uxth	r4, r7
 8000358:	2101      	movs	r1, #1
 800035a:	fbb2 fcfe 	udiv	ip, r2, lr
 800035e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000362:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000366:	fb04 f20c 	mul.w	r2, r4, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d907      	bls.n	800037e <__udivmoddi4+0x11e>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000374:	d202      	bcs.n	800037c <__udivmoddi4+0x11c>
 8000376:	429a      	cmp	r2, r3
 8000378:	f200 80e0 	bhi.w	800053c <__udivmoddi4+0x2dc>
 800037c:	46c4      	mov	ip, r8
 800037e:	1a9b      	subs	r3, r3, r2
 8000380:	fbb3 f2fe 	udiv	r2, r3, lr
 8000384:	fb0e 3312 	mls	r3, lr, r2, r3
 8000388:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800038c:	fb02 f404 	mul.w	r4, r2, r4
 8000390:	429c      	cmp	r4, r3
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0x144>
 8000394:	18fb      	adds	r3, r7, r3
 8000396:	f102 30ff 	add.w	r0, r2, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x142>
 800039c:	429c      	cmp	r4, r3
 800039e:	f200 80ca 	bhi.w	8000536 <__udivmoddi4+0x2d6>
 80003a2:	4602      	mov	r2, r0
 80003a4:	1b1b      	subs	r3, r3, r4
 80003a6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003aa:	e7a5      	b.n	80002f8 <__udivmoddi4+0x98>
 80003ac:	f1c1 0620 	rsb	r6, r1, #32
 80003b0:	408b      	lsls	r3, r1
 80003b2:	fa22 f706 	lsr.w	r7, r2, r6
 80003b6:	431f      	orrs	r7, r3
 80003b8:	fa0e f401 	lsl.w	r4, lr, r1
 80003bc:	fa20 f306 	lsr.w	r3, r0, r6
 80003c0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003c4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003c8:	4323      	orrs	r3, r4
 80003ca:	fa00 f801 	lsl.w	r8, r0, r1
 80003ce:	fa1f fc87 	uxth.w	ip, r7
 80003d2:	fbbe f0f9 	udiv	r0, lr, r9
 80003d6:	0c1c      	lsrs	r4, r3, #16
 80003d8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003dc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003e0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ea:	d909      	bls.n	8000400 <__udivmoddi4+0x1a0>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 3aff 	add.w	sl, r0, #4294967295
 80003f2:	f080 809c 	bcs.w	800052e <__udivmoddi4+0x2ce>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f240 8099 	bls.w	800052e <__udivmoddi4+0x2ce>
 80003fc:	3802      	subs	r0, #2
 80003fe:	443c      	add	r4, r7
 8000400:	eba4 040e 	sub.w	r4, r4, lr
 8000404:	fa1f fe83 	uxth.w	lr, r3
 8000408:	fbb4 f3f9 	udiv	r3, r4, r9
 800040c:	fb09 4413 	mls	r4, r9, r3, r4
 8000410:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000414:	fb03 fc0c 	mul.w	ip, r3, ip
 8000418:	45a4      	cmp	ip, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x1ce>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000422:	f080 8082 	bcs.w	800052a <__udivmoddi4+0x2ca>
 8000426:	45a4      	cmp	ip, r4
 8000428:	d97f      	bls.n	800052a <__udivmoddi4+0x2ca>
 800042a:	3b02      	subs	r3, #2
 800042c:	443c      	add	r4, r7
 800042e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000432:	eba4 040c 	sub.w	r4, r4, ip
 8000436:	fba0 ec02 	umull	lr, ip, r0, r2
 800043a:	4564      	cmp	r4, ip
 800043c:	4673      	mov	r3, lr
 800043e:	46e1      	mov	r9, ip
 8000440:	d362      	bcc.n	8000508 <__udivmoddi4+0x2a8>
 8000442:	d05f      	beq.n	8000504 <__udivmoddi4+0x2a4>
 8000444:	b15d      	cbz	r5, 800045e <__udivmoddi4+0x1fe>
 8000446:	ebb8 0203 	subs.w	r2, r8, r3
 800044a:	eb64 0409 	sbc.w	r4, r4, r9
 800044e:	fa04 f606 	lsl.w	r6, r4, r6
 8000452:	fa22 f301 	lsr.w	r3, r2, r1
 8000456:	431e      	orrs	r6, r3
 8000458:	40cc      	lsrs	r4, r1
 800045a:	e9c5 6400 	strd	r6, r4, [r5]
 800045e:	2100      	movs	r1, #0
 8000460:	e74f      	b.n	8000302 <__udivmoddi4+0xa2>
 8000462:	fbb1 fcf2 	udiv	ip, r1, r2
 8000466:	0c01      	lsrs	r1, r0, #16
 8000468:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800046c:	b280      	uxth	r0, r0
 800046e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000472:	463b      	mov	r3, r7
 8000474:	4638      	mov	r0, r7
 8000476:	463c      	mov	r4, r7
 8000478:	46b8      	mov	r8, r7
 800047a:	46be      	mov	lr, r7
 800047c:	2620      	movs	r6, #32
 800047e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000482:	eba2 0208 	sub.w	r2, r2, r8
 8000486:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800048a:	e766      	b.n	800035a <__udivmoddi4+0xfa>
 800048c:	4601      	mov	r1, r0
 800048e:	e718      	b.n	80002c2 <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e72c      	b.n	80002ee <__udivmoddi4+0x8e>
 8000494:	f1c6 0220 	rsb	r2, r6, #32
 8000498:	fa2e f302 	lsr.w	r3, lr, r2
 800049c:	40b7      	lsls	r7, r6
 800049e:	40b1      	lsls	r1, r6
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	430a      	orrs	r2, r1
 80004aa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ae:	b2bc      	uxth	r4, r7
 80004b0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004b4:	0c11      	lsrs	r1, r2, #16
 80004b6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ba:	fb08 f904 	mul.w	r9, r8, r4
 80004be:	40b0      	lsls	r0, r6
 80004c0:	4589      	cmp	r9, r1
 80004c2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004c6:	b280      	uxth	r0, r0
 80004c8:	d93e      	bls.n	8000548 <__udivmoddi4+0x2e8>
 80004ca:	1879      	adds	r1, r7, r1
 80004cc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004d0:	d201      	bcs.n	80004d6 <__udivmoddi4+0x276>
 80004d2:	4589      	cmp	r9, r1
 80004d4:	d81f      	bhi.n	8000516 <__udivmoddi4+0x2b6>
 80004d6:	eba1 0109 	sub.w	r1, r1, r9
 80004da:	fbb1 f9fe 	udiv	r9, r1, lr
 80004de:	fb09 f804 	mul.w	r8, r9, r4
 80004e2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004e6:	b292      	uxth	r2, r2
 80004e8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004ec:	4542      	cmp	r2, r8
 80004ee:	d229      	bcs.n	8000544 <__udivmoddi4+0x2e4>
 80004f0:	18ba      	adds	r2, r7, r2
 80004f2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004f6:	d2c4      	bcs.n	8000482 <__udivmoddi4+0x222>
 80004f8:	4542      	cmp	r2, r8
 80004fa:	d2c2      	bcs.n	8000482 <__udivmoddi4+0x222>
 80004fc:	f1a9 0102 	sub.w	r1, r9, #2
 8000500:	443a      	add	r2, r7
 8000502:	e7be      	b.n	8000482 <__udivmoddi4+0x222>
 8000504:	45f0      	cmp	r8, lr
 8000506:	d29d      	bcs.n	8000444 <__udivmoddi4+0x1e4>
 8000508:	ebbe 0302 	subs.w	r3, lr, r2
 800050c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000510:	3801      	subs	r0, #1
 8000512:	46e1      	mov	r9, ip
 8000514:	e796      	b.n	8000444 <__udivmoddi4+0x1e4>
 8000516:	eba7 0909 	sub.w	r9, r7, r9
 800051a:	4449      	add	r1, r9
 800051c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000520:	fbb1 f9fe 	udiv	r9, r1, lr
 8000524:	fb09 f804 	mul.w	r8, r9, r4
 8000528:	e7db      	b.n	80004e2 <__udivmoddi4+0x282>
 800052a:	4673      	mov	r3, lr
 800052c:	e77f      	b.n	800042e <__udivmoddi4+0x1ce>
 800052e:	4650      	mov	r0, sl
 8000530:	e766      	b.n	8000400 <__udivmoddi4+0x1a0>
 8000532:	4608      	mov	r0, r1
 8000534:	e6fd      	b.n	8000332 <__udivmoddi4+0xd2>
 8000536:	443b      	add	r3, r7
 8000538:	3a02      	subs	r2, #2
 800053a:	e733      	b.n	80003a4 <__udivmoddi4+0x144>
 800053c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000540:	443b      	add	r3, r7
 8000542:	e71c      	b.n	800037e <__udivmoddi4+0x11e>
 8000544:	4649      	mov	r1, r9
 8000546:	e79c      	b.n	8000482 <__udivmoddi4+0x222>
 8000548:	eba1 0109 	sub.w	r1, r1, r9
 800054c:	46c4      	mov	ip, r8
 800054e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000552:	fb09 f804 	mul.w	r8, r9, r4
 8000556:	e7c4      	b.n	80004e2 <__udivmoddi4+0x282>

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000568:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800056a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4313      	orrs	r3, r2
 8000572:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000574:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000578:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4013      	ands	r3, r2
 800057e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000580:	68fb      	ldr	r3, [r7, #12]
}
 8000582:	bf00      	nop
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr

0800058c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a0:	2004      	movs	r0, #4
 80005a2:	f7ff ffdb 	bl	800055c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	2001      	movs	r0, #1
 80005a8:	f7ff ffd8 	bl	800055c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2138      	movs	r1, #56	@ 0x38
 80005b0:	4809      	ldr	r0, [pc, #36]	@ (80005d8 <MX_GPIO_Init+0x4c>)
 80005b2:	f001 ffa5 	bl	8002500 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 80005b6:	2338      	movs	r3, #56	@ 0x38
 80005b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ba:	2301      	movs	r3, #1
 80005bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005c2:	2303      	movs	r3, #3
 80005c4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	4619      	mov	r1, r3
 80005ca:	4803      	ldr	r0, [pc, #12]	@ (80005d8 <MX_GPIO_Init+0x4c>)
 80005cc:	f001 fe38 	bl	8002240 <HAL_GPIO_Init>

}
 80005d0:	bf00      	nop
 80005d2:	3718      	adds	r7, #24
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	48000800 	.word	0x48000800

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b0c6      	sub	sp, #280	@ 0x118
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f001 fb99 	bl	8001d18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f89d 	bl	8000724 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  HAL_Delay(3000);
 80005ea:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80005ee:	f001 fc09 	bl	8001e04 <HAL_Delay>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f2:	f7ff ffcb 	bl	800058c <MX_GPIO_Init>
  MX_SUBGHZ_Init();
 80005f6:	f000 fa77 	bl	8000ae8 <MX_SUBGHZ_Init>
  MX_USART2_UART_Init();
 80005fa:	f000 fb07 	bl	8000c0c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  BSP_LED_Init(LED_BLUE);	// Master
 80005fe:	2000      	movs	r0, #0
 8000600:	f000 fbe0 	bl	8000dc4 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);	// Slave
 8000604:	2001      	movs	r0, #1
 8000606:	f000 fbdd 	bl	8000dc4 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);	// Disconnected
 800060a:	2002      	movs	r0, #2
 800060c:	f000 fbda 	bl	8000dc4 <BSP_LED_Init>

  Radio_Init();
 8000610:	f000 f99c 	bl	800094c <Radio_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  snprintf((char*)buffer, MAX_BUFFER_SIZE, "\r\nSTM32 SubGHz LoRa Messenger\r\n\r\nPlease Enter an ID: ");
 8000614:	4a38      	ldr	r2, [pc, #224]	@ (80006f8 <main+0x11c>)
 8000616:	21ff      	movs	r1, #255	@ 0xff
 8000618:	4838      	ldr	r0, [pc, #224]	@ (80006fc <main+0x120>)
 800061a:	f005 ff8d 	bl	8006538 <sniprintf>
  UART_Transmit((char*)buffer);
 800061e:	4837      	ldr	r0, [pc, #220]	@ (80006fc <main+0x120>)
 8000620:	f000 f8d2 	bl	80007c8 <UART_Transmit>
  while(!messageReady) HAL_UART_Receive_IT(&huart2, input, 1);
 8000624:	e004      	b.n	8000630 <main+0x54>
 8000626:	2201      	movs	r2, #1
 8000628:	4935      	ldr	r1, [pc, #212]	@ (8000700 <main+0x124>)
 800062a:	4836      	ldr	r0, [pc, #216]	@ (8000704 <main+0x128>)
 800062c:	f003 ffc6 	bl	80045bc <HAL_UART_Receive_IT>
 8000630:	4b35      	ldr	r3, [pc, #212]	@ (8000708 <main+0x12c>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	f083 0301 	eor.w	r3, r3, #1
 8000638:	b2db      	uxtb	r3, r3
 800063a:	2b00      	cmp	r3, #0
 800063c:	d1f3      	bne.n	8000626 <main+0x4a>
  HAL_NVIC_DisableIRQ(USART2_IRQn);
 800063e:	2025      	movs	r0, #37	@ 0x25
 8000640:	f001 fd27 	bl	8002092 <HAL_NVIC_DisableIRQ>
  idLen = snprintf(id, MAX_BUFFER_SIZE, "%s", (char*)output);
 8000644:	4b31      	ldr	r3, [pc, #196]	@ (800070c <main+0x130>)
 8000646:	4a32      	ldr	r2, [pc, #200]	@ (8000710 <main+0x134>)
 8000648:	21ff      	movs	r1, #255	@ 0xff
 800064a:	4832      	ldr	r0, [pc, #200]	@ (8000714 <main+0x138>)
 800064c:	f005 ff74 	bl	8006538 <sniprintf>
 8000650:	4603      	mov	r3, r0
 8000652:	4a31      	ldr	r2, [pc, #196]	@ (8000718 <main+0x13c>)
 8000654:	6013      	str	r3, [r2, #0]
  UART_Transmit(id);
 8000656:	482f      	ldr	r0, [pc, #188]	@ (8000714 <main+0x138>)
 8000658:	f000 f8b6 	bl	80007c8 <UART_Transmit>
  UART_Transmit("\r\n\r\n");
 800065c:	482f      	ldr	r0, [pc, #188]	@ (800071c <main+0x140>)
 800065e:	f000 f8b3 	bl	80007c8 <UART_Transmit>
  resetTerminal();
 8000662:	f000 f925 	bl	80008b0 <resetTerminal>

  BSP_LED_On(LED_RED); // Disconnected at first
 8000666:	2002      	movs	r0, #2
 8000668:	f000 fbe6 	bl	8000e38 <BSP_LED_On>

  SessionContext sessionContext = {
 800066c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000670:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000674:	4618      	mov	r0, r3
 8000676:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800067a:	461a      	mov	r2, r3
 800067c:	2100      	movs	r1, #0
 800067e:	f005 ffb3 	bl	80065e8 <memset>
 8000682:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000686:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800068a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000694:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000698:	2264      	movs	r2, #100	@ 0x64
 800069a:	609a      	str	r2, [r3, #8]
		  .state = MASTER,		// Start as Master
		  .subState = RX,		// Start by listening
		  .rxTimeout = 3000,	// ms
		  .txDelay = 100 		// ms
  };
  uint16_t mask = IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR;
 800069c:	f240 2342 	movw	r3, #578	@ 0x242
 80006a0:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
  SUBGRF_SetDioIrqParams( mask, mask, IRQ_RADIO_NONE, IRQ_RADIO_NONE );	// Arm radio IRQs for RX done, timeout, CRC error
 80006a4:	f8b7 1116 	ldrh.w	r1, [r7, #278]	@ 0x116
 80006a8:	f8b7 0116 	ldrh.w	r0, [r7, #278]	@ 0x116
 80006ac:	2300      	movs	r3, #0
 80006ae:	2200      	movs	r2, #0
 80006b0:	f000 fe90 	bl	80013d4 <SUBGRF_SetDioIrqParams>
  SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); 								// Set RF switch to RX path on low-power PA path
 80006b4:	2100      	movs	r1, #0
 80006b6:	2001      	movs	r0, #1
 80006b8:	f001 fa10 	bl	8001adc <SUBGRF_SetSwitch>
  SUBGRF_SetRx(sessionContext.rxTimeout << 6); 							// SetRx(timeout): SX126x timeout units are 15.625 µs (1/64 ms). Multiplying ms by 64 = << 6.
 80006bc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80006c0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80006c4:	685b      	ldr	r3, [r3, #4]
 80006c6:	019b      	lsls	r3, r3, #6
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 fd85 	bl	80011d8 <SUBGRF_SetRx>

  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006ce:	2025      	movs	r0, #37	@ 0x25
 80006d0:	f001 fcd1 	bl	8002076 <HAL_NVIC_EnableIRQ>
  messageReady = false;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000708 <main+0x12c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]

  while (1)
  {
    /* USER CODE END WHILE */

	currentEvent = NULL;
 80006da:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <main+0x144>)
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
	while(!currentEvent);
 80006e0:	bf00      	nop
 80006e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <main+0x144>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d0fb      	beq.n	80006e2 <main+0x106>
	currentEvent(&sessionContext);
 80006ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000720 <main+0x144>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	1d3a      	adds	r2, r7, #4
 80006f0:	4610      	mov	r0, r2
 80006f2:	4798      	blx	r3
	currentEvent = NULL;
 80006f4:	e7f1      	b.n	80006da <main+0xfe>
 80006f6:	bf00      	nop
 80006f8:	08006efc 	.word	0x08006efc
 80006fc:	20000188 	.word	0x20000188
 8000700:	20000388 	.word	0x20000388
 8000704:	200003b8 	.word	0x200003b8
 8000708:	2000038c 	.word	0x2000038c
 800070c:	20000288 	.word	0x20000288
 8000710:	08006f34 	.word	0x08006f34
 8000714:	20000000 	.word	0x20000000
 8000718:	20000100 	.word	0x20000100
 800071c:	08006f38 	.word	0x08006f38
 8000720:	20000390 	.word	0x20000390

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b09a      	sub	sp, #104	@ 0x68
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 0320 	add.w	r3, r7, #32
 800072e:	2248      	movs	r2, #72	@ 0x48
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f005 ff58 	bl	80065e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]
 8000746:	615a      	str	r2, [r3, #20]
 8000748:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800074a:	4b1e      	ldr	r3, [pc, #120]	@ (80007c4 <SystemClock_Config+0xa0>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000752:	4a1c      	ldr	r2, [pc, #112]	@ (80007c4 <SystemClock_Config+0xa0>)
 8000754:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000758:	6013      	str	r3, [r2, #0]
 800075a:	4b1a      	ldr	r3, [pc, #104]	@ (80007c4 <SystemClock_Config+0xa0>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000766:	2320      	movs	r3, #32
 8000768:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800076a:	2301      	movs	r3, #1
 800076c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800076e:	2300      	movs	r3, #0
 8000770:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000772:	23b0      	movs	r3, #176	@ 0xb0
 8000774:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000776:	2300      	movs	r3, #0
 8000778:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077a:	f107 0320 	add.w	r3, r7, #32
 800077e:	4618      	mov	r0, r3
 8000780:	f002 f9a8 	bl	8002ad4 <HAL_RCC_OscConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800078a:	f000 f949 	bl	8000a20 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800078e:	234f      	movs	r3, #79	@ 0x4f
 8000790:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	2102      	movs	r1, #2
 80007aa:	4618      	mov	r0, r3
 80007ac:	f002 fd14 	bl	80031d8 <HAL_RCC_ClockConfig>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007b6:	f000 f933 	bl	8000a20 <Error_Handler>
  }
}
 80007ba:	bf00      	nop
 80007bc:	3768      	adds	r7, #104	@ 0x68
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	58000400 	.word	0x58000400

080007c8 <UART_Transmit>:
 *  APB clocks = AHB = SYSCLK;
 *  flash latency 2.
 *  This is a low-power, simple config suitable for the WL.
 */

void UART_Transmit(const char* string){
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)string, strlen(string), HAL_MAX_DELAY);
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f7ff fcd5 	bl	8000180 <strlen>
 80007d6:	4603      	mov	r3, r0
 80007d8:	b29a      	uxth	r2, r3
 80007da:	f04f 33ff 	mov.w	r3, #4294967295
 80007de:	6879      	ldr	r1, [r7, #4]
 80007e0:	4803      	ldr	r0, [pc, #12]	@ (80007f0 <UART_Transmit+0x28>)
 80007e2:	f003 fe64 	bl	80044ae <HAL_UART_Transmit>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200003b8 	.word	0x200003b8

080007f4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	switch(input[0]){
 80007fc:	4b23      	ldr	r3, [pc, #140]	@ (800088c <HAL_UART_RxCpltCallback+0x98>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b08      	cmp	r3, #8
 8000802:	d015      	beq.n	8000830 <HAL_UART_RxCpltCallback+0x3c>
 8000804:	2b0d      	cmp	r3, #13
 8000806:	d125      	bne.n	8000854 <HAL_UART_RxCpltCallback+0x60>
		case 0xd:
			UART_Transmit("\r\n");
 8000808:	4821      	ldr	r0, [pc, #132]	@ (8000890 <HAL_UART_RxCpltCallback+0x9c>)
 800080a:	f7ff ffdd 	bl	80007c8 <UART_Transmit>
			sprintf((char*)output, "%s", (char*)buffer);
 800080e:	4a21      	ldr	r2, [pc, #132]	@ (8000894 <HAL_UART_RxCpltCallback+0xa0>)
 8000810:	4921      	ldr	r1, [pc, #132]	@ (8000898 <HAL_UART_RxCpltCallback+0xa4>)
 8000812:	4822      	ldr	r0, [pc, #136]	@ (800089c <HAL_UART_RxCpltCallback+0xa8>)
 8000814:	f005 fec6 	bl	80065a4 <siprintf>
			output[count] = '\0';
 8000818:	4b21      	ldr	r3, [pc, #132]	@ (80008a0 <HAL_UART_RxCpltCallback+0xac>)
 800081a:	881b      	ldrh	r3, [r3, #0]
 800081c:	461a      	mov	r2, r3
 800081e:	4b1f      	ldr	r3, [pc, #124]	@ (800089c <HAL_UART_RxCpltCallback+0xa8>)
 8000820:	2100      	movs	r1, #0
 8000822:	5499      	strb	r1, [r3, r2]
			messageReady = true;
 8000824:	4b1f      	ldr	r3, [pc, #124]	@ (80008a4 <HAL_UART_RxCpltCallback+0xb0>)
 8000826:	2201      	movs	r2, #1
 8000828:	701a      	strb	r2, [r3, #0]
			resetTerminal();
 800082a:	f000 f841 	bl	80008b0 <resetTerminal>
			break;
 800082e:	e029      	b.n	8000884 <HAL_UART_RxCpltCallback+0x90>

		case 0x8:
			if(count > (idLen + 2)){
 8000830:	4b1b      	ldr	r3, [pc, #108]	@ (80008a0 <HAL_UART_RxCpltCallback+0xac>)
 8000832:	881b      	ldrh	r3, [r3, #0]
 8000834:	461a      	mov	r2, r3
 8000836:	4b1c      	ldr	r3, [pc, #112]	@ (80008a8 <HAL_UART_RxCpltCallback+0xb4>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	3302      	adds	r3, #2
 800083c:	429a      	cmp	r2, r3
 800083e:	dd20      	ble.n	8000882 <HAL_UART_RxCpltCallback+0x8e>
				count--;
 8000840:	4b17      	ldr	r3, [pc, #92]	@ (80008a0 <HAL_UART_RxCpltCallback+0xac>)
 8000842:	881b      	ldrh	r3, [r3, #0]
 8000844:	3b01      	subs	r3, #1
 8000846:	b29a      	uxth	r2, r3
 8000848:	4b15      	ldr	r3, [pc, #84]	@ (80008a0 <HAL_UART_RxCpltCallback+0xac>)
 800084a:	801a      	strh	r2, [r3, #0]
				UART_Transmit("\b \b");
 800084c:	4817      	ldr	r0, [pc, #92]	@ (80008ac <HAL_UART_RxCpltCallback+0xb8>)
 800084e:	f7ff ffbb 	bl	80007c8 <UART_Transmit>
			}
			break;
 8000852:	e016      	b.n	8000882 <HAL_UART_RxCpltCallback+0x8e>

		default:
			if(count < MAX_BUFFER_SIZE){
 8000854:	4b12      	ldr	r3, [pc, #72]	@ (80008a0 <HAL_UART_RxCpltCallback+0xac>)
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	2bfe      	cmp	r3, #254	@ 0xfe
 800085a:	d813      	bhi.n	8000884 <HAL_UART_RxCpltCallback+0x90>
				buffer[count++] = input[0];
 800085c:	4b10      	ldr	r3, [pc, #64]	@ (80008a0 <HAL_UART_RxCpltCallback+0xac>)
 800085e:	881b      	ldrh	r3, [r3, #0]
 8000860:	1c5a      	adds	r2, r3, #1
 8000862:	b291      	uxth	r1, r2
 8000864:	4a0e      	ldr	r2, [pc, #56]	@ (80008a0 <HAL_UART_RxCpltCallback+0xac>)
 8000866:	8011      	strh	r1, [r2, #0]
 8000868:	461a      	mov	r2, r3
 800086a:	4b08      	ldr	r3, [pc, #32]	@ (800088c <HAL_UART_RxCpltCallback+0x98>)
 800086c:	7819      	ldrb	r1, [r3, #0]
 800086e:	4b09      	ldr	r3, [pc, #36]	@ (8000894 <HAL_UART_RxCpltCallback+0xa0>)
 8000870:	5499      	strb	r1, [r3, r2]
				HAL_UART_Transmit(huart, input, 1, HAL_MAX_DELAY);
 8000872:	f04f 33ff 	mov.w	r3, #4294967295
 8000876:	2201      	movs	r2, #1
 8000878:	4904      	ldr	r1, [pc, #16]	@ (800088c <HAL_UART_RxCpltCallback+0x98>)
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f003 fe17 	bl	80044ae <HAL_UART_Transmit>
			}
	}
}
 8000880:	e000      	b.n	8000884 <HAL_UART_RxCpltCallback+0x90>
			break;
 8000882:	bf00      	nop
}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000388 	.word	0x20000388
 8000890:	08006f40 	.word	0x08006f40
 8000894:	20000188 	.word	0x20000188
 8000898:	08006f34 	.word	0x08006f34
 800089c:	20000288 	.word	0x20000288
 80008a0:	2000038a 	.word	0x2000038a
 80008a4:	2000038c 	.word	0x2000038c
 80008a8:	20000100 	.word	0x20000100
 80008ac:	08006f44 	.word	0x08006f44

080008b0 <resetTerminal>:

void resetTerminal(){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	UART_Transmit(id);
 80008b4:	4807      	ldr	r0, [pc, #28]	@ (80008d4 <resetTerminal+0x24>)
 80008b6:	f7ff ff87 	bl	80007c8 <UART_Transmit>
	UART_Transmit(": ");
 80008ba:	4807      	ldr	r0, [pc, #28]	@ (80008d8 <resetTerminal+0x28>)
 80008bc:	f7ff ff84 	bl	80007c8 <UART_Transmit>
	count = idLen + 2;
 80008c0:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <resetTerminal+0x2c>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	b29b      	uxth	r3, r3
 80008c6:	3302      	adds	r3, #2
 80008c8:	b29a      	uxth	r2, r3
 80008ca:	4b05      	ldr	r3, [pc, #20]	@ (80008e0 <resetTerminal+0x30>)
 80008cc:	801a      	strh	r2, [r3, #0]
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000000 	.word	0x20000000
 80008d8:	08006f48 	.word	0x08006f48
 80008dc:	20000100 	.word	0x20000100
 80008e0:	2000038a 	.word	0x2000038a

080008e4 <Radio_DIO_IRq_Callback_Handler>:

void Radio_DIO_IRq_Callback_Handler(RadioIrqMasks_t radioIRq){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	80fb      	strh	r3, [r7, #6]
	switch(radioIRq){
 80008ee:	88fb      	ldrh	r3, [r7, #6]
 80008f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80008f4:	d013      	beq.n	800091e <Radio_DIO_IRq_Callback_Handler+0x3a>
 80008f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80008fa:	dc18      	bgt.n	800092e <Radio_DIO_IRq_Callback_Handler+0x4a>
 80008fc:	2b40      	cmp	r3, #64	@ 0x40
 80008fe:	d012      	beq.n	8000926 <Radio_DIO_IRq_Callback_Handler+0x42>
 8000900:	2b40      	cmp	r3, #64	@ 0x40
 8000902:	dc14      	bgt.n	800092e <Radio_DIO_IRq_Callback_Handler+0x4a>
 8000904:	2b01      	cmp	r3, #1
 8000906:	d002      	beq.n	800090e <Radio_DIO_IRq_Callback_Handler+0x2a>
 8000908:	2b02      	cmp	r3, #2
 800090a:	d004      	beq.n	8000916 <Radio_DIO_IRq_Callback_Handler+0x32>
			break;

		case IRQ_CRC_ERROR: // Rx Error
			UART_Transmit("\r\nRX CRC ERROR\r\n");
			break;
		default: break;
 800090c:	e00f      	b.n	800092e <Radio_DIO_IRq_Callback_Handler+0x4a>
			UART_Transmit("\r\nTX DONE\r\n");
 800090e:	480b      	ldr	r0, [pc, #44]	@ (800093c <Radio_DIO_IRq_Callback_Handler+0x58>)
 8000910:	f7ff ff5a 	bl	80007c8 <UART_Transmit>
			break;
 8000914:	e00c      	b.n	8000930 <Radio_DIO_IRq_Callback_Handler+0x4c>
			UART_Transmit("\r\nRX DONE\r\n");
 8000916:	480a      	ldr	r0, [pc, #40]	@ (8000940 <Radio_DIO_IRq_Callback_Handler+0x5c>)
 8000918:	f7ff ff56 	bl	80007c8 <UART_Transmit>
			break;
 800091c:	e008      	b.n	8000930 <Radio_DIO_IRq_Callback_Handler+0x4c>
			UART_Transmit("\r\nTIMEOUT\r\n");
 800091e:	4809      	ldr	r0, [pc, #36]	@ (8000944 <Radio_DIO_IRq_Callback_Handler+0x60>)
 8000920:	f7ff ff52 	bl	80007c8 <UART_Transmit>
			break;
 8000924:	e004      	b.n	8000930 <Radio_DIO_IRq_Callback_Handler+0x4c>
			UART_Transmit("\r\nRX CRC ERROR\r\n");
 8000926:	4808      	ldr	r0, [pc, #32]	@ (8000948 <Radio_DIO_IRq_Callback_Handler+0x64>)
 8000928:	f7ff ff4e 	bl	80007c8 <UART_Transmit>
			break;
 800092c:	e000      	b.n	8000930 <Radio_DIO_IRq_Callback_Handler+0x4c>
		default: break;
 800092e:	bf00      	nop
	}

	resetTerminal();
 8000930:	f7ff ffbe 	bl	80008b0 <resetTerminal>
}
 8000934:	bf00      	nop
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	08006f4c 	.word	0x08006f4c
 8000940:	08006f58 	.word	0x08006f58
 8000944:	08006f64 	.word	0x08006f64
 8000948:	08006f70 	.word	0x08006f70

0800094c <Radio_Init>:

/** Initialize the Sub-GHz radio and dependent hardware.
  */
void Radio_Init(){
 800094c:	b580      	push	{r7, lr}
 800094e:	b088      	sub	sp, #32
 8000950:	af00      	add	r7, sp, #0
	// Initialize the hardware (SPI bus, TCXO control, RF switch) or the SUBGHZ (SX126x) and registers the IRQ callback.
	SUBGRF_Init(Radio_DIO_IRq_Callback_Handler);
 8000952:	4830      	ldr	r0, [pc, #192]	@ (8000a14 <Radio_Init+0xc8>)
 8000954:	f000 fb9c 	bl	8001090 <SUBGRF_Init>

	// Use DCDC converter if `DCDC_ENABLE` is defined in radio_conf.h
	// "By default, the SMPS clock detection is disabled and must be enabled before enabling the SMPS." (6.1 in RM0453)
	SUBGRF_WriteRegister(SUBGHZ_SMPSC0R, (SUBGRF_ReadRegister(SUBGHZ_SMPSC0R) | SMPS_CLK_DET_ENABLE));
 8000958:	f640 1016 	movw	r0, #2326	@ 0x916
 800095c:	f001 f866 	bl	8001a2c <SUBGRF_ReadRegister>
 8000960:	4603      	mov	r3, r0
 8000962:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000966:	b2db      	uxtb	r3, r3
 8000968:	4619      	mov	r1, r3
 800096a:	f640 1016 	movw	r0, #2326	@ 0x916
 800096e:	f001 f849 	bl	8001a04 <SUBGRF_WriteRegister>
	SUBGRF_SetRegulatorMode(); // use DCDC if configured in radio_conf.h
 8000972:	f000 fc60 	bl	8001236 <SUBGRF_SetRegulatorMode>

	// Use the whole 256-byte buffer for both TX and RX (starting at 0)
	SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 8000976:	2100      	movs	r1, #0
 8000978:	2000      	movs	r0, #0
 800097a:	f001 f82b 	bl	80019d4 <SUBGRF_SetBufferBaseAddress>

	SUBGRF_SetRfFrequency(RF_FREQ);
 800097e:	4826      	ldr	r0, [pc, #152]	@ (8000a18 <Radio_Init+0xcc>)
 8000980:	f000 fd84 	bl	800148c <SUBGRF_SetRfFrequency>
	SUBGRF_SetRfTxPower(TX_POWER);
 8000984:	200e      	movs	r0, #14
 8000986:	f001 f8d1 	bl	8001b2c <SUBGRF_SetRfTxPower>
	SUBGRF_SetStopRxTimerOnPreambleDetect(false);
 800098a:	2000      	movs	r0, #0
 800098c:	f000 fc44 	bl	8001218 <SUBGRF_SetStopRxTimerOnPreambleDetect>

	SUBGRF_SetPacketType(PACKET_TYPE_LORA);
 8000990:	2001      	movs	r0, #1
 8000992:	f000 fdc1 	bl	8001518 <SUBGRF_SetPacketType>

	// Sets LoRa private syncword (not the public 0x34). Ensures you only talk to your nodes (not public network).
	SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8000996:	2114      	movs	r1, #20
 8000998:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 800099c:	f001 f832 	bl	8001a04 <SUBGRF_WriteRegister>
	SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80009a0:	2124      	movs	r1, #36	@ 0x24
 80009a2:	f240 7041 	movw	r0, #1857	@ 0x741
 80009a6:	f001 f82d 	bl	8001a04 <SUBGRF_WriteRegister>

	// Applies SF/BW/CR. Low data rate optimize off (OK for SF7/BW125).
	ModulationParams_t modulationParams;
	modulationParams.PacketType = PACKET_TYPE_LORA;
 80009aa:	2301      	movs	r3, #1
 80009ac:	713b      	strb	r3, [r7, #4]
	modulationParams.Params.LoRa.Bandwidth = LORA_BANDWIDTH;
 80009ae:	2304      	movs	r3, #4
 80009b0:	777b      	strb	r3, [r7, #29]
	modulationParams.Params.LoRa.CodingRate = (RadioLoRaCodingRates_t)LORA_CODING_RATE;
 80009b2:	2301      	movs	r3, #1
 80009b4:	77bb      	strb	r3, [r7, #30]
	modulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80009b6:	2300      	movs	r3, #0
 80009b8:	77fb      	strb	r3, [r7, #31]
	modulationParams.Params.LoRa.SpreadingFactor = (RadioLoRaSpreadingFactors_t)LORA_SPREADING_FACTOR;
 80009ba:	2307      	movs	r3, #7
 80009bc:	773b      	strb	r3, [r7, #28]
	SUBGRF_SetModulationParams(&modulationParams);
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	4618      	mov	r0, r3
 80009c2:	f000 fe9d 	bl	8001700 <SUBGRF_SetModulationParams>

	// CRC on, variable length, normal IQ, long RX FIFO length.
	packetParams.PacketType = PACKET_TYPE_LORA;
 80009c6:	4b15      	ldr	r3, [pc, #84]	@ (8000a1c <Radio_Init+0xd0>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	701a      	strb	r2, [r3, #0]
	packetParams.Params.LoRa.CrcMode = LORA_CRC_ON;
 80009cc:	4b13      	ldr	r3, [pc, #76]	@ (8000a1c <Radio_Init+0xd0>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	749a      	strb	r2, [r3, #18]
	packetParams.Params.LoRa.HeaderType = LORA_PACKET_VARIABLE_LENGTH;
 80009d2:	4b12      	ldr	r3, [pc, #72]	@ (8000a1c <Radio_Init+0xd0>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	741a      	strb	r2, [r3, #16]
	packetParams.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 80009d8:	4b10      	ldr	r3, [pc, #64]	@ (8000a1c <Radio_Init+0xd0>)
 80009da:	2200      	movs	r2, #0
 80009dc:	74da      	strb	r2, [r3, #19]
	packetParams.Params.LoRa.PayloadLength = 0xFF;
 80009de:	4b0f      	ldr	r3, [pc, #60]	@ (8000a1c <Radio_Init+0xd0>)
 80009e0:	22ff      	movs	r2, #255	@ 0xff
 80009e2:	745a      	strb	r2, [r3, #17]
	packetParams.Params.LoRa.PreambleLength = LORA_PREAMBLE_LENGTH;
 80009e4:	4b0d      	ldr	r3, [pc, #52]	@ (8000a1c <Radio_Init+0xd0>)
 80009e6:	2208      	movs	r2, #8
 80009e8:	81da      	strh	r2, [r3, #14]
	SUBGRF_SetPacketParams(&packetParams);
 80009ea:	480c      	ldr	r0, [pc, #48]	@ (8000a1c <Radio_Init+0xd0>)
 80009ec:	f000 ff56 	bl	800189c <SUBGRF_SetPacketParams>

	// WORKAROUND - Optimizing the Inverted IQ Operation, see DS_SX1261-2_V1.2 datasheet chapter 15.4
	// RegIqPolaritySetup @address 0x0736
	// SX126x errata: improves IQ handling (safe even with normal IQ).
	SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 80009f0:	f240 7036 	movw	r0, #1846	@ 0x736
 80009f4:	f001 f81a 	bl	8001a2c <SUBGRF_ReadRegister>
 80009f8:	4603      	mov	r3, r0
 80009fa:	f043 0304 	orr.w	r3, r3, #4
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	4619      	mov	r1, r3
 8000a02:	f240 7036 	movw	r0, #1846	@ 0x736
 8000a06:	f000 fffd 	bl	8001a04 <SUBGRF_WriteRegister>
}
 8000a0a:	bf00      	nop
 8000a0c:	3720      	adds	r7, #32
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	080008e5 	.word	0x080008e5
 8000a18:	33bca100 	.word	0x33bca100
 8000a1c:	20000394 	.word	0x20000394

08000a20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a24:	b672      	cpsid	i
}
 8000a26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <Error_Handler+0x8>

08000a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr

08000a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <NMI_Handler+0x4>

08000a40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <HardFault_Handler+0x4>

08000a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <MemManage_Handler+0x4>

08000a50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <BusFault_Handler+0x4>

08000a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <UsageFault_Handler+0x4>

08000a60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr

08000a6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bc80      	pop	{r7}
 8000a76:	4770      	bx	lr

08000a78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr

08000a84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a88:	f001 f9a0 	bl	8001dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a94:	4802      	ldr	r0, [pc, #8]	@ (8000aa0 <USART2_IRQHandler+0x10>)
 8000a96:	f003 fddd 	bl	8004654 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	200003b8 	.word	0x200003b8

08000aa4 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000aa8:	4802      	ldr	r0, [pc, #8]	@ (8000ab4 <SUBGHZ_Radio_IRQHandler+0x10>)
 8000aaa:	f003 fae0 	bl	800406e <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	200003a8 	.word	0x200003a8

08000ab8 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000ac0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ac4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000ac6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000ad0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ad4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4013      	ands	r3, r2
 8000ada:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000adc:	68fb      	ldr	r3, [r7, #12]
}
 8000ade:	bf00      	nop
 8000ae0:	3714      	adds	r7, #20
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr

08000ae8 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8000aec:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <MX_SUBGHZ_Init+0x20>)
 8000aee:	2208      	movs	r2, #8
 8000af0:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8000af2:	4805      	ldr	r0, [pc, #20]	@ (8000b08 <MX_SUBGHZ_Init+0x20>)
 8000af4:	f003 f8e4 	bl	8003cc0 <HAL_SUBGHZ_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8000afe:	f7ff ff8f 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	200003a8 	.word	0x200003a8

08000b0c <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000b14:	2001      	movs	r0, #1
 8000b16:	f7ff ffcf 	bl	8000ab8 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	2032      	movs	r0, #50	@ 0x32
 8000b20:	f001 fa8f 	bl	8002042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000b24:	2032      	movs	r0, #50	@ 0x32
 8000b26:	f001 faa6 	bl	8002076 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b3c:	4a14      	ldr	r2, [pc, #80]	@ (8000b90 <_sbrk+0x5c>)
 8000b3e:	4b15      	ldr	r3, [pc, #84]	@ (8000b94 <_sbrk+0x60>)
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b48:	4b13      	ldr	r3, [pc, #76]	@ (8000b98 <_sbrk+0x64>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d102      	bne.n	8000b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b50:	4b11      	ldr	r3, [pc, #68]	@ (8000b98 <_sbrk+0x64>)
 8000b52:	4a12      	ldr	r2, [pc, #72]	@ (8000b9c <_sbrk+0x68>)
 8000b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b56:	4b10      	ldr	r3, [pc, #64]	@ (8000b98 <_sbrk+0x64>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d207      	bcs.n	8000b74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b64:	f005 fd48 	bl	80065f8 <__errno>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b72:	e009      	b.n	8000b88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b74:	4b08      	ldr	r3, [pc, #32]	@ (8000b98 <_sbrk+0x64>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b7a:	4b07      	ldr	r3, [pc, #28]	@ (8000b98 <_sbrk+0x64>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4413      	add	r3, r2
 8000b82:	4a05      	ldr	r2, [pc, #20]	@ (8000b98 <_sbrk+0x64>)
 8000b84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b86:	68fb      	ldr	r3, [r7, #12]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3718      	adds	r7, #24
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20010000 	.word	0x20010000
 8000b94:	00000400 	.word	0x00000400
 8000b98:	200003b4 	.word	0x200003b4
 8000b9c:	200005a0 	.word	0x200005a0

08000ba0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr

08000bac <LL_AHB2_GRP1_EnableClock>:
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000bb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bb8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000bba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000bc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bc8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4013      	ands	r3, r2
 8000bce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
}
 8000bd2:	bf00      	nop
 8000bd4:	3714      	adds	r7, #20
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr

08000bdc <LL_APB1_GRP1_EnableClock>:
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000be4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000be8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000bea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000bf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bf8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c00:	68fb      	ldr	r3, [r7, #12]
}
 8000c02:	bf00      	nop
 8000c04:	3714      	adds	r7, #20
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr

08000c0c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c10:	4b22      	ldr	r3, [pc, #136]	@ (8000c9c <MX_USART2_UART_Init+0x90>)
 8000c12:	4a23      	ldr	r2, [pc, #140]	@ (8000ca0 <MX_USART2_UART_Init+0x94>)
 8000c14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c16:	4b21      	ldr	r3, [pc, #132]	@ (8000c9c <MX_USART2_UART_Init+0x90>)
 8000c18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000c9c <MX_USART2_UART_Init+0x90>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c24:	4b1d      	ldr	r3, [pc, #116]	@ (8000c9c <MX_USART2_UART_Init+0x90>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c9c <MX_USART2_UART_Init+0x90>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c30:	4b1a      	ldr	r3, [pc, #104]	@ (8000c9c <MX_USART2_UART_Init+0x90>)
 8000c32:	220c      	movs	r2, #12
 8000c34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c36:	4b19      	ldr	r3, [pc, #100]	@ (8000c9c <MX_USART2_UART_Init+0x90>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c3c:	4b17      	ldr	r3, [pc, #92]	@ (8000c9c <MX_USART2_UART_Init+0x90>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c42:	4b16      	ldr	r3, [pc, #88]	@ (8000c9c <MX_USART2_UART_Init+0x90>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c48:	4b14      	ldr	r3, [pc, #80]	@ (8000c9c <MX_USART2_UART_Init+0x90>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c4e:	4b13      	ldr	r3, [pc, #76]	@ (8000c9c <MX_USART2_UART_Init+0x90>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c54:	4811      	ldr	r0, [pc, #68]	@ (8000c9c <MX_USART2_UART_Init+0x90>)
 8000c56:	f003 fbda 	bl	800440e <HAL_UART_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000c60:	f7ff fede 	bl	8000a20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c64:	2100      	movs	r1, #0
 8000c66:	480d      	ldr	r0, [pc, #52]	@ (8000c9c <MX_USART2_UART_Init+0x90>)
 8000c68:	f005 fb9d 	bl	80063a6 <HAL_UARTEx_SetTxFifoThreshold>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000c72:	f7ff fed5 	bl	8000a20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c76:	2100      	movs	r1, #0
 8000c78:	4808      	ldr	r0, [pc, #32]	@ (8000c9c <MX_USART2_UART_Init+0x90>)
 8000c7a:	f005 fbd2 	bl	8006422 <HAL_UARTEx_SetRxFifoThreshold>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c84:	f7ff fecc 	bl	8000a20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c88:	4804      	ldr	r0, [pc, #16]	@ (8000c9c <MX_USART2_UART_Init+0x90>)
 8000c8a:	f005 fb54 	bl	8006336 <HAL_UARTEx_DisableFifoMode>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c94:	f7ff fec4 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	200003b8 	.word	0x200003b8
 8000ca0:	40004400 	.word	0x40004400

08000ca4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b096      	sub	sp, #88	@ 0x58
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	2238      	movs	r2, #56	@ 0x38
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f005 fc8f 	bl	80065e8 <memset>
  if(uartHandle->Instance==USART2)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a1b      	ldr	r2, [pc, #108]	@ (8000d3c <HAL_UART_MspInit+0x98>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d12e      	bne.n	8000d32 <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cd8:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8000cdc:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cde:	f107 030c 	add.w	r3, r7, #12
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f002 fe38 	bl	8003958 <HAL_RCCEx_PeriphCLKConfig>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cee:	f7ff fe97 	bl	8000a20 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cf2:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000cf6:	f7ff ff71 	bl	8000bdc <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	f7ff ff56 	bl	8000bac <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000d00:	230c      	movs	r3, #12
 8000d02:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d04:	2302      	movs	r3, #2
 8000d06:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d10:	2307      	movs	r3, #7
 8000d12:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d14:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000d18:	4619      	mov	r1, r3
 8000d1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d1e:	f001 fa8f 	bl	8002240 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2100      	movs	r1, #0
 8000d26:	2025      	movs	r0, #37	@ 0x25
 8000d28:	f001 f98b 	bl	8002042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d2c:	2025      	movs	r0, #37	@ 0x25
 8000d2e:	f001 f9a2 	bl	8002076 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d32:	bf00      	nop
 8000d34:	3758      	adds	r7, #88	@ 0x58
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40004400 	.word	0x40004400

08000d40 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d40:	480d      	ldr	r0, [pc, #52]	@ (8000d78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d42:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d44:	f7ff ff2c 	bl	8000ba0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d48:	480c      	ldr	r0, [pc, #48]	@ (8000d7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d4a:	490d      	ldr	r1, [pc, #52]	@ (8000d80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d84 <LoopForever+0xe>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d50:	e002      	b.n	8000d58 <LoopCopyDataInit>

08000d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d56:	3304      	adds	r3, #4

08000d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d5c:	d3f9      	bcc.n	8000d52 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d60:	4c0a      	ldr	r4, [pc, #40]	@ (8000d8c <LoopForever+0x16>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d64:	e001      	b.n	8000d6a <LoopFillZerobss>

08000d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d68:	3204      	adds	r2, #4

08000d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d6c:	d3fb      	bcc.n	8000d66 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d6e:	f005 fc49 	bl	8006604 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d72:	f7ff fc33 	bl	80005dc <main>

08000d76 <LoopForever>:

LoopForever:
    b LoopForever
 8000d76:	e7fe      	b.n	8000d76 <LoopForever>
  ldr   r0, =_estack
 8000d78:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d80:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8000d84:	080070b4 	.word	0x080070b4
  ldr r2, =_sbss
 8000d88:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 8000d8c:	200005a0 	.word	0x200005a0

08000d90 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d90:	e7fe      	b.n	8000d90 <ADC_IRQHandler>

08000d92 <LL_AHB2_GRP1_EnableClock>:
{
 8000d92:	b480      	push	{r7}
 8000d94:	b085      	sub	sp, #20
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000da0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000daa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000dae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4013      	ands	r3, r2
 8000db4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000db6:	68fb      	ldr	r3, [r7, #12]
}
 8000db8:	bf00      	nop
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bc80      	pop	{r7}
 8000dc0:	4770      	bx	lr
	...

08000dc4 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b088      	sub	sp, #32
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8000dce:	f107 030c 	add.w	r3, r7, #12
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
 8000dd8:	609a      	str	r2, [r3, #8]
 8000dda:	60da      	str	r2, [r3, #12]
 8000ddc:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000dde:	2002      	movs	r0, #2
 8000de0:	f7ff ffd7 	bl	8000d92 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	4a12      	ldr	r2, [pc, #72]	@ (8000e30 <BSP_LED_Init+0x6c>)
 8000de8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dec:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000dee:	2301      	movs	r3, #1
 8000df0:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000df6:	2302      	movs	r3, #2
 8000df8:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	4a0d      	ldr	r2, [pc, #52]	@ (8000e34 <BSP_LED_Init+0x70>)
 8000dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e02:	f107 020c 	add.w	r2, r7, #12
 8000e06:	4611      	mov	r1, r2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f001 fa19 	bl	8002240 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	4a08      	ldr	r2, [pc, #32]	@ (8000e34 <BSP_LED_Init+0x70>)
 8000e12:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	4a05      	ldr	r2, [pc, #20]	@ (8000e30 <BSP_LED_Init+0x6c>)
 8000e1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	4619      	mov	r1, r3
 8000e22:	f001 fb6d 	bl	8002500 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000e26:	2300      	movs	r3, #0
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3720      	adds	r7, #32
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	08007040 	.word	0x08007040
 8000e34:	20000108 	.word	0x20000108

08000e38 <BSP_LED_On>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	4a07      	ldr	r2, [pc, #28]	@ (8000e64 <BSP_LED_On+0x2c>)
 8000e46:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	4a06      	ldr	r2, [pc, #24]	@ (8000e68 <BSP_LED_On+0x30>)
 8000e4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e52:	2201      	movs	r2, #1
 8000e54:	4619      	mov	r1, r3
 8000e56:	f001 fb53 	bl	8002500 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000e5a:	2300      	movs	r3, #0
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000108 	.word	0x20000108
 8000e68:	08007040 	.word	0x08007040

08000e6c <LL_AHB2_GRP1_EnableClock>:
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e78:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e88:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e90:	68fb      	ldr	r3, [r7, #12]
}
 8000e92:	bf00      	nop
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr

08000e9c <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 8000eb0:	2004      	movs	r0, #4
 8000eb2:	f7ff ffdb 	bl	8000e6c <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8000eb6:	2310      	movs	r3, #16
 8000eb8:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4812      	ldr	r0, [pc, #72]	@ (8000f14 <BSP_RADIO_Init+0x78>)
 8000ecc:	f001 f9b8 	bl	8002240 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8000ed0:	2320      	movs	r3, #32
 8000ed2:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	480e      	ldr	r0, [pc, #56]	@ (8000f14 <BSP_RADIO_Init+0x78>)
 8000eda:	f001 f9b1 	bl	8002240 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8000ede:	2308      	movs	r3, #8
 8000ee0:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	480b      	ldr	r0, [pc, #44]	@ (8000f14 <BSP_RADIO_Init+0x78>)
 8000ee8:	f001 f9aa 	bl	8002240 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8000eec:	2200      	movs	r2, #0
 8000eee:	2120      	movs	r1, #32
 8000ef0:	4808      	ldr	r0, [pc, #32]	@ (8000f14 <BSP_RADIO_Init+0x78>)
 8000ef2:	f001 fb05 	bl	8002500 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2110      	movs	r1, #16
 8000efa:	4806      	ldr	r0, [pc, #24]	@ (8000f14 <BSP_RADIO_Init+0x78>)
 8000efc:	f001 fb00 	bl	8002500 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8000f00:	2200      	movs	r2, #0
 8000f02:	2108      	movs	r1, #8
 8000f04:	4803      	ldr	r0, [pc, #12]	@ (8000f14 <BSP_RADIO_Init+0x78>)
 8000f06:	f001 fafb 	bl	8002500 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000f0a:	2300      	movs	r3, #0
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3718      	adds	r7, #24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	48000800 	.word	0x48000800

08000f18 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	2b03      	cmp	r3, #3
 8000f26:	d84b      	bhi.n	8000fc0 <BSP_RADIO_ConfigRFSwitch+0xa8>
 8000f28:	a201      	add	r2, pc, #4	@ (adr r2, 8000f30 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8000f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f2e:	bf00      	nop
 8000f30:	08000f41 	.word	0x08000f41
 8000f34:	08000f61 	.word	0x08000f61
 8000f38:	08000f81 	.word	0x08000f81
 8000f3c:	08000fa1 	.word	0x08000fa1
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8000f40:	2200      	movs	r2, #0
 8000f42:	2108      	movs	r1, #8
 8000f44:	4821      	ldr	r0, [pc, #132]	@ (8000fcc <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000f46:	f001 fadb 	bl	8002500 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2110      	movs	r1, #16
 8000f4e:	481f      	ldr	r0, [pc, #124]	@ (8000fcc <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000f50:	f001 fad6 	bl	8002500 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8000f54:	2200      	movs	r2, #0
 8000f56:	2120      	movs	r1, #32
 8000f58:	481c      	ldr	r0, [pc, #112]	@ (8000fcc <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000f5a:	f001 fad1 	bl	8002500 <HAL_GPIO_WritePin>
      break;      
 8000f5e:	e030      	b.n	8000fc2 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8000f60:	2201      	movs	r2, #1
 8000f62:	2108      	movs	r1, #8
 8000f64:	4819      	ldr	r0, [pc, #100]	@ (8000fcc <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000f66:	f001 facb 	bl	8002500 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	2110      	movs	r1, #16
 8000f6e:	4817      	ldr	r0, [pc, #92]	@ (8000fcc <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000f70:	f001 fac6 	bl	8002500 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8000f74:	2200      	movs	r2, #0
 8000f76:	2120      	movs	r1, #32
 8000f78:	4814      	ldr	r0, [pc, #80]	@ (8000fcc <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000f7a:	f001 fac1 	bl	8002500 <HAL_GPIO_WritePin>
      break;
 8000f7e:	e020      	b.n	8000fc2 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8000f80:	2201      	movs	r2, #1
 8000f82:	2108      	movs	r1, #8
 8000f84:	4811      	ldr	r0, [pc, #68]	@ (8000fcc <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000f86:	f001 fabb 	bl	8002500 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	2110      	movs	r1, #16
 8000f8e:	480f      	ldr	r0, [pc, #60]	@ (8000fcc <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000f90:	f001 fab6 	bl	8002500 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8000f94:	2201      	movs	r2, #1
 8000f96:	2120      	movs	r1, #32
 8000f98:	480c      	ldr	r0, [pc, #48]	@ (8000fcc <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000f9a:	f001 fab1 	bl	8002500 <HAL_GPIO_WritePin>
      break;
 8000f9e:	e010      	b.n	8000fc2 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	2108      	movs	r1, #8
 8000fa4:	4809      	ldr	r0, [pc, #36]	@ (8000fcc <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000fa6:	f001 faab 	bl	8002500 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8000faa:	2200      	movs	r2, #0
 8000fac:	2110      	movs	r1, #16
 8000fae:	4807      	ldr	r0, [pc, #28]	@ (8000fcc <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000fb0:	f001 faa6 	bl	8002500 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	2120      	movs	r1, #32
 8000fb8:	4804      	ldr	r0, [pc, #16]	@ (8000fcc <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8000fba:	f001 faa1 	bl	8002500 <HAL_GPIO_WritePin>
      break;
 8000fbe:	e000      	b.n	8000fc2 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    default:
      break;    
 8000fc0:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8000fc2:	2300      	movs	r3, #0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	48000800 	.word	0x48000800

08000fd0 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr

08000fde <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8000fe2:	2301      	movs	r3, #1
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr

08000fec <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8000ff0:	2301      	movs	r3, #1
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bc80      	pop	{r7}
 8000ff8:	4770      	bx	lr

08000ffa <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b085      	sub	sp, #20
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	4603      	mov	r3, r0
 8001002:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d102      	bne.n	8001010 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 800100a:	230f      	movs	r3, #15
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	e001      	b.n	8001014 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8001010:	2316      	movs	r3, #22
 8001012:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001014:	68fb      	ldr	r3, [r7, #12]
}
 8001016:	4618      	mov	r0, r3
 8001018:	3714      	adds	r7, #20
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr

08001020 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8001024:	f7ff ff3a 	bl	8000e9c <BSP_RADIO_Init>
 8001028:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800102a:	4618      	mov	r0, r3
 800102c:	bd80      	pop	{r7, pc}

0800102e <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	4603      	mov	r3, r0
 8001036:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff ff6c 	bl	8000f18 <BSP_RADIO_ConfigRFSwitch>
 8001040:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800104e:	f7ff ffbf 	bl	8000fd0 <BSP_RADIO_GetTxConfig>
 8001052:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8001054:	4618      	mov	r0, r3
 8001056:	bd80      	pop	{r7, pc}

08001058 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800105c:	f7ff ffbf 	bl	8000fde <BSP_RADIO_IsTCXO>
 8001060:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001062:	4618      	mov	r0, r3
 8001064:	bd80      	pop	{r7, pc}

08001066 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800106a:	f7ff ffbf 	bl	8000fec <BSP_RADIO_IsDCDC>
 800106e:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001070:	4618      	mov	r0, r3
 8001072:	bd80      	pop	{r7, pc}

08001074 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ffba 	bl	8000ffa <BSP_RADIO_GetRFOMaxPowerConfig>
 8001086:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d002      	beq.n	80010a4 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 800109e:	4a1d      	ldr	r2, [pc, #116]	@ (8001114 <SUBGRF_Init+0x84>)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 80010a4:	f7ff fd20 	bl	8000ae8 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80010a8:	2002      	movs	r0, #2
 80010aa:	f000 fe13 	bl	8001cd4 <Radio_SMPS_Set>

    ImageCalibrated = false;
 80010ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001118 <SUBGRF_Init+0x88>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 80010b4:	2000      	movs	r0, #0
 80010b6:	f000 f873 	bl	80011a0 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 80010ba:	f7ff ffcd 	bl	8001058 <RBI_IsTCXO>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d10e      	bne.n	80010e2 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 80010c4:	2140      	movs	r1, #64	@ 0x40
 80010c6:	2001      	movs	r0, #1
 80010c8:	f000 f9be 	bl	8001448 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 80010cc:	2100      	movs	r1, #0
 80010ce:	f640 1011 	movw	r0, #2321	@ 0x911
 80010d2:	f000 fc97 	bl	8001a04 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 80010d6:	237f      	movs	r3, #127	@ 0x7f
 80010d8:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 80010da:	7b38      	ldrb	r0, [r7, #12]
 80010dc:	f000 f8c2 	bl	8001264 <SUBGRF_Calibrate>
 80010e0:	e009      	b.n	80010f6 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80010e2:	2120      	movs	r1, #32
 80010e4:	f640 1011 	movw	r0, #2321	@ 0x911
 80010e8:	f000 fc8c 	bl	8001a04 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80010ec:	2120      	movs	r1, #32
 80010ee:	f640 1012 	movw	r0, #2322	@ 0x912
 80010f2:	f000 fc87 	bl	8001a04 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80010f6:	210e      	movs	r1, #14
 80010f8:	f640 101f 	movw	r0, #2335	@ 0x91f
 80010fc:	f000 fc82 	bl	8001a04 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8001100:	f7ff ff8e 	bl	8001020 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8001104:	4b05      	ldr	r3, [pc, #20]	@ (800111c <SUBGRF_Init+0x8c>)
 8001106:	2201      	movs	r2, #1
 8001108:	701a      	strb	r2, [r3, #0]
}
 800110a:	bf00      	nop
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000450 	.word	0x20000450
 8001118:	2000044f 	.word	0x2000044f
 800111c:	2000044c 	.word	0x2000044c

08001120 <SUBGRF_SetCrcSeed>:
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
    return 0;
}

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800112a:	88fb      	ldrh	r3, [r7, #6]
 800112c:	0a1b      	lsrs	r3, r3, #8
 800112e:	b29b      	uxth	r3, r3
 8001130:	b2db      	uxtb	r3, r3
 8001132:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8001134:	88fb      	ldrh	r3, [r7, #6]
 8001136:	b2db      	uxtb	r3, r3
 8001138:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800113a:	f000 fa09 	bl	8001550 <SUBGRF_GetPacketType>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d108      	bne.n	8001156 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	2202      	movs	r2, #2
 800114a:	4619      	mov	r1, r3
 800114c:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 8001150:	f000 fc80 	bl	8001a54 <SUBGRF_WriteRegisters>
            break;
 8001154:	e000      	b.n	8001158 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8001156:	bf00      	nop
    }
}
 8001158:	bf00      	nop
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800116a:	88fb      	ldrh	r3, [r7, #6]
 800116c:	0a1b      	lsrs	r3, r3, #8
 800116e:	b29b      	uxth	r3, r3
 8001170:	b2db      	uxtb	r3, r3
 8001172:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8001174:	88fb      	ldrh	r3, [r7, #6]
 8001176:	b2db      	uxtb	r3, r3
 8001178:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800117a:	f000 f9e9 	bl	8001550 <SUBGRF_GetPacketType>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d108      	bne.n	8001196 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8001184:	f107 030c 	add.w	r3, r7, #12
 8001188:	2202      	movs	r2, #2
 800118a:	4619      	mov	r1, r3
 800118c:	f240 60be 	movw	r0, #1726	@ 0x6be
 8001190:	f000 fc60 	bl	8001a54 <SUBGRF_WriteRegisters>
            break;
 8001194:	e000      	b.n	8001198 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8001196:	bf00      	nop
    }
}
 8001198:	bf00      	nop
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <SUBGRF_SetStandby>:
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
    OperatingMode = MODE_SLEEP;
}

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80011aa:	1dfb      	adds	r3, r7, #7
 80011ac:	2201      	movs	r2, #1
 80011ae:	4619      	mov	r1, r3
 80011b0:	2080      	movs	r0, #128	@ 0x80
 80011b2:	f000 fc71 	bl	8001a98 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d103      	bne.n	80011c4 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 80011bc:	4b05      	ldr	r3, [pc, #20]	@ (80011d4 <SUBGRF_SetStandby+0x34>)
 80011be:	2201      	movs	r2, #1
 80011c0:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 80011c2:	e002      	b.n	80011ca <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 80011c4:	4b03      	ldr	r3, [pc, #12]	@ (80011d4 <SUBGRF_SetStandby+0x34>)
 80011c6:	2202      	movs	r2, #2
 80011c8:	701a      	strb	r2, [r3, #0]
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	2000044c 	.word	0x2000044c

080011d8 <SUBGRF_SetRx>:
    buf[2] = ( uint8_t )( timeout & 0xFF );
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
}

void SUBGRF_SetRx( uint32_t timeout )
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <SUBGRF_SetRx+0x3c>)
 80011e2:	2205      	movs	r2, #5
 80011e4:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	0c1b      	lsrs	r3, r3, #16
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	0a1b      	lsrs	r3, r3, #8
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80011fc:	f107 030c 	add.w	r3, r7, #12
 8001200:	2203      	movs	r2, #3
 8001202:	4619      	mov	r1, r3
 8001204:	2082      	movs	r0, #130	@ 0x82
 8001206:	f000 fc47 	bl	8001a98 <SUBGRF_WriteCommand>
}
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	2000044c 	.word	0x2000044c

08001218 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
}

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8001222:	1dfb      	adds	r3, r7, #7
 8001224:	2201      	movs	r2, #1
 8001226:	4619      	mov	r1, r3
 8001228:	209f      	movs	r0, #159	@ 0x9f
 800122a:	f000 fc35 	bl	8001a98 <SUBGRF_WriteCommand>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <SUBGRF_SetRegulatorMode>:
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
    }
}

void SUBGRF_SetRegulatorMode( void )
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800123c:	f7ff ff13 	bl	8001066 <RBI_IsDCDC>
 8001240:	4603      	mov	r3, r0
 8001242:	2b01      	cmp	r3, #1
 8001244:	d102      	bne.n	800124c <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8001246:	2301      	movs	r3, #1
 8001248:	71fb      	strb	r3, [r7, #7]
 800124a:	e001      	b.n	8001250 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 800124c:	2300      	movs	r3, #0
 800124e:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8001250:	1dfb      	adds	r3, r7, #7
 8001252:	2201      	movs	r2, #1
 8001254:	4619      	mov	r1, r3
 8001256:	2096      	movs	r0, #150	@ 0x96
 8001258:	f000 fc1e 	bl	8001a98 <SUBGRF_WriteCommand>
}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800126c:	793b      	ldrb	r3, [r7, #4]
 800126e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001272:	b2db      	uxtb	r3, r3
 8001274:	b25b      	sxtb	r3, r3
 8001276:	019b      	lsls	r3, r3, #6
 8001278:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800127a:	793b      	ldrb	r3, [r7, #4]
 800127c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001280:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8001282:	b25b      	sxtb	r3, r3
 8001284:	015b      	lsls	r3, r3, #5
 8001286:	b25b      	sxtb	r3, r3
 8001288:	4313      	orrs	r3, r2
 800128a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800128c:	793b      	ldrb	r3, [r7, #4]
 800128e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001292:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8001294:	b25b      	sxtb	r3, r3
 8001296:	011b      	lsls	r3, r3, #4
 8001298:	b25b      	sxtb	r3, r3
 800129a:	4313      	orrs	r3, r2
 800129c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800129e:	793b      	ldrb	r3, [r7, #4]
 80012a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80012a4:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80012a6:	b25b      	sxtb	r3, r3
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	b25b      	sxtb	r3, r3
 80012ac:	4313      	orrs	r3, r2
 80012ae:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80012b0:	793b      	ldrb	r3, [r7, #4]
 80012b2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80012b6:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80012b8:	b25b      	sxtb	r3, r3
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	b25b      	sxtb	r3, r3
 80012be:	4313      	orrs	r3, r2
 80012c0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80012c2:	793b      	ldrb	r3, [r7, #4]
 80012c4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80012c8:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80012ca:	b25b      	sxtb	r3, r3
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	b25b      	sxtb	r3, r3
 80012d0:	4313      	orrs	r3, r2
 80012d2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 80012d4:	793b      	ldrb	r3, [r7, #4]
 80012d6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80012de:	4313      	orrs	r3, r2
 80012e0:	b25b      	sxtb	r3, r3
 80012e2:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80012e4:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 80012e6:	f107 030f 	add.w	r3, r7, #15
 80012ea:	2201      	movs	r2, #1
 80012ec:	4619      	mov	r1, r3
 80012ee:	2089      	movs	r0, #137	@ 0x89
 80012f0:	f000 fbd2 	bl	8001a98 <SUBGRF_WriteCommand>
}
 80012f4:	bf00      	nop
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a1d      	ldr	r2, [pc, #116]	@ (800137c <SUBGRF_CalibrateImage+0x80>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d904      	bls.n	8001316 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800130c:	23e1      	movs	r3, #225	@ 0xe1
 800130e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8001310:	23e9      	movs	r3, #233	@ 0xe9
 8001312:	737b      	strb	r3, [r7, #13]
 8001314:	e027      	b.n	8001366 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a19      	ldr	r2, [pc, #100]	@ (8001380 <SUBGRF_CalibrateImage+0x84>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d904      	bls.n	8001328 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800131e:	23d7      	movs	r3, #215	@ 0xd7
 8001320:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8001322:	23db      	movs	r3, #219	@ 0xdb
 8001324:	737b      	strb	r3, [r7, #13]
 8001326:	e01e      	b.n	8001366 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a16      	ldr	r2, [pc, #88]	@ (8001384 <SUBGRF_CalibrateImage+0x88>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d904      	bls.n	800133a <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8001330:	23c1      	movs	r3, #193	@ 0xc1
 8001332:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8001334:	23c5      	movs	r3, #197	@ 0xc5
 8001336:	737b      	strb	r3, [r7, #13]
 8001338:	e015      	b.n	8001366 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a12      	ldr	r2, [pc, #72]	@ (8001388 <SUBGRF_CalibrateImage+0x8c>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d904      	bls.n	800134c <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8001342:	2375      	movs	r3, #117	@ 0x75
 8001344:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8001346:	2381      	movs	r3, #129	@ 0x81
 8001348:	737b      	strb	r3, [r7, #13]
 800134a:	e00c      	b.n	8001366 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a0f      	ldr	r2, [pc, #60]	@ (800138c <SUBGRF_CalibrateImage+0x90>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d904      	bls.n	800135e <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 8001354:	236b      	movs	r3, #107	@ 0x6b
 8001356:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8001358:	236f      	movs	r3, #111	@ 0x6f
 800135a:	737b      	strb	r3, [r7, #13]
 800135c:	e003      	b.n	8001366 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 800135e:	2329      	movs	r3, #41	@ 0x29
 8001360:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 8001362:	232b      	movs	r3, #43	@ 0x2b
 8001364:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8001366:	f107 030c 	add.w	r3, r7, #12
 800136a:	2202      	movs	r2, #2
 800136c:	4619      	mov	r1, r3
 800136e:	2098      	movs	r0, #152	@ 0x98
 8001370:	f000 fb92 	bl	8001a98 <SUBGRF_WriteCommand>
}
 8001374:	bf00      	nop
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	35a4e900 	.word	0x35a4e900
 8001380:	32a9f880 	.word	0x32a9f880
 8001384:	2de54480 	.word	0x2de54480
 8001388:	1b6b0b00 	.word	0x1b6b0b00
 800138c:	1954fc40 	.word	0x1954fc40

08001390 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8001390:	b590      	push	{r4, r7, lr}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	4604      	mov	r4, r0
 8001398:	4608      	mov	r0, r1
 800139a:	4611      	mov	r1, r2
 800139c:	461a      	mov	r2, r3
 800139e:	4623      	mov	r3, r4
 80013a0:	71fb      	strb	r3, [r7, #7]
 80013a2:	4603      	mov	r3, r0
 80013a4:	71bb      	strb	r3, [r7, #6]
 80013a6:	460b      	mov	r3, r1
 80013a8:	717b      	strb	r3, [r7, #5]
 80013aa:	4613      	mov	r3, r2
 80013ac:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 80013b2:	79bb      	ldrb	r3, [r7, #6]
 80013b4:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 80013b6:	797b      	ldrb	r3, [r7, #5]
 80013b8:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 80013ba:	793b      	ldrb	r3, [r7, #4]
 80013bc:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 80013be:	f107 030c 	add.w	r3, r7, #12
 80013c2:	2204      	movs	r2, #4
 80013c4:	4619      	mov	r1, r3
 80013c6:	2095      	movs	r0, #149	@ 0x95
 80013c8:	f000 fb66 	bl	8001a98 <SUBGRF_WriteCommand>
}
 80013cc:	bf00      	nop
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd90      	pop	{r4, r7, pc}

080013d4 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 80013d4:	b590      	push	{r4, r7, lr}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4604      	mov	r4, r0
 80013dc:	4608      	mov	r0, r1
 80013de:	4611      	mov	r1, r2
 80013e0:	461a      	mov	r2, r3
 80013e2:	4623      	mov	r3, r4
 80013e4:	80fb      	strh	r3, [r7, #6]
 80013e6:	4603      	mov	r3, r0
 80013e8:	80bb      	strh	r3, [r7, #4]
 80013ea:	460b      	mov	r3, r1
 80013ec:	807b      	strh	r3, [r7, #2]
 80013ee:	4613      	mov	r3, r2
 80013f0:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 80013f2:	88fb      	ldrh	r3, [r7, #6]
 80013f4:	0a1b      	lsrs	r3, r3, #8
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 80013fc:	88fb      	ldrh	r3, [r7, #6]
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8001402:	88bb      	ldrh	r3, [r7, #4]
 8001404:	0a1b      	lsrs	r3, r3, #8
 8001406:	b29b      	uxth	r3, r3
 8001408:	b2db      	uxtb	r3, r3
 800140a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800140c:	88bb      	ldrh	r3, [r7, #4]
 800140e:	b2db      	uxtb	r3, r3
 8001410:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8001412:	887b      	ldrh	r3, [r7, #2]
 8001414:	0a1b      	lsrs	r3, r3, #8
 8001416:	b29b      	uxth	r3, r3
 8001418:	b2db      	uxtb	r3, r3
 800141a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800141c:	887b      	ldrh	r3, [r7, #2]
 800141e:	b2db      	uxtb	r3, r3
 8001420:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8001422:	883b      	ldrh	r3, [r7, #0]
 8001424:	0a1b      	lsrs	r3, r3, #8
 8001426:	b29b      	uxth	r3, r3
 8001428:	b2db      	uxtb	r3, r3
 800142a:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800142c:	883b      	ldrh	r3, [r7, #0]
 800142e:	b2db      	uxtb	r3, r3
 8001430:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8001432:	f107 0308 	add.w	r3, r7, #8
 8001436:	2208      	movs	r2, #8
 8001438:	4619      	mov	r1, r3
 800143a:	2008      	movs	r0, #8
 800143c:	f000 fb2c 	bl	8001a98 <SUBGRF_WriteCommand>
}
 8001440:	bf00      	nop
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	bd90      	pop	{r4, r7, pc}

08001448 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	6039      	str	r1, [r7, #0]
 8001452:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	b2db      	uxtb	r3, r3
 800145c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	0c1b      	lsrs	r3, r3, #16
 8001462:	b2db      	uxtb	r3, r3
 8001464:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	0a1b      	lsrs	r3, r3, #8
 800146a:	b2db      	uxtb	r3, r3
 800146c:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	b2db      	uxtb	r3, r3
 8001472:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8001474:	f107 030c 	add.w	r3, r7, #12
 8001478:	2204      	movs	r2, #4
 800147a:	4619      	mov	r1, r3
 800147c:	2097      	movs	r0, #151	@ 0x97
 800147e:	f000 fb0b 	bl	8001a98 <SUBGRF_WriteCommand>
}
 8001482:	bf00      	nop
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
	...

0800148c <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800148c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001490:	b084      	sub	sp, #16
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800149a:	4b1d      	ldr	r3, [pc, #116]	@ (8001510 <SUBGRF_SetRfFrequency+0x84>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	f083 0301 	eor.w	r3, r3, #1
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d005      	beq.n	80014b4 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff ff27 	bl	80012fc <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 80014ae:	4b18      	ldr	r3, [pc, #96]	@ (8001510 <SUBGRF_SetRfFrequency+0x84>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	461c      	mov	r4, r3
 80014ba:	4615      	mov	r5, r2
 80014bc:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 80014c0:	ea4f 6844 	mov.w	r8, r4, lsl #25
 80014c4:	4a13      	ldr	r2, [pc, #76]	@ (8001514 <SUBGRF_SetRfFrequency+0x88>)
 80014c6:	f04f 0300 	mov.w	r3, #0
 80014ca:	4640      	mov	r0, r8
 80014cc:	4649      	mov	r1, r9
 80014ce:	f7fe feaf 	bl	8000230 <__aeabi_uldivmod>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	4613      	mov	r3, r2
 80014d8:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	0e1b      	lsrs	r3, r3, #24
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	0c1b      	lsrs	r3, r3, #16
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	0a1b      	lsrs	r3, r3, #8
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 80014f8:	f107 0308 	add.w	r3, r7, #8
 80014fc:	2204      	movs	r2, #4
 80014fe:	4619      	mov	r1, r3
 8001500:	2086      	movs	r0, #134	@ 0x86
 8001502:	f000 fac9 	bl	8001a98 <SUBGRF_WriteCommand>
}
 8001506:	bf00      	nop
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001510:	2000044f 	.word	0x2000044f
 8001514:	01e84800 	.word	0x01e84800

08001518 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8001522:	79fa      	ldrb	r2, [r7, #7]
 8001524:	4b09      	ldr	r3, [pc, #36]	@ (800154c <SUBGRF_SetPacketType+0x34>)
 8001526:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d104      	bne.n	8001538 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800152e:	2100      	movs	r1, #0
 8001530:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8001534:	f000 fa66 	bl	8001a04 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8001538:	1dfb      	adds	r3, r7, #7
 800153a:	2201      	movs	r2, #1
 800153c:	4619      	mov	r1, r3
 800153e:	208a      	movs	r0, #138	@ 0x8a
 8001540:	f000 faaa 	bl	8001a98 <SUBGRF_WriteCommand>
}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	2000044d 	.word	0x2000044d

08001550 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
    return PacketType;
 8001554:	4b02      	ldr	r3, [pc, #8]	@ (8001560 <SUBGRF_GetPacketType+0x10>)
 8001556:	781b      	ldrb	r3, [r3, #0]
}
 8001558:	4618      	mov	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	2000044d 	.word	0x2000044d

08001564 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
 800156e:	460b      	mov	r3, r1
 8001570:	71bb      	strb	r3, [r7, #6]
 8001572:	4613      	mov	r3, r2
 8001574:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d149      	bne.n	8001610 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800157c:	2000      	movs	r0, #0
 800157e:	f7ff fd79 	bl	8001074 <RBI_GetRFOMaxPowerConfig>
 8001582:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8001584:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	429a      	cmp	r2, r3
 800158c:	da01      	bge.n	8001592 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2b0e      	cmp	r3, #14
 8001596:	d10e      	bne.n	80015b6 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8001598:	2301      	movs	r3, #1
 800159a:	2201      	movs	r2, #1
 800159c:	2100      	movs	r1, #0
 800159e:	2004      	movs	r0, #4
 80015a0:	f7ff fef6 	bl	8001390 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80015a4:	79ba      	ldrb	r2, [r7, #6]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	330e      	adds	r3, #14
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	71bb      	strb	r3, [r7, #6]
 80015b4:	e01f      	b.n	80015f6 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2b0a      	cmp	r3, #10
 80015ba:	d10e      	bne.n	80015da <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 80015bc:	2301      	movs	r3, #1
 80015be:	2201      	movs	r2, #1
 80015c0:	2100      	movs	r1, #0
 80015c2:	2001      	movs	r0, #1
 80015c4:	f7ff fee4 	bl	8001390 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 80015c8:	79ba      	ldrb	r2, [r7, #6]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	330d      	adds	r3, #13
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	71bb      	strb	r3, [r7, #6]
 80015d8:	e00d      	b.n	80015f6 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 80015da:	2301      	movs	r3, #1
 80015dc:	2201      	movs	r2, #1
 80015de:	2100      	movs	r1, #0
 80015e0:	2007      	movs	r0, #7
 80015e2:	f7ff fed5 	bl	8001390 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80015e6:	79ba      	ldrb	r2, [r7, #6]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	330e      	adds	r3, #14
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 80015f6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80015fa:	f113 0f11 	cmn.w	r3, #17
 80015fe:	da01      	bge.n	8001604 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8001600:	23ef      	movs	r3, #239	@ 0xef
 8001602:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8001604:	2118      	movs	r1, #24
 8001606:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800160a:	f000 f9fb 	bl	8001a04 <SUBGRF_WriteRegister>
 800160e:	e067      	b.n	80016e0 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8001610:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8001614:	f000 fa0a 	bl	8001a2c <SUBGRF_ReadRegister>
 8001618:	4603      	mov	r3, r0
 800161a:	f043 031e 	orr.w	r3, r3, #30
 800161e:	b2db      	uxtb	r3, r3
 8001620:	4619      	mov	r1, r3
 8001622:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8001626:	f000 f9ed 	bl	8001a04 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800162a:	2001      	movs	r0, #1
 800162c:	f7ff fd22 	bl	8001074 <RBI_GetRFOMaxPowerConfig>
 8001630:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 8001632:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	429a      	cmp	r2, r3
 800163a:	da01      	bge.n	8001640 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2b14      	cmp	r3, #20
 8001644:	d10e      	bne.n	8001664 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8001646:	2301      	movs	r3, #1
 8001648:	2200      	movs	r2, #0
 800164a:	2105      	movs	r1, #5
 800164c:	2003      	movs	r0, #3
 800164e:	f7ff fe9f 	bl	8001390 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8001652:	79ba      	ldrb	r2, [r7, #6]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	b2db      	uxtb	r3, r3
 800165c:	3316      	adds	r3, #22
 800165e:	b2db      	uxtb	r3, r3
 8001660:	71bb      	strb	r3, [r7, #6]
 8001662:	e031      	b.n	80016c8 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2b11      	cmp	r3, #17
 8001668:	d10e      	bne.n	8001688 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800166a:	2301      	movs	r3, #1
 800166c:	2200      	movs	r2, #0
 800166e:	2103      	movs	r1, #3
 8001670:	2002      	movs	r0, #2
 8001672:	f7ff fe8d 	bl	8001390 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8001676:	79ba      	ldrb	r2, [r7, #6]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	b2db      	uxtb	r3, r3
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	b2db      	uxtb	r3, r3
 8001680:	3316      	adds	r3, #22
 8001682:	b2db      	uxtb	r3, r3
 8001684:	71bb      	strb	r3, [r7, #6]
 8001686:	e01f      	b.n	80016c8 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2b0e      	cmp	r3, #14
 800168c:	d10e      	bne.n	80016ac <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 800168e:	2301      	movs	r3, #1
 8001690:	2200      	movs	r2, #0
 8001692:	2102      	movs	r1, #2
 8001694:	2002      	movs	r0, #2
 8001696:	f7ff fe7b 	bl	8001390 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800169a:	79ba      	ldrb	r2, [r7, #6]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	330e      	adds	r3, #14
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	71bb      	strb	r3, [r7, #6]
 80016aa:	e00d      	b.n	80016c8 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 80016ac:	2301      	movs	r3, #1
 80016ae:	2200      	movs	r2, #0
 80016b0:	2107      	movs	r1, #7
 80016b2:	2004      	movs	r0, #4
 80016b4:	f7ff fe6c 	bl	8001390 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80016b8:	79ba      	ldrb	r2, [r7, #6]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	3316      	adds	r3, #22
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 80016c8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80016cc:	f113 0f09 	cmn.w	r3, #9
 80016d0:	da01      	bge.n	80016d6 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 80016d2:	23f7      	movs	r3, #247	@ 0xf7
 80016d4:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 80016d6:	2138      	movs	r1, #56	@ 0x38
 80016d8:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 80016dc:	f000 f992 	bl	8001a04 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 80016e0:	79bb      	ldrb	r3, [r7, #6]
 80016e2:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 80016e4:	797b      	ldrb	r3, [r7, #5]
 80016e6:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 80016e8:	f107 0308 	add.w	r3, r7, #8
 80016ec:	2202      	movs	r2, #2
 80016ee:	4619      	mov	r1, r3
 80016f0:	208e      	movs	r0, #142	@ 0x8e
 80016f2:	f000 f9d1 	bl	8001a98 <SUBGRF_WriteCommand>
}
 80016f6:	bf00      	nop
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8001700:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001704:	b086      	sub	sp, #24
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800170e:	f107 0308 	add.w	r3, r7, #8
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	781a      	ldrb	r2, [r3, #0]
 800171c:	4b5c      	ldr	r3, [pc, #368]	@ (8001890 <SUBGRF_SetModulationParams+0x190>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	429a      	cmp	r2, r3
 8001722:	d004      	beq.n	800172e <SUBGRF_SetModulationParams+0x2e>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fef5 	bl	8001518 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b03      	cmp	r3, #3
 8001734:	f200 80a5 	bhi.w	8001882 <SUBGRF_SetModulationParams+0x182>
 8001738:	a201      	add	r2, pc, #4	@ (adr r2, 8001740 <SUBGRF_SetModulationParams+0x40>)
 800173a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800173e:	bf00      	nop
 8001740:	08001751 	.word	0x08001751
 8001744:	08001811 	.word	0x08001811
 8001748:	080017d3 	.word	0x080017d3
 800174c:	0800183f 	.word	0x0800183f
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8001750:	2308      	movs	r3, #8
 8001752:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	4a4e      	ldr	r2, [pc, #312]	@ (8001894 <SUBGRF_SetModulationParams+0x194>)
 800175a:	fbb2 f3f3 	udiv	r3, r2, r3
 800175e:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	0c1b      	lsrs	r3, r3, #16
 8001764:	b2db      	uxtb	r3, r3
 8001766:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	0a1b      	lsrs	r3, r3, #8
 800176c:	b2db      	uxtb	r3, r3
 800176e:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	b2db      	uxtb	r3, r3
 8001774:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	7b1b      	ldrb	r3, [r3, #12]
 800177a:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	7b5b      	ldrb	r3, [r3, #13]
 8001780:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	2200      	movs	r2, #0
 8001788:	461c      	mov	r4, r3
 800178a:	4615      	mov	r5, r2
 800178c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8001790:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8001794:	4a40      	ldr	r2, [pc, #256]	@ (8001898 <SUBGRF_SetModulationParams+0x198>)
 8001796:	f04f 0300 	mov.w	r3, #0
 800179a:	4640      	mov	r0, r8
 800179c:	4649      	mov	r1, r9
 800179e:	f7fe fd47 	bl	8000230 <__aeabi_uldivmod>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4613      	mov	r3, r2
 80017a8:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	0c1b      	lsrs	r3, r3, #16
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	0a1b      	lsrs	r3, r3, #8
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80017c0:	7cfb      	ldrb	r3, [r7, #19]
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	f107 0308 	add.w	r3, r7, #8
 80017c8:	4619      	mov	r1, r3
 80017ca:	208b      	movs	r0, #139	@ 0x8b
 80017cc:	f000 f964 	bl	8001a98 <SUBGRF_WriteCommand>
        break;
 80017d0:	e058      	b.n	8001884 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_BPSK:
        n = 4;
 80017d2:	2304      	movs	r3, #4
 80017d4:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	691b      	ldr	r3, [r3, #16]
 80017da:	4a2e      	ldr	r2, [pc, #184]	@ (8001894 <SUBGRF_SetModulationParams+0x194>)
 80017dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e0:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	0c1b      	lsrs	r3, r3, #16
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	0a1b      	lsrs	r3, r3, #8
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	7d1b      	ldrb	r3, [r3, #20]
 80017fc:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80017fe:	7cfb      	ldrb	r3, [r7, #19]
 8001800:	b29a      	uxth	r2, r3
 8001802:	f107 0308 	add.w	r3, r7, #8
 8001806:	4619      	mov	r1, r3
 8001808:	208b      	movs	r0, #139	@ 0x8b
 800180a:	f000 f945 	bl	8001a98 <SUBGRF_WriteCommand>
        break;
 800180e:	e039      	b.n	8001884 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_LORA:
        n = 4;
 8001810:	2304      	movs	r3, #4
 8001812:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	7e1b      	ldrb	r3, [r3, #24]
 8001818:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	7e5b      	ldrb	r3, [r3, #25]
 800181e:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	7e9b      	ldrb	r3, [r3, #26]
 8001824:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	7edb      	ldrb	r3, [r3, #27]
 800182a:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800182c:	7cfb      	ldrb	r3, [r7, #19]
 800182e:	b29a      	uxth	r2, r3
 8001830:	f107 0308 	add.w	r3, r7, #8
 8001834:	4619      	mov	r1, r3
 8001836:	208b      	movs	r0, #139	@ 0x8b
 8001838:	f000 f92e 	bl	8001a98 <SUBGRF_WriteCommand>

        break;
 800183c:	e022      	b.n	8001884 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_GMSK:
        n = 5;
 800183e:	2305      	movs	r3, #5
 8001840:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	4a13      	ldr	r2, [pc, #76]	@ (8001894 <SUBGRF_SetModulationParams+0x194>)
 8001848:	fbb2 f3f3 	udiv	r3, r2, r3
 800184c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	0c1b      	lsrs	r3, r3, #16
 8001852:	b2db      	uxtb	r3, r3
 8001854:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	0a1b      	lsrs	r3, r3, #8
 800185a:	b2db      	uxtb	r3, r3
 800185c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	b2db      	uxtb	r3, r3
 8001862:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	7b1b      	ldrb	r3, [r3, #12]
 8001868:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	7b5b      	ldrb	r3, [r3, #13]
 800186e:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8001870:	7cfb      	ldrb	r3, [r7, #19]
 8001872:	b29a      	uxth	r2, r3
 8001874:	f107 0308 	add.w	r3, r7, #8
 8001878:	4619      	mov	r1, r3
 800187a:	208b      	movs	r0, #139	@ 0x8b
 800187c:	f000 f90c 	bl	8001a98 <SUBGRF_WriteCommand>
        break;
 8001880:	e000      	b.n	8001884 <SUBGRF_SetModulationParams+0x184>
    default:
    case PACKET_TYPE_NONE:
      break;
 8001882:	bf00      	nop
    }
}
 8001884:	bf00      	nop
 8001886:	3718      	adds	r7, #24
 8001888:	46bd      	mov	sp, r7
 800188a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800188e:	bf00      	nop
 8001890:	2000044d 	.word	0x2000044d
 8001894:	3d090000 	.word	0x3d090000
 8001898:	01e84800 	.word	0x01e84800

0800189c <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80018a8:	f107 030c 	add.w	r3, r7, #12
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	721a      	strb	r2, [r3, #8]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	781a      	ldrb	r2, [r3, #0]
 80018b8:	4b44      	ldr	r3, [pc, #272]	@ (80019cc <SUBGRF_SetPacketParams+0x130>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d004      	beq.n	80018ca <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff fe27 	bl	8001518 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b03      	cmp	r3, #3
 80018d0:	d878      	bhi.n	80019c4 <SUBGRF_SetPacketParams+0x128>
 80018d2:	a201      	add	r2, pc, #4	@ (adr r2, 80018d8 <SUBGRF_SetPacketParams+0x3c>)
 80018d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018d8:	080018e9 	.word	0x080018e9
 80018dc:	08001979 	.word	0x08001979
 80018e0:	0800196d 	.word	0x0800196d
 80018e4:	080018e9 	.word	0x080018e9
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	7a5b      	ldrb	r3, [r3, #9]
 80018ec:	2bf1      	cmp	r3, #241	@ 0xf1
 80018ee:	d10a      	bne.n	8001906 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 80018f0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80018f4:	f7ff fc14 	bl	8001120 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 80018f8:	f248 0005 	movw	r0, #32773	@ 0x8005
 80018fc:	f7ff fc30 	bl	8001160 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8001900:	2302      	movs	r3, #2
 8001902:	75bb      	strb	r3, [r7, #22]
 8001904:	e011      	b.n	800192a <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	7a5b      	ldrb	r3, [r3, #9]
 800190a:	2bf2      	cmp	r3, #242	@ 0xf2
 800190c:	d10a      	bne.n	8001924 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800190e:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 8001912:	f7ff fc05 	bl	8001120 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8001916:	f241 0021 	movw	r0, #4129	@ 0x1021
 800191a:	f7ff fc21 	bl	8001160 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800191e:	2306      	movs	r3, #6
 8001920:	75bb      	strb	r3, [r7, #22]
 8001922:	e002      	b.n	800192a <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	7a5b      	ldrb	r3, [r3, #9]
 8001928:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800192a:	2309      	movs	r3, #9
 800192c:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	885b      	ldrh	r3, [r3, #2]
 8001932:	0a1b      	lsrs	r3, r3, #8
 8001934:	b29b      	uxth	r3, r3
 8001936:	b2db      	uxtb	r3, r3
 8001938:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	885b      	ldrh	r3, [r3, #2]
 800193e:	b2db      	uxtb	r3, r3
 8001940:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	791b      	ldrb	r3, [r3, #4]
 8001946:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	795b      	ldrb	r3, [r3, #5]
 800194c:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	799b      	ldrb	r3, [r3, #6]
 8001952:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	79db      	ldrb	r3, [r3, #7]
 8001958:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	7a1b      	ldrb	r3, [r3, #8]
 800195e:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8001960:	7dbb      	ldrb	r3, [r7, #22]
 8001962:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	7a9b      	ldrb	r3, [r3, #10]
 8001968:	753b      	strb	r3, [r7, #20]
        break;
 800196a:	e022      	b.n	80019b2 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 800196c:	2301      	movs	r3, #1
 800196e:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	7b1b      	ldrb	r3, [r3, #12]
 8001974:	733b      	strb	r3, [r7, #12]
        break;
 8001976:	e01c      	b.n	80019b2 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8001978:	2306      	movs	r3, #6
 800197a:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	89db      	ldrh	r3, [r3, #14]
 8001980:	0a1b      	lsrs	r3, r3, #8
 8001982:	b29b      	uxth	r3, r3
 8001984:	b2db      	uxtb	r3, r3
 8001986:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	89db      	ldrh	r3, [r3, #14]
 800198c:	b2db      	uxtb	r3, r3
 800198e:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	7c1a      	ldrb	r2, [r3, #16]
 8001994:	4b0e      	ldr	r3, [pc, #56]	@ (80019d0 <SUBGRF_SetPacketParams+0x134>)
 8001996:	4611      	mov	r1, r2
 8001998:	7019      	strb	r1, [r3, #0]
 800199a:	4613      	mov	r3, r2
 800199c:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	7c5b      	ldrb	r3, [r3, #17]
 80019a2:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	7c9b      	ldrb	r3, [r3, #18]
 80019a8:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	7cdb      	ldrb	r3, [r3, #19]
 80019ae:	747b      	strb	r3, [r7, #17]
        break;
 80019b0:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 80019b2:	7dfb      	ldrb	r3, [r7, #23]
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	f107 030c 	add.w	r3, r7, #12
 80019ba:	4619      	mov	r1, r3
 80019bc:	208c      	movs	r0, #140	@ 0x8c
 80019be:	f000 f86b 	bl	8001a98 <SUBGRF_WriteCommand>
 80019c2:	e000      	b.n	80019c6 <SUBGRF_SetPacketParams+0x12a>
        return;
 80019c4:	bf00      	nop
}
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	2000044d 	.word	0x2000044d
 80019d0:	2000044e 	.word	0x2000044e

080019d4 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	460a      	mov	r2, r1
 80019de:	71fb      	strb	r3, [r7, #7]
 80019e0:	4613      	mov	r3, r2
 80019e2:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 80019e8:	79bb      	ldrb	r3, [r7, #6]
 80019ea:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 80019ec:	f107 030c 	add.w	r3, r7, #12
 80019f0:	2202      	movs	r2, #2
 80019f2:	4619      	mov	r1, r3
 80019f4:	208f      	movs	r0, #143	@ 0x8f
 80019f6:	f000 f84f 	bl	8001a98 <SUBGRF_WriteCommand>
}
 80019fa:	bf00      	nop
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	460a      	mov	r2, r1
 8001a0e:	80fb      	strh	r3, [r7, #6]
 8001a10:	4613      	mov	r3, r2
 8001a12:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8001a14:	1d7a      	adds	r2, r7, #5
 8001a16:	88f9      	ldrh	r1, [r7, #6]
 8001a18:	2301      	movs	r3, #1
 8001a1a:	4803      	ldr	r0, [pc, #12]	@ (8001a28 <SUBGRF_WriteRegister+0x24>)
 8001a1c:	f002 f9b4 	bl	8003d88 <HAL_SUBGHZ_WriteRegisters>
}
 8001a20:	bf00      	nop
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	200003a8 	.word	0x200003a8

08001a2c <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8001a36:	f107 020f 	add.w	r2, r7, #15
 8001a3a:	88f9      	ldrh	r1, [r7, #6]
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	4804      	ldr	r0, [pc, #16]	@ (8001a50 <SUBGRF_ReadRegister+0x24>)
 8001a40:	f002 fa01 	bl	8003e46 <HAL_SUBGHZ_ReadRegisters>
    return data;
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	200003a8 	.word	0x200003a8

08001a54 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	6039      	str	r1, [r7, #0]
 8001a5e:	80fb      	strh	r3, [r7, #6]
 8001a60:	4613      	mov	r3, r2
 8001a62:	80bb      	strh	r3, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a64:	f3ef 8310 	mrs	r3, PRIMASK
 8001a68:	60fb      	str	r3, [r7, #12]
  return(result);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8001a6c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a6e:	b672      	cpsid	i
}
 8001a70:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8001a72:	88bb      	ldrh	r3, [r7, #4]
 8001a74:	88f9      	ldrh	r1, [r7, #6]
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	4806      	ldr	r0, [pc, #24]	@ (8001a94 <SUBGRF_WriteRegisters+0x40>)
 8001a7a:	f002 f985 	bl	8003d88 <HAL_SUBGHZ_WriteRegisters>
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	f383 8810 	msr	PRIMASK, r3
}
 8001a88:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8001a8a:	bf00      	nop
 8001a8c:	3718      	adds	r7, #24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	200003a8 	.word	0x200003a8

08001a98 <SUBGRF_WriteCommand>:
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	6039      	str	r1, [r7, #0]
 8001aa2:	71fb      	strb	r3, [r7, #7]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001aa8:	f3ef 8310 	mrs	r3, PRIMASK
 8001aac:	60fb      	str	r3, [r7, #12]
  return(result);
 8001aae:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8001ab0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab2:	b672      	cpsid	i
}
 8001ab4:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8001ab6:	88bb      	ldrh	r3, [r7, #4]
 8001ab8:	79f9      	ldrb	r1, [r7, #7]
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	4806      	ldr	r0, [pc, #24]	@ (8001ad8 <SUBGRF_WriteCommand+0x40>)
 8001abe:	f002 fa23 	bl	8003f08 <HAL_SUBGHZ_ExecSetCmd>
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	f383 8810 	msr	PRIMASK, r3
}
 8001acc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8001ace:	bf00      	nop
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	200003a8 	.word	0x200003a8

08001adc <SUBGRF_SetSwitch>:
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
    CRITICAL_SECTION_END();
}

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	460a      	mov	r2, r1
 8001ae6:	71fb      	strb	r3, [r7, #7]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8001aec:	2301      	movs	r3, #1
 8001aee:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8001af0:	79bb      	ldrb	r3, [r7, #6]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d10d      	bne.n	8001b12 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d104      	bne.n	8001b06 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8001afc:	2302      	movs	r3, #2
 8001afe:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8001b00:	2004      	movs	r0, #4
 8001b02:	f000 f8e7 	bl	8001cd4 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d107      	bne.n	8001b1c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	73fb      	strb	r3, [r7, #15]
 8001b10:	e004      	b.n	8001b1c <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8001b12:	79bb      	ldrb	r3, [r7, #6]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d101      	bne.n	8001b1c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff fa85 	bl	800102e <RBI_ConfigRFSwitch>
}
 8001b24:	bf00      	nop
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8001b36:	2301      	movs	r3, #1
 8001b38:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8001b3a:	f7ff fa86 	bl	800104a <RBI_GetTxConfig>
 8001b3e:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d016      	beq.n	8001b74 <SUBGRF_SetRfTxPower+0x48>
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	dc16      	bgt.n	8001b7a <SUBGRF_SetRfTxPower+0x4e>
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <SUBGRF_SetRfTxPower+0x2e>
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d00a      	beq.n	8001b6e <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8001b58:	e00f      	b.n	8001b7a <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8001b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5e:	2b0f      	cmp	r3, #15
 8001b60:	dd02      	ble.n	8001b68 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8001b62:	2302      	movs	r3, #2
 8001b64:	73fb      	strb	r3, [r7, #15]
            break;
 8001b66:	e009      	b.n	8001b7c <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	73fb      	strb	r3, [r7, #15]
            break;
 8001b6c:	e006      	b.n	8001b7c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	73fb      	strb	r3, [r7, #15]
            break;
 8001b72:	e003      	b.n	8001b7c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8001b74:	2302      	movs	r3, #2
 8001b76:	73fb      	strb	r3, [r7, #15]
            break;
 8001b78:	e000      	b.n	8001b7c <SUBGRF_SetRfTxPower+0x50>
            break;
 8001b7a:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8001b7c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8001b80:	7bfb      	ldrb	r3, [r7, #15]
 8001b82:	2202      	movs	r2, #2
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff fced 	bl	8001564 <SUBGRF_SetTxParams>

    return paSelect;
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <HAL_SUBGHZ_TxCpltCallback>:
    return RF_WAKEUP_TIME;
}

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8001b9c:	4b03      	ldr	r3, [pc, #12]	@ (8001bac <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	4798      	blx	r3
}
 8001ba4:	bf00      	nop
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20000450 	.word	0x20000450

08001bb0 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8001bb8:	4b03      	ldr	r3, [pc, #12]	@ (8001bc8 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2002      	movs	r0, #2
 8001bbe:	4798      	blx	r3
}
 8001bc0:	bf00      	nop
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20000450 	.word	0x20000450

08001bcc <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8001bd4:	4b03      	ldr	r3, [pc, #12]	@ (8001be4 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2040      	movs	r0, #64	@ 0x40
 8001bda:	4798      	blx	r3
}
 8001bdc:	bf00      	nop
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20000450 	.word	0x20000450

08001be8 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8001bf4:	78fb      	ldrb	r3, [r7, #3]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d002      	beq.n	8001c00 <HAL_SUBGHZ_CADStatusCallback+0x18>
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d005      	beq.n	8001c0a <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8001bfe:	e00a      	b.n	8001c16 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8001c00:	4b07      	ldr	r3, [pc, #28]	@ (8001c20 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2080      	movs	r0, #128	@ 0x80
 8001c06:	4798      	blx	r3
            break;
 8001c08:	e005      	b.n	8001c16 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8001c0a:	4b05      	ldr	r3, [pc, #20]	@ (8001c20 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001c12:	4798      	blx	r3
            break;
 8001c14:	bf00      	nop
    }
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000450 	.word	0x20000450

08001c24 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8001c2c:	4b04      	ldr	r3, [pc, #16]	@ (8001c40 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001c34:	4798      	blx	r3
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000450 	.word	0x20000450

08001c44 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8001c4c:	4b03      	ldr	r3, [pc, #12]	@ (8001c5c <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2020      	movs	r0, #32
 8001c52:	4798      	blx	r3
}
 8001c54:	bf00      	nop
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20000450 	.word	0x20000450

08001c60 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8001c68:	4b03      	ldr	r3, [pc, #12]	@ (8001c78 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2004      	movs	r0, #4
 8001c6e:	4798      	blx	r3
}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000450 	.word	0x20000450

08001c7c <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8001c84:	4b03      	ldr	r3, [pc, #12]	@ (8001c94 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2008      	movs	r0, #8
 8001c8a:	4798      	blx	r3
}
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20000450 	.word	0x20000450

08001c98 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8001ca0:	4b03      	ldr	r3, [pc, #12]	@ (8001cb0 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2010      	movs	r0, #16
 8001ca6:	4798      	blx	r3
}
 8001ca8:	bf00      	nop
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20000450 	.word	0x20000450

08001cb4 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8001cbc:	4b04      	ldr	r3, [pc, #16]	@ (8001cd0 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001cc4:	4798      	blx	r3
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000450 	.word	0x20000450

08001cd4 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8001cde:	f7ff f9c2 	bl	8001066 <RBI_IsDCDC>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d112      	bne.n	8001d0e <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8001ce8:	f640 1023 	movw	r0, #2339	@ 0x923
 8001cec:	f7ff fe9e 	bl	8001a2c <SUBGRF_ReadRegister>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
 8001cf6:	f023 0306 	bic.w	r3, r3, #6
 8001cfa:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8001cfc:	7bfa      	ldrb	r2, [r7, #15]
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	4619      	mov	r1, r3
 8001d06:	f640 1023 	movw	r0, #2339	@ 0x923
 8001d0a:	f7ff fe7b 	bl	8001a04 <SUBGRF_WriteRegister>
  }
}
 8001d0e:	bf00      	nop
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d22:	2003      	movs	r0, #3
 8001d24:	f000 f982 	bl	800202c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001d28:	f001 fc38 	bl	800359c <HAL_RCC_GetHCLKFreq>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	4a09      	ldr	r2, [pc, #36]	@ (8001d54 <HAL_Init+0x3c>)
 8001d30:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d32:	2000      	movs	r0, #0
 8001d34:	f000 f810 	bl	8001d58 <HAL_InitTick>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d002      	beq.n	8001d44 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	71fb      	strb	r3, [r7, #7]
 8001d42:	e001      	b.n	8001d48 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d44:	f7fe fe72 	bl	8000a2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d48:	79fb      	ldrb	r3, [r7, #7]
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000104 	.word	0x20000104

08001d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d60:	2300      	movs	r3, #0
 8001d62:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d64:	4b17      	ldr	r3, [pc, #92]	@ (8001dc4 <HAL_InitTick+0x6c>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d024      	beq.n	8001db6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d6c:	f001 fc16 	bl	800359c <HAL_RCC_GetHCLKFreq>
 8001d70:	4602      	mov	r2, r0
 8001d72:	4b14      	ldr	r3, [pc, #80]	@ (8001dc4 <HAL_InitTick+0x6c>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	4619      	mov	r1, r3
 8001d78:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d7c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d84:	4618      	mov	r0, r3
 8001d86:	f000 f992 	bl	80020ae <HAL_SYSTICK_Config>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d10f      	bne.n	8001db0 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b0f      	cmp	r3, #15
 8001d94:	d809      	bhi.n	8001daa <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d96:	2200      	movs	r2, #0
 8001d98:	6879      	ldr	r1, [r7, #4]
 8001d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8001d9e:	f000 f950 	bl	8002042 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001da2:	4a09      	ldr	r2, [pc, #36]	@ (8001dc8 <HAL_InitTick+0x70>)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6013      	str	r3, [r2, #0]
 8001da8:	e007      	b.n	8001dba <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	73fb      	strb	r3, [r7, #15]
 8001dae:	e004      	b.n	8001dba <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	73fb      	strb	r3, [r7, #15]
 8001db4:	e001      	b.n	8001dba <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	20000118 	.word	0x20000118
 8001dc8:	20000114 	.word	0x20000114

08001dcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001dd0:	4b05      	ldr	r3, [pc, #20]	@ (8001de8 <HAL_IncTick+0x1c>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4b05      	ldr	r3, [pc, #20]	@ (8001dec <HAL_IncTick+0x20>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4413      	add	r3, r2
 8001ddc:	4a03      	ldr	r2, [pc, #12]	@ (8001dec <HAL_IncTick+0x20>)
 8001dde:	6013      	str	r3, [r2, #0]
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr
 8001de8:	20000118 	.word	0x20000118
 8001dec:	20000454 	.word	0x20000454

08001df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  return uwTick;
 8001df4:	4b02      	ldr	r3, [pc, #8]	@ (8001e00 <HAL_GetTick+0x10>)
 8001df6:	681b      	ldr	r3, [r3, #0]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr
 8001e00:	20000454 	.word	0x20000454

08001e04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e0c:	f7ff fff0 	bl	8001df0 <HAL_GetTick>
 8001e10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e1c:	d005      	beq.n	8001e2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e48 <HAL_Delay+0x44>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	461a      	mov	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4413      	add	r3, r2
 8001e28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e2a:	bf00      	nop
 8001e2c:	f7ff ffe0 	bl	8001df0 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d8f7      	bhi.n	8001e2c <HAL_Delay+0x28>
  {
  }
}
 8001e3c:	bf00      	nop
 8001e3e:	bf00      	nop
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000118 	.word	0x20000118

08001e4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e90 <__NVIC_SetPriorityGrouping+0x44>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e62:	68ba      	ldr	r2, [r7, #8]
 8001e64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e68:	4013      	ands	r3, r2
 8001e6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e7e:	4a04      	ldr	r2, [pc, #16]	@ (8001e90 <__NVIC_SetPriorityGrouping+0x44>)
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	60d3      	str	r3, [r2, #12]
}
 8001e84:	bf00      	nop
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e98:	4b04      	ldr	r3, [pc, #16]	@ (8001eac <__NVIC_GetPriorityGrouping+0x18>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	0a1b      	lsrs	r3, r3, #8
 8001e9e:	f003 0307 	and.w	r3, r3, #7
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bc80      	pop	{r7}
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	db0b      	blt.n	8001eda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	f003 021f 	and.w	r2, r3, #31
 8001ec8:	4906      	ldr	r1, [pc, #24]	@ (8001ee4 <__NVIC_EnableIRQ+0x34>)
 8001eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ece:	095b      	lsrs	r3, r3, #5
 8001ed0:	2001      	movs	r0, #1
 8001ed2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr
 8001ee4:	e000e100 	.word	0xe000e100

08001ee8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	db12      	blt.n	8001f20 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	f003 021f 	and.w	r2, r3, #31
 8001f00:	490a      	ldr	r1, [pc, #40]	@ (8001f2c <__NVIC_DisableIRQ+0x44>)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	095b      	lsrs	r3, r3, #5
 8001f08:	2001      	movs	r0, #1
 8001f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f0e:	3320      	adds	r3, #32
 8001f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001f14:	f3bf 8f4f 	dsb	sy
}
 8001f18:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f1a:	f3bf 8f6f 	isb	sy
}
 8001f1e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bc80      	pop	{r7}
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	e000e100 	.word	0xe000e100

08001f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	6039      	str	r1, [r7, #0]
 8001f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	db0a      	blt.n	8001f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	490c      	ldr	r1, [pc, #48]	@ (8001f7c <__NVIC_SetPriority+0x4c>)
 8001f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4e:	0112      	lsls	r2, r2, #4
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	440b      	add	r3, r1
 8001f54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f58:	e00a      	b.n	8001f70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	4908      	ldr	r1, [pc, #32]	@ (8001f80 <__NVIC_SetPriority+0x50>)
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	3b04      	subs	r3, #4
 8001f68:	0112      	lsls	r2, r2, #4
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	440b      	add	r3, r1
 8001f6e:	761a      	strb	r2, [r3, #24]
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	e000e100 	.word	0xe000e100
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b089      	sub	sp, #36	@ 0x24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f1c3 0307 	rsb	r3, r3, #7
 8001f9e:	2b04      	cmp	r3, #4
 8001fa0:	bf28      	it	cs
 8001fa2:	2304      	movcs	r3, #4
 8001fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	3304      	adds	r3, #4
 8001faa:	2b06      	cmp	r3, #6
 8001fac:	d902      	bls.n	8001fb4 <NVIC_EncodePriority+0x30>
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	3b03      	subs	r3, #3
 8001fb2:	e000      	b.n	8001fb6 <NVIC_EncodePriority+0x32>
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43da      	mvns	r2, r3
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	401a      	ands	r2, r3
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd6:	43d9      	mvns	r1, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fdc:	4313      	orrs	r3, r2
         );
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3724      	adds	r7, #36	@ 0x24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr

08001fe8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ff8:	d301      	bcc.n	8001ffe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e00f      	b.n	800201e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8002028 <SysTick_Config+0x40>)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3b01      	subs	r3, #1
 8002004:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002006:	210f      	movs	r1, #15
 8002008:	f04f 30ff 	mov.w	r0, #4294967295
 800200c:	f7ff ff90 	bl	8001f30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002010:	4b05      	ldr	r3, [pc, #20]	@ (8002028 <SysTick_Config+0x40>)
 8002012:	2200      	movs	r2, #0
 8002014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002016:	4b04      	ldr	r3, [pc, #16]	@ (8002028 <SysTick_Config+0x40>)
 8002018:	2207      	movs	r2, #7
 800201a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	e000e010 	.word	0xe000e010

0800202c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7ff ff09 	bl	8001e4c <__NVIC_SetPriorityGrouping>
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b086      	sub	sp, #24
 8002046:	af00      	add	r7, sp, #0
 8002048:	4603      	mov	r3, r0
 800204a:	60b9      	str	r1, [r7, #8]
 800204c:	607a      	str	r2, [r7, #4]
 800204e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002050:	f7ff ff20 	bl	8001e94 <__NVIC_GetPriorityGrouping>
 8002054:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	68b9      	ldr	r1, [r7, #8]
 800205a:	6978      	ldr	r0, [r7, #20]
 800205c:	f7ff ff92 	bl	8001f84 <NVIC_EncodePriority>
 8002060:	4602      	mov	r2, r0
 8002062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002066:	4611      	mov	r1, r2
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff ff61 	bl	8001f30 <__NVIC_SetPriority>
}
 800206e:	bf00      	nop
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	4603      	mov	r3, r0
 800207e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff ff13 	bl	8001eb0 <__NVIC_EnableIRQ>
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	4603      	mov	r3, r0
 800209a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800209c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff ff21 	bl	8001ee8 <__NVIC_DisableIRQ>
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b082      	sub	sp, #8
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7ff ff96 	bl	8001fe8 <SysTick_Config>
 80020bc:	4603      	mov	r3, r0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d101      	bne.n	80020d8 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e04f      	b.n	8002178 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d008      	beq.n	80020f6 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2204      	movs	r2, #4
 80020e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e040      	b.n	8002178 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 020e 	bic.w	r2, r2, #14
 8002104:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002110:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002114:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 0201 	bic.w	r2, r2, #1
 8002124:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800212a:	f003 021c 	and.w	r2, r3, #28
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002132:	2101      	movs	r1, #1
 8002134:	fa01 f202 	lsl.w	r2, r1, r2
 8002138:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002142:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00c      	beq.n	8002166 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002156:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800215a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002164:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	bc80      	pop	{r7}
 8002180:	4770      	bx	lr

08002182 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b084      	sub	sp, #16
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800218a:	2300      	movs	r3, #0
 800218c:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d005      	beq.n	80021a6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2204      	movs	r2, #4
 800219e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	73fb      	strb	r3, [r7, #15]
 80021a4:	e047      	b.n	8002236 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 020e 	bic.w	r2, r2, #14
 80021b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 0201 	bic.w	r2, r2, #1
 80021c4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021da:	f003 021c 	and.w	r2, r3, #28
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e2:	2101      	movs	r1, #1
 80021e4:	fa01 f202 	lsl.w	r2, r1, r2
 80021e8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80021f2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00c      	beq.n	8002216 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002206:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800220a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002214:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	4798      	blx	r3
    }
  }
  return status;
 8002236:	7bfb      	ldrb	r3, [r7, #15]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002240:	b480      	push	{r7}
 8002242:	b087      	sub	sp, #28
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800224e:	e140      	b.n	80024d2 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	2101      	movs	r1, #1
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	fa01 f303 	lsl.w	r3, r1, r3
 800225c:	4013      	ands	r3, r2
 800225e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 8132 	beq.w	80024cc <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 0303 	and.w	r3, r3, #3
 8002270:	2b01      	cmp	r3, #1
 8002272:	d005      	beq.n	8002280 <HAL_GPIO_Init+0x40>
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 0303 	and.w	r3, r3, #3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d130      	bne.n	80022e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	2203      	movs	r2, #3
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	4013      	ands	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	68da      	ldr	r2, [r3, #12]
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022b6:	2201      	movs	r2, #1
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43db      	mvns	r3, r3
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	4013      	ands	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	091b      	lsrs	r3, r3, #4
 80022cc:	f003 0201 	and.w	r2, r3, #1
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	4313      	orrs	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f003 0303 	and.w	r3, r3, #3
 80022ea:	2b03      	cmp	r3, #3
 80022ec:	d017      	beq.n	800231e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	2203      	movs	r2, #3
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4013      	ands	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	4313      	orrs	r3, r2
 8002316:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d123      	bne.n	8002372 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	08da      	lsrs	r2, r3, #3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3208      	adds	r2, #8
 8002332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002336:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	220f      	movs	r2, #15
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43db      	mvns	r3, r3
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	4013      	ands	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	691a      	ldr	r2, [r3, #16]
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	4313      	orrs	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	08da      	lsrs	r2, r3, #3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3208      	adds	r2, #8
 800236c:	6939      	ldr	r1, [r7, #16]
 800236e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	2203      	movs	r2, #3
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43db      	mvns	r3, r3
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	4013      	ands	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f003 0203 	and.w	r2, r3, #3
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	4313      	orrs	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 808c 	beq.w	80024cc <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80023b4:	4a4e      	ldr	r2, [pc, #312]	@ (80024f0 <HAL_GPIO_Init+0x2b0>)
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	089b      	lsrs	r3, r3, #2
 80023ba:	3302      	adds	r3, #2
 80023bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f003 0303 	and.w	r3, r3, #3
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	2207      	movs	r2, #7
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4013      	ands	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80023de:	d00d      	beq.n	80023fc <HAL_GPIO_Init+0x1bc>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a44      	ldr	r2, [pc, #272]	@ (80024f4 <HAL_GPIO_Init+0x2b4>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d007      	beq.n	80023f8 <HAL_GPIO_Init+0x1b8>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a43      	ldr	r2, [pc, #268]	@ (80024f8 <HAL_GPIO_Init+0x2b8>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d101      	bne.n	80023f4 <HAL_GPIO_Init+0x1b4>
 80023f0:	2302      	movs	r3, #2
 80023f2:	e004      	b.n	80023fe <HAL_GPIO_Init+0x1be>
 80023f4:	2307      	movs	r3, #7
 80023f6:	e002      	b.n	80023fe <HAL_GPIO_Init+0x1be>
 80023f8:	2301      	movs	r3, #1
 80023fa:	e000      	b.n	80023fe <HAL_GPIO_Init+0x1be>
 80023fc:	2300      	movs	r3, #0
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	f002 0203 	and.w	r2, r2, #3
 8002404:	0092      	lsls	r2, r2, #2
 8002406:	4093      	lsls	r3, r2
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	4313      	orrs	r3, r2
 800240c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800240e:	4938      	ldr	r1, [pc, #224]	@ (80024f0 <HAL_GPIO_Init+0x2b0>)
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	089b      	lsrs	r3, r3, #2
 8002414:	3302      	adds	r3, #2
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800241c:	4b37      	ldr	r3, [pc, #220]	@ (80024fc <HAL_GPIO_Init+0x2bc>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	43db      	mvns	r3, r3
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	4013      	ands	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d003      	beq.n	8002440 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	4313      	orrs	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002440:	4a2e      	ldr	r2, [pc, #184]	@ (80024fc <HAL_GPIO_Init+0x2bc>)
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002446:	4b2d      	ldr	r3, [pc, #180]	@ (80024fc <HAL_GPIO_Init+0x2bc>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	43db      	mvns	r3, r3
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	4013      	ands	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	4313      	orrs	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800246a:	4a24      	ldr	r2, [pc, #144]	@ (80024fc <HAL_GPIO_Init+0x2bc>)
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002470:	4b22      	ldr	r3, [pc, #136]	@ (80024fc <HAL_GPIO_Init+0x2bc>)
 8002472:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002476:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	43db      	mvns	r3, r3
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	4013      	ands	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4313      	orrs	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002496:	4a19      	ldr	r2, [pc, #100]	@ (80024fc <HAL_GPIO_Init+0x2bc>)
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800249e:	4b17      	ldr	r3, [pc, #92]	@ (80024fc <HAL_GPIO_Init+0x2bc>)
 80024a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024a4:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	43db      	mvns	r3, r3
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	4013      	ands	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80024c4:	4a0d      	ldr	r2, [pc, #52]	@ (80024fc <HAL_GPIO_Init+0x2bc>)
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	3301      	adds	r3, #1
 80024d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	fa22 f303 	lsr.w	r3, r2, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f47f aeb7 	bne.w	8002250 <HAL_GPIO_Init+0x10>
  }
}
 80024e2:	bf00      	nop
 80024e4:	bf00      	nop
 80024e6:	371c      	adds	r7, #28
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bc80      	pop	{r7}
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	40010000 	.word	0x40010000
 80024f4:	48000400 	.word	0x48000400
 80024f8:	48000800 	.word	0x48000800
 80024fc:	58000800 	.word	0x58000800

08002500 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	460b      	mov	r3, r1
 800250a:	807b      	strh	r3, [r7, #2]
 800250c:	4613      	mov	r3, r2
 800250e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002510:	787b      	ldrb	r3, [r7, #1]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002516:	887a      	ldrh	r2, [r7, #2]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800251c:	e002      	b.n	8002524 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800251e:	887a      	ldrh	r2, [r7, #2]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr
	...

08002530 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002534:	4b04      	ldr	r3, [pc, #16]	@ (8002548 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a03      	ldr	r2, [pc, #12]	@ (8002548 <HAL_PWR_EnableBkUpAccess+0x18>)
 800253a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800253e:	6013      	str	r3, [r2, #0]
}
 8002540:	bf00      	nop
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr
 8002548:	58000400 	.word	0x58000400

0800254c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002550:	4b03      	ldr	r3, [pc, #12]	@ (8002560 <HAL_PWREx_GetVoltageRange+0x14>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002558:	4618      	mov	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr
 8002560:	58000400 	.word	0x58000400

08002564 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002568:	4b06      	ldr	r3, [pc, #24]	@ (8002584 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002570:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002574:	d101      	bne.n	800257a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002576:	2301      	movs	r3, #1
 8002578:	e000      	b.n	800257c <LL_PWR_IsEnabledBkUpAccess+0x18>
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr
 8002584:	58000400 	.word	0x58000400

08002588 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800258c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002596:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800259a:	6013      	str	r3, [r2, #0]
}
 800259c:	bf00      	nop
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr

080025a4 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80025a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025b2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80025b6:	6013      	str	r3, [r2, #0]
}
 80025b8:	bf00      	nop
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr

080025c0 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80025c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80025d2:	d101      	bne.n	80025d8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80025d4:	2301      	movs	r3, #1
 80025d6:	e000      	b.n	80025da <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr

080025e2 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80025e2:	b480      	push	{r7}
 80025e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80025e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025f4:	6013      	str	r3, [r2, #0]
}
 80025f6:	bf00      	nop
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bc80      	pop	{r7}
 80025fc:	4770      	bx	lr

080025fe <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80025fe:	b480      	push	{r7}
 8002600:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002602:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800260c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002610:	6013      	str	r3, [r2, #0]
}
 8002612:	bf00      	nop
 8002614:	46bd      	mov	sp, r7
 8002616:	bc80      	pop	{r7}
 8002618:	4770      	bx	lr

0800261a <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800261a:	b480      	push	{r7}
 800261c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800261e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002628:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800262c:	d101      	bne.n	8002632 <LL_RCC_HSE_IsReady+0x18>
 800262e:	2301      	movs	r3, #1
 8002630:	e000      	b.n	8002634 <LL_RCC_HSE_IsReady+0x1a>
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr

0800263c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002640:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800264a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800264e:	6013      	str	r3, [r2, #0]
}
 8002650:	bf00      	nop
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr

08002658 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800265c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002666:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800266a:	6013      	str	r3, [r2, #0]
}
 800266c:	bf00      	nop
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr

08002674 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002678:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002682:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002686:	d101      	bne.n	800268c <LL_RCC_HSI_IsReady+0x18>
 8002688:	2301      	movs	r3, #1
 800268a:	e000      	b.n	800268e <LL_RCC_HSI_IsReady+0x1a>
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	46bd      	mov	sp, r7
 8002692:	bc80      	pop	{r7}
 8002694:	4770      	bx	lr

08002696 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002696:	b480      	push	{r7}
 8002698:	b083      	sub	sp, #12
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800269e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	061b      	lsls	r3, r3, #24
 80026ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80026b0:	4313      	orrs	r3, r2
 80026b2:	604b      	str	r3, [r1, #4]
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bc80      	pop	{r7}
 80026bc:	4770      	bx	lr

080026be <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80026be:	b480      	push	{r7}
 80026c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80026c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d101      	bne.n	80026d6 <LL_RCC_LSE_IsReady+0x18>
 80026d2:	2301      	movs	r3, #1
 80026d4:	e000      	b.n	80026d8 <LL_RCC_LSE_IsReady+0x1a>
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr

080026e0 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80026e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80026f8:	bf00      	nop
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr

08002700 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002704:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002708:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800270c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002710:	f023 0301 	bic.w	r3, r3, #1
 8002714:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002718:	bf00      	nop
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr

08002720 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002724:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002728:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b02      	cmp	r3, #2
 8002732:	d101      	bne.n	8002738 <LL_RCC_LSI_IsReady+0x18>
 8002734:	2301      	movs	r3, #1
 8002736:	e000      	b.n	800273a <LL_RCC_LSI_IsReady+0x1a>
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr

08002742 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002742:	b480      	push	{r7}
 8002744:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002746:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002750:	f043 0301 	orr.w	r3, r3, #1
 8002754:	6013      	str	r3, [r2, #0]
}
 8002756:	bf00      	nop
 8002758:	46bd      	mov	sp, r7
 800275a:	bc80      	pop	{r7}
 800275c:	4770      	bx	lr

0800275e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800275e:	b480      	push	{r7}
 8002760:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002762:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800276c:	f023 0301 	bic.w	r3, r3, #1
 8002770:	6013      	str	r3, [r2, #0]
}
 8002772:	bf00      	nop
 8002774:	46bd      	mov	sp, r7
 8002776:	bc80      	pop	{r7}
 8002778:	4770      	bx	lr

0800277a <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800277a:	b480      	push	{r7}
 800277c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800277e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b02      	cmp	r3, #2
 800278a:	d101      	bne.n	8002790 <LL_RCC_MSI_IsReady+0x16>
 800278c:	2301      	movs	r3, #1
 800278e:	e000      	b.n	8002792 <LL_RCC_MSI_IsReady+0x18>
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	46bd      	mov	sp, r7
 8002796:	bc80      	pop	{r7}
 8002798:	4770      	bx	lr

0800279a <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800279a:	b480      	push	{r7}
 800279c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800279e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0308 	and.w	r3, r3, #8
 80027a8:	2b08      	cmp	r3, #8
 80027aa:	d101      	bne.n	80027b0 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80027ac:	2301      	movs	r3, #1
 80027ae:	e000      	b.n	80027b2 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr

080027ba <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80027ba:	b480      	push	{r7}
 80027bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80027be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr

080027d0 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80027d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027dc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr

080027e8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80027f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	021b      	lsls	r3, r3, #8
 80027fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002802:	4313      	orrs	r3, r2
 8002804:	604b      	str	r3, [r1, #4]
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr

08002810 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002818:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f023 0203 	bic.w	r2, r3, #3
 8002822:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4313      	orrs	r3, r2
 800282a:	608b      	str	r3, [r1, #8]
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	bc80      	pop	{r7}
 8002834:	4770      	bx	lr

08002836 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002836:	b480      	push	{r7}
 8002838:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800283a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f003 030c 	and.w	r3, r3, #12
}
 8002844:	4618      	mov	r0, r3
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr

0800284c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002854:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800285e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4313      	orrs	r3, r2
 8002866:	608b      	str	r3, [r1, #8]
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	bc80      	pop	{r7}
 8002870:	4770      	bx	lr

08002872 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800287a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800287e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002882:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002886:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4313      	orrs	r3, r2
 800288e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr

0800289c <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80028a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028a8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80028ac:	f023 020f 	bic.w	r2, r3, #15
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	091b      	lsrs	r3, r3, #4
 80028b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028b8:	4313      	orrs	r3, r2
 80028ba:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr

080028c8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80028d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	608b      	str	r3, [r1, #8]
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr

080028ee <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80028f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002900:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4313      	orrs	r3, r2
 8002908:	608b      	str	r3, [r1, #8]
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr

08002914 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002918:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002922:	4618      	mov	r0, r3
 8002924:	46bd      	mov	sp, r7
 8002926:	bc80      	pop	{r7}
 8002928:	4770      	bx	lr

0800292a <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 800292a:	b480      	push	{r7}
 800292c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800292e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002932:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800293c:	4618      	mov	r0, r3
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr

08002944 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002948:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002952:	4618      	mov	r0, r3
 8002954:	46bd      	mov	sp, r7
 8002956:	bc80      	pop	{r7}
 8002958:	4770      	bx	lr

0800295a <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800295a:	b480      	push	{r7}
 800295c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800295e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002968:	4618      	mov	r0, r3
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr

08002970 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002974:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800297e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002982:	6013      	str	r3, [r2, #0]
}
 8002984:	bf00      	nop
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr

0800298c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002990:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800299a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800299e:	6013      	str	r3, [r2, #0]
}
 80029a0:	bf00      	nop
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr

080029a8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80029ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80029ba:	d101      	bne.n	80029c0 <LL_RCC_PLL_IsReady+0x18>
 80029bc:	2301      	movs	r3, #1
 80029be:	e000      	b.n	80029c2 <LL_RCC_PLL_IsReady+0x1a>
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr

080029ca <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80029ca:	b480      	push	{r7}
 80029cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80029ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	0a1b      	lsrs	r3, r3, #8
 80029d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80029da:	4618      	mov	r0, r3
 80029dc:	46bd      	mov	sp, r7
 80029de:	bc80      	pop	{r7}
 80029e0:	4770      	bx	lr

080029e2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80029e2:	b480      	push	{r7}
 80029e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80029e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr

080029f8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80029fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr

08002a0e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002a12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	f003 0303 	and.w	r3, r3, #3
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr

08002a24 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002a28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a36:	d101      	bne.n	8002a3c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e000      	b.n	8002a3e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bc80      	pop	{r7}
 8002a44:	4770      	bx	lr

08002a46 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002a46:	b480      	push	{r7}
 8002a48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002a4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a4e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002a5a:	d101      	bne.n	8002a60 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e000      	b.n	8002a62 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr

08002a6a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002a6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a72:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002a76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a7e:	d101      	bne.n	8002a84 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002a80:	2301      	movs	r3, #1
 8002a82:	e000      	b.n	8002a86 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bc80      	pop	{r7}
 8002a8c:	4770      	bx	lr

08002a8e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002a92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002aa0:	d101      	bne.n	8002aa6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr

08002ab0 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002ab4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002abe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002ac2:	d101      	bne.n	8002ac8 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e000      	b.n	8002aca <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr
	...

08002ad4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b088      	sub	sp, #32
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e36f      	b.n	80031c6 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ae6:	f7ff fea6 	bl	8002836 <LL_RCC_GetSysClkSource>
 8002aea:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002aec:	f7ff ff8f 	bl	8002a0e <LL_RCC_PLL_GetMainSource>
 8002af0:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0320 	and.w	r3, r3, #32
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 80c4 	beq.w	8002c88 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d005      	beq.n	8002b12 <HAL_RCC_OscConfig+0x3e>
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	2b0c      	cmp	r3, #12
 8002b0a:	d176      	bne.n	8002bfa <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d173      	bne.n	8002bfa <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e353      	b.n	80031c6 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0308 	and.w	r3, r3, #8
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d005      	beq.n	8002b3c <HAL_RCC_OscConfig+0x68>
 8002b30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b3a:	e006      	b.n	8002b4a <HAL_RCC_OscConfig+0x76>
 8002b3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b44:	091b      	lsrs	r3, r3, #4
 8002b46:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d222      	bcs.n	8002b94 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 fd5a 	bl	800360c <RCC_SetFlashLatencyFromMSIRange>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e331      	b.n	80031c6 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b6c:	f043 0308 	orr.w	r3, r3, #8
 8002b70:	6013      	str	r3, [r2, #0]
 8002b72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b80:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b84:	4313      	orrs	r3, r2
 8002b86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff fe2b 	bl	80027e8 <LL_RCC_MSI_SetCalibTrimming>
 8002b92:	e021      	b.n	8002bd8 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b9e:	f043 0308 	orr.w	r3, r3, #8
 8002ba2:	6013      	str	r3, [r2, #0]
 8002ba4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff fe12 	bl	80027e8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f000 fd1f 	bl	800360c <RCC_SetFlashLatencyFromMSIRange>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e2f6      	b.n	80031c6 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002bd8:	f000 fce0 	bl	800359c <HAL_RCC_GetHCLKFreq>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	4aa7      	ldr	r2, [pc, #668]	@ (8002e7c <HAL_RCC_OscConfig+0x3a8>)
 8002be0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002be2:	4ba7      	ldr	r3, [pc, #668]	@ (8002e80 <HAL_RCC_OscConfig+0x3ac>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff f8b6 	bl	8001d58 <HAL_InitTick>
 8002bec:	4603      	mov	r3, r0
 8002bee:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002bf0:	7cfb      	ldrb	r3, [r7, #19]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d047      	beq.n	8002c86 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002bf6:	7cfb      	ldrb	r3, [r7, #19]
 8002bf8:	e2e5      	b.n	80031c6 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d02c      	beq.n	8002c5c <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c02:	f7ff fd9e 	bl	8002742 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c06:	f7ff f8f3 	bl	8001df0 <HAL_GetTick>
 8002c0a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002c0c:	e008      	b.n	8002c20 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c0e:	f7ff f8ef 	bl	8001df0 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e2d2      	b.n	80031c6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002c20:	f7ff fdab 	bl	800277a <LL_RCC_MSI_IsReady>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0f1      	beq.n	8002c0e <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c34:	f043 0308 	orr.w	r3, r3, #8
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff fdc7 	bl	80027e8 <LL_RCC_MSI_SetCalibTrimming>
 8002c5a:	e015      	b.n	8002c88 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c5c:	f7ff fd7f 	bl	800275e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c60:	f7ff f8c6 	bl	8001df0 <HAL_GetTick>
 8002c64:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c68:	f7ff f8c2 	bl	8001df0 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e2a5      	b.n	80031c6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002c7a:	f7ff fd7e 	bl	800277a <LL_RCC_MSI_IsReady>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1f1      	bne.n	8002c68 <HAL_RCC_OscConfig+0x194>
 8002c84:	e000      	b.n	8002c88 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002c86:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d058      	beq.n	8002d46 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	2b08      	cmp	r3, #8
 8002c98:	d005      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x1d2>
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	2b0c      	cmp	r3, #12
 8002c9e:	d108      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	2b03      	cmp	r3, #3
 8002ca4:	d105      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d14b      	bne.n	8002d46 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e289      	b.n	80031c6 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002cb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cd0:	d102      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x204>
 8002cd2:	f7ff fc86 	bl	80025e2 <LL_RCC_HSE_Enable>
 8002cd6:	e00d      	b.n	8002cf4 <HAL_RCC_OscConfig+0x220>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8002ce0:	d104      	bne.n	8002cec <HAL_RCC_OscConfig+0x218>
 8002ce2:	f7ff fc51 	bl	8002588 <LL_RCC_HSE_EnableTcxo>
 8002ce6:	f7ff fc7c 	bl	80025e2 <LL_RCC_HSE_Enable>
 8002cea:	e003      	b.n	8002cf4 <HAL_RCC_OscConfig+0x220>
 8002cec:	f7ff fc87 	bl	80025fe <LL_RCC_HSE_Disable>
 8002cf0:	f7ff fc58 	bl	80025a4 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d012      	beq.n	8002d22 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfc:	f7ff f878 	bl	8001df0 <HAL_GetTick>
 8002d00:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d04:	f7ff f874 	bl	8001df0 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b64      	cmp	r3, #100	@ 0x64
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e257      	b.n	80031c6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002d16:	f7ff fc80 	bl	800261a <LL_RCC_HSE_IsReady>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0f1      	beq.n	8002d04 <HAL_RCC_OscConfig+0x230>
 8002d20:	e011      	b.n	8002d46 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d22:	f7ff f865 	bl	8001df0 <HAL_GetTick>
 8002d26:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002d28:	e008      	b.n	8002d3c <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d2a:	f7ff f861 	bl	8001df0 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b64      	cmp	r3, #100	@ 0x64
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e244      	b.n	80031c6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002d3c:	f7ff fc6d 	bl	800261a <LL_RCC_HSE_IsReady>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1f1      	bne.n	8002d2a <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d046      	beq.n	8002de0 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	2b04      	cmp	r3, #4
 8002d56:	d005      	beq.n	8002d64 <HAL_RCC_OscConfig+0x290>
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	2b0c      	cmp	r3, #12
 8002d5c:	d10e      	bne.n	8002d7c <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d10b      	bne.n	8002d7c <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d101      	bne.n	8002d70 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e22a      	b.n	80031c6 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff fc8e 	bl	8002696 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002d7a:	e031      	b.n	8002de0 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d019      	beq.n	8002db8 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d84:	f7ff fc5a 	bl	800263c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d88:	f7ff f832 	bl	8001df0 <HAL_GetTick>
 8002d8c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d90:	f7ff f82e 	bl	8001df0 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e211      	b.n	80031c6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002da2:	f7ff fc67 	bl	8002674 <LL_RCC_HSI_IsReady>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0f1      	beq.n	8002d90 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff fc70 	bl	8002696 <LL_RCC_HSI_SetCalibTrimming>
 8002db6:	e013      	b.n	8002de0 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002db8:	f7ff fc4e 	bl	8002658 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dbc:	f7ff f818 	bl	8001df0 <HAL_GetTick>
 8002dc0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dc4:	f7ff f814 	bl	8001df0 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e1f7      	b.n	80031c6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002dd6:	f7ff fc4d 	bl	8002674 <LL_RCC_HSI_IsReady>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1f1      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0308 	and.w	r3, r3, #8
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d06e      	beq.n	8002eca <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d056      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002df4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002df8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dfc:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69da      	ldr	r2, [r3, #28]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f003 0310 	and.w	r3, r3, #16
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d031      	beq.n	8002e70 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d006      	beq.n	8002e24 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e1d0      	b.n	80031c6 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d013      	beq.n	8002e56 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8002e2e:	f7ff fc67 	bl	8002700 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e32:	f7fe ffdd 	bl	8001df0 <HAL_GetTick>
 8002e36:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002e38:	e008      	b.n	8002e4c <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e3a:	f7fe ffd9 	bl	8001df0 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b11      	cmp	r3, #17
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e1bc      	b.n	80031c6 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002e4c:	f7ff fc68 	bl	8002720 <LL_RCC_LSI_IsReady>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f1      	bne.n	8002e3a <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002e56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e5e:	f023 0210 	bic.w	r2, r3, #16
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e70:	f7ff fc36 	bl	80026e0 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e74:	f7fe ffbc 	bl	8001df0 <HAL_GetTick>
 8002e78:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002e7a:	e00c      	b.n	8002e96 <HAL_RCC_OscConfig+0x3c2>
 8002e7c:	20000104 	.word	0x20000104
 8002e80:	20000114 	.word	0x20000114
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e84:	f7fe ffb4 	bl	8001df0 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b11      	cmp	r3, #17
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e197      	b.n	80031c6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002e96:	f7ff fc43 	bl	8002720 <LL_RCC_LSI_IsReady>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0f1      	beq.n	8002e84 <HAL_RCC_OscConfig+0x3b0>
 8002ea0:	e013      	b.n	8002eca <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ea2:	f7ff fc2d 	bl	8002700 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea6:	f7fe ffa3 	bl	8001df0 <HAL_GetTick>
 8002eaa:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002eac:	e008      	b.n	8002ec0 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eae:	f7fe ff9f 	bl	8001df0 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b11      	cmp	r3, #17
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e182      	b.n	80031c6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002ec0:	f7ff fc2e 	bl	8002720 <LL_RCC_LSI_IsReady>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1f1      	bne.n	8002eae <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0304 	and.w	r3, r3, #4
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 80d8 	beq.w	8003088 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002ed8:	f7ff fb44 	bl	8002564 <LL_PWR_IsEnabledBkUpAccess>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d113      	bne.n	8002f0a <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002ee2:	f7ff fb25 	bl	8002530 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ee6:	f7fe ff83 	bl	8001df0 <HAL_GetTick>
 8002eea:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eee:	f7fe ff7f 	bl	8001df0 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e162      	b.n	80031c6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002f00:	f7ff fb30 	bl	8002564 <LL_PWR_IsEnabledBkUpAccess>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0f1      	beq.n	8002eee <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d07b      	beq.n	800300a <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	2b85      	cmp	r3, #133	@ 0x85
 8002f18:	d003      	beq.n	8002f22 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	2b05      	cmp	r3, #5
 8002f20:	d109      	bne.n	8002f36 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002f22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f2a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f2e:	f043 0304 	orr.w	r3, r3, #4
 8002f32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f36:	f7fe ff5b 	bl	8001df0 <HAL_GetTick>
 8002f3a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f48:	f043 0301 	orr.w	r3, r3, #1
 8002f4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002f50:	e00a      	b.n	8002f68 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f52:	f7fe ff4d 	bl	8001df0 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e12e      	b.n	80031c6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002f68:	f7ff fba9 	bl	80026be <LL_RCC_LSE_IsReady>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d0ef      	beq.n	8002f52 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	2b81      	cmp	r3, #129	@ 0x81
 8002f78:	d003      	beq.n	8002f82 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	2b85      	cmp	r3, #133	@ 0x85
 8002f80:	d121      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f82:	f7fe ff35 	bl	8001df0 <HAL_GetTick>
 8002f86:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002f88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f90:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002f9c:	e00a      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f9e:	f7fe ff27 	bl	8001df0 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e108      	b.n	80031c6 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002fb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0ec      	beq.n	8002f9e <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002fc4:	e060      	b.n	8003088 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc6:	f7fe ff13 	bl	8001df0 <HAL_GetTick>
 8002fca:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002fcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fd4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002fd8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fdc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002fe0:	e00a      	b.n	8002ff8 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fe2:	f7fe ff05 	bl	8001df0 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e0e6      	b.n	80031c6 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002ff8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003000:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1ec      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x50e>
 8003008:	e03e      	b.n	8003088 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800300a:	f7fe fef1 	bl	8001df0 <HAL_GetTick>
 800300e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003010:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003014:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003018:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800301c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003020:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003024:	e00a      	b.n	800303c <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003026:	f7fe fee3 	bl	8001df0 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003034:	4293      	cmp	r3, r2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e0c4      	b.n	80031c6 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800303c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003040:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003044:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1ec      	bne.n	8003026 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800304c:	f7fe fed0 	bl	8001df0 <HAL_GetTick>
 8003050:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003052:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800305a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800305e:	f023 0301 	bic.w	r3, r3, #1
 8003062:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003066:	e00a      	b.n	800307e <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003068:	f7fe fec2 	bl	8001df0 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003076:	4293      	cmp	r3, r2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e0a3      	b.n	80031c6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800307e:	f7ff fb1e 	bl	80026be <LL_RCC_LSE_IsReady>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1ef      	bne.n	8003068 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800308c:	2b00      	cmp	r3, #0
 800308e:	f000 8099 	beq.w	80031c4 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	2b0c      	cmp	r3, #12
 8003096:	d06c      	beq.n	8003172 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800309c:	2b02      	cmp	r3, #2
 800309e:	d14b      	bne.n	8003138 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a0:	f7ff fc74 	bl	800298c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a4:	f7fe fea4 	bl	8001df0 <HAL_GetTick>
 80030a8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ac:	f7fe fea0 	bl	8001df0 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b0a      	cmp	r3, #10
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e083      	b.n	80031c6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80030be:	f7ff fc73 	bl	80029a8 <LL_RCC_PLL_IsReady>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1f1      	bne.n	80030ac <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	4b40      	ldr	r3, [pc, #256]	@ (80031d0 <HAL_RCC_OscConfig+0x6fc>)
 80030d0:	4013      	ands	r3, r2
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80030da:	4311      	orrs	r1, r2
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80030e0:	0212      	lsls	r2, r2, #8
 80030e2:	4311      	orrs	r1, r2
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80030e8:	4311      	orrs	r1, r2
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80030ee:	4311      	orrs	r1, r2
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80030f4:	430a      	orrs	r2, r1
 80030f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030fa:	4313      	orrs	r3, r2
 80030fc:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030fe:	f7ff fc37 	bl	8002970 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003102:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800310c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003110:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003112:	f7fe fe6d 	bl	8001df0 <HAL_GetTick>
 8003116:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8003118:	e008      	b.n	800312c <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800311a:	f7fe fe69 	bl	8001df0 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b0a      	cmp	r3, #10
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e04c      	b.n	80031c6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 800312c:	f7ff fc3c 	bl	80029a8 <LL_RCC_PLL_IsReady>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0f1      	beq.n	800311a <HAL_RCC_OscConfig+0x646>
 8003136:	e045      	b.n	80031c4 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003138:	f7ff fc28 	bl	800298c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313c:	f7fe fe58 	bl	8001df0 <HAL_GetTick>
 8003140:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003144:	f7fe fe54 	bl	8001df0 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b0a      	cmp	r3, #10
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e037      	b.n	80031c6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003156:	f7ff fc27 	bl	80029a8 <LL_RCC_PLL_IsReady>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1f1      	bne.n	8003144 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003160:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800316a:	4b1a      	ldr	r3, [pc, #104]	@ (80031d4 <HAL_RCC_OscConfig+0x700>)
 800316c:	4013      	ands	r3, r2
 800316e:	60cb      	str	r3, [r1, #12]
 8003170:	e028      	b.n	80031c4 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003176:	2b01      	cmp	r3, #1
 8003178:	d101      	bne.n	800317e <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e023      	b.n	80031c6 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800317e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	f003 0203 	and.w	r2, r3, #3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003190:	429a      	cmp	r2, r3
 8003192:	d115      	bne.n	80031c0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800319e:	429a      	cmp	r2, r3
 80031a0:	d10e      	bne.n	80031c0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ac:	021b      	lsls	r3, r3, #8
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d106      	bne.n	80031c0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031bc:	429a      	cmp	r2, r3
 80031be:	d001      	beq.n	80031c4 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e000      	b.n	80031c6 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3720      	adds	r7, #32
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	11c1808c 	.word	0x11c1808c
 80031d4:	eefefffc 	.word	0xeefefffc

080031d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e12c      	b.n	8003446 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031ec:	4b98      	ldr	r3, [pc, #608]	@ (8003450 <HAL_RCC_ClockConfig+0x278>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d91b      	bls.n	8003232 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031fa:	4b95      	ldr	r3, [pc, #596]	@ (8003450 <HAL_RCC_ClockConfig+0x278>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f023 0207 	bic.w	r2, r3, #7
 8003202:	4993      	ldr	r1, [pc, #588]	@ (8003450 <HAL_RCC_ClockConfig+0x278>)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	4313      	orrs	r3, r2
 8003208:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800320a:	f7fe fdf1 	bl	8001df0 <HAL_GetTick>
 800320e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003210:	e008      	b.n	8003224 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003212:	f7fe fded 	bl	8001df0 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e110      	b.n	8003446 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003224:	4b8a      	ldr	r3, [pc, #552]	@ (8003450 <HAL_RCC_ClockConfig+0x278>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	429a      	cmp	r2, r3
 8003230:	d1ef      	bne.n	8003212 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d016      	beq.n	800326c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff fb02 	bl	800284c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003248:	f7fe fdd2 	bl	8001df0 <HAL_GetTick>
 800324c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800324e:	e008      	b.n	8003262 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003250:	f7fe fdce 	bl	8001df0 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e0f1      	b.n	8003446 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003262:	f7ff fbdf 	bl	8002a24 <LL_RCC_IsActiveFlag_HPRE>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d0f1      	beq.n	8003250 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0320 	and.w	r3, r3, #32
 8003274:	2b00      	cmp	r3, #0
 8003276:	d016      	beq.n	80032a6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff faf8 	bl	8002872 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003282:	f7fe fdb5 	bl	8001df0 <HAL_GetTick>
 8003286:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003288:	e008      	b.n	800329c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800328a:	f7fe fdb1 	bl	8001df0 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d901      	bls.n	800329c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e0d4      	b.n	8003446 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800329c:	f7ff fbd3 	bl	8002a46 <LL_RCC_IsActiveFlag_C2HPRE>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0f1      	beq.n	800328a <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d016      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff faf0 	bl	800289c <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80032bc:	f7fe fd98 	bl	8001df0 <HAL_GetTick>
 80032c0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80032c4:	f7fe fd94 	bl	8001df0 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e0b7      	b.n	8003446 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80032d6:	f7ff fbc8 	bl	8002a6a <LL_RCC_IsActiveFlag_SHDHPRE>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f1      	beq.n	80032c4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d016      	beq.n	800331a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff fae9 	bl	80028c8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80032f6:	f7fe fd7b 	bl	8001df0 <HAL_GetTick>
 80032fa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80032fc:	e008      	b.n	8003310 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80032fe:	f7fe fd77 	bl	8001df0 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d901      	bls.n	8003310 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e09a      	b.n	8003446 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003310:	f7ff fbbd 	bl	8002a8e <LL_RCC_IsActiveFlag_PPRE1>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0f1      	beq.n	80032fe <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0308 	and.w	r3, r3, #8
 8003322:	2b00      	cmp	r3, #0
 8003324:	d017      	beq.n	8003356 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	4618      	mov	r0, r3
 800332e:	f7ff fade 	bl	80028ee <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003332:	f7fe fd5d 	bl	8001df0 <HAL_GetTick>
 8003336:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003338:	e008      	b.n	800334c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800333a:	f7fe fd59 	bl	8001df0 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d901      	bls.n	800334c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e07c      	b.n	8003446 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800334c:	f7ff fbb0 	bl	8002ab0 <LL_RCC_IsActiveFlag_PPRE2>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d0f1      	beq.n	800333a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d043      	beq.n	80033ea <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2b02      	cmp	r3, #2
 8003368:	d106      	bne.n	8003378 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800336a:	f7ff f956 	bl	800261a <LL_RCC_HSE_IsReady>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d11e      	bne.n	80033b2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e066      	b.n	8003446 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	2b03      	cmp	r3, #3
 800337e:	d106      	bne.n	800338e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003380:	f7ff fb12 	bl	80029a8 <LL_RCC_PLL_IsReady>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d113      	bne.n	80033b2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e05b      	b.n	8003446 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d106      	bne.n	80033a4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003396:	f7ff f9f0 	bl	800277a <LL_RCC_MSI_IsReady>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d108      	bne.n	80033b2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e050      	b.n	8003446 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80033a4:	f7ff f966 	bl	8002674 <LL_RCC_HSI_IsReady>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e049      	b.n	8003446 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7ff fa2a 	bl	8002810 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033bc:	f7fe fd18 	bl	8001df0 <HAL_GetTick>
 80033c0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033c2:	e00a      	b.n	80033da <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c4:	f7fe fd14 	bl	8001df0 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e035      	b.n	8003446 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033da:	f7ff fa2c 	bl	8002836 <LL_RCC_GetSysClkSource>
 80033de:	4602      	mov	r2, r0
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d1ec      	bne.n	80033c4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033ea:	4b19      	ldr	r3, [pc, #100]	@ (8003450 <HAL_RCC_ClockConfig+0x278>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0307 	and.w	r3, r3, #7
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d21b      	bcs.n	8003430 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f8:	4b15      	ldr	r3, [pc, #84]	@ (8003450 <HAL_RCC_ClockConfig+0x278>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f023 0207 	bic.w	r2, r3, #7
 8003400:	4913      	ldr	r1, [pc, #76]	@ (8003450 <HAL_RCC_ClockConfig+0x278>)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	4313      	orrs	r3, r2
 8003406:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003408:	f7fe fcf2 	bl	8001df0 <HAL_GetTick>
 800340c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800340e:	e008      	b.n	8003422 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003410:	f7fe fcee 	bl	8001df0 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e011      	b.n	8003446 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003422:	4b0b      	ldr	r3, [pc, #44]	@ (8003450 <HAL_RCC_ClockConfig+0x278>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	429a      	cmp	r2, r3
 800342e:	d1ef      	bne.n	8003410 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003430:	f000 f8b4 	bl	800359c <HAL_RCC_GetHCLKFreq>
 8003434:	4603      	mov	r3, r0
 8003436:	4a07      	ldr	r2, [pc, #28]	@ (8003454 <HAL_RCC_ClockConfig+0x27c>)
 8003438:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800343a:	4b07      	ldr	r3, [pc, #28]	@ (8003458 <HAL_RCC_ClockConfig+0x280>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f7fe fc8a 	bl	8001d58 <HAL_InitTick>
 8003444:	4603      	mov	r3, r0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	58004000 	.word	0x58004000
 8003454:	20000104 	.word	0x20000104
 8003458:	20000114 	.word	0x20000114

0800345c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800345c:	b590      	push	{r4, r7, lr}
 800345e:	b087      	sub	sp, #28
 8003460:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8003462:	2300      	movs	r3, #0
 8003464:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8003466:	2300      	movs	r3, #0
 8003468:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800346a:	f7ff f9e4 	bl	8002836 <LL_RCC_GetSysClkSource>
 800346e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003470:	f7ff facd 	bl	8002a0e <LL_RCC_PLL_GetMainSource>
 8003474:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d005      	beq.n	8003488 <HAL_RCC_GetSysClockFreq+0x2c>
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	2b0c      	cmp	r3, #12
 8003480:	d139      	bne.n	80034f6 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d136      	bne.n	80034f6 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003488:	f7ff f987 	bl	800279a <LL_RCC_MSI_IsEnabledRangeSelect>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d115      	bne.n	80034be <HAL_RCC_GetSysClockFreq+0x62>
 8003492:	f7ff f982 	bl	800279a <LL_RCC_MSI_IsEnabledRangeSelect>
 8003496:	4603      	mov	r3, r0
 8003498:	2b01      	cmp	r3, #1
 800349a:	d106      	bne.n	80034aa <HAL_RCC_GetSysClockFreq+0x4e>
 800349c:	f7ff f98d 	bl	80027ba <LL_RCC_MSI_GetRange>
 80034a0:	4603      	mov	r3, r0
 80034a2:	0a1b      	lsrs	r3, r3, #8
 80034a4:	f003 030f 	and.w	r3, r3, #15
 80034a8:	e005      	b.n	80034b6 <HAL_RCC_GetSysClockFreq+0x5a>
 80034aa:	f7ff f991 	bl	80027d0 <LL_RCC_MSI_GetRangeAfterStandby>
 80034ae:	4603      	mov	r3, r0
 80034b0:	0a1b      	lsrs	r3, r3, #8
 80034b2:	f003 030f 	and.w	r3, r3, #15
 80034b6:	4a36      	ldr	r2, [pc, #216]	@ (8003590 <HAL_RCC_GetSysClockFreq+0x134>)
 80034b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034bc:	e014      	b.n	80034e8 <HAL_RCC_GetSysClockFreq+0x8c>
 80034be:	f7ff f96c 	bl	800279a <LL_RCC_MSI_IsEnabledRangeSelect>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d106      	bne.n	80034d6 <HAL_RCC_GetSysClockFreq+0x7a>
 80034c8:	f7ff f977 	bl	80027ba <LL_RCC_MSI_GetRange>
 80034cc:	4603      	mov	r3, r0
 80034ce:	091b      	lsrs	r3, r3, #4
 80034d0:	f003 030f 	and.w	r3, r3, #15
 80034d4:	e005      	b.n	80034e2 <HAL_RCC_GetSysClockFreq+0x86>
 80034d6:	f7ff f97b 	bl	80027d0 <LL_RCC_MSI_GetRangeAfterStandby>
 80034da:	4603      	mov	r3, r0
 80034dc:	091b      	lsrs	r3, r3, #4
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	4a2b      	ldr	r2, [pc, #172]	@ (8003590 <HAL_RCC_GetSysClockFreq+0x134>)
 80034e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034e8:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d115      	bne.n	800351c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80034f4:	e012      	b.n	800351c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	2b04      	cmp	r3, #4
 80034fa:	d102      	bne.n	8003502 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034fc:	4b25      	ldr	r3, [pc, #148]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x138>)
 80034fe:	617b      	str	r3, [r7, #20]
 8003500:	e00c      	b.n	800351c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	2b08      	cmp	r3, #8
 8003506:	d109      	bne.n	800351c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003508:	f7ff f85a 	bl	80025c0 <LL_RCC_HSE_IsEnabledDiv2>
 800350c:	4603      	mov	r3, r0
 800350e:	2b01      	cmp	r3, #1
 8003510:	d102      	bne.n	8003518 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003512:	4b20      	ldr	r3, [pc, #128]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x138>)
 8003514:	617b      	str	r3, [r7, #20]
 8003516:	e001      	b.n	800351c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003518:	4b1f      	ldr	r3, [pc, #124]	@ (8003598 <HAL_RCC_GetSysClockFreq+0x13c>)
 800351a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800351c:	f7ff f98b 	bl	8002836 <LL_RCC_GetSysClkSource>
 8003520:	4603      	mov	r3, r0
 8003522:	2b0c      	cmp	r3, #12
 8003524:	d12f      	bne.n	8003586 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003526:	f7ff fa72 	bl	8002a0e <LL_RCC_PLL_GetMainSource>
 800352a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b02      	cmp	r3, #2
 8003530:	d003      	beq.n	800353a <HAL_RCC_GetSysClockFreq+0xde>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2b03      	cmp	r3, #3
 8003536:	d003      	beq.n	8003540 <HAL_RCC_GetSysClockFreq+0xe4>
 8003538:	e00d      	b.n	8003556 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800353a:	4b16      	ldr	r3, [pc, #88]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x138>)
 800353c:	60fb      	str	r3, [r7, #12]
        break;
 800353e:	e00d      	b.n	800355c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003540:	f7ff f83e 	bl	80025c0 <LL_RCC_HSE_IsEnabledDiv2>
 8003544:	4603      	mov	r3, r0
 8003546:	2b01      	cmp	r3, #1
 8003548:	d102      	bne.n	8003550 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800354a:	4b12      	ldr	r3, [pc, #72]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x138>)
 800354c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800354e:	e005      	b.n	800355c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003550:	4b11      	ldr	r3, [pc, #68]	@ (8003598 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003552:	60fb      	str	r3, [r7, #12]
        break;
 8003554:	e002      	b.n	800355c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	60fb      	str	r3, [r7, #12]
        break;
 800355a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800355c:	f7ff fa35 	bl	80029ca <LL_RCC_PLL_GetN>
 8003560:	4602      	mov	r2, r0
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	fb03 f402 	mul.w	r4, r3, r2
 8003568:	f7ff fa46 	bl	80029f8 <LL_RCC_PLL_GetDivider>
 800356c:	4603      	mov	r3, r0
 800356e:	091b      	lsrs	r3, r3, #4
 8003570:	3301      	adds	r3, #1
 8003572:	fbb4 f4f3 	udiv	r4, r4, r3
 8003576:	f7ff fa34 	bl	80029e2 <LL_RCC_PLL_GetR>
 800357a:	4603      	mov	r3, r0
 800357c:	0f5b      	lsrs	r3, r3, #29
 800357e:	3301      	adds	r3, #1
 8003580:	fbb4 f3f3 	udiv	r3, r4, r3
 8003584:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003586:	697b      	ldr	r3, [r7, #20]
}
 8003588:	4618      	mov	r0, r3
 800358a:	371c      	adds	r7, #28
 800358c:	46bd      	mov	sp, r7
 800358e:	bd90      	pop	{r4, r7, pc}
 8003590:	08007000 	.word	0x08007000
 8003594:	00f42400 	.word	0x00f42400
 8003598:	01e84800 	.word	0x01e84800

0800359c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800359c:	b598      	push	{r3, r4, r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80035a0:	f7ff ff5c 	bl	800345c <HAL_RCC_GetSysClockFreq>
 80035a4:	4604      	mov	r4, r0
 80035a6:	f7ff f9b5 	bl	8002914 <LL_RCC_GetAHBPrescaler>
 80035aa:	4603      	mov	r3, r0
 80035ac:	091b      	lsrs	r3, r3, #4
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	4a03      	ldr	r2, [pc, #12]	@ (80035c0 <HAL_RCC_GetHCLKFreq+0x24>)
 80035b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035b8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80035bc:	4618      	mov	r0, r3
 80035be:	bd98      	pop	{r3, r4, r7, pc}
 80035c0:	08006fa0 	.word	0x08006fa0

080035c4 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035c4:	b598      	push	{r3, r4, r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80035c8:	f7ff ffe8 	bl	800359c <HAL_RCC_GetHCLKFreq>
 80035cc:	4604      	mov	r4, r0
 80035ce:	f7ff f9b9 	bl	8002944 <LL_RCC_GetAPB1Prescaler>
 80035d2:	4603      	mov	r3, r0
 80035d4:	0a1b      	lsrs	r3, r3, #8
 80035d6:	4a03      	ldr	r2, [pc, #12]	@ (80035e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035dc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	bd98      	pop	{r3, r4, r7, pc}
 80035e4:	08006fe0 	.word	0x08006fe0

080035e8 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035e8:	b598      	push	{r3, r4, r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80035ec:	f7ff ffd6 	bl	800359c <HAL_RCC_GetHCLKFreq>
 80035f0:	4604      	mov	r4, r0
 80035f2:	f7ff f9b2 	bl	800295a <LL_RCC_GetAPB2Prescaler>
 80035f6:	4603      	mov	r3, r0
 80035f8:	0adb      	lsrs	r3, r3, #11
 80035fa:	4a03      	ldr	r2, [pc, #12]	@ (8003608 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003600:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003604:	4618      	mov	r0, r3
 8003606:	bd98      	pop	{r3, r4, r7, pc}
 8003608:	08006fe0 	.word	0x08006fe0

0800360c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800360c:	b590      	push	{r4, r7, lr}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	091b      	lsrs	r3, r3, #4
 8003618:	f003 030f 	and.w	r3, r3, #15
 800361c:	4a10      	ldr	r2, [pc, #64]	@ (8003660 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800361e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003622:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003624:	f7ff f981 	bl	800292a <LL_RCC_GetAHB3Prescaler>
 8003628:	4603      	mov	r3, r0
 800362a:	091b      	lsrs	r3, r3, #4
 800362c:	f003 030f 	and.w	r3, r3, #15
 8003630:	4a0c      	ldr	r2, [pc, #48]	@ (8003664 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	fbb2 f3f3 	udiv	r3, r2, r3
 800363c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	4a09      	ldr	r2, [pc, #36]	@ (8003668 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003642:	fba2 2303 	umull	r2, r3, r2, r3
 8003646:	0c9c      	lsrs	r4, r3, #18
 8003648:	f7fe ff80 	bl	800254c <HAL_PWREx_GetVoltageRange>
 800364c:	4603      	mov	r3, r0
 800364e:	4619      	mov	r1, r3
 8003650:	4620      	mov	r0, r4
 8003652:	f000 f80b 	bl	800366c <RCC_SetFlashLatency>
 8003656:	4603      	mov	r3, r0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	bd90      	pop	{r4, r7, pc}
 8003660:	08007000 	.word	0x08007000
 8003664:	08006fa0 	.word	0x08006fa0
 8003668:	431bde83 	.word	0x431bde83

0800366c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b08e      	sub	sp, #56	@ 0x38
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003676:	4a3a      	ldr	r2, [pc, #232]	@ (8003760 <RCC_SetFlashLatency+0xf4>)
 8003678:	f107 0320 	add.w	r3, r7, #32
 800367c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003680:	6018      	str	r0, [r3, #0]
 8003682:	3304      	adds	r3, #4
 8003684:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003686:	4a37      	ldr	r2, [pc, #220]	@ (8003764 <RCC_SetFlashLatency+0xf8>)
 8003688:	f107 0318 	add.w	r3, r7, #24
 800368c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003690:	6018      	str	r0, [r3, #0]
 8003692:	3304      	adds	r3, #4
 8003694:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003696:	4a34      	ldr	r2, [pc, #208]	@ (8003768 <RCC_SetFlashLatency+0xfc>)
 8003698:	f107 030c 	add.w	r3, r7, #12
 800369c:	ca07      	ldmia	r2, {r0, r1, r2}
 800369e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80036a2:	2300      	movs	r3, #0
 80036a4:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036ac:	d11b      	bne.n	80036e6 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80036ae:	2300      	movs	r3, #0
 80036b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80036b2:	e014      	b.n	80036de <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80036b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036b6:	005b      	lsls	r3, r3, #1
 80036b8:	3338      	adds	r3, #56	@ 0x38
 80036ba:	443b      	add	r3, r7
 80036bc:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80036c0:	461a      	mov	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d807      	bhi.n	80036d8 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80036c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	3338      	adds	r3, #56	@ 0x38
 80036ce:	443b      	add	r3, r7
 80036d0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80036d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80036d6:	e021      	b.n	800371c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80036d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036da:	3301      	adds	r3, #1
 80036dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80036de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d9e7      	bls.n	80036b4 <RCC_SetFlashLatency+0x48>
 80036e4:	e01a      	b.n	800371c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80036e6:	2300      	movs	r3, #0
 80036e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036ea:	e014      	b.n	8003716 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80036ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	3338      	adds	r3, #56	@ 0x38
 80036f2:	443b      	add	r3, r7
 80036f4:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80036f8:	461a      	mov	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d807      	bhi.n	8003710 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	3338      	adds	r3, #56	@ 0x38
 8003706:	443b      	add	r3, r7
 8003708:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800370c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800370e:	e005      	b.n	800371c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003712:	3301      	adds	r3, #1
 8003714:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003718:	2b02      	cmp	r3, #2
 800371a:	d9e7      	bls.n	80036ec <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800371c:	4b13      	ldr	r3, [pc, #76]	@ (800376c <RCC_SetFlashLatency+0x100>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f023 0207 	bic.w	r2, r3, #7
 8003724:	4911      	ldr	r1, [pc, #68]	@ (800376c <RCC_SetFlashLatency+0x100>)
 8003726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003728:	4313      	orrs	r3, r2
 800372a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800372c:	f7fe fb60 	bl	8001df0 <HAL_GetTick>
 8003730:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003732:	e008      	b.n	8003746 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003734:	f7fe fb5c 	bl	8001df0 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e007      	b.n	8003756 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003746:	4b09      	ldr	r3, [pc, #36]	@ (800376c <RCC_SetFlashLatency+0x100>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003750:	429a      	cmp	r2, r3
 8003752:	d1ef      	bne.n	8003734 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3738      	adds	r7, #56	@ 0x38
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	08006f84 	.word	0x08006f84
 8003764:	08006f8c 	.word	0x08006f8c
 8003768:	08006f94 	.word	0x08006f94
 800376c:	58004000 	.word	0x58004000

08003770 <LL_RCC_LSE_IsReady>:
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003774:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003778:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b02      	cmp	r3, #2
 8003782:	d101      	bne.n	8003788 <LL_RCC_LSE_IsReady+0x18>
 8003784:	2301      	movs	r3, #1
 8003786:	e000      	b.n	800378a <LL_RCC_LSE_IsReady+0x1a>
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	46bd      	mov	sp, r7
 800378e:	bc80      	pop	{r7}
 8003790:	4770      	bx	lr

08003792 <LL_RCC_SetUSARTClockSource>:
{
 8003792:	b480      	push	{r7}
 8003794:	b083      	sub	sp, #12
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800379a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800379e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	0c1b      	lsrs	r3, r3, #16
 80037a6:	43db      	mvns	r3, r3
 80037a8:	401a      	ands	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80037b2:	4313      	orrs	r3, r2
 80037b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	bc80      	pop	{r7}
 80037c0:	4770      	bx	lr

080037c2 <LL_RCC_SetI2SClockSource>:
{
 80037c2:	b480      	push	{r7}
 80037c4:	b083      	sub	sp, #12
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80037ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037d2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4313      	orrs	r3, r2
 80037de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80037e2:	bf00      	nop
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bc80      	pop	{r7}
 80037ea:	4770      	bx	lr

080037ec <LL_RCC_SetLPUARTClockSource>:
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80037f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037fc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003800:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4313      	orrs	r3, r2
 8003808:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	bc80      	pop	{r7}
 8003814:	4770      	bx	lr

08003816 <LL_RCC_SetI2CClockSource>:
{
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800381e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003822:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	091b      	lsrs	r3, r3, #4
 800382a:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800382e:	43db      	mvns	r3, r3
 8003830:	401a      	ands	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800383a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800383e:	4313      	orrs	r3, r2
 8003840:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	bc80      	pop	{r7}
 800384c:	4770      	bx	lr

0800384e <LL_RCC_SetLPTIMClockSource>:
{
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003856:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800385a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	0c1b      	lsrs	r3, r3, #16
 8003862:	041b      	lsls	r3, r3, #16
 8003864:	43db      	mvns	r3, r3
 8003866:	401a      	ands	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	041b      	lsls	r3, r3, #16
 800386c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003870:	4313      	orrs	r3, r2
 8003872:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	bc80      	pop	{r7}
 800387e:	4770      	bx	lr

08003880 <LL_RCC_SetRNGClockSource>:
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003888:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800388c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003890:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003894:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4313      	orrs	r3, r2
 800389c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bc80      	pop	{r7}
 80038a8:	4770      	bx	lr

080038aa <LL_RCC_SetADCClockSource>:
{
 80038aa:	b480      	push	{r7}
 80038ac:	b083      	sub	sp, #12
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80038b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80038be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80038ca:	bf00      	nop
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bc80      	pop	{r7}
 80038d2:	4770      	bx	lr

080038d4 <LL_RCC_SetRTCClockSource>:
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80038dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bc80      	pop	{r7}
 80038fc:	4770      	bx	lr

080038fe <LL_RCC_GetRTCClockSource>:
{
 80038fe:	b480      	push	{r7}
 8003900:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003902:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800390a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800390e:	4618      	mov	r0, r3
 8003910:	46bd      	mov	sp, r7
 8003912:	bc80      	pop	{r7}
 8003914:	4770      	bx	lr

08003916 <LL_RCC_ForceBackupDomainReset>:
{
 8003916:	b480      	push	{r7}
 8003918:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800391a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800391e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003922:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003926:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800392a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800392e:	bf00      	nop
 8003930:	46bd      	mov	sp, r7
 8003932:	bc80      	pop	{r7}
 8003934:	4770      	bx	lr

08003936 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003936:	b480      	push	{r7}
 8003938:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800393a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800393e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003942:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003946:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800394a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800394e:	bf00      	nop
 8003950:	46bd      	mov	sp, r7
 8003952:	bc80      	pop	{r7}
 8003954:	4770      	bx	lr
	...

08003958 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003960:	2300      	movs	r3, #0
 8003962:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003964:	2300      	movs	r3, #0
 8003966:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003968:	2300      	movs	r3, #0
 800396a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d058      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003978:	f7fe fdda 	bl	8002530 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800397c:	f7fe fa38 	bl	8001df0 <HAL_GetTick>
 8003980:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003982:	e009      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003984:	f7fe fa34 	bl	8001df0 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d902      	bls.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	74fb      	strb	r3, [r7, #19]
        break;
 8003996:	e006      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003998:	4b7b      	ldr	r3, [pc, #492]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039a4:	d1ee      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80039a6:	7cfb      	ldrb	r3, [r7, #19]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d13c      	bne.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80039ac:	f7ff ffa7 	bl	80038fe <LL_RCC_GetRTCClockSource>
 80039b0:	4602      	mov	r2, r0
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d00f      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80039ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039c6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039c8:	f7ff ffa5 	bl	8003916 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039cc:	f7ff ffb3 	bl	8003936 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d014      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e4:	f7fe fa04 	bl	8001df0 <HAL_GetTick>
 80039e8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80039ea:	e00b      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ec:	f7fe fa00 	bl	8001df0 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d902      	bls.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	74fb      	strb	r3, [r7, #19]
            break;
 8003a02:	e004      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003a04:	f7ff feb4 	bl	8003770 <LL_RCC_LSE_IsReady>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d1ee      	bne.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003a0e:	7cfb      	ldrb	r3, [r7, #19]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d105      	bne.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7ff ff5b 	bl	80038d4 <LL_RCC_SetRTCClockSource>
 8003a1e:	e004      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a20:	7cfb      	ldrb	r3, [r7, #19]
 8003a22:	74bb      	strb	r3, [r7, #18]
 8003a24:	e001      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a26:	7cfb      	ldrb	r3, [r7, #19]
 8003a28:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d004      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7ff fea9 	bl	8003792 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d004      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7ff fe9e 	bl	8003792 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0320 	and.w	r3, r3, #32
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d004      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7ff fec0 	bl	80037ec <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d004      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7ff fee6 	bl	800384e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d004      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7ff fedb 	bl	800384e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d004      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7ff fed0 	bl	800384e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d004      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7ff fea9 	bl	8003816 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d004      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff fe9e 	bl	8003816 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d004      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7ff fe93 	bl	8003816 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0310 	and.w	r3, r3, #16
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d011      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7ff fe5e 	bl	80037c2 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b0e:	d107      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003b10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b1e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d010      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff fea5 	bl	8003880 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d107      	bne.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003b3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b48:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b4c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d011      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff fea3 	bl	80038aa <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b6c:	d107      	bne.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b7c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003b7e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3718      	adds	r7, #24
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	58000400 	.word	0x58000400

08003b8c <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8003b94:	4b06      	ldr	r3, [pc, #24]	@ (8003bb0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003b9c:	4904      	ldr	r1, [pc, #16]	@ (8003bb0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	608b      	str	r3, [r1, #8]
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bc80      	pop	{r7}
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	58000400 	.word	0x58000400

08003bb4 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003bb8:	4b05      	ldr	r3, [pc, #20]	@ (8003bd0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8003bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bbe:	4a04      	ldr	r2, [pc, #16]	@ (8003bd0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8003bc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003bc8:	bf00      	nop
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bc80      	pop	{r7}
 8003bce:	4770      	bx	lr
 8003bd0:	58000400 	.word	0x58000400

08003bd4 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003bd8:	4b05      	ldr	r3, [pc, #20]	@ (8003bf0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8003bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bde:	4a04      	ldr	r2, [pc, #16]	@ (8003bf0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8003be0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003be4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003be8:	bf00      	nop
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bc80      	pop	{r7}
 8003bee:	4770      	bx	lr
 8003bf0:	58000400 	.word	0x58000400

08003bf4 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8003bf8:	4b03      	ldr	r3, [pc, #12]	@ (8003c08 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8003bfa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003bfe:	619a      	str	r2, [r3, #24]
}
 8003c00:	bf00      	nop
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bc80      	pop	{r7}
 8003c06:	4770      	bx	lr
 8003c08:	58000400 	.word	0x58000400

08003c0c <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8003c10:	4b06      	ldr	r3, [pc, #24]	@ (8003c2c <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d101      	bne.n	8003c20 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e000      	b.n	8003c22 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bc80      	pop	{r7}
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	58000400 	.word	0x58000400

08003c30 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8003c34:	4b06      	ldr	r3, [pc, #24]	@ (8003c50 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	2b04      	cmp	r3, #4
 8003c3e:	d101      	bne.n	8003c44 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8003c40:	2301      	movs	r3, #1
 8003c42:	e000      	b.n	8003c46 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bc80      	pop	{r7}
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	58000400 	.word	0x58000400

08003c54 <LL_RCC_RF_DisableReset>:
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8003c58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c60:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c64:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003c68:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003c6c:	bf00      	nop
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bc80      	pop	{r7}
 8003c72:	4770      	bx	lr

08003c74 <LL_RCC_IsRFUnderReset>:
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8003c78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c88:	d101      	bne.n	8003c8e <LL_RCC_IsRFUnderReset+0x1a>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e000      	b.n	8003c90 <LL_RCC_IsRFUnderReset+0x1c>
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bc80      	pop	{r7}
 8003c96:	4770      	bx	lr

08003c98 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003ca0:	4b06      	ldr	r3, [pc, #24]	@ (8003cbc <LL_EXTI_EnableIT_32_63+0x24>)
 8003ca2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003ca6:	4905      	ldr	r1, [pc, #20]	@ (8003cbc <LL_EXTI_EnableIT_32_63+0x24>)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bc80      	pop	{r7}
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	58000800 	.word	0x58000800

08003cc0 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d103      	bne.n	8003cd6 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	73fb      	strb	r3, [r7, #15]
    return status;
 8003cd2:	7bfb      	ldrb	r3, [r7, #15]
 8003cd4:	e052      	b.n	8003d7c <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	799b      	ldrb	r3, [r3, #6]
 8003cde:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8003ce0:	7bbb      	ldrb	r3, [r7, #14]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d002      	beq.n	8003cec <HAL_SUBGHZ_Init+0x2c>
 8003ce6:	7bbb      	ldrb	r3, [r7, #14]
 8003ce8:	2b03      	cmp	r3, #3
 8003cea:	d109      	bne.n	8003d00 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7fc ff0a 	bl	8000b0c <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8003cf8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003cfc:	f7ff ffcc 	bl	8003c98 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8003d00:	7bbb      	ldrb	r3, [r7, #14]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d126      	bne.n	8003d54 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2202      	movs	r2, #2
 8003d0a:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8003d0c:	f7ff ffa2 	bl	8003c54 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003d10:	4b1c      	ldr	r3, [pc, #112]	@ (8003d84 <HAL_SUBGHZ_Init+0xc4>)
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	4613      	mov	r3, r2
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	1a9b      	subs	r3, r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	0cdb      	lsrs	r3, r3, #19
 8003d1e:	2264      	movs	r2, #100	@ 0x64
 8003d20:	fb02 f303 	mul.w	r3, r2, r3
 8003d24:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d105      	bne.n	8003d38 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	609a      	str	r2, [r3, #8]
        break;
 8003d36:	e007      	b.n	8003d48 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8003d3e:	f7ff ff99 	bl	8003c74 <LL_RCC_IsRFUnderReset>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1ee      	bne.n	8003d26 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003d48:	f7ff ff34 	bl	8003bb4 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8003d4c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003d50:	f7ff ff1c 	bl	8003b8c <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8003d54:	f7ff ff4e 	bl	8003bf4 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8003d58:	7bfb      	ldrb	r3, [r7, #15]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10a      	bne.n	8003d74 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 fa12 	bl	800418c <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	719a      	strb	r2, [r3, #6]

  return status;
 8003d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	20000104 	.word	0x20000104

08003d88 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	607a      	str	r2, [r7, #4]
 8003d92:	461a      	mov	r2, r3
 8003d94:	460b      	mov	r3, r1
 8003d96:	817b      	strh	r3, [r7, #10]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	799b      	ldrb	r3, [r3, #6]
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d14a      	bne.n	8003e3c <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	795b      	ldrb	r3, [r3, #5]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d101      	bne.n	8003db2 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8003dae:	2302      	movs	r3, #2
 8003db0:	e045      	b.n	8003e3e <HAL_SUBGHZ_WriteRegisters+0xb6>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2201      	movs	r2, #1
 8003db6:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f000 fab2 	bl	8004328 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003dc4:	f7ff ff06 	bl	8003bd4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8003dc8:	210d      	movs	r1, #13
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f000 f9fe 	bl	80041cc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003dd0:	897b      	ldrh	r3, [r7, #10]
 8003dd2:	0a1b      	lsrs	r3, r3, #8
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	4619      	mov	r1, r3
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f000 f9f6 	bl	80041cc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003de0:	897b      	ldrh	r3, [r7, #10]
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	4619      	mov	r1, r3
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 f9f0 	bl	80041cc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003dec:	2300      	movs	r3, #0
 8003dee:	82bb      	strh	r3, [r7, #20]
 8003df0:	e00a      	b.n	8003e08 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003df2:	8abb      	ldrh	r3, [r7, #20]
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	4413      	add	r3, r2
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f000 f9e5 	bl	80041cc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003e02:	8abb      	ldrh	r3, [r7, #20]
 8003e04:	3301      	adds	r3, #1
 8003e06:	82bb      	strh	r3, [r7, #20]
 8003e08:	8aba      	ldrh	r2, [r7, #20]
 8003e0a:	893b      	ldrh	r3, [r7, #8]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d3f0      	bcc.n	8003df2 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003e10:	f7ff fed0 	bl	8003bb4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	f000 faab 	bl	8004370 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d002      	beq.n	8003e28 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	75fb      	strb	r3, [r7, #23]
 8003e26:	e001      	b.n	8003e2c <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	715a      	strb	r2, [r3, #5]

    return status;
 8003e38:	7dfb      	ldrb	r3, [r7, #23]
 8003e3a:	e000      	b.n	8003e3e <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003e3c:	2302      	movs	r3, #2
  }
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3718      	adds	r7, #24
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b088      	sub	sp, #32
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	60f8      	str	r0, [r7, #12]
 8003e4e:	607a      	str	r2, [r7, #4]
 8003e50:	461a      	mov	r2, r3
 8003e52:	460b      	mov	r3, r1
 8003e54:	817b      	strh	r3, [r7, #10]
 8003e56:	4613      	mov	r3, r2
 8003e58:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	799b      	ldrb	r3, [r3, #6]
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d14a      	bne.n	8003efe <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	795b      	ldrb	r3, [r3, #5]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d101      	bne.n	8003e74 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8003e70:	2302      	movs	r3, #2
 8003e72:	e045      	b.n	8003f00 <HAL_SUBGHZ_ReadRegisters+0xba>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2201      	movs	r2, #1
 8003e78:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 fa54 	bl	8004328 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003e80:	f7ff fea8 	bl	8003bd4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8003e84:	211d      	movs	r1, #29
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	f000 f9a0 	bl	80041cc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003e8c:	897b      	ldrh	r3, [r7, #10]
 8003e8e:	0a1b      	lsrs	r3, r3, #8
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	4619      	mov	r1, r3
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f000 f998 	bl	80041cc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003e9c:	897b      	ldrh	r3, [r7, #10]
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f000 f992 	bl	80041cc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 f98e 	bl	80041cc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	82fb      	strh	r3, [r7, #22]
 8003eb4:	e009      	b.n	8003eca <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003eb6:	69b9      	ldr	r1, [r7, #24]
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f000 f9dd 	bl	8004278 <SUBGHZSPI_Receive>
      pData++;
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003ec4:	8afb      	ldrh	r3, [r7, #22]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	82fb      	strh	r3, [r7, #22]
 8003eca:	8afa      	ldrh	r2, [r7, #22]
 8003ecc:	893b      	ldrh	r3, [r7, #8]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d3f1      	bcc.n	8003eb6 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003ed2:	f7ff fe6f 	bl	8003bb4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 fa4a 	bl	8004370 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d002      	beq.n	8003eea <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	77fb      	strb	r3, [r7, #31]
 8003ee8:	e001      	b.n	8003eee <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8003eea:	2300      	movs	r3, #0
 8003eec:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	715a      	strb	r2, [r3, #5]

    return status;
 8003efa:	7ffb      	ldrb	r3, [r7, #31]
 8003efc:	e000      	b.n	8003f00 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8003efe:	2302      	movs	r3, #2
  }
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3720      	adds	r7, #32
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	607a      	str	r2, [r7, #4]
 8003f12:	461a      	mov	r2, r3
 8003f14:	460b      	mov	r3, r1
 8003f16:	72fb      	strb	r3, [r7, #11]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	799b      	ldrb	r3, [r3, #6]
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d14a      	bne.n	8003fbc <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	795b      	ldrb	r3, [r3, #5]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d101      	bne.n	8003f32 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8003f2e:	2302      	movs	r3, #2
 8003f30:	e045      	b.n	8003fbe <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2201      	movs	r2, #1
 8003f36:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f000 f9f5 	bl	8004328 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8003f3e:	7afb      	ldrb	r3, [r7, #11]
 8003f40:	2b84      	cmp	r3, #132	@ 0x84
 8003f42:	d002      	beq.n	8003f4a <HAL_SUBGHZ_ExecSetCmd+0x42>
 8003f44:	7afb      	ldrb	r3, [r7, #11]
 8003f46:	2b94      	cmp	r3, #148	@ 0x94
 8003f48:	d103      	bne.n	8003f52 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	711a      	strb	r2, [r3, #4]
 8003f50:	e002      	b.n	8003f58 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003f58:	f7ff fe3c 	bl	8003bd4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003f5c:	7afb      	ldrb	r3, [r7, #11]
 8003f5e:	4619      	mov	r1, r3
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f000 f933 	bl	80041cc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003f66:	2300      	movs	r3, #0
 8003f68:	82bb      	strh	r3, [r7, #20]
 8003f6a:	e00a      	b.n	8003f82 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003f6c:	8abb      	ldrh	r3, [r7, #20]
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	4413      	add	r3, r2
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	4619      	mov	r1, r3
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f000 f928 	bl	80041cc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003f7c:	8abb      	ldrh	r3, [r7, #20]
 8003f7e:	3301      	adds	r3, #1
 8003f80:	82bb      	strh	r3, [r7, #20]
 8003f82:	8aba      	ldrh	r2, [r7, #20]
 8003f84:	893b      	ldrh	r3, [r7, #8]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d3f0      	bcc.n	8003f6c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003f8a:	f7ff fe13 	bl	8003bb4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8003f8e:	7afb      	ldrb	r3, [r7, #11]
 8003f90:	2b84      	cmp	r3, #132	@ 0x84
 8003f92:	d002      	beq.n	8003f9a <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f000 f9eb 	bl	8004370 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d002      	beq.n	8003fa8 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	75fb      	strb	r3, [r7, #23]
 8003fa6:	e001      	b.n	8003fac <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	715a      	strb	r2, [r3, #5]

    return status;
 8003fb8:	7dfb      	ldrb	r3, [r7, #23]
 8003fba:	e000      	b.n	8003fbe <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003fbc:	2302      	movs	r3, #2
  }
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3718      	adds	r7, #24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b088      	sub	sp, #32
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	60f8      	str	r0, [r7, #12]
 8003fce:	607a      	str	r2, [r7, #4]
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	72fb      	strb	r3, [r7, #11]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	799b      	ldrb	r3, [r3, #6]
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d13d      	bne.n	8004064 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	795b      	ldrb	r3, [r3, #5]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d101      	bne.n	8003ff4 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	e038      	b.n	8004066 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 f994 	bl	8004328 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004000:	f7ff fde8 	bl	8003bd4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004004:	7afb      	ldrb	r3, [r7, #11]
 8004006:	4619      	mov	r1, r3
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f000 f8df 	bl	80041cc <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800400e:	2100      	movs	r1, #0
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 f8db 	bl	80041cc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004016:	2300      	movs	r3, #0
 8004018:	82fb      	strh	r3, [r7, #22]
 800401a:	e009      	b.n	8004030 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800401c:	69b9      	ldr	r1, [r7, #24]
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f000 f92a 	bl	8004278 <SUBGHZSPI_Receive>
      pData++;
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	3301      	adds	r3, #1
 8004028:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800402a:	8afb      	ldrh	r3, [r7, #22]
 800402c:	3301      	adds	r3, #1
 800402e:	82fb      	strh	r3, [r7, #22]
 8004030:	8afa      	ldrh	r2, [r7, #22]
 8004032:	893b      	ldrh	r3, [r7, #8]
 8004034:	429a      	cmp	r2, r3
 8004036:	d3f1      	bcc.n	800401c <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004038:	f7ff fdbc 	bl	8003bb4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f000 f997 	bl	8004370 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	77fb      	strb	r3, [r7, #31]
 800404e:	e001      	b.n	8004054 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8004050:	2300      	movs	r3, #0
 8004052:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2201      	movs	r2, #1
 8004058:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	715a      	strb	r2, [r3, #5]

    return status;
 8004060:	7ffb      	ldrb	r3, [r7, #31]
 8004062:	e000      	b.n	8004066 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004064:	2302      	movs	r3, #2
  }
}
 8004066:	4618      	mov	r0, r3
 8004068:	3720      	adds	r7, #32
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b084      	sub	sp, #16
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8004076:	2300      	movs	r3, #0
 8004078:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 800407a:	f107 020c 	add.w	r2, r7, #12
 800407e:	2302      	movs	r3, #2
 8004080:	2112      	movs	r1, #18
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7ff ff9f 	bl	8003fc6 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8004088:	7b3b      	ldrb	r3, [r7, #12]
 800408a:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 800408c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004090:	021b      	lsls	r3, r3, #8
 8004092:	b21a      	sxth	r2, r3
 8004094:	7b7b      	ldrb	r3, [r7, #13]
 8004096:	b21b      	sxth	r3, r3
 8004098:	4313      	orrs	r3, r2
 800409a:	b21b      	sxth	r3, r3
 800409c:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 800409e:	f107 020c 	add.w	r2, r7, #12
 80040a2:	2302      	movs	r3, #2
 80040a4:	2102      	movs	r1, #2
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7ff ff2e 	bl	8003f08 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80040ac:	89fb      	ldrh	r3, [r7, #14]
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d002      	beq.n	80040bc <HAL_SUBGHZ_IRQHandler+0x4e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7fd fd6c 	bl	8001b94 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 80040bc:	89fb      	ldrh	r3, [r7, #14]
 80040be:	085b      	lsrs	r3, r3, #1
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d008      	beq.n	80040da <HAL_SUBGHZ_IRQHandler+0x6c>
      (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) == RESET))
 80040c8:	89fb      	ldrh	r3, [r7, #14]
 80040ca:	099b      	lsrs	r3, r3, #6
 80040cc:	f003 0301 	and.w	r3, r3, #1
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d102      	bne.n	80040da <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f7fd fd6b 	bl	8001bb0 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 80040da:	89fb      	ldrh	r3, [r7, #14]
 80040dc:	089b      	lsrs	r3, r3, #2
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <HAL_SUBGHZ_IRQHandler+0x7e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7fd fdba 	bl	8001c60 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 80040ec:	89fb      	ldrh	r3, [r7, #14]
 80040ee:	08db      	lsrs	r3, r3, #3
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d002      	beq.n	80040fe <HAL_SUBGHZ_IRQHandler+0x90>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f7fd fdbf 	bl	8001c7c <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 80040fe:	89fb      	ldrh	r3, [r7, #14]
 8004100:	091b      	lsrs	r3, r3, #4
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d002      	beq.n	8004110 <HAL_SUBGHZ_IRQHandler+0xa2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7fd fdc4 	bl	8001c98 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8004110:	89fb      	ldrh	r3, [r7, #14]
 8004112:	095b      	lsrs	r3, r3, #5
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	2b00      	cmp	r3, #0
 800411a:	d002      	beq.n	8004122 <HAL_SUBGHZ_IRQHandler+0xb4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f7fd fd91 	bl	8001c44 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8004122:	89fb      	ldrh	r3, [r7, #14]
 8004124:	099b      	lsrs	r3, r3, #6
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <HAL_SUBGHZ_IRQHandler+0xc6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7fd fd4c 	bl	8001bcc <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8004134:	89fb      	ldrh	r3, [r7, #14]
 8004136:	09db      	lsrs	r3, r3, #7
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00e      	beq.n	800415e <HAL_SUBGHZ_IRQHandler+0xf0>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8004140:	89fb      	ldrh	r3, [r7, #14]
 8004142:	0a1b      	lsrs	r3, r3, #8
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	2b00      	cmp	r3, #0
 800414a:	d004      	beq.n	8004156 <HAL_SUBGHZ_IRQHandler+0xe8>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800414c:	2101      	movs	r1, #1
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7fd fd4a 	bl	8001be8 <HAL_SUBGHZ_CADStatusCallback>
 8004154:	e003      	b.n	800415e <HAL_SUBGHZ_IRQHandler+0xf0>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8004156:	2100      	movs	r1, #0
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f7fd fd45 	bl	8001be8 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800415e:	89fb      	ldrh	r3, [r7, #14]
 8004160:	0a5b      	lsrs	r3, r3, #9
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	d002      	beq.n	8004170 <HAL_SUBGHZ_IRQHandler+0x102>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7fd fd5a 	bl	8001c24 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8004170:	89fb      	ldrh	r3, [r7, #14]
 8004172:	0b9b      	lsrs	r3, r3, #14
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b00      	cmp	r3, #0
 800417a:	d002      	beq.n	8004182 <HAL_SUBGHZ_IRQHandler+0x114>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f7fd fd99 	bl	8001cb4 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8004182:	bf00      	nop
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
	...

0800418c <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004194:	4b0c      	ldr	r3, [pc, #48]	@ (80041c8 <SUBGHZSPI_Init+0x3c>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a0b      	ldr	r2, [pc, #44]	@ (80041c8 <SUBGHZSPI_Init+0x3c>)
 800419a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800419e:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80041a0:	4a09      	ldr	r2, [pc, #36]	@ (80041c8 <SUBGHZSPI_Init+0x3c>)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 80041a8:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80041aa:	4b07      	ldr	r3, [pc, #28]	@ (80041c8 <SUBGHZSPI_Init+0x3c>)
 80041ac:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 80041b0:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80041b2:	4b05      	ldr	r3, [pc, #20]	@ (80041c8 <SUBGHZSPI_Init+0x3c>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a04      	ldr	r2, [pc, #16]	@ (80041c8 <SUBGHZSPI_Init+0x3c>)
 80041b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041bc:	6013      	str	r3, [r2, #0]
}
 80041be:	bf00      	nop
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bc80      	pop	{r7}
 80041c6:	4770      	bx	lr
 80041c8:	58010000 	.word	0x58010000

080041cc <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b087      	sub	sp, #28
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	460b      	mov	r3, r1
 80041d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80041d8:	2300      	movs	r3, #0
 80041da:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80041dc:	4b23      	ldr	r3, [pc, #140]	@ (800426c <SUBGHZSPI_Transmit+0xa0>)
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	4613      	mov	r3, r2
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	1a9b      	subs	r3, r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	0cdb      	lsrs	r3, r3, #19
 80041ea:	2264      	movs	r2, #100	@ 0x64
 80041ec:	fb02 f303 	mul.w	r3, r2, r3
 80041f0:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d105      	bne.n	8004204 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	609a      	str	r2, [r3, #8]
      break;
 8004202:	e008      	b.n	8004216 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	3b01      	subs	r3, #1
 8004208:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800420a:	4b19      	ldr	r3, [pc, #100]	@ (8004270 <SUBGHZSPI_Transmit+0xa4>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b02      	cmp	r3, #2
 8004214:	d1ed      	bne.n	80041f2 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004216:	4b17      	ldr	r3, [pc, #92]	@ (8004274 <SUBGHZSPI_Transmit+0xa8>)
 8004218:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	78fa      	ldrb	r2, [r7, #3]
 800421e:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004220:	4b12      	ldr	r3, [pc, #72]	@ (800426c <SUBGHZSPI_Transmit+0xa0>)
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	4613      	mov	r3, r2
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	1a9b      	subs	r3, r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	0cdb      	lsrs	r3, r3, #19
 800422e:	2264      	movs	r2, #100	@ 0x64
 8004230:	fb02 f303 	mul.w	r3, r2, r3
 8004234:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d105      	bne.n	8004248 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	609a      	str	r2, [r3, #8]
      break;
 8004246:	e008      	b.n	800425a <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	3b01      	subs	r3, #1
 800424c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800424e:	4b08      	ldr	r3, [pc, #32]	@ (8004270 <SUBGHZSPI_Transmit+0xa4>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b01      	cmp	r3, #1
 8004258:	d1ed      	bne.n	8004236 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800425a:	4b05      	ldr	r3, [pc, #20]	@ (8004270 <SUBGHZSPI_Transmit+0xa4>)
 800425c:	68db      	ldr	r3, [r3, #12]

  return status;
 800425e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004260:	4618      	mov	r0, r3
 8004262:	371c      	adds	r7, #28
 8004264:	46bd      	mov	sp, r7
 8004266:	bc80      	pop	{r7}
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	20000104 	.word	0x20000104
 8004270:	58010000 	.word	0x58010000
 8004274:	5801000c 	.word	0x5801000c

08004278 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004282:	2300      	movs	r3, #0
 8004284:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004286:	4b25      	ldr	r3, [pc, #148]	@ (800431c <SUBGHZSPI_Receive+0xa4>)
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	4613      	mov	r3, r2
 800428c:	00db      	lsls	r3, r3, #3
 800428e:	1a9b      	subs	r3, r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	0cdb      	lsrs	r3, r3, #19
 8004294:	2264      	movs	r2, #100	@ 0x64
 8004296:	fb02 f303 	mul.w	r3, r2, r3
 800429a:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d105      	bne.n	80042ae <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	609a      	str	r2, [r3, #8]
      break;
 80042ac:	e008      	b.n	80042c0 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	3b01      	subs	r3, #1
 80042b2:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80042b4:	4b1a      	ldr	r3, [pc, #104]	@ (8004320 <SUBGHZSPI_Receive+0xa8>)
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d1ed      	bne.n	800429c <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80042c0:	4b18      	ldr	r3, [pc, #96]	@ (8004324 <SUBGHZSPI_Receive+0xac>)
 80042c2:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	22ff      	movs	r2, #255	@ 0xff
 80042c8:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80042ca:	4b14      	ldr	r3, [pc, #80]	@ (800431c <SUBGHZSPI_Receive+0xa4>)
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	4613      	mov	r3, r2
 80042d0:	00db      	lsls	r3, r3, #3
 80042d2:	1a9b      	subs	r3, r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	0cdb      	lsrs	r3, r3, #19
 80042d8:	2264      	movs	r2, #100	@ 0x64
 80042da:	fb02 f303 	mul.w	r3, r2, r3
 80042de:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d105      	bne.n	80042f2 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	609a      	str	r2, [r3, #8]
      break;
 80042f0:	e008      	b.n	8004304 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	3b01      	subs	r3, #1
 80042f6:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80042f8:	4b09      	ldr	r3, [pc, #36]	@ (8004320 <SUBGHZSPI_Receive+0xa8>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	2b01      	cmp	r3, #1
 8004302:	d1ed      	bne.n	80042e0 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8004304:	4b06      	ldr	r3, [pc, #24]	@ (8004320 <SUBGHZSPI_Receive+0xa8>)
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	b2da      	uxtb	r2, r3
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	701a      	strb	r2, [r3, #0]

  return status;
 800430e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004310:	4618      	mov	r0, r3
 8004312:	371c      	adds	r7, #28
 8004314:	46bd      	mov	sp, r7
 8004316:	bc80      	pop	{r7}
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	20000104 	.word	0x20000104
 8004320:	58010000 	.word	0x58010000
 8004324:	5801000c 	.word	0x5801000c

08004328 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	791b      	ldrb	r3, [r3, #4]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d111      	bne.n	800435c <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8004338:	4b0c      	ldr	r3, [pc, #48]	@ (800436c <SUBGHZ_CheckDeviceReady+0x44>)
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	4613      	mov	r3, r2
 800433e:	005b      	lsls	r3, r3, #1
 8004340:	4413      	add	r3, r2
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	0c1b      	lsrs	r3, r3, #16
 8004346:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004348:	f7ff fc44 	bl	8003bd4 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	3b01      	subs	r3, #1
 8004350:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1f9      	bne.n	800434c <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004358:	f7ff fc2c 	bl	8003bb4 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f807 	bl	8004370 <SUBGHZ_WaitOnBusy>
 8004362:	4603      	mov	r3, r0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	20000104 	.word	0x20000104

08004370 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8004378:	2300      	movs	r3, #0
 800437a:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800437c:	4b12      	ldr	r3, [pc, #72]	@ (80043c8 <SUBGHZ_WaitOnBusy+0x58>)
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	4613      	mov	r3, r2
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	4413      	add	r3, r2
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	0d1b      	lsrs	r3, r3, #20
 800438a:	2264      	movs	r2, #100	@ 0x64
 800438c:	fb02 f303 	mul.w	r3, r2, r3
 8004390:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8004392:	f7ff fc4d 	bl	8003c30 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8004396:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d105      	bne.n	80043aa <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2202      	movs	r2, #2
 80043a6:	609a      	str	r2, [r3, #8]
      break;
 80043a8:	e009      	b.n	80043be <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	3b01      	subs	r3, #1
 80043ae:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80043b0:	f7ff fc2c 	bl	8003c0c <LL_PWR_IsActiveFlag_RFBUSYS>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	4013      	ands	r3, r2
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d0e9      	beq.n	8004392 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80043be:	7dfb      	ldrb	r3, [r7, #23]
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3718      	adds	r7, #24
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	20000104 	.word	0x20000104

080043cc <LL_RCC_GetUSARTClockSource>:
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80043d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	401a      	ands	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	041b      	lsls	r3, r3, #16
 80043e4:	4313      	orrs	r3, r2
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bc80      	pop	{r7}
 80043ee:	4770      	bx	lr

080043f0 <LL_RCC_GetLPUARTClockSource>:
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80043f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4013      	ands	r3, r2
}
 8004404:	4618      	mov	r0, r3
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	bc80      	pop	{r7}
 800440c:	4770      	bx	lr

0800440e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b082      	sub	sp, #8
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e042      	b.n	80044a6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004426:	2b00      	cmp	r3, #0
 8004428:	d106      	bne.n	8004438 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f7fc fc36 	bl	8000ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2224      	movs	r2, #36	@ 0x24
 800443c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 0201 	bic.w	r2, r2, #1
 800444e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004454:	2b00      	cmp	r3, #0
 8004456:	d002      	beq.n	800445e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 feb1 	bl	80051c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 fc3a 	bl	8004cd8 <UART_SetConfig>
 8004464:	4603      	mov	r3, r0
 8004466:	2b01      	cmp	r3, #1
 8004468:	d101      	bne.n	800446e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e01b      	b.n	80044a6 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800447c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800448c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f042 0201 	orr.w	r2, r2, #1
 800449c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 ff2f 	bl	8005302 <UART_CheckIdleState>
 80044a4:	4603      	mov	r3, r0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b08a      	sub	sp, #40	@ 0x28
 80044b2:	af02      	add	r7, sp, #8
 80044b4:	60f8      	str	r0, [r7, #12]
 80044b6:	60b9      	str	r1, [r7, #8]
 80044b8:	603b      	str	r3, [r7, #0]
 80044ba:	4613      	mov	r3, r2
 80044bc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044c4:	2b20      	cmp	r3, #32
 80044c6:	d173      	bne.n	80045b0 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d002      	beq.n	80044d4 <HAL_UART_Transmit+0x26>
 80044ce:	88fb      	ldrh	r3, [r7, #6]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e06c      	b.n	80045b2 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2221      	movs	r2, #33	@ 0x21
 80044e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044e8:	f7fd fc82 	bl	8001df0 <HAL_GetTick>
 80044ec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	88fa      	ldrh	r2, [r7, #6]
 80044f2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	88fa      	ldrh	r2, [r7, #6]
 80044fa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004506:	d108      	bne.n	800451a <HAL_UART_Transmit+0x6c>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d104      	bne.n	800451a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004510:	2300      	movs	r3, #0
 8004512:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	61bb      	str	r3, [r7, #24]
 8004518:	e003      	b.n	8004522 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800451e:	2300      	movs	r3, #0
 8004520:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004522:	e02c      	b.n	800457e <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	2200      	movs	r2, #0
 800452c:	2180      	movs	r1, #128	@ 0x80
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f000 ff35 	bl	800539e <UART_WaitOnFlagUntilTimeout>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e039      	b.n	80045b2 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10b      	bne.n	800455c <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	881b      	ldrh	r3, [r3, #0]
 8004548:	461a      	mov	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004552:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	3302      	adds	r3, #2
 8004558:	61bb      	str	r3, [r7, #24]
 800455a:	e007      	b.n	800456c <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	781a      	ldrb	r2, [r3, #0]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	3301      	adds	r3, #1
 800456a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004572:	b29b      	uxth	r3, r3
 8004574:	3b01      	subs	r3, #1
 8004576:	b29a      	uxth	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004584:	b29b      	uxth	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1cc      	bne.n	8004524 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	2200      	movs	r2, #0
 8004592:	2140      	movs	r1, #64	@ 0x40
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f000 ff02 	bl	800539e <UART_WaitOnFlagUntilTimeout>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d001      	beq.n	80045a4 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e006      	b.n	80045b2 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2220      	movs	r2, #32
 80045a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80045ac:	2300      	movs	r3, #0
 80045ae:	e000      	b.n	80045b2 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 80045b0:	2302      	movs	r3, #2
  }
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3720      	adds	r7, #32
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
	...

080045bc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b08a      	sub	sp, #40	@ 0x28
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	4613      	mov	r3, r2
 80045c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045d0:	2b20      	cmp	r3, #32
 80045d2:	d137      	bne.n	8004644 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d002      	beq.n	80045e0 <HAL_UART_Receive_IT+0x24>
 80045da:	88fb      	ldrh	r3, [r7, #6]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d101      	bne.n	80045e4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e030      	b.n	8004646 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a18      	ldr	r2, [pc, #96]	@ (8004650 <HAL_UART_Receive_IT+0x94>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d01f      	beq.n	8004634 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d018      	beq.n	8004634 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	e853 3f00 	ldrex	r3, [r3]
 800460e:	613b      	str	r3, [r7, #16]
   return(result);
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004616:	627b      	str	r3, [r7, #36]	@ 0x24
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	461a      	mov	r2, r3
 800461e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004620:	623b      	str	r3, [r7, #32]
 8004622:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004624:	69f9      	ldr	r1, [r7, #28]
 8004626:	6a3a      	ldr	r2, [r7, #32]
 8004628:	e841 2300 	strex	r3, r2, [r1]
 800462c:	61bb      	str	r3, [r7, #24]
   return(result);
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1e6      	bne.n	8004602 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004634:	88fb      	ldrh	r3, [r7, #6]
 8004636:	461a      	mov	r2, r3
 8004638:	68b9      	ldr	r1, [r7, #8]
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f000 ff7e 	bl	800553c <UART_Start_Receive_IT>
 8004640:	4603      	mov	r3, r0
 8004642:	e000      	b.n	8004646 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004644:	2302      	movs	r3, #2
  }
}
 8004646:	4618      	mov	r0, r3
 8004648:	3728      	adds	r7, #40	@ 0x28
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	40008000 	.word	0x40008000

08004654 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b0ba      	sub	sp, #232	@ 0xe8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800467a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800467e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004682:	4013      	ands	r3, r2
 8004684:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004688:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800468c:	2b00      	cmp	r3, #0
 800468e:	d11b      	bne.n	80046c8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004694:	f003 0320 	and.w	r3, r3, #32
 8004698:	2b00      	cmp	r3, #0
 800469a:	d015      	beq.n	80046c8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800469c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046a0:	f003 0320 	and.w	r3, r3, #32
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d105      	bne.n	80046b4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80046a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d009      	beq.n	80046c8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f000 82e3 	beq.w	8004c84 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	4798      	blx	r3
      }
      return;
 80046c6:	e2dd      	b.n	8004c84 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80046c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f000 8123 	beq.w	8004918 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80046d2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80046d6:	4b8d      	ldr	r3, [pc, #564]	@ (800490c <HAL_UART_IRQHandler+0x2b8>)
 80046d8:	4013      	ands	r3, r2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d106      	bne.n	80046ec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80046de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80046e2:	4b8b      	ldr	r3, [pc, #556]	@ (8004910 <HAL_UART_IRQHandler+0x2bc>)
 80046e4:	4013      	ands	r3, r2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f000 8116 	beq.w	8004918 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80046ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d011      	beq.n	800471c <HAL_UART_IRQHandler+0xc8>
 80046f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00b      	beq.n	800471c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2201      	movs	r2, #1
 800470a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004712:	f043 0201 	orr.w	r2, r3, #1
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800471c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d011      	beq.n	800474c <HAL_UART_IRQHandler+0xf8>
 8004728:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00b      	beq.n	800474c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2202      	movs	r2, #2
 800473a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004742:	f043 0204 	orr.w	r2, r3, #4
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800474c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004750:	f003 0304 	and.w	r3, r3, #4
 8004754:	2b00      	cmp	r3, #0
 8004756:	d011      	beq.n	800477c <HAL_UART_IRQHandler+0x128>
 8004758:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00b      	beq.n	800477c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2204      	movs	r2, #4
 800476a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004772:	f043 0202 	orr.w	r2, r3, #2
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800477c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004780:	f003 0308 	and.w	r3, r3, #8
 8004784:	2b00      	cmp	r3, #0
 8004786:	d017      	beq.n	80047b8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800478c:	f003 0320 	and.w	r3, r3, #32
 8004790:	2b00      	cmp	r3, #0
 8004792:	d105      	bne.n	80047a0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004794:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004798:	4b5c      	ldr	r3, [pc, #368]	@ (800490c <HAL_UART_IRQHandler+0x2b8>)
 800479a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00b      	beq.n	80047b8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2208      	movs	r2, #8
 80047a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ae:	f043 0208 	orr.w	r2, r3, #8
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80047b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d012      	beq.n	80047ea <HAL_UART_IRQHandler+0x196>
 80047c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00c      	beq.n	80047ea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80047d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047e0:	f043 0220 	orr.w	r2, r3, #32
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f000 8249 	beq.w	8004c88 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80047f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047fa:	f003 0320 	and.w	r3, r3, #32
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d013      	beq.n	800482a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004806:	f003 0320 	and.w	r3, r3, #32
 800480a:	2b00      	cmp	r3, #0
 800480c:	d105      	bne.n	800481a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800480e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004812:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d007      	beq.n	800482a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800481e:	2b00      	cmp	r3, #0
 8004820:	d003      	beq.n	800482a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004830:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800483e:	2b40      	cmp	r3, #64	@ 0x40
 8004840:	d005      	beq.n	800484e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004842:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004846:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800484a:	2b00      	cmp	r3, #0
 800484c:	d054      	beq.n	80048f8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 ff94 	bl	800577c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800485e:	2b40      	cmp	r3, #64	@ 0x40
 8004860:	d146      	bne.n	80048f0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	3308      	adds	r3, #8
 8004868:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004870:	e853 3f00 	ldrex	r3, [r3]
 8004874:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004878:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800487c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004880:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	3308      	adds	r3, #8
 800488a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800488e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004892:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004896:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800489a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800489e:	e841 2300 	strex	r3, r2, [r1]
 80048a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80048a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1d9      	bne.n	8004862 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d017      	beq.n	80048e8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048be:	4a15      	ldr	r2, [pc, #84]	@ (8004914 <HAL_UART_IRQHandler+0x2c0>)
 80048c0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7fd fc5a 	bl	8002182 <HAL_DMA_Abort_IT>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d019      	beq.n	8004908 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80048e2:	4610      	mov	r0, r2
 80048e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048e6:	e00f      	b.n	8004908 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 f9e0 	bl	8004cae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048ee:	e00b      	b.n	8004908 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 f9dc 	bl	8004cae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048f6:	e007      	b.n	8004908 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 f9d8 	bl	8004cae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004906:	e1bf      	b.n	8004c88 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004908:	bf00      	nop
    return;
 800490a:	e1bd      	b.n	8004c88 <HAL_UART_IRQHandler+0x634>
 800490c:	10000001 	.word	0x10000001
 8004910:	04000120 	.word	0x04000120
 8004914:	08005847 	.word	0x08005847

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800491c:	2b01      	cmp	r3, #1
 800491e:	f040 8153 	bne.w	8004bc8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004926:	f003 0310 	and.w	r3, r3, #16
 800492a:	2b00      	cmp	r3, #0
 800492c:	f000 814c 	beq.w	8004bc8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004934:	f003 0310 	and.w	r3, r3, #16
 8004938:	2b00      	cmp	r3, #0
 800493a:	f000 8145 	beq.w	8004bc8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2210      	movs	r2, #16
 8004944:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004950:	2b40      	cmp	r3, #64	@ 0x40
 8004952:	f040 80bb 	bne.w	8004acc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004964:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004968:	2b00      	cmp	r3, #0
 800496a:	f000 818f 	beq.w	8004c8c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004974:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004978:	429a      	cmp	r2, r3
 800497a:	f080 8187 	bcs.w	8004c8c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004984:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0320 	and.w	r3, r3, #32
 8004996:	2b00      	cmp	r3, #0
 8004998:	f040 8087 	bne.w	8004aaa <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80049a8:	e853 3f00 	ldrex	r3, [r3]
 80049ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80049b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80049b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	461a      	mov	r2, r3
 80049c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80049c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80049ca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80049d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80049d6:	e841 2300 	strex	r3, r2, [r1]
 80049da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80049de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1da      	bne.n	800499c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	3308      	adds	r3, #8
 80049ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049f0:	e853 3f00 	ldrex	r3, [r3]
 80049f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80049f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80049f8:	f023 0301 	bic.w	r3, r3, #1
 80049fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	3308      	adds	r3, #8
 8004a06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004a0a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004a0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a10:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004a12:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004a16:	e841 2300 	strex	r3, r2, [r1]
 8004a1a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004a1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1e1      	bne.n	80049e6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	3308      	adds	r3, #8
 8004a28:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a2c:	e853 3f00 	ldrex	r3, [r3]
 8004a30:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004a32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	3308      	adds	r3, #8
 8004a42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004a46:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004a48:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004a4c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004a4e:	e841 2300 	strex	r3, r2, [r1]
 8004a52:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004a54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1e3      	bne.n	8004a22 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2220      	movs	r2, #32
 8004a5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a70:	e853 3f00 	ldrex	r3, [r3]
 8004a74:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004a76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a78:	f023 0310 	bic.w	r3, r3, #16
 8004a7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	461a      	mov	r2, r3
 8004a86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a8c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004a90:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a92:	e841 2300 	strex	r3, r2, [r1]
 8004a96:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004a98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1e4      	bne.n	8004a68 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7fd fb0e 	bl	80020c6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2202      	movs	r2, #2
 8004aae:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 f8fb 	bl	8004cc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004aca:	e0df      	b.n	8004c8c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 80d1 	beq.w	8004c90 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004aee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f000 80cc 	beq.w	8004c90 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b00:	e853 3f00 	ldrex	r3, [r3]
 8004b04:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	461a      	mov	r2, r3
 8004b16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004b1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b1c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b22:	e841 2300 	strex	r3, r2, [r1]
 8004b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1e4      	bne.n	8004af8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	3308      	adds	r3, #8
 8004b34:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b38:	e853 3f00 	ldrex	r3, [r3]
 8004b3c:	623b      	str	r3, [r7, #32]
   return(result);
 8004b3e:	6a3b      	ldr	r3, [r7, #32]
 8004b40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b44:	f023 0301 	bic.w	r3, r3, #1
 8004b48:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	3308      	adds	r3, #8
 8004b52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004b56:	633a      	str	r2, [r7, #48]	@ 0x30
 8004b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b5e:	e841 2300 	strex	r3, r2, [r1]
 8004b62:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1e1      	bne.n	8004b2e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	e853 3f00 	ldrex	r3, [r3]
 8004b8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f023 0310 	bic.w	r3, r3, #16
 8004b92:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004ba0:	61fb      	str	r3, [r7, #28]
 8004ba2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba4:	69b9      	ldr	r1, [r7, #24]
 8004ba6:	69fa      	ldr	r2, [r7, #28]
 8004ba8:	e841 2300 	strex	r3, r2, [r1]
 8004bac:	617b      	str	r3, [r7, #20]
   return(result);
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1e4      	bne.n	8004b7e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004bba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 f87d 	bl	8004cc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004bc6:	e063      	b.n	8004c90 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bcc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00e      	beq.n	8004bf2 <HAL_UART_IRQHandler+0x59e>
 8004bd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d008      	beq.n	8004bf2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004be8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f001 fb88 	bl	8006300 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004bf0:	e051      	b.n	8004c96 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d014      	beq.n	8004c28 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004bfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d105      	bne.n	8004c16 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004c0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d008      	beq.n	8004c28 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d03a      	beq.n	8004c94 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	4798      	blx	r3
    }
    return;
 8004c26:	e035      	b.n	8004c94 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d009      	beq.n	8004c48 <HAL_UART_IRQHandler+0x5f4>
 8004c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d003      	beq.n	8004c48 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 fe16 	bl	8005872 <UART_EndTransmit_IT>
    return;
 8004c46:	e026      	b.n	8004c96 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d009      	beq.n	8004c68 <HAL_UART_IRQHandler+0x614>
 8004c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c58:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d003      	beq.n	8004c68 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f001 fb5f 	bl	8006324 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c66:	e016      	b.n	8004c96 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d010      	beq.n	8004c96 <HAL_UART_IRQHandler+0x642>
 8004c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	da0c      	bge.n	8004c96 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f001 fb48 	bl	8006312 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c82:	e008      	b.n	8004c96 <HAL_UART_IRQHandler+0x642>
      return;
 8004c84:	bf00      	nop
 8004c86:	e006      	b.n	8004c96 <HAL_UART_IRQHandler+0x642>
    return;
 8004c88:	bf00      	nop
 8004c8a:	e004      	b.n	8004c96 <HAL_UART_IRQHandler+0x642>
      return;
 8004c8c:	bf00      	nop
 8004c8e:	e002      	b.n	8004c96 <HAL_UART_IRQHandler+0x642>
      return;
 8004c90:	bf00      	nop
 8004c92:	e000      	b.n	8004c96 <HAL_UART_IRQHandler+0x642>
    return;
 8004c94:	bf00      	nop
  }
}
 8004c96:	37e8      	adds	r7, #232	@ 0xe8
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bc80      	pop	{r7}
 8004cac:	4770      	bx	lr

08004cae <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b083      	sub	sp, #12
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004cb6:	bf00      	nop
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bc80      	pop	{r7}
 8004cbe:	4770      	bx	lr

08004cc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bc80      	pop	{r7}
 8004cd4:	4770      	bx	lr
	...

08004cd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cdc:	b08c      	sub	sp, #48	@ 0x30
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	689a      	ldr	r2, [r3, #8]
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	431a      	orrs	r2, r3
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	69db      	ldr	r3, [r3, #28]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	4b94      	ldr	r3, [pc, #592]	@ (8004f58 <UART_SetConfig+0x280>)
 8004d08:	4013      	ands	r3, r2
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	6812      	ldr	r2, [r2, #0]
 8004d0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d10:	430b      	orrs	r3, r1
 8004d12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	68da      	ldr	r2, [r3, #12]
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a89      	ldr	r2, [pc, #548]	@ (8004f5c <UART_SetConfig+0x284>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d004      	beq.n	8004d44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d40:	4313      	orrs	r3, r2
 8004d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004d4e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	6812      	ldr	r2, [r2, #0]
 8004d56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d58:	430b      	orrs	r3, r1
 8004d5a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d62:	f023 010f 	bic.w	r1, r3, #15
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a7a      	ldr	r2, [pc, #488]	@ (8004f60 <UART_SetConfig+0x288>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d127      	bne.n	8004dcc <UART_SetConfig+0xf4>
 8004d7c:	2003      	movs	r0, #3
 8004d7e:	f7ff fb25 	bl	80043cc <LL_RCC_GetUSARTClockSource>
 8004d82:	4603      	mov	r3, r0
 8004d84:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8004d88:	2b03      	cmp	r3, #3
 8004d8a:	d81b      	bhi.n	8004dc4 <UART_SetConfig+0xec>
 8004d8c:	a201      	add	r2, pc, #4	@ (adr r2, 8004d94 <UART_SetConfig+0xbc>)
 8004d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d92:	bf00      	nop
 8004d94:	08004da5 	.word	0x08004da5
 8004d98:	08004db5 	.word	0x08004db5
 8004d9c:	08004dad 	.word	0x08004dad
 8004da0:	08004dbd 	.word	0x08004dbd
 8004da4:	2301      	movs	r3, #1
 8004da6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004daa:	e080      	b.n	8004eae <UART_SetConfig+0x1d6>
 8004dac:	2302      	movs	r3, #2
 8004dae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004db2:	e07c      	b.n	8004eae <UART_SetConfig+0x1d6>
 8004db4:	2304      	movs	r3, #4
 8004db6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dba:	e078      	b.n	8004eae <UART_SetConfig+0x1d6>
 8004dbc:	2308      	movs	r3, #8
 8004dbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dc2:	e074      	b.n	8004eae <UART_SetConfig+0x1d6>
 8004dc4:	2310      	movs	r3, #16
 8004dc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dca:	e070      	b.n	8004eae <UART_SetConfig+0x1d6>
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a64      	ldr	r2, [pc, #400]	@ (8004f64 <UART_SetConfig+0x28c>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d138      	bne.n	8004e48 <UART_SetConfig+0x170>
 8004dd6:	200c      	movs	r0, #12
 8004dd8:	f7ff faf8 	bl	80043cc <LL_RCC_GetUSARTClockSource>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8004de2:	2b0c      	cmp	r3, #12
 8004de4:	d82c      	bhi.n	8004e40 <UART_SetConfig+0x168>
 8004de6:	a201      	add	r2, pc, #4	@ (adr r2, 8004dec <UART_SetConfig+0x114>)
 8004de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dec:	08004e21 	.word	0x08004e21
 8004df0:	08004e41 	.word	0x08004e41
 8004df4:	08004e41 	.word	0x08004e41
 8004df8:	08004e41 	.word	0x08004e41
 8004dfc:	08004e31 	.word	0x08004e31
 8004e00:	08004e41 	.word	0x08004e41
 8004e04:	08004e41 	.word	0x08004e41
 8004e08:	08004e41 	.word	0x08004e41
 8004e0c:	08004e29 	.word	0x08004e29
 8004e10:	08004e41 	.word	0x08004e41
 8004e14:	08004e41 	.word	0x08004e41
 8004e18:	08004e41 	.word	0x08004e41
 8004e1c:	08004e39 	.word	0x08004e39
 8004e20:	2300      	movs	r3, #0
 8004e22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e26:	e042      	b.n	8004eae <UART_SetConfig+0x1d6>
 8004e28:	2302      	movs	r3, #2
 8004e2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e2e:	e03e      	b.n	8004eae <UART_SetConfig+0x1d6>
 8004e30:	2304      	movs	r3, #4
 8004e32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e36:	e03a      	b.n	8004eae <UART_SetConfig+0x1d6>
 8004e38:	2308      	movs	r3, #8
 8004e3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e3e:	e036      	b.n	8004eae <UART_SetConfig+0x1d6>
 8004e40:	2310      	movs	r3, #16
 8004e42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e46:	e032      	b.n	8004eae <UART_SetConfig+0x1d6>
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a43      	ldr	r2, [pc, #268]	@ (8004f5c <UART_SetConfig+0x284>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d12a      	bne.n	8004ea8 <UART_SetConfig+0x1d0>
 8004e52:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8004e56:	f7ff facb 	bl	80043f0 <LL_RCC_GetLPUARTClockSource>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e60:	d01a      	beq.n	8004e98 <UART_SetConfig+0x1c0>
 8004e62:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e66:	d81b      	bhi.n	8004ea0 <UART_SetConfig+0x1c8>
 8004e68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e6c:	d00c      	beq.n	8004e88 <UART_SetConfig+0x1b0>
 8004e6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e72:	d815      	bhi.n	8004ea0 <UART_SetConfig+0x1c8>
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d003      	beq.n	8004e80 <UART_SetConfig+0x1a8>
 8004e78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e7c:	d008      	beq.n	8004e90 <UART_SetConfig+0x1b8>
 8004e7e:	e00f      	b.n	8004ea0 <UART_SetConfig+0x1c8>
 8004e80:	2300      	movs	r3, #0
 8004e82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e86:	e012      	b.n	8004eae <UART_SetConfig+0x1d6>
 8004e88:	2302      	movs	r3, #2
 8004e8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e8e:	e00e      	b.n	8004eae <UART_SetConfig+0x1d6>
 8004e90:	2304      	movs	r3, #4
 8004e92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e96:	e00a      	b.n	8004eae <UART_SetConfig+0x1d6>
 8004e98:	2308      	movs	r3, #8
 8004e9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e9e:	e006      	b.n	8004eae <UART_SetConfig+0x1d6>
 8004ea0:	2310      	movs	r3, #16
 8004ea2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ea6:	e002      	b.n	8004eae <UART_SetConfig+0x1d6>
 8004ea8:	2310      	movs	r3, #16
 8004eaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a2a      	ldr	r2, [pc, #168]	@ (8004f5c <UART_SetConfig+0x284>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	f040 80a4 	bne.w	8005002 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004eba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004ebe:	2b08      	cmp	r3, #8
 8004ec0:	d823      	bhi.n	8004f0a <UART_SetConfig+0x232>
 8004ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ec8 <UART_SetConfig+0x1f0>)
 8004ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec8:	08004eed 	.word	0x08004eed
 8004ecc:	08004f0b 	.word	0x08004f0b
 8004ed0:	08004ef5 	.word	0x08004ef5
 8004ed4:	08004f0b 	.word	0x08004f0b
 8004ed8:	08004efb 	.word	0x08004efb
 8004edc:	08004f0b 	.word	0x08004f0b
 8004ee0:	08004f0b 	.word	0x08004f0b
 8004ee4:	08004f0b 	.word	0x08004f0b
 8004ee8:	08004f03 	.word	0x08004f03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004eec:	f7fe fb6a 	bl	80035c4 <HAL_RCC_GetPCLK1Freq>
 8004ef0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ef2:	e010      	b.n	8004f16 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ef4:	4b1c      	ldr	r3, [pc, #112]	@ (8004f68 <UART_SetConfig+0x290>)
 8004ef6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ef8:	e00d      	b.n	8004f16 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004efa:	f7fe faaf 	bl	800345c <HAL_RCC_GetSysClockFreq>
 8004efe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f00:	e009      	b.n	8004f16 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f08:	e005      	b.n	8004f16 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004f14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f000 8137 	beq.w	800518c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f22:	4a12      	ldr	r2, [pc, #72]	@ (8004f6c <UART_SetConfig+0x294>)
 8004f24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f28:	461a      	mov	r2, r3
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f30:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	4613      	mov	r3, r2
 8004f38:	005b      	lsls	r3, r3, #1
 8004f3a:	4413      	add	r3, r2
 8004f3c:	69ba      	ldr	r2, [r7, #24]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d305      	bcc.n	8004f4e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f48:	69ba      	ldr	r2, [r7, #24]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d910      	bls.n	8004f70 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004f54:	e11a      	b.n	800518c <UART_SetConfig+0x4b4>
 8004f56:	bf00      	nop
 8004f58:	cfff69f3 	.word	0xcfff69f3
 8004f5c:	40008000 	.word	0x40008000
 8004f60:	40013800 	.word	0x40013800
 8004f64:	40004400 	.word	0x40004400
 8004f68:	00f42400 	.word	0x00f42400
 8004f6c:	08007048 	.word	0x08007048
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f72:	2200      	movs	r2, #0
 8004f74:	60bb      	str	r3, [r7, #8]
 8004f76:	60fa      	str	r2, [r7, #12]
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7c:	4a8e      	ldr	r2, [pc, #568]	@ (80051b8 <UART_SetConfig+0x4e0>)
 8004f7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	2200      	movs	r2, #0
 8004f86:	603b      	str	r3, [r7, #0]
 8004f88:	607a      	str	r2, [r7, #4]
 8004f8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f92:	f7fb f94d 	bl	8000230 <__aeabi_uldivmod>
 8004f96:	4602      	mov	r2, r0
 8004f98:	460b      	mov	r3, r1
 8004f9a:	4610      	mov	r0, r2
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	f04f 0200 	mov.w	r2, #0
 8004fa2:	f04f 0300 	mov.w	r3, #0
 8004fa6:	020b      	lsls	r3, r1, #8
 8004fa8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004fac:	0202      	lsls	r2, r0, #8
 8004fae:	6979      	ldr	r1, [r7, #20]
 8004fb0:	6849      	ldr	r1, [r1, #4]
 8004fb2:	0849      	lsrs	r1, r1, #1
 8004fb4:	2000      	movs	r0, #0
 8004fb6:	460c      	mov	r4, r1
 8004fb8:	4605      	mov	r5, r0
 8004fba:	eb12 0804 	adds.w	r8, r2, r4
 8004fbe:	eb43 0905 	adc.w	r9, r3, r5
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	469a      	mov	sl, r3
 8004fca:	4693      	mov	fp, r2
 8004fcc:	4652      	mov	r2, sl
 8004fce:	465b      	mov	r3, fp
 8004fd0:	4640      	mov	r0, r8
 8004fd2:	4649      	mov	r1, r9
 8004fd4:	f7fb f92c 	bl	8000230 <__aeabi_uldivmod>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	460b      	mov	r3, r1
 8004fdc:	4613      	mov	r3, r2
 8004fde:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004fe0:	6a3b      	ldr	r3, [r7, #32]
 8004fe2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fe6:	d308      	bcc.n	8004ffa <UART_SetConfig+0x322>
 8004fe8:	6a3b      	ldr	r3, [r7, #32]
 8004fea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fee:	d204      	bcs.n	8004ffa <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6a3a      	ldr	r2, [r7, #32]
 8004ff6:	60da      	str	r2, [r3, #12]
 8004ff8:	e0c8      	b.n	800518c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005000:	e0c4      	b.n	800518c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	69db      	ldr	r3, [r3, #28]
 8005006:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800500a:	d167      	bne.n	80050dc <UART_SetConfig+0x404>
  {
    switch (clocksource)
 800500c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005010:	2b08      	cmp	r3, #8
 8005012:	d828      	bhi.n	8005066 <UART_SetConfig+0x38e>
 8005014:	a201      	add	r2, pc, #4	@ (adr r2, 800501c <UART_SetConfig+0x344>)
 8005016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800501a:	bf00      	nop
 800501c:	08005041 	.word	0x08005041
 8005020:	08005049 	.word	0x08005049
 8005024:	08005051 	.word	0x08005051
 8005028:	08005067 	.word	0x08005067
 800502c:	08005057 	.word	0x08005057
 8005030:	08005067 	.word	0x08005067
 8005034:	08005067 	.word	0x08005067
 8005038:	08005067 	.word	0x08005067
 800503c:	0800505f 	.word	0x0800505f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005040:	f7fe fac0 	bl	80035c4 <HAL_RCC_GetPCLK1Freq>
 8005044:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005046:	e014      	b.n	8005072 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005048:	f7fe face 	bl	80035e8 <HAL_RCC_GetPCLK2Freq>
 800504c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800504e:	e010      	b.n	8005072 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005050:	4b5a      	ldr	r3, [pc, #360]	@ (80051bc <UART_SetConfig+0x4e4>)
 8005052:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005054:	e00d      	b.n	8005072 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005056:	f7fe fa01 	bl	800345c <HAL_RCC_GetSysClockFreq>
 800505a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800505c:	e009      	b.n	8005072 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800505e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005062:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005064:	e005      	b.n	8005072 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8005066:	2300      	movs	r3, #0
 8005068:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005070:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005074:	2b00      	cmp	r3, #0
 8005076:	f000 8089 	beq.w	800518c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800507e:	4a4e      	ldr	r2, [pc, #312]	@ (80051b8 <UART_SetConfig+0x4e0>)
 8005080:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005084:	461a      	mov	r2, r3
 8005086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005088:	fbb3 f3f2 	udiv	r3, r3, r2
 800508c:	005a      	lsls	r2, r3, #1
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	085b      	lsrs	r3, r3, #1
 8005094:	441a      	add	r2, r3
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	fbb2 f3f3 	udiv	r3, r2, r3
 800509e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050a0:	6a3b      	ldr	r3, [r7, #32]
 80050a2:	2b0f      	cmp	r3, #15
 80050a4:	d916      	bls.n	80050d4 <UART_SetConfig+0x3fc>
 80050a6:	6a3b      	ldr	r3, [r7, #32]
 80050a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050ac:	d212      	bcs.n	80050d4 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050ae:	6a3b      	ldr	r3, [r7, #32]
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	f023 030f 	bic.w	r3, r3, #15
 80050b6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050b8:	6a3b      	ldr	r3, [r7, #32]
 80050ba:	085b      	lsrs	r3, r3, #1
 80050bc:	b29b      	uxth	r3, r3
 80050be:	f003 0307 	and.w	r3, r3, #7
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	8bfb      	ldrh	r3, [r7, #30]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	8bfa      	ldrh	r2, [r7, #30]
 80050d0:	60da      	str	r2, [r3, #12]
 80050d2:	e05b      	b.n	800518c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80050da:	e057      	b.n	800518c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050dc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	d828      	bhi.n	8005136 <UART_SetConfig+0x45e>
 80050e4:	a201      	add	r2, pc, #4	@ (adr r2, 80050ec <UART_SetConfig+0x414>)
 80050e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ea:	bf00      	nop
 80050ec:	08005111 	.word	0x08005111
 80050f0:	08005119 	.word	0x08005119
 80050f4:	08005121 	.word	0x08005121
 80050f8:	08005137 	.word	0x08005137
 80050fc:	08005127 	.word	0x08005127
 8005100:	08005137 	.word	0x08005137
 8005104:	08005137 	.word	0x08005137
 8005108:	08005137 	.word	0x08005137
 800510c:	0800512f 	.word	0x0800512f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005110:	f7fe fa58 	bl	80035c4 <HAL_RCC_GetPCLK1Freq>
 8005114:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005116:	e014      	b.n	8005142 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005118:	f7fe fa66 	bl	80035e8 <HAL_RCC_GetPCLK2Freq>
 800511c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800511e:	e010      	b.n	8005142 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005120:	4b26      	ldr	r3, [pc, #152]	@ (80051bc <UART_SetConfig+0x4e4>)
 8005122:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005124:	e00d      	b.n	8005142 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005126:	f7fe f999 	bl	800345c <HAL_RCC_GetSysClockFreq>
 800512a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800512c:	e009      	b.n	8005142 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800512e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005132:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005134:	e005      	b.n	8005142 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8005136:	2300      	movs	r3, #0
 8005138:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005140:	bf00      	nop
    }

    if (pclk != 0U)
 8005142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005144:	2b00      	cmp	r3, #0
 8005146:	d021      	beq.n	800518c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800514c:	4a1a      	ldr	r2, [pc, #104]	@ (80051b8 <UART_SetConfig+0x4e0>)
 800514e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005152:	461a      	mov	r2, r3
 8005154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005156:	fbb3 f2f2 	udiv	r2, r3, r2
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	085b      	lsrs	r3, r3, #1
 8005160:	441a      	add	r2, r3
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	fbb2 f3f3 	udiv	r3, r2, r3
 800516a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800516c:	6a3b      	ldr	r3, [r7, #32]
 800516e:	2b0f      	cmp	r3, #15
 8005170:	d909      	bls.n	8005186 <UART_SetConfig+0x4ae>
 8005172:	6a3b      	ldr	r3, [r7, #32]
 8005174:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005178:	d205      	bcs.n	8005186 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800517a:	6a3b      	ldr	r3, [r7, #32]
 800517c:	b29a      	uxth	r2, r3
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	60da      	str	r2, [r3, #12]
 8005184:	e002      	b.n	800518c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	2201      	movs	r2, #1
 8005190:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	2201      	movs	r2, #1
 8005198:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	2200      	movs	r2, #0
 80051a0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	2200      	movs	r2, #0
 80051a6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80051a8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3730      	adds	r7, #48	@ 0x30
 80051b0:	46bd      	mov	sp, r7
 80051b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051b6:	bf00      	nop
 80051b8:	08007048 	.word	0x08007048
 80051bc:	00f42400 	.word	0x00f42400

080051c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051cc:	f003 0308 	and.w	r3, r3, #8
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00a      	beq.n	80051ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	430a      	orrs	r2, r1
 80051e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00a      	beq.n	800520c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	430a      	orrs	r2, r1
 800520a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00a      	beq.n	800522e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	430a      	orrs	r2, r1
 800522c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005232:	f003 0304 	and.w	r3, r3, #4
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00a      	beq.n	8005250 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	430a      	orrs	r2, r1
 800524e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005254:	f003 0310 	and.w	r3, r3, #16
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00a      	beq.n	8005272 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	430a      	orrs	r2, r1
 8005270:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005276:	f003 0320 	and.w	r3, r3, #32
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00a      	beq.n	8005294 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	430a      	orrs	r2, r1
 8005292:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800529c:	2b00      	cmp	r3, #0
 800529e:	d01a      	beq.n	80052d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052be:	d10a      	bne.n	80052d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00a      	beq.n	80052f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	605a      	str	r2, [r3, #4]
  }
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bc80      	pop	{r7}
 8005300:	4770      	bx	lr

08005302 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b086      	sub	sp, #24
 8005306:	af02      	add	r7, sp, #8
 8005308:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005312:	f7fc fd6d 	bl	8001df0 <HAL_GetTick>
 8005316:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0308 	and.w	r3, r3, #8
 8005322:	2b08      	cmp	r3, #8
 8005324:	d10e      	bne.n	8005344 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005326:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800532a:	9300      	str	r3, [sp, #0]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 f832 	bl	800539e <UART_WaitOnFlagUntilTimeout>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d001      	beq.n	8005344 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e028      	b.n	8005396 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0304 	and.w	r3, r3, #4
 800534e:	2b04      	cmp	r3, #4
 8005350:	d10e      	bne.n	8005370 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005352:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005356:	9300      	str	r3, [sp, #0]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 f81c 	bl	800539e <UART_WaitOnFlagUntilTimeout>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d001      	beq.n	8005370 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	e012      	b.n	8005396 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2220      	movs	r2, #32
 8005374:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2220      	movs	r2, #32
 800537c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	b09c      	sub	sp, #112	@ 0x70
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	60f8      	str	r0, [r7, #12]
 80053a6:	60b9      	str	r1, [r7, #8]
 80053a8:	603b      	str	r3, [r7, #0]
 80053aa:	4613      	mov	r3, r2
 80053ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053ae:	e0af      	b.n	8005510 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b6:	f000 80ab 	beq.w	8005510 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ba:	f7fc fd19 	bl	8001df0 <HAL_GetTick>
 80053be:	4602      	mov	r2, r0
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d302      	bcc.n	80053d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80053ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d140      	bne.n	8005452 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053d8:	e853 3f00 	ldrex	r3, [r3]
 80053dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80053de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053e0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80053e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	461a      	mov	r2, r3
 80053ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053f0:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80053f4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80053f6:	e841 2300 	strex	r3, r2, [r1]
 80053fa:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80053fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1e6      	bne.n	80053d0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	3308      	adds	r3, #8
 8005408:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800540c:	e853 3f00 	ldrex	r3, [r3]
 8005410:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005414:	f023 0301 	bic.w	r3, r3, #1
 8005418:	663b      	str	r3, [r7, #96]	@ 0x60
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	3308      	adds	r3, #8
 8005420:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005422:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005424:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005426:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005428:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800542a:	e841 2300 	strex	r3, r2, [r1]
 800542e:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005430:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1e5      	bne.n	8005402 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2220      	movs	r2, #32
 800543a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2220      	movs	r2, #32
 8005442:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e06f      	b.n	8005532 <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0304 	and.w	r3, r3, #4
 800545c:	2b00      	cmp	r3, #0
 800545e:	d057      	beq.n	8005510 <UART_WaitOnFlagUntilTimeout+0x172>
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	2b80      	cmp	r3, #128	@ 0x80
 8005464:	d054      	beq.n	8005510 <UART_WaitOnFlagUntilTimeout+0x172>
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	2b40      	cmp	r3, #64	@ 0x40
 800546a:	d051      	beq.n	8005510 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	69db      	ldr	r3, [r3, #28]
 8005472:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005476:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800547a:	d149      	bne.n	8005510 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005484:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800548e:	e853 3f00 	ldrex	r3, [r3]
 8005492:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005496:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800549a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	461a      	mov	r2, r3
 80054a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80054a6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80054aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80054ac:	e841 2300 	strex	r3, r2, [r1]
 80054b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80054b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1e6      	bne.n	8005486 <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	3308      	adds	r3, #8
 80054be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	e853 3f00 	ldrex	r3, [r3]
 80054c6:	613b      	str	r3, [r7, #16]
   return(result);
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	f023 0301 	bic.w	r3, r3, #1
 80054ce:	66bb      	str	r3, [r7, #104]	@ 0x68
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	3308      	adds	r3, #8
 80054d6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80054d8:	623a      	str	r2, [r7, #32]
 80054da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054dc:	69f9      	ldr	r1, [r7, #28]
 80054de:	6a3a      	ldr	r2, [r7, #32]
 80054e0:	e841 2300 	strex	r3, r2, [r1]
 80054e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1e5      	bne.n	80054b8 <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2220      	movs	r2, #32
 80054f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2220      	movs	r2, #32
 80054f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2220      	movs	r2, #32
 8005500:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e010      	b.n	8005532 <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	69da      	ldr	r2, [r3, #28]
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	4013      	ands	r3, r2
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	429a      	cmp	r2, r3
 800551e:	bf0c      	ite	eq
 8005520:	2301      	moveq	r3, #1
 8005522:	2300      	movne	r3, #0
 8005524:	b2db      	uxtb	r3, r3
 8005526:	461a      	mov	r2, r3
 8005528:	79fb      	ldrb	r3, [r7, #7]
 800552a:	429a      	cmp	r2, r3
 800552c:	f43f af40 	beq.w	80053b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3770      	adds	r7, #112	@ 0x70
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
	...

0800553c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800553c:	b480      	push	{r7}
 800553e:	b0a3      	sub	sp, #140	@ 0x8c
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	4613      	mov	r3, r2
 8005548:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	88fa      	ldrh	r2, [r7, #6]
 8005554:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	88fa      	ldrh	r2, [r7, #6]
 800555c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800556e:	d10e      	bne.n	800558e <UART_Start_Receive_IT+0x52>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d105      	bne.n	8005584 <UART_Start_Receive_IT+0x48>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800557e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005582:	e02d      	b.n	80055e0 <UART_Start_Receive_IT+0xa4>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	22ff      	movs	r2, #255	@ 0xff
 8005588:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800558c:	e028      	b.n	80055e0 <UART_Start_Receive_IT+0xa4>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10d      	bne.n	80055b2 <UART_Start_Receive_IT+0x76>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d104      	bne.n	80055a8 <UART_Start_Receive_IT+0x6c>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	22ff      	movs	r2, #255	@ 0xff
 80055a2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80055a6:	e01b      	b.n	80055e0 <UART_Start_Receive_IT+0xa4>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	227f      	movs	r2, #127	@ 0x7f
 80055ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80055b0:	e016      	b.n	80055e0 <UART_Start_Receive_IT+0xa4>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80055ba:	d10d      	bne.n	80055d8 <UART_Start_Receive_IT+0x9c>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d104      	bne.n	80055ce <UART_Start_Receive_IT+0x92>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	227f      	movs	r2, #127	@ 0x7f
 80055c8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80055cc:	e008      	b.n	80055e0 <UART_Start_Receive_IT+0xa4>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	223f      	movs	r2, #63	@ 0x3f
 80055d2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80055d6:	e003      	b.n	80055e0 <UART_Start_Receive_IT+0xa4>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2222      	movs	r2, #34	@ 0x22
 80055ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	3308      	adds	r3, #8
 80055f6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055fa:	e853 3f00 	ldrex	r3, [r3]
 80055fe:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8005600:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005602:	f043 0301 	orr.w	r3, r3, #1
 8005606:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	3308      	adds	r3, #8
 8005610:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005614:	673a      	str	r2, [r7, #112]	@ 0x70
 8005616:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005618:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800561a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800561c:	e841 2300 	strex	r3, r2, [r1]
 8005620:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8005622:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005624:	2b00      	cmp	r3, #0
 8005626:	d1e3      	bne.n	80055f0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800562c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005630:	d14f      	bne.n	80056d2 <UART_Start_Receive_IT+0x196>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005638:	88fa      	ldrh	r2, [r7, #6]
 800563a:	429a      	cmp	r2, r3
 800563c:	d349      	bcc.n	80056d2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005646:	d107      	bne.n	8005658 <UART_Start_Receive_IT+0x11c>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d103      	bne.n	8005658 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	4a46      	ldr	r2, [pc, #280]	@ (800576c <UART_Start_Receive_IT+0x230>)
 8005654:	675a      	str	r2, [r3, #116]	@ 0x74
 8005656:	e002      	b.n	800565e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	4a45      	ldr	r2, [pc, #276]	@ (8005770 <UART_Start_Receive_IT+0x234>)
 800565c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d01a      	beq.n	800569c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800566e:	e853 3f00 	ldrex	r3, [r3]
 8005672:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005674:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005676:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800567a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	461a      	mov	r2, r3
 8005684:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005688:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800568a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800568e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005690:	e841 2300 	strex	r3, r2, [r1]
 8005694:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005696:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1e4      	bne.n	8005666 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	3308      	adds	r3, #8
 80056a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056a6:	e853 3f00 	ldrex	r3, [r3]
 80056aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	3308      	adds	r3, #8
 80056ba:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80056bc:	64ba      	str	r2, [r7, #72]	@ 0x48
 80056be:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80056c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056c4:	e841 2300 	strex	r3, r2, [r1]
 80056c8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80056ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d1e5      	bne.n	800569c <UART_Start_Receive_IT+0x160>
 80056d0:	e046      	b.n	8005760 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056da:	d107      	bne.n	80056ec <UART_Start_Receive_IT+0x1b0>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d103      	bne.n	80056ec <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	4a23      	ldr	r2, [pc, #140]	@ (8005774 <UART_Start_Receive_IT+0x238>)
 80056e8:	675a      	str	r2, [r3, #116]	@ 0x74
 80056ea:	e002      	b.n	80056f2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	4a22      	ldr	r2, [pc, #136]	@ (8005778 <UART_Start_Receive_IT+0x23c>)
 80056f0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d019      	beq.n	800572e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005702:	e853 3f00 	ldrex	r3, [r3]
 8005706:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800570e:	677b      	str	r3, [r7, #116]	@ 0x74
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	461a      	mov	r2, r3
 8005716:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005718:	637b      	str	r3, [r7, #52]	@ 0x34
 800571a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800571e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005720:	e841 2300 	strex	r3, r2, [r1]
 8005724:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1e6      	bne.n	80056fa <UART_Start_Receive_IT+0x1be>
 800572c:	e018      	b.n	8005760 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	e853 3f00 	ldrex	r3, [r3]
 800573a:	613b      	str	r3, [r7, #16]
   return(result);
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	f043 0320 	orr.w	r3, r3, #32
 8005742:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	461a      	mov	r2, r3
 800574a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800574c:	623b      	str	r3, [r7, #32]
 800574e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005750:	69f9      	ldr	r1, [r7, #28]
 8005752:	6a3a      	ldr	r2, [r7, #32]
 8005754:	e841 2300 	strex	r3, r2, [r1]
 8005758:	61bb      	str	r3, [r7, #24]
   return(result);
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1e6      	bne.n	800572e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	378c      	adds	r7, #140	@ 0x8c
 8005766:	46bd      	mov	sp, r7
 8005768:	bc80      	pop	{r7}
 800576a:	4770      	bx	lr
 800576c:	08005f99 	.word	0x08005f99
 8005770:	08005c39 	.word	0x08005c39
 8005774:	08005a81 	.word	0x08005a81
 8005778:	080058c9 	.word	0x080058c9

0800577c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800577c:	b480      	push	{r7}
 800577e:	b095      	sub	sp, #84	@ 0x54
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800578c:	e853 3f00 	ldrex	r3, [r3]
 8005790:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005794:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005798:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	461a      	mov	r2, r3
 80057a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80057a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80057a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80057aa:	e841 2300 	strex	r3, r2, [r1]
 80057ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80057b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1e6      	bne.n	8005784 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	3308      	adds	r3, #8
 80057bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057be:	6a3b      	ldr	r3, [r7, #32]
 80057c0:	e853 3f00 	ldrex	r3, [r3]
 80057c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057cc:	f023 0301 	bic.w	r3, r3, #1
 80057d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	3308      	adds	r3, #8
 80057d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057e2:	e841 2300 	strex	r3, r2, [r1]
 80057e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1e3      	bne.n	80057b6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d118      	bne.n	8005828 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	e853 3f00 	ldrex	r3, [r3]
 8005802:	60bb      	str	r3, [r7, #8]
   return(result);
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	f023 0310 	bic.w	r3, r3, #16
 800580a:	647b      	str	r3, [r7, #68]	@ 0x44
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	461a      	mov	r2, r3
 8005812:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005814:	61bb      	str	r3, [r7, #24]
 8005816:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005818:	6979      	ldr	r1, [r7, #20]
 800581a:	69ba      	ldr	r2, [r7, #24]
 800581c:	e841 2300 	strex	r3, r2, [r1]
 8005820:	613b      	str	r3, [r7, #16]
   return(result);
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d1e6      	bne.n	80057f6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2220      	movs	r2, #32
 800582c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800583c:	bf00      	nop
 800583e:	3754      	adds	r7, #84	@ 0x54
 8005840:	46bd      	mov	sp, r7
 8005842:	bc80      	pop	{r7}
 8005844:	4770      	bx	lr

08005846 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b084      	sub	sp, #16
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005852:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f7ff fa22 	bl	8004cae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800586a:	bf00      	nop
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}

08005872 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005872:	b580      	push	{r7, lr}
 8005874:	b088      	sub	sp, #32
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	e853 3f00 	ldrex	r3, [r3]
 8005886:	60bb      	str	r3, [r7, #8]
   return(result);
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800588e:	61fb      	str	r3, [r7, #28]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	461a      	mov	r2, r3
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	61bb      	str	r3, [r7, #24]
 800589a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589c:	6979      	ldr	r1, [r7, #20]
 800589e:	69ba      	ldr	r2, [r7, #24]
 80058a0:	e841 2300 	strex	r3, r2, [r1]
 80058a4:	613b      	str	r3, [r7, #16]
   return(result);
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d1e6      	bne.n	800587a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2220      	movs	r2, #32
 80058b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f7ff f9ee 	bl	8004c9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058c0:	bf00      	nop
 80058c2:	3720      	adds	r7, #32
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b09c      	sub	sp, #112	@ 0x70
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80058d6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058e0:	2b22      	cmp	r3, #34	@ 0x22
 80058e2:	f040 80be 	bne.w	8005a62 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ec:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80058f0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80058f4:	b2d9      	uxtb	r1, r3
 80058f6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80058fa:	b2da      	uxtb	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005900:	400a      	ands	r2, r1
 8005902:	b2d2      	uxtb	r2, r2
 8005904:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800590a:	1c5a      	adds	r2, r3, #1
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005916:	b29b      	uxth	r3, r3
 8005918:	3b01      	subs	r3, #1
 800591a:	b29a      	uxth	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005928:	b29b      	uxth	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	f040 80a1 	bne.w	8005a72 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005936:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005938:	e853 3f00 	ldrex	r3, [r3]
 800593c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800593e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005940:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005944:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	461a      	mov	r2, r3
 800594c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800594e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005950:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005952:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005954:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005956:	e841 2300 	strex	r3, r2, [r1]
 800595a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800595c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1e6      	bne.n	8005930 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	3308      	adds	r3, #8
 8005968:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800596c:	e853 3f00 	ldrex	r3, [r3]
 8005970:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005974:	f023 0301 	bic.w	r3, r3, #1
 8005978:	667b      	str	r3, [r7, #100]	@ 0x64
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	3308      	adds	r3, #8
 8005980:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005982:	647a      	str	r2, [r7, #68]	@ 0x44
 8005984:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005986:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005988:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800598a:	e841 2300 	strex	r3, r2, [r1]
 800598e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005990:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1e5      	bne.n	8005962 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2220      	movs	r2, #32
 800599a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a33      	ldr	r2, [pc, #204]	@ (8005a7c <UART_RxISR_8BIT+0x1b4>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d01f      	beq.n	80059f4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d018      	beq.n	80059f4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ca:	e853 3f00 	ldrex	r3, [r3]
 80059ce:	623b      	str	r3, [r7, #32]
   return(result);
 80059d0:	6a3b      	ldr	r3, [r7, #32]
 80059d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80059d6:	663b      	str	r3, [r7, #96]	@ 0x60
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	461a      	mov	r2, r3
 80059de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80059e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80059e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059e8:	e841 2300 	strex	r3, r2, [r1]
 80059ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80059ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1e6      	bne.n	80059c2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d12e      	bne.n	8005a5a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	e853 3f00 	ldrex	r3, [r3]
 8005a0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f023 0310 	bic.w	r3, r3, #16
 8005a16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a20:	61fb      	str	r3, [r7, #28]
 8005a22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a24:	69b9      	ldr	r1, [r7, #24]
 8005a26:	69fa      	ldr	r2, [r7, #28]
 8005a28:	e841 2300 	strex	r3, r2, [r1]
 8005a2c:	617b      	str	r3, [r7, #20]
   return(result);
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d1e6      	bne.n	8005a02 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	69db      	ldr	r3, [r3, #28]
 8005a3a:	f003 0310 	and.w	r3, r3, #16
 8005a3e:	2b10      	cmp	r3, #16
 8005a40:	d103      	bne.n	8005a4a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2210      	movs	r2, #16
 8005a48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005a50:	4619      	mov	r1, r3
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7ff f934 	bl	8004cc0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a58:	e00b      	b.n	8005a72 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f7fa feca 	bl	80007f4 <HAL_UART_RxCpltCallback>
}
 8005a60:	e007      	b.n	8005a72 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	699a      	ldr	r2, [r3, #24]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f042 0208 	orr.w	r2, r2, #8
 8005a70:	619a      	str	r2, [r3, #24]
}
 8005a72:	bf00      	nop
 8005a74:	3770      	adds	r7, #112	@ 0x70
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	40008000 	.word	0x40008000

08005a80 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b09c      	sub	sp, #112	@ 0x70
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005a8e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a98:	2b22      	cmp	r3, #34	@ 0x22
 8005a9a:	f040 80be 	bne.w	8005c1a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aac:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005aae:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005ab2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005abc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ac2:	1c9a      	adds	r2, r3, #2
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	f040 80a1 	bne.w	8005c2a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005af0:	e853 3f00 	ldrex	r3, [r3]
 8005af4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005af6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005af8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005afc:	667b      	str	r3, [r7, #100]	@ 0x64
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	461a      	mov	r2, r3
 8005b04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b06:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b08:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005b0c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005b0e:	e841 2300 	strex	r3, r2, [r1]
 8005b12:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005b14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1e6      	bne.n	8005ae8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	3308      	adds	r3, #8
 8005b20:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b24:	e853 3f00 	ldrex	r3, [r3]
 8005b28:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b2c:	f023 0301 	bic.w	r3, r3, #1
 8005b30:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	3308      	adds	r3, #8
 8005b38:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005b3a:	643a      	str	r2, [r7, #64]	@ 0x40
 8005b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b40:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b42:	e841 2300 	strex	r3, r2, [r1]
 8005b46:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1e5      	bne.n	8005b1a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2220      	movs	r2, #32
 8005b52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a33      	ldr	r2, [pc, #204]	@ (8005c34 <UART_RxISR_16BIT+0x1b4>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d01f      	beq.n	8005bac <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d018      	beq.n	8005bac <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b80:	6a3b      	ldr	r3, [r7, #32]
 8005b82:	e853 3f00 	ldrex	r3, [r3]
 8005b86:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005b8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	461a      	mov	r2, r3
 8005b96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b9a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ba0:	e841 2300 	strex	r3, r2, [r1]
 8005ba4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1e6      	bne.n	8005b7a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d12e      	bne.n	8005c12 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	e853 3f00 	ldrex	r3, [r3]
 8005bc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	f023 0310 	bic.w	r3, r3, #16
 8005bce:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005bd8:	61bb      	str	r3, [r7, #24]
 8005bda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bdc:	6979      	ldr	r1, [r7, #20]
 8005bde:	69ba      	ldr	r2, [r7, #24]
 8005be0:	e841 2300 	strex	r3, r2, [r1]
 8005be4:	613b      	str	r3, [r7, #16]
   return(result);
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1e6      	bne.n	8005bba <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	69db      	ldr	r3, [r3, #28]
 8005bf2:	f003 0310 	and.w	r3, r3, #16
 8005bf6:	2b10      	cmp	r3, #16
 8005bf8:	d103      	bne.n	8005c02 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2210      	movs	r2, #16
 8005c00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005c08:	4619      	mov	r1, r3
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7ff f858 	bl	8004cc0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005c10:	e00b      	b.n	8005c2a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f7fa fdee 	bl	80007f4 <HAL_UART_RxCpltCallback>
}
 8005c18:	e007      	b.n	8005c2a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	699a      	ldr	r2, [r3, #24]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f042 0208 	orr.w	r2, r2, #8
 8005c28:	619a      	str	r2, [r3, #24]
}
 8005c2a:	bf00      	nop
 8005c2c:	3770      	adds	r7, #112	@ 0x70
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	40008000 	.word	0x40008000

08005c38 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b0ac      	sub	sp, #176	@ 0xb0
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005c46:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	69db      	ldr	r3, [r3, #28]
 8005c50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c6e:	2b22      	cmp	r3, #34	@ 0x22
 8005c70:	f040 8182 	bne.w	8005f78 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005c7a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005c7e:	e125      	b.n	8005ecc <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c86:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005c8a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8005c8e:	b2d9      	uxtb	r1, r3
 8005c90:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8005c94:	b2da      	uxtb	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c9a:	400a      	ands	r2, r1
 8005c9c:	b2d2      	uxtb	r2, r2
 8005c9e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ca4:	1c5a      	adds	r2, r3, #1
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	69db      	ldr	r3, [r3, #28]
 8005cc2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005cc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005cca:	f003 0307 	and.w	r3, r3, #7
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d053      	beq.n	8005d7a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005cd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d011      	beq.n	8005d02 <UART_RxISR_8BIT_FIFOEN+0xca>
 8005cde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005ce2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00b      	beq.n	8005d02 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cf8:	f043 0201 	orr.w	r2, r3, #1
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d06:	f003 0302 	and.w	r3, r3, #2
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d011      	beq.n	8005d32 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005d0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005d12:	f003 0301 	and.w	r3, r3, #1
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00b      	beq.n	8005d32 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2202      	movs	r2, #2
 8005d20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d28:	f043 0204 	orr.w	r2, r3, #4
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d36:	f003 0304 	and.w	r3, r3, #4
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d011      	beq.n	8005d62 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8005d3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005d42:	f003 0301 	and.w	r3, r3, #1
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00b      	beq.n	8005d62 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2204      	movs	r2, #4
 8005d50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d58:	f043 0202 	orr.w	r2, r3, #2
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d006      	beq.n	8005d7a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f7fe ff9e 	bl	8004cae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f040 80a2 	bne.w	8005ecc <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d90:	e853 3f00 	ldrex	r3, [r3]
 8005d94:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8005d96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	461a      	mov	r2, r3
 8005da6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005daa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005dac:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dae:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8005db0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005db2:	e841 2300 	strex	r3, r2, [r1]
 8005db6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8005db8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1e4      	bne.n	8005d88 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	3308      	adds	r3, #8
 8005dc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005dc8:	e853 3f00 	ldrex	r3, [r3]
 8005dcc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8005dce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005dd0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005dd4:	f023 0301 	bic.w	r3, r3, #1
 8005dd8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	3308      	adds	r3, #8
 8005de2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005de6:	66ba      	str	r2, [r7, #104]	@ 0x68
 8005de8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dea:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8005dec:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005dee:	e841 2300 	strex	r3, r2, [r1]
 8005df2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8005df4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1e1      	bne.n	8005dbe <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2220      	movs	r2, #32
 8005dfe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a5f      	ldr	r2, [pc, #380]	@ (8005f90 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d021      	beq.n	8005e5c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d01a      	beq.n	8005e5c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e2e:	e853 3f00 	ldrex	r3, [r3]
 8005e32:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005e34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e36:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005e3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	461a      	mov	r2, r3
 8005e44:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005e48:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e4a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005e4e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005e50:	e841 2300 	strex	r3, r2, [r1]
 8005e54:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005e56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d1e4      	bne.n	8005e26 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d130      	bne.n	8005ec6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e72:	e853 3f00 	ldrex	r3, [r3]
 8005e76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e7a:	f023 0310 	bic.w	r3, r3, #16
 8005e7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	461a      	mov	r2, r3
 8005e88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e8e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e94:	e841 2300 	strex	r3, r2, [r1]
 8005e98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d1e4      	bne.n	8005e6a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	69db      	ldr	r3, [r3, #28]
 8005ea6:	f003 0310 	and.w	r3, r3, #16
 8005eaa:	2b10      	cmp	r3, #16
 8005eac:	d103      	bne.n	8005eb6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2210      	movs	r2, #16
 8005eb4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f7fe fefe 	bl	8004cc0 <HAL_UARTEx_RxEventCallback>
 8005ec4:	e002      	b.n	8005ecc <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f7fa fc94 	bl	80007f4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005ecc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d006      	beq.n	8005ee2 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8005ed4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005ed8:	f003 0320 	and.w	r3, r3, #32
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f47f aecf 	bne.w	8005c80 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005ee8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005eec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d049      	beq.n	8005f88 <UART_RxISR_8BIT_FIFOEN+0x350>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005efa:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d242      	bcs.n	8005f88 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	3308      	adds	r3, #8
 8005f08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0a:	6a3b      	ldr	r3, [r7, #32]
 8005f0c:	e853 3f00 	ldrex	r3, [r3]
 8005f10:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	3308      	adds	r3, #8
 8005f22:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005f26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f28:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f2e:	e841 2300 	strex	r3, r2, [r1]
 8005f32:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1e3      	bne.n	8005f02 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a15      	ldr	r2, [pc, #84]	@ (8005f94 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8005f3e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	e853 3f00 	ldrex	r3, [r3]
 8005f4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	f043 0320 	orr.w	r3, r3, #32
 8005f54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005f62:	61bb      	str	r3, [r7, #24]
 8005f64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f66:	6979      	ldr	r1, [r7, #20]
 8005f68:	69ba      	ldr	r2, [r7, #24]
 8005f6a:	e841 2300 	strex	r3, r2, [r1]
 8005f6e:	613b      	str	r3, [r7, #16]
   return(result);
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1e4      	bne.n	8005f40 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005f76:	e007      	b.n	8005f88 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	699a      	ldr	r2, [r3, #24]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f042 0208 	orr.w	r2, r2, #8
 8005f86:	619a      	str	r2, [r3, #24]
}
 8005f88:	bf00      	nop
 8005f8a:	37b0      	adds	r7, #176	@ 0xb0
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	40008000 	.word	0x40008000
 8005f94:	080058c9 	.word	0x080058c9

08005f98 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b0ae      	sub	sp, #184	@ 0xb8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005fa6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	69db      	ldr	r3, [r3, #28]
 8005fb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005fce:	2b22      	cmp	r3, #34	@ 0x22
 8005fd0:	f040 8186 	bne.w	80062e0 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005fda:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005fde:	e129      	b.n	8006234 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8005ff2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8005ff6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006002:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006008:	1c9a      	adds	r2, r3, #2
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006014:	b29b      	uxth	r3, r3
 8006016:	3b01      	subs	r3, #1
 8006018:	b29a      	uxth	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	69db      	ldr	r3, [r3, #28]
 8006026:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800602a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800602e:	f003 0307 	and.w	r3, r3, #7
 8006032:	2b00      	cmp	r3, #0
 8006034:	d053      	beq.n	80060de <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006036:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800603a:	f003 0301 	and.w	r3, r3, #1
 800603e:	2b00      	cmp	r3, #0
 8006040:	d011      	beq.n	8006066 <UART_RxISR_16BIT_FIFOEN+0xce>
 8006042:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00b      	beq.n	8006066 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2201      	movs	r2, #1
 8006054:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800605c:	f043 0201 	orr.w	r2, r3, #1
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006066:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800606a:	f003 0302 	and.w	r3, r3, #2
 800606e:	2b00      	cmp	r3, #0
 8006070:	d011      	beq.n	8006096 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006072:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006076:	f003 0301 	and.w	r3, r3, #1
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00b      	beq.n	8006096 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2202      	movs	r2, #2
 8006084:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800608c:	f043 0204 	orr.w	r2, r3, #4
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006096:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800609a:	f003 0304 	and.w	r3, r3, #4
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d011      	beq.n	80060c6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80060a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00b      	beq.n	80060c6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2204      	movs	r2, #4
 80060b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060bc:	f043 0202 	orr.w	r2, r3, #2
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d006      	beq.n	80060de <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f7fe fdec 	bl	8004cae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	f040 80a4 	bne.w	8006234 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80060f4:	e853 3f00 	ldrex	r3, [r3]
 80060f8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80060fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80060fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006100:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	461a      	mov	r2, r3
 800610a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800610e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006112:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006114:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006116:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800611a:	e841 2300 	strex	r3, r2, [r1]
 800611e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006120:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1e2      	bne.n	80060ec <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	3308      	adds	r3, #8
 800612c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006130:	e853 3f00 	ldrex	r3, [r3]
 8006134:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006136:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006138:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800613c:	f023 0301 	bic.w	r3, r3, #1
 8006140:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	3308      	adds	r3, #8
 800614a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800614e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006150:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006152:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006154:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006156:	e841 2300 	strex	r3, r2, [r1]
 800615a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800615c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1e1      	bne.n	8006126 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2220      	movs	r2, #32
 8006166:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a5f      	ldr	r2, [pc, #380]	@ (80062f8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d021      	beq.n	80061c4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800618a:	2b00      	cmp	r3, #0
 800618c:	d01a      	beq.n	80061c4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006194:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006196:	e853 3f00 	ldrex	r3, [r3]
 800619a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800619c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800619e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80061a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	461a      	mov	r2, r3
 80061ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80061b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80061b2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80061b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80061b8:	e841 2300 	strex	r3, r2, [r1]
 80061bc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80061be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d1e4      	bne.n	800618e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d130      	bne.n	800622e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061da:	e853 3f00 	ldrex	r3, [r3]
 80061de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80061e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061e2:	f023 0310 	bic.w	r3, r3, #16
 80061e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	461a      	mov	r2, r3
 80061f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80061f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80061f6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80061fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061fc:	e841 2300 	strex	r3, r2, [r1]
 8006200:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006202:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1e4      	bne.n	80061d2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	69db      	ldr	r3, [r3, #28]
 800620e:	f003 0310 	and.w	r3, r3, #16
 8006212:	2b10      	cmp	r3, #16
 8006214:	d103      	bne.n	800621e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2210      	movs	r2, #16
 800621c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006224:	4619      	mov	r1, r3
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f7fe fd4a 	bl	8004cc0 <HAL_UARTEx_RxEventCallback>
 800622c:	e002      	b.n	8006234 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f7fa fae0 	bl	80007f4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006234:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8006238:	2b00      	cmp	r3, #0
 800623a:	d006      	beq.n	800624a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800623c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006240:	f003 0320 	and.w	r3, r3, #32
 8006244:	2b00      	cmp	r3, #0
 8006246:	f47f aecb 	bne.w	8005fe0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006250:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006254:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8006258:	2b00      	cmp	r3, #0
 800625a:	d049      	beq.n	80062f0 <UART_RxISR_16BIT_FIFOEN+0x358>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006262:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8006266:	429a      	cmp	r2, r3
 8006268:	d242      	bcs.n	80062f0 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	3308      	adds	r3, #8
 8006270:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006274:	e853 3f00 	ldrex	r3, [r3]
 8006278:	623b      	str	r3, [r7, #32]
   return(result);
 800627a:	6a3b      	ldr	r3, [r7, #32]
 800627c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006280:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	3308      	adds	r3, #8
 800628a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800628e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006290:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006292:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006294:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006296:	e841 2300 	strex	r3, r2, [r1]
 800629a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800629c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1e3      	bne.n	800626a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a15      	ldr	r2, [pc, #84]	@ (80062fc <UART_RxISR_16BIT_FIFOEN+0x364>)
 80062a6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	e853 3f00 	ldrex	r3, [r3]
 80062b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f043 0320 	orr.w	r3, r3, #32
 80062bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	461a      	mov	r2, r3
 80062c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80062ca:	61fb      	str	r3, [r7, #28]
 80062cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ce:	69b9      	ldr	r1, [r7, #24]
 80062d0:	69fa      	ldr	r2, [r7, #28]
 80062d2:	e841 2300 	strex	r3, r2, [r1]
 80062d6:	617b      	str	r3, [r7, #20]
   return(result);
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1e4      	bne.n	80062a8 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80062de:	e007      	b.n	80062f0 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	699a      	ldr	r2, [r3, #24]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f042 0208 	orr.w	r2, r2, #8
 80062ee:	619a      	str	r2, [r3, #24]
}
 80062f0:	bf00      	nop
 80062f2:	37b8      	adds	r7, #184	@ 0xb8
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	40008000 	.word	0x40008000
 80062fc:	08005a81 	.word	0x08005a81

08006300 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006308:	bf00      	nop
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	bc80      	pop	{r7}
 8006310:	4770      	bx	lr

08006312 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006312:	b480      	push	{r7}
 8006314:	b083      	sub	sp, #12
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800631a:	bf00      	nop
 800631c:	370c      	adds	r7, #12
 800631e:	46bd      	mov	sp, r7
 8006320:	bc80      	pop	{r7}
 8006322:	4770      	bx	lr

08006324 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800632c:	bf00      	nop
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	bc80      	pop	{r7}
 8006334:	4770      	bx	lr

08006336 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006336:	b480      	push	{r7}
 8006338:	b085      	sub	sp, #20
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006344:	2b01      	cmp	r3, #1
 8006346:	d101      	bne.n	800634c <HAL_UARTEx_DisableFifoMode+0x16>
 8006348:	2302      	movs	r3, #2
 800634a:	e027      	b.n	800639c <HAL_UARTEx_DisableFifoMode+0x66>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2224      	movs	r2, #36	@ 0x24
 8006358:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f022 0201 	bic.w	r2, r2, #1
 8006372:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800637a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2220      	movs	r2, #32
 800638e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3714      	adds	r7, #20
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bc80      	pop	{r7}
 80063a4:	4770      	bx	lr

080063a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b084      	sub	sp, #16
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
 80063ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d101      	bne.n	80063be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80063ba:	2302      	movs	r3, #2
 80063bc:	e02d      	b.n	800641a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2224      	movs	r2, #36	@ 0x24
 80063ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f022 0201 	bic.w	r2, r2, #1
 80063e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	683a      	ldr	r2, [r7, #0]
 80063f6:	430a      	orrs	r2, r1
 80063f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 f850 	bl	80064a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2220      	movs	r2, #32
 800640c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3710      	adds	r7, #16
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}

08006422 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006422:	b580      	push	{r7, lr}
 8006424:	b084      	sub	sp, #16
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
 800642a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006432:	2b01      	cmp	r3, #1
 8006434:	d101      	bne.n	800643a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006436:	2302      	movs	r3, #2
 8006438:	e02d      	b.n	8006496 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2201      	movs	r2, #1
 800643e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2224      	movs	r2, #36	@ 0x24
 8006446:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f022 0201 	bic.w	r2, r2, #1
 8006460:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	683a      	ldr	r2, [r7, #0]
 8006472:	430a      	orrs	r2, r1
 8006474:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 f812 	bl	80064a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2220      	movs	r2, #32
 8006488:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
	...

080064a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d108      	bne.n	80064c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80064c0:	e031      	b.n	8006526 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80064c2:	2308      	movs	r3, #8
 80064c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80064c6:	2308      	movs	r3, #8
 80064c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	0e5b      	lsrs	r3, r3, #25
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	f003 0307 	and.w	r3, r3, #7
 80064d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	0f5b      	lsrs	r3, r3, #29
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	f003 0307 	and.w	r3, r3, #7
 80064e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80064ea:	7bbb      	ldrb	r3, [r7, #14]
 80064ec:	7b3a      	ldrb	r2, [r7, #12]
 80064ee:	4910      	ldr	r1, [pc, #64]	@ (8006530 <UARTEx_SetNbDataToProcess+0x90>)
 80064f0:	5c8a      	ldrb	r2, [r1, r2]
 80064f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80064f6:	7b3a      	ldrb	r2, [r7, #12]
 80064f8:	490e      	ldr	r1, [pc, #56]	@ (8006534 <UARTEx_SetNbDataToProcess+0x94>)
 80064fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80064fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8006500:	b29a      	uxth	r2, r3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006508:	7bfb      	ldrb	r3, [r7, #15]
 800650a:	7b7a      	ldrb	r2, [r7, #13]
 800650c:	4908      	ldr	r1, [pc, #32]	@ (8006530 <UARTEx_SetNbDataToProcess+0x90>)
 800650e:	5c8a      	ldrb	r2, [r1, r2]
 8006510:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006514:	7b7a      	ldrb	r2, [r7, #13]
 8006516:	4907      	ldr	r1, [pc, #28]	@ (8006534 <UARTEx_SetNbDataToProcess+0x94>)
 8006518:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800651a:	fb93 f3f2 	sdiv	r3, r3, r2
 800651e:	b29a      	uxth	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006526:	bf00      	nop
 8006528:	3714      	adds	r7, #20
 800652a:	46bd      	mov	sp, r7
 800652c:	bc80      	pop	{r7}
 800652e:	4770      	bx	lr
 8006530:	08007060 	.word	0x08007060
 8006534:	08007068 	.word	0x08007068

08006538 <sniprintf>:
 8006538:	b40c      	push	{r2, r3}
 800653a:	b530      	push	{r4, r5, lr}
 800653c:	4b18      	ldr	r3, [pc, #96]	@ (80065a0 <sniprintf+0x68>)
 800653e:	1e0c      	subs	r4, r1, #0
 8006540:	681d      	ldr	r5, [r3, #0]
 8006542:	b09d      	sub	sp, #116	@ 0x74
 8006544:	da08      	bge.n	8006558 <sniprintf+0x20>
 8006546:	238b      	movs	r3, #139	@ 0x8b
 8006548:	602b      	str	r3, [r5, #0]
 800654a:	f04f 30ff 	mov.w	r0, #4294967295
 800654e:	b01d      	add	sp, #116	@ 0x74
 8006550:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006554:	b002      	add	sp, #8
 8006556:	4770      	bx	lr
 8006558:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800655c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006560:	f04f 0300 	mov.w	r3, #0
 8006564:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006566:	bf14      	ite	ne
 8006568:	f104 33ff 	addne.w	r3, r4, #4294967295
 800656c:	4623      	moveq	r3, r4
 800656e:	9304      	str	r3, [sp, #16]
 8006570:	9307      	str	r3, [sp, #28]
 8006572:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006576:	9002      	str	r0, [sp, #8]
 8006578:	9006      	str	r0, [sp, #24]
 800657a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800657e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006580:	ab21      	add	r3, sp, #132	@ 0x84
 8006582:	a902      	add	r1, sp, #8
 8006584:	4628      	mov	r0, r5
 8006586:	9301      	str	r3, [sp, #4]
 8006588:	f000 f9b6 	bl	80068f8 <_svfiprintf_r>
 800658c:	1c43      	adds	r3, r0, #1
 800658e:	bfbc      	itt	lt
 8006590:	238b      	movlt	r3, #139	@ 0x8b
 8006592:	602b      	strlt	r3, [r5, #0]
 8006594:	2c00      	cmp	r4, #0
 8006596:	d0da      	beq.n	800654e <sniprintf+0x16>
 8006598:	9b02      	ldr	r3, [sp, #8]
 800659a:	2200      	movs	r2, #0
 800659c:	701a      	strb	r2, [r3, #0]
 800659e:	e7d6      	b.n	800654e <sniprintf+0x16>
 80065a0:	2000011c 	.word	0x2000011c

080065a4 <siprintf>:
 80065a4:	b40e      	push	{r1, r2, r3}
 80065a6:	b510      	push	{r4, lr}
 80065a8:	b09d      	sub	sp, #116	@ 0x74
 80065aa:	ab1f      	add	r3, sp, #124	@ 0x7c
 80065ac:	9002      	str	r0, [sp, #8]
 80065ae:	9006      	str	r0, [sp, #24]
 80065b0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80065b4:	480a      	ldr	r0, [pc, #40]	@ (80065e0 <siprintf+0x3c>)
 80065b6:	9107      	str	r1, [sp, #28]
 80065b8:	9104      	str	r1, [sp, #16]
 80065ba:	490a      	ldr	r1, [pc, #40]	@ (80065e4 <siprintf+0x40>)
 80065bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80065c0:	9105      	str	r1, [sp, #20]
 80065c2:	2400      	movs	r4, #0
 80065c4:	a902      	add	r1, sp, #8
 80065c6:	6800      	ldr	r0, [r0, #0]
 80065c8:	9301      	str	r3, [sp, #4]
 80065ca:	941b      	str	r4, [sp, #108]	@ 0x6c
 80065cc:	f000 f994 	bl	80068f8 <_svfiprintf_r>
 80065d0:	9b02      	ldr	r3, [sp, #8]
 80065d2:	701c      	strb	r4, [r3, #0]
 80065d4:	b01d      	add	sp, #116	@ 0x74
 80065d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065da:	b003      	add	sp, #12
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	2000011c 	.word	0x2000011c
 80065e4:	ffff0208 	.word	0xffff0208

080065e8 <memset>:
 80065e8:	4402      	add	r2, r0
 80065ea:	4603      	mov	r3, r0
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d100      	bne.n	80065f2 <memset+0xa>
 80065f0:	4770      	bx	lr
 80065f2:	f803 1b01 	strb.w	r1, [r3], #1
 80065f6:	e7f9      	b.n	80065ec <memset+0x4>

080065f8 <__errno>:
 80065f8:	4b01      	ldr	r3, [pc, #4]	@ (8006600 <__errno+0x8>)
 80065fa:	6818      	ldr	r0, [r3, #0]
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	2000011c 	.word	0x2000011c

08006604 <__libc_init_array>:
 8006604:	b570      	push	{r4, r5, r6, lr}
 8006606:	4d0d      	ldr	r5, [pc, #52]	@ (800663c <__libc_init_array+0x38>)
 8006608:	4c0d      	ldr	r4, [pc, #52]	@ (8006640 <__libc_init_array+0x3c>)
 800660a:	1b64      	subs	r4, r4, r5
 800660c:	10a4      	asrs	r4, r4, #2
 800660e:	2600      	movs	r6, #0
 8006610:	42a6      	cmp	r6, r4
 8006612:	d109      	bne.n	8006628 <__libc_init_array+0x24>
 8006614:	4d0b      	ldr	r5, [pc, #44]	@ (8006644 <__libc_init_array+0x40>)
 8006616:	4c0c      	ldr	r4, [pc, #48]	@ (8006648 <__libc_init_array+0x44>)
 8006618:	f000 fc64 	bl	8006ee4 <_init>
 800661c:	1b64      	subs	r4, r4, r5
 800661e:	10a4      	asrs	r4, r4, #2
 8006620:	2600      	movs	r6, #0
 8006622:	42a6      	cmp	r6, r4
 8006624:	d105      	bne.n	8006632 <__libc_init_array+0x2e>
 8006626:	bd70      	pop	{r4, r5, r6, pc}
 8006628:	f855 3b04 	ldr.w	r3, [r5], #4
 800662c:	4798      	blx	r3
 800662e:	3601      	adds	r6, #1
 8006630:	e7ee      	b.n	8006610 <__libc_init_array+0xc>
 8006632:	f855 3b04 	ldr.w	r3, [r5], #4
 8006636:	4798      	blx	r3
 8006638:	3601      	adds	r6, #1
 800663a:	e7f2      	b.n	8006622 <__libc_init_array+0x1e>
 800663c:	080070ac 	.word	0x080070ac
 8006640:	080070ac 	.word	0x080070ac
 8006644:	080070ac 	.word	0x080070ac
 8006648:	080070b0 	.word	0x080070b0

0800664c <__retarget_lock_acquire_recursive>:
 800664c:	4770      	bx	lr

0800664e <__retarget_lock_release_recursive>:
 800664e:	4770      	bx	lr

08006650 <_free_r>:
 8006650:	b538      	push	{r3, r4, r5, lr}
 8006652:	4605      	mov	r5, r0
 8006654:	2900      	cmp	r1, #0
 8006656:	d041      	beq.n	80066dc <_free_r+0x8c>
 8006658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800665c:	1f0c      	subs	r4, r1, #4
 800665e:	2b00      	cmp	r3, #0
 8006660:	bfb8      	it	lt
 8006662:	18e4      	addlt	r4, r4, r3
 8006664:	f000 f8e0 	bl	8006828 <__malloc_lock>
 8006668:	4a1d      	ldr	r2, [pc, #116]	@ (80066e0 <_free_r+0x90>)
 800666a:	6813      	ldr	r3, [r2, #0]
 800666c:	b933      	cbnz	r3, 800667c <_free_r+0x2c>
 800666e:	6063      	str	r3, [r4, #4]
 8006670:	6014      	str	r4, [r2, #0]
 8006672:	4628      	mov	r0, r5
 8006674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006678:	f000 b8dc 	b.w	8006834 <__malloc_unlock>
 800667c:	42a3      	cmp	r3, r4
 800667e:	d908      	bls.n	8006692 <_free_r+0x42>
 8006680:	6820      	ldr	r0, [r4, #0]
 8006682:	1821      	adds	r1, r4, r0
 8006684:	428b      	cmp	r3, r1
 8006686:	bf01      	itttt	eq
 8006688:	6819      	ldreq	r1, [r3, #0]
 800668a:	685b      	ldreq	r3, [r3, #4]
 800668c:	1809      	addeq	r1, r1, r0
 800668e:	6021      	streq	r1, [r4, #0]
 8006690:	e7ed      	b.n	800666e <_free_r+0x1e>
 8006692:	461a      	mov	r2, r3
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	b10b      	cbz	r3, 800669c <_free_r+0x4c>
 8006698:	42a3      	cmp	r3, r4
 800669a:	d9fa      	bls.n	8006692 <_free_r+0x42>
 800669c:	6811      	ldr	r1, [r2, #0]
 800669e:	1850      	adds	r0, r2, r1
 80066a0:	42a0      	cmp	r0, r4
 80066a2:	d10b      	bne.n	80066bc <_free_r+0x6c>
 80066a4:	6820      	ldr	r0, [r4, #0]
 80066a6:	4401      	add	r1, r0
 80066a8:	1850      	adds	r0, r2, r1
 80066aa:	4283      	cmp	r3, r0
 80066ac:	6011      	str	r1, [r2, #0]
 80066ae:	d1e0      	bne.n	8006672 <_free_r+0x22>
 80066b0:	6818      	ldr	r0, [r3, #0]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	6053      	str	r3, [r2, #4]
 80066b6:	4408      	add	r0, r1
 80066b8:	6010      	str	r0, [r2, #0]
 80066ba:	e7da      	b.n	8006672 <_free_r+0x22>
 80066bc:	d902      	bls.n	80066c4 <_free_r+0x74>
 80066be:	230c      	movs	r3, #12
 80066c0:	602b      	str	r3, [r5, #0]
 80066c2:	e7d6      	b.n	8006672 <_free_r+0x22>
 80066c4:	6820      	ldr	r0, [r4, #0]
 80066c6:	1821      	adds	r1, r4, r0
 80066c8:	428b      	cmp	r3, r1
 80066ca:	bf04      	itt	eq
 80066cc:	6819      	ldreq	r1, [r3, #0]
 80066ce:	685b      	ldreq	r3, [r3, #4]
 80066d0:	6063      	str	r3, [r4, #4]
 80066d2:	bf04      	itt	eq
 80066d4:	1809      	addeq	r1, r1, r0
 80066d6:	6021      	streq	r1, [r4, #0]
 80066d8:	6054      	str	r4, [r2, #4]
 80066da:	e7ca      	b.n	8006672 <_free_r+0x22>
 80066dc:	bd38      	pop	{r3, r4, r5, pc}
 80066de:	bf00      	nop
 80066e0:	2000059c 	.word	0x2000059c

080066e4 <sbrk_aligned>:
 80066e4:	b570      	push	{r4, r5, r6, lr}
 80066e6:	4e0f      	ldr	r6, [pc, #60]	@ (8006724 <sbrk_aligned+0x40>)
 80066e8:	460c      	mov	r4, r1
 80066ea:	6831      	ldr	r1, [r6, #0]
 80066ec:	4605      	mov	r5, r0
 80066ee:	b911      	cbnz	r1, 80066f6 <sbrk_aligned+0x12>
 80066f0:	f000 fba4 	bl	8006e3c <_sbrk_r>
 80066f4:	6030      	str	r0, [r6, #0]
 80066f6:	4621      	mov	r1, r4
 80066f8:	4628      	mov	r0, r5
 80066fa:	f000 fb9f 	bl	8006e3c <_sbrk_r>
 80066fe:	1c43      	adds	r3, r0, #1
 8006700:	d103      	bne.n	800670a <sbrk_aligned+0x26>
 8006702:	f04f 34ff 	mov.w	r4, #4294967295
 8006706:	4620      	mov	r0, r4
 8006708:	bd70      	pop	{r4, r5, r6, pc}
 800670a:	1cc4      	adds	r4, r0, #3
 800670c:	f024 0403 	bic.w	r4, r4, #3
 8006710:	42a0      	cmp	r0, r4
 8006712:	d0f8      	beq.n	8006706 <sbrk_aligned+0x22>
 8006714:	1a21      	subs	r1, r4, r0
 8006716:	4628      	mov	r0, r5
 8006718:	f000 fb90 	bl	8006e3c <_sbrk_r>
 800671c:	3001      	adds	r0, #1
 800671e:	d1f2      	bne.n	8006706 <sbrk_aligned+0x22>
 8006720:	e7ef      	b.n	8006702 <sbrk_aligned+0x1e>
 8006722:	bf00      	nop
 8006724:	20000598 	.word	0x20000598

08006728 <_malloc_r>:
 8006728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800672c:	1ccd      	adds	r5, r1, #3
 800672e:	f025 0503 	bic.w	r5, r5, #3
 8006732:	3508      	adds	r5, #8
 8006734:	2d0c      	cmp	r5, #12
 8006736:	bf38      	it	cc
 8006738:	250c      	movcc	r5, #12
 800673a:	2d00      	cmp	r5, #0
 800673c:	4606      	mov	r6, r0
 800673e:	db01      	blt.n	8006744 <_malloc_r+0x1c>
 8006740:	42a9      	cmp	r1, r5
 8006742:	d904      	bls.n	800674e <_malloc_r+0x26>
 8006744:	230c      	movs	r3, #12
 8006746:	6033      	str	r3, [r6, #0]
 8006748:	2000      	movs	r0, #0
 800674a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800674e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006824 <_malloc_r+0xfc>
 8006752:	f000 f869 	bl	8006828 <__malloc_lock>
 8006756:	f8d8 3000 	ldr.w	r3, [r8]
 800675a:	461c      	mov	r4, r3
 800675c:	bb44      	cbnz	r4, 80067b0 <_malloc_r+0x88>
 800675e:	4629      	mov	r1, r5
 8006760:	4630      	mov	r0, r6
 8006762:	f7ff ffbf 	bl	80066e4 <sbrk_aligned>
 8006766:	1c43      	adds	r3, r0, #1
 8006768:	4604      	mov	r4, r0
 800676a:	d158      	bne.n	800681e <_malloc_r+0xf6>
 800676c:	f8d8 4000 	ldr.w	r4, [r8]
 8006770:	4627      	mov	r7, r4
 8006772:	2f00      	cmp	r7, #0
 8006774:	d143      	bne.n	80067fe <_malloc_r+0xd6>
 8006776:	2c00      	cmp	r4, #0
 8006778:	d04b      	beq.n	8006812 <_malloc_r+0xea>
 800677a:	6823      	ldr	r3, [r4, #0]
 800677c:	4639      	mov	r1, r7
 800677e:	4630      	mov	r0, r6
 8006780:	eb04 0903 	add.w	r9, r4, r3
 8006784:	f000 fb5a 	bl	8006e3c <_sbrk_r>
 8006788:	4581      	cmp	r9, r0
 800678a:	d142      	bne.n	8006812 <_malloc_r+0xea>
 800678c:	6821      	ldr	r1, [r4, #0]
 800678e:	1a6d      	subs	r5, r5, r1
 8006790:	4629      	mov	r1, r5
 8006792:	4630      	mov	r0, r6
 8006794:	f7ff ffa6 	bl	80066e4 <sbrk_aligned>
 8006798:	3001      	adds	r0, #1
 800679a:	d03a      	beq.n	8006812 <_malloc_r+0xea>
 800679c:	6823      	ldr	r3, [r4, #0]
 800679e:	442b      	add	r3, r5
 80067a0:	6023      	str	r3, [r4, #0]
 80067a2:	f8d8 3000 	ldr.w	r3, [r8]
 80067a6:	685a      	ldr	r2, [r3, #4]
 80067a8:	bb62      	cbnz	r2, 8006804 <_malloc_r+0xdc>
 80067aa:	f8c8 7000 	str.w	r7, [r8]
 80067ae:	e00f      	b.n	80067d0 <_malloc_r+0xa8>
 80067b0:	6822      	ldr	r2, [r4, #0]
 80067b2:	1b52      	subs	r2, r2, r5
 80067b4:	d420      	bmi.n	80067f8 <_malloc_r+0xd0>
 80067b6:	2a0b      	cmp	r2, #11
 80067b8:	d917      	bls.n	80067ea <_malloc_r+0xc2>
 80067ba:	1961      	adds	r1, r4, r5
 80067bc:	42a3      	cmp	r3, r4
 80067be:	6025      	str	r5, [r4, #0]
 80067c0:	bf18      	it	ne
 80067c2:	6059      	strne	r1, [r3, #4]
 80067c4:	6863      	ldr	r3, [r4, #4]
 80067c6:	bf08      	it	eq
 80067c8:	f8c8 1000 	streq.w	r1, [r8]
 80067cc:	5162      	str	r2, [r4, r5]
 80067ce:	604b      	str	r3, [r1, #4]
 80067d0:	4630      	mov	r0, r6
 80067d2:	f000 f82f 	bl	8006834 <__malloc_unlock>
 80067d6:	f104 000b 	add.w	r0, r4, #11
 80067da:	1d23      	adds	r3, r4, #4
 80067dc:	f020 0007 	bic.w	r0, r0, #7
 80067e0:	1ac2      	subs	r2, r0, r3
 80067e2:	bf1c      	itt	ne
 80067e4:	1a1b      	subne	r3, r3, r0
 80067e6:	50a3      	strne	r3, [r4, r2]
 80067e8:	e7af      	b.n	800674a <_malloc_r+0x22>
 80067ea:	6862      	ldr	r2, [r4, #4]
 80067ec:	42a3      	cmp	r3, r4
 80067ee:	bf0c      	ite	eq
 80067f0:	f8c8 2000 	streq.w	r2, [r8]
 80067f4:	605a      	strne	r2, [r3, #4]
 80067f6:	e7eb      	b.n	80067d0 <_malloc_r+0xa8>
 80067f8:	4623      	mov	r3, r4
 80067fa:	6864      	ldr	r4, [r4, #4]
 80067fc:	e7ae      	b.n	800675c <_malloc_r+0x34>
 80067fe:	463c      	mov	r4, r7
 8006800:	687f      	ldr	r7, [r7, #4]
 8006802:	e7b6      	b.n	8006772 <_malloc_r+0x4a>
 8006804:	461a      	mov	r2, r3
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	42a3      	cmp	r3, r4
 800680a:	d1fb      	bne.n	8006804 <_malloc_r+0xdc>
 800680c:	2300      	movs	r3, #0
 800680e:	6053      	str	r3, [r2, #4]
 8006810:	e7de      	b.n	80067d0 <_malloc_r+0xa8>
 8006812:	230c      	movs	r3, #12
 8006814:	6033      	str	r3, [r6, #0]
 8006816:	4630      	mov	r0, r6
 8006818:	f000 f80c 	bl	8006834 <__malloc_unlock>
 800681c:	e794      	b.n	8006748 <_malloc_r+0x20>
 800681e:	6005      	str	r5, [r0, #0]
 8006820:	e7d6      	b.n	80067d0 <_malloc_r+0xa8>
 8006822:	bf00      	nop
 8006824:	2000059c 	.word	0x2000059c

08006828 <__malloc_lock>:
 8006828:	4801      	ldr	r0, [pc, #4]	@ (8006830 <__malloc_lock+0x8>)
 800682a:	f7ff bf0f 	b.w	800664c <__retarget_lock_acquire_recursive>
 800682e:	bf00      	nop
 8006830:	20000594 	.word	0x20000594

08006834 <__malloc_unlock>:
 8006834:	4801      	ldr	r0, [pc, #4]	@ (800683c <__malloc_unlock+0x8>)
 8006836:	f7ff bf0a 	b.w	800664e <__retarget_lock_release_recursive>
 800683a:	bf00      	nop
 800683c:	20000594 	.word	0x20000594

08006840 <__ssputs_r>:
 8006840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006844:	688e      	ldr	r6, [r1, #8]
 8006846:	461f      	mov	r7, r3
 8006848:	42be      	cmp	r6, r7
 800684a:	680b      	ldr	r3, [r1, #0]
 800684c:	4682      	mov	sl, r0
 800684e:	460c      	mov	r4, r1
 8006850:	4690      	mov	r8, r2
 8006852:	d82d      	bhi.n	80068b0 <__ssputs_r+0x70>
 8006854:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006858:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800685c:	d026      	beq.n	80068ac <__ssputs_r+0x6c>
 800685e:	6965      	ldr	r5, [r4, #20]
 8006860:	6909      	ldr	r1, [r1, #16]
 8006862:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006866:	eba3 0901 	sub.w	r9, r3, r1
 800686a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800686e:	1c7b      	adds	r3, r7, #1
 8006870:	444b      	add	r3, r9
 8006872:	106d      	asrs	r5, r5, #1
 8006874:	429d      	cmp	r5, r3
 8006876:	bf38      	it	cc
 8006878:	461d      	movcc	r5, r3
 800687a:	0553      	lsls	r3, r2, #21
 800687c:	d527      	bpl.n	80068ce <__ssputs_r+0x8e>
 800687e:	4629      	mov	r1, r5
 8006880:	f7ff ff52 	bl	8006728 <_malloc_r>
 8006884:	4606      	mov	r6, r0
 8006886:	b360      	cbz	r0, 80068e2 <__ssputs_r+0xa2>
 8006888:	6921      	ldr	r1, [r4, #16]
 800688a:	464a      	mov	r2, r9
 800688c:	f000 fae6 	bl	8006e5c <memcpy>
 8006890:	89a3      	ldrh	r3, [r4, #12]
 8006892:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006896:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800689a:	81a3      	strh	r3, [r4, #12]
 800689c:	6126      	str	r6, [r4, #16]
 800689e:	6165      	str	r5, [r4, #20]
 80068a0:	444e      	add	r6, r9
 80068a2:	eba5 0509 	sub.w	r5, r5, r9
 80068a6:	6026      	str	r6, [r4, #0]
 80068a8:	60a5      	str	r5, [r4, #8]
 80068aa:	463e      	mov	r6, r7
 80068ac:	42be      	cmp	r6, r7
 80068ae:	d900      	bls.n	80068b2 <__ssputs_r+0x72>
 80068b0:	463e      	mov	r6, r7
 80068b2:	6820      	ldr	r0, [r4, #0]
 80068b4:	4632      	mov	r2, r6
 80068b6:	4641      	mov	r1, r8
 80068b8:	f000 faa6 	bl	8006e08 <memmove>
 80068bc:	68a3      	ldr	r3, [r4, #8]
 80068be:	1b9b      	subs	r3, r3, r6
 80068c0:	60a3      	str	r3, [r4, #8]
 80068c2:	6823      	ldr	r3, [r4, #0]
 80068c4:	4433      	add	r3, r6
 80068c6:	6023      	str	r3, [r4, #0]
 80068c8:	2000      	movs	r0, #0
 80068ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068ce:	462a      	mov	r2, r5
 80068d0:	f000 fad2 	bl	8006e78 <_realloc_r>
 80068d4:	4606      	mov	r6, r0
 80068d6:	2800      	cmp	r0, #0
 80068d8:	d1e0      	bne.n	800689c <__ssputs_r+0x5c>
 80068da:	6921      	ldr	r1, [r4, #16]
 80068dc:	4650      	mov	r0, sl
 80068de:	f7ff feb7 	bl	8006650 <_free_r>
 80068e2:	230c      	movs	r3, #12
 80068e4:	f8ca 3000 	str.w	r3, [sl]
 80068e8:	89a3      	ldrh	r3, [r4, #12]
 80068ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068ee:	81a3      	strh	r3, [r4, #12]
 80068f0:	f04f 30ff 	mov.w	r0, #4294967295
 80068f4:	e7e9      	b.n	80068ca <__ssputs_r+0x8a>
	...

080068f8 <_svfiprintf_r>:
 80068f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068fc:	4698      	mov	r8, r3
 80068fe:	898b      	ldrh	r3, [r1, #12]
 8006900:	061b      	lsls	r3, r3, #24
 8006902:	b09d      	sub	sp, #116	@ 0x74
 8006904:	4607      	mov	r7, r0
 8006906:	460d      	mov	r5, r1
 8006908:	4614      	mov	r4, r2
 800690a:	d510      	bpl.n	800692e <_svfiprintf_r+0x36>
 800690c:	690b      	ldr	r3, [r1, #16]
 800690e:	b973      	cbnz	r3, 800692e <_svfiprintf_r+0x36>
 8006910:	2140      	movs	r1, #64	@ 0x40
 8006912:	f7ff ff09 	bl	8006728 <_malloc_r>
 8006916:	6028      	str	r0, [r5, #0]
 8006918:	6128      	str	r0, [r5, #16]
 800691a:	b930      	cbnz	r0, 800692a <_svfiprintf_r+0x32>
 800691c:	230c      	movs	r3, #12
 800691e:	603b      	str	r3, [r7, #0]
 8006920:	f04f 30ff 	mov.w	r0, #4294967295
 8006924:	b01d      	add	sp, #116	@ 0x74
 8006926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800692a:	2340      	movs	r3, #64	@ 0x40
 800692c:	616b      	str	r3, [r5, #20]
 800692e:	2300      	movs	r3, #0
 8006930:	9309      	str	r3, [sp, #36]	@ 0x24
 8006932:	2320      	movs	r3, #32
 8006934:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006938:	f8cd 800c 	str.w	r8, [sp, #12]
 800693c:	2330      	movs	r3, #48	@ 0x30
 800693e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006adc <_svfiprintf_r+0x1e4>
 8006942:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006946:	f04f 0901 	mov.w	r9, #1
 800694a:	4623      	mov	r3, r4
 800694c:	469a      	mov	sl, r3
 800694e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006952:	b10a      	cbz	r2, 8006958 <_svfiprintf_r+0x60>
 8006954:	2a25      	cmp	r2, #37	@ 0x25
 8006956:	d1f9      	bne.n	800694c <_svfiprintf_r+0x54>
 8006958:	ebba 0b04 	subs.w	fp, sl, r4
 800695c:	d00b      	beq.n	8006976 <_svfiprintf_r+0x7e>
 800695e:	465b      	mov	r3, fp
 8006960:	4622      	mov	r2, r4
 8006962:	4629      	mov	r1, r5
 8006964:	4638      	mov	r0, r7
 8006966:	f7ff ff6b 	bl	8006840 <__ssputs_r>
 800696a:	3001      	adds	r0, #1
 800696c:	f000 80a7 	beq.w	8006abe <_svfiprintf_r+0x1c6>
 8006970:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006972:	445a      	add	r2, fp
 8006974:	9209      	str	r2, [sp, #36]	@ 0x24
 8006976:	f89a 3000 	ldrb.w	r3, [sl]
 800697a:	2b00      	cmp	r3, #0
 800697c:	f000 809f 	beq.w	8006abe <_svfiprintf_r+0x1c6>
 8006980:	2300      	movs	r3, #0
 8006982:	f04f 32ff 	mov.w	r2, #4294967295
 8006986:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800698a:	f10a 0a01 	add.w	sl, sl, #1
 800698e:	9304      	str	r3, [sp, #16]
 8006990:	9307      	str	r3, [sp, #28]
 8006992:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006996:	931a      	str	r3, [sp, #104]	@ 0x68
 8006998:	4654      	mov	r4, sl
 800699a:	2205      	movs	r2, #5
 800699c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069a0:	484e      	ldr	r0, [pc, #312]	@ (8006adc <_svfiprintf_r+0x1e4>)
 80069a2:	f7f9 fbf5 	bl	8000190 <memchr>
 80069a6:	9a04      	ldr	r2, [sp, #16]
 80069a8:	b9d8      	cbnz	r0, 80069e2 <_svfiprintf_r+0xea>
 80069aa:	06d0      	lsls	r0, r2, #27
 80069ac:	bf44      	itt	mi
 80069ae:	2320      	movmi	r3, #32
 80069b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80069b4:	0711      	lsls	r1, r2, #28
 80069b6:	bf44      	itt	mi
 80069b8:	232b      	movmi	r3, #43	@ 0x2b
 80069ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80069be:	f89a 3000 	ldrb.w	r3, [sl]
 80069c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80069c4:	d015      	beq.n	80069f2 <_svfiprintf_r+0xfa>
 80069c6:	9a07      	ldr	r2, [sp, #28]
 80069c8:	4654      	mov	r4, sl
 80069ca:	2000      	movs	r0, #0
 80069cc:	f04f 0c0a 	mov.w	ip, #10
 80069d0:	4621      	mov	r1, r4
 80069d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069d6:	3b30      	subs	r3, #48	@ 0x30
 80069d8:	2b09      	cmp	r3, #9
 80069da:	d94b      	bls.n	8006a74 <_svfiprintf_r+0x17c>
 80069dc:	b1b0      	cbz	r0, 8006a0c <_svfiprintf_r+0x114>
 80069de:	9207      	str	r2, [sp, #28]
 80069e0:	e014      	b.n	8006a0c <_svfiprintf_r+0x114>
 80069e2:	eba0 0308 	sub.w	r3, r0, r8
 80069e6:	fa09 f303 	lsl.w	r3, r9, r3
 80069ea:	4313      	orrs	r3, r2
 80069ec:	9304      	str	r3, [sp, #16]
 80069ee:	46a2      	mov	sl, r4
 80069f0:	e7d2      	b.n	8006998 <_svfiprintf_r+0xa0>
 80069f2:	9b03      	ldr	r3, [sp, #12]
 80069f4:	1d19      	adds	r1, r3, #4
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	9103      	str	r1, [sp, #12]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	bfbb      	ittet	lt
 80069fe:	425b      	neglt	r3, r3
 8006a00:	f042 0202 	orrlt.w	r2, r2, #2
 8006a04:	9307      	strge	r3, [sp, #28]
 8006a06:	9307      	strlt	r3, [sp, #28]
 8006a08:	bfb8      	it	lt
 8006a0a:	9204      	strlt	r2, [sp, #16]
 8006a0c:	7823      	ldrb	r3, [r4, #0]
 8006a0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006a10:	d10a      	bne.n	8006a28 <_svfiprintf_r+0x130>
 8006a12:	7863      	ldrb	r3, [r4, #1]
 8006a14:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a16:	d132      	bne.n	8006a7e <_svfiprintf_r+0x186>
 8006a18:	9b03      	ldr	r3, [sp, #12]
 8006a1a:	1d1a      	adds	r2, r3, #4
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	9203      	str	r2, [sp, #12]
 8006a20:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006a24:	3402      	adds	r4, #2
 8006a26:	9305      	str	r3, [sp, #20]
 8006a28:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006ae0 <_svfiprintf_r+0x1e8>
 8006a2c:	7821      	ldrb	r1, [r4, #0]
 8006a2e:	2203      	movs	r2, #3
 8006a30:	4650      	mov	r0, sl
 8006a32:	f7f9 fbad 	bl	8000190 <memchr>
 8006a36:	b138      	cbz	r0, 8006a48 <_svfiprintf_r+0x150>
 8006a38:	9b04      	ldr	r3, [sp, #16]
 8006a3a:	eba0 000a 	sub.w	r0, r0, sl
 8006a3e:	2240      	movs	r2, #64	@ 0x40
 8006a40:	4082      	lsls	r2, r0
 8006a42:	4313      	orrs	r3, r2
 8006a44:	3401      	adds	r4, #1
 8006a46:	9304      	str	r3, [sp, #16]
 8006a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a4c:	4825      	ldr	r0, [pc, #148]	@ (8006ae4 <_svfiprintf_r+0x1ec>)
 8006a4e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006a52:	2206      	movs	r2, #6
 8006a54:	f7f9 fb9c 	bl	8000190 <memchr>
 8006a58:	2800      	cmp	r0, #0
 8006a5a:	d036      	beq.n	8006aca <_svfiprintf_r+0x1d2>
 8006a5c:	4b22      	ldr	r3, [pc, #136]	@ (8006ae8 <_svfiprintf_r+0x1f0>)
 8006a5e:	bb1b      	cbnz	r3, 8006aa8 <_svfiprintf_r+0x1b0>
 8006a60:	9b03      	ldr	r3, [sp, #12]
 8006a62:	3307      	adds	r3, #7
 8006a64:	f023 0307 	bic.w	r3, r3, #7
 8006a68:	3308      	adds	r3, #8
 8006a6a:	9303      	str	r3, [sp, #12]
 8006a6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a6e:	4433      	add	r3, r6
 8006a70:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a72:	e76a      	b.n	800694a <_svfiprintf_r+0x52>
 8006a74:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a78:	460c      	mov	r4, r1
 8006a7a:	2001      	movs	r0, #1
 8006a7c:	e7a8      	b.n	80069d0 <_svfiprintf_r+0xd8>
 8006a7e:	2300      	movs	r3, #0
 8006a80:	3401      	adds	r4, #1
 8006a82:	9305      	str	r3, [sp, #20]
 8006a84:	4619      	mov	r1, r3
 8006a86:	f04f 0c0a 	mov.w	ip, #10
 8006a8a:	4620      	mov	r0, r4
 8006a8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a90:	3a30      	subs	r2, #48	@ 0x30
 8006a92:	2a09      	cmp	r2, #9
 8006a94:	d903      	bls.n	8006a9e <_svfiprintf_r+0x1a6>
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d0c6      	beq.n	8006a28 <_svfiprintf_r+0x130>
 8006a9a:	9105      	str	r1, [sp, #20]
 8006a9c:	e7c4      	b.n	8006a28 <_svfiprintf_r+0x130>
 8006a9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006aa2:	4604      	mov	r4, r0
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e7f0      	b.n	8006a8a <_svfiprintf_r+0x192>
 8006aa8:	ab03      	add	r3, sp, #12
 8006aaa:	9300      	str	r3, [sp, #0]
 8006aac:	462a      	mov	r2, r5
 8006aae:	4b0f      	ldr	r3, [pc, #60]	@ (8006aec <_svfiprintf_r+0x1f4>)
 8006ab0:	a904      	add	r1, sp, #16
 8006ab2:	4638      	mov	r0, r7
 8006ab4:	f3af 8000 	nop.w
 8006ab8:	1c42      	adds	r2, r0, #1
 8006aba:	4606      	mov	r6, r0
 8006abc:	d1d6      	bne.n	8006a6c <_svfiprintf_r+0x174>
 8006abe:	89ab      	ldrh	r3, [r5, #12]
 8006ac0:	065b      	lsls	r3, r3, #25
 8006ac2:	f53f af2d 	bmi.w	8006920 <_svfiprintf_r+0x28>
 8006ac6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ac8:	e72c      	b.n	8006924 <_svfiprintf_r+0x2c>
 8006aca:	ab03      	add	r3, sp, #12
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	462a      	mov	r2, r5
 8006ad0:	4b06      	ldr	r3, [pc, #24]	@ (8006aec <_svfiprintf_r+0x1f4>)
 8006ad2:	a904      	add	r1, sp, #16
 8006ad4:	4638      	mov	r0, r7
 8006ad6:	f000 f879 	bl	8006bcc <_printf_i>
 8006ada:	e7ed      	b.n	8006ab8 <_svfiprintf_r+0x1c0>
 8006adc:	08007070 	.word	0x08007070
 8006ae0:	08007076 	.word	0x08007076
 8006ae4:	0800707a 	.word	0x0800707a
 8006ae8:	00000000 	.word	0x00000000
 8006aec:	08006841 	.word	0x08006841

08006af0 <_printf_common>:
 8006af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006af4:	4616      	mov	r6, r2
 8006af6:	4698      	mov	r8, r3
 8006af8:	688a      	ldr	r2, [r1, #8]
 8006afa:	690b      	ldr	r3, [r1, #16]
 8006afc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006b00:	4293      	cmp	r3, r2
 8006b02:	bfb8      	it	lt
 8006b04:	4613      	movlt	r3, r2
 8006b06:	6033      	str	r3, [r6, #0]
 8006b08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006b0c:	4607      	mov	r7, r0
 8006b0e:	460c      	mov	r4, r1
 8006b10:	b10a      	cbz	r2, 8006b16 <_printf_common+0x26>
 8006b12:	3301      	adds	r3, #1
 8006b14:	6033      	str	r3, [r6, #0]
 8006b16:	6823      	ldr	r3, [r4, #0]
 8006b18:	0699      	lsls	r1, r3, #26
 8006b1a:	bf42      	ittt	mi
 8006b1c:	6833      	ldrmi	r3, [r6, #0]
 8006b1e:	3302      	addmi	r3, #2
 8006b20:	6033      	strmi	r3, [r6, #0]
 8006b22:	6825      	ldr	r5, [r4, #0]
 8006b24:	f015 0506 	ands.w	r5, r5, #6
 8006b28:	d106      	bne.n	8006b38 <_printf_common+0x48>
 8006b2a:	f104 0a19 	add.w	sl, r4, #25
 8006b2e:	68e3      	ldr	r3, [r4, #12]
 8006b30:	6832      	ldr	r2, [r6, #0]
 8006b32:	1a9b      	subs	r3, r3, r2
 8006b34:	42ab      	cmp	r3, r5
 8006b36:	dc26      	bgt.n	8006b86 <_printf_common+0x96>
 8006b38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006b3c:	6822      	ldr	r2, [r4, #0]
 8006b3e:	3b00      	subs	r3, #0
 8006b40:	bf18      	it	ne
 8006b42:	2301      	movne	r3, #1
 8006b44:	0692      	lsls	r2, r2, #26
 8006b46:	d42b      	bmi.n	8006ba0 <_printf_common+0xb0>
 8006b48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006b4c:	4641      	mov	r1, r8
 8006b4e:	4638      	mov	r0, r7
 8006b50:	47c8      	blx	r9
 8006b52:	3001      	adds	r0, #1
 8006b54:	d01e      	beq.n	8006b94 <_printf_common+0xa4>
 8006b56:	6823      	ldr	r3, [r4, #0]
 8006b58:	6922      	ldr	r2, [r4, #16]
 8006b5a:	f003 0306 	and.w	r3, r3, #6
 8006b5e:	2b04      	cmp	r3, #4
 8006b60:	bf02      	ittt	eq
 8006b62:	68e5      	ldreq	r5, [r4, #12]
 8006b64:	6833      	ldreq	r3, [r6, #0]
 8006b66:	1aed      	subeq	r5, r5, r3
 8006b68:	68a3      	ldr	r3, [r4, #8]
 8006b6a:	bf0c      	ite	eq
 8006b6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b70:	2500      	movne	r5, #0
 8006b72:	4293      	cmp	r3, r2
 8006b74:	bfc4      	itt	gt
 8006b76:	1a9b      	subgt	r3, r3, r2
 8006b78:	18ed      	addgt	r5, r5, r3
 8006b7a:	2600      	movs	r6, #0
 8006b7c:	341a      	adds	r4, #26
 8006b7e:	42b5      	cmp	r5, r6
 8006b80:	d11a      	bne.n	8006bb8 <_printf_common+0xc8>
 8006b82:	2000      	movs	r0, #0
 8006b84:	e008      	b.n	8006b98 <_printf_common+0xa8>
 8006b86:	2301      	movs	r3, #1
 8006b88:	4652      	mov	r2, sl
 8006b8a:	4641      	mov	r1, r8
 8006b8c:	4638      	mov	r0, r7
 8006b8e:	47c8      	blx	r9
 8006b90:	3001      	adds	r0, #1
 8006b92:	d103      	bne.n	8006b9c <_printf_common+0xac>
 8006b94:	f04f 30ff 	mov.w	r0, #4294967295
 8006b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b9c:	3501      	adds	r5, #1
 8006b9e:	e7c6      	b.n	8006b2e <_printf_common+0x3e>
 8006ba0:	18e1      	adds	r1, r4, r3
 8006ba2:	1c5a      	adds	r2, r3, #1
 8006ba4:	2030      	movs	r0, #48	@ 0x30
 8006ba6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006baa:	4422      	add	r2, r4
 8006bac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006bb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006bb4:	3302      	adds	r3, #2
 8006bb6:	e7c7      	b.n	8006b48 <_printf_common+0x58>
 8006bb8:	2301      	movs	r3, #1
 8006bba:	4622      	mov	r2, r4
 8006bbc:	4641      	mov	r1, r8
 8006bbe:	4638      	mov	r0, r7
 8006bc0:	47c8      	blx	r9
 8006bc2:	3001      	adds	r0, #1
 8006bc4:	d0e6      	beq.n	8006b94 <_printf_common+0xa4>
 8006bc6:	3601      	adds	r6, #1
 8006bc8:	e7d9      	b.n	8006b7e <_printf_common+0x8e>
	...

08006bcc <_printf_i>:
 8006bcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bd0:	7e0f      	ldrb	r7, [r1, #24]
 8006bd2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006bd4:	2f78      	cmp	r7, #120	@ 0x78
 8006bd6:	4691      	mov	r9, r2
 8006bd8:	4680      	mov	r8, r0
 8006bda:	460c      	mov	r4, r1
 8006bdc:	469a      	mov	sl, r3
 8006bde:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006be2:	d807      	bhi.n	8006bf4 <_printf_i+0x28>
 8006be4:	2f62      	cmp	r7, #98	@ 0x62
 8006be6:	d80a      	bhi.n	8006bfe <_printf_i+0x32>
 8006be8:	2f00      	cmp	r7, #0
 8006bea:	f000 80d1 	beq.w	8006d90 <_printf_i+0x1c4>
 8006bee:	2f58      	cmp	r7, #88	@ 0x58
 8006bf0:	f000 80b8 	beq.w	8006d64 <_printf_i+0x198>
 8006bf4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006bf8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006bfc:	e03a      	b.n	8006c74 <_printf_i+0xa8>
 8006bfe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006c02:	2b15      	cmp	r3, #21
 8006c04:	d8f6      	bhi.n	8006bf4 <_printf_i+0x28>
 8006c06:	a101      	add	r1, pc, #4	@ (adr r1, 8006c0c <_printf_i+0x40>)
 8006c08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c0c:	08006c65 	.word	0x08006c65
 8006c10:	08006c79 	.word	0x08006c79
 8006c14:	08006bf5 	.word	0x08006bf5
 8006c18:	08006bf5 	.word	0x08006bf5
 8006c1c:	08006bf5 	.word	0x08006bf5
 8006c20:	08006bf5 	.word	0x08006bf5
 8006c24:	08006c79 	.word	0x08006c79
 8006c28:	08006bf5 	.word	0x08006bf5
 8006c2c:	08006bf5 	.word	0x08006bf5
 8006c30:	08006bf5 	.word	0x08006bf5
 8006c34:	08006bf5 	.word	0x08006bf5
 8006c38:	08006d77 	.word	0x08006d77
 8006c3c:	08006ca3 	.word	0x08006ca3
 8006c40:	08006d31 	.word	0x08006d31
 8006c44:	08006bf5 	.word	0x08006bf5
 8006c48:	08006bf5 	.word	0x08006bf5
 8006c4c:	08006d99 	.word	0x08006d99
 8006c50:	08006bf5 	.word	0x08006bf5
 8006c54:	08006ca3 	.word	0x08006ca3
 8006c58:	08006bf5 	.word	0x08006bf5
 8006c5c:	08006bf5 	.word	0x08006bf5
 8006c60:	08006d39 	.word	0x08006d39
 8006c64:	6833      	ldr	r3, [r6, #0]
 8006c66:	1d1a      	adds	r2, r3, #4
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	6032      	str	r2, [r6, #0]
 8006c6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006c74:	2301      	movs	r3, #1
 8006c76:	e09c      	b.n	8006db2 <_printf_i+0x1e6>
 8006c78:	6833      	ldr	r3, [r6, #0]
 8006c7a:	6820      	ldr	r0, [r4, #0]
 8006c7c:	1d19      	adds	r1, r3, #4
 8006c7e:	6031      	str	r1, [r6, #0]
 8006c80:	0606      	lsls	r6, r0, #24
 8006c82:	d501      	bpl.n	8006c88 <_printf_i+0xbc>
 8006c84:	681d      	ldr	r5, [r3, #0]
 8006c86:	e003      	b.n	8006c90 <_printf_i+0xc4>
 8006c88:	0645      	lsls	r5, r0, #25
 8006c8a:	d5fb      	bpl.n	8006c84 <_printf_i+0xb8>
 8006c8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006c90:	2d00      	cmp	r5, #0
 8006c92:	da03      	bge.n	8006c9c <_printf_i+0xd0>
 8006c94:	232d      	movs	r3, #45	@ 0x2d
 8006c96:	426d      	negs	r5, r5
 8006c98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c9c:	4858      	ldr	r0, [pc, #352]	@ (8006e00 <_printf_i+0x234>)
 8006c9e:	230a      	movs	r3, #10
 8006ca0:	e011      	b.n	8006cc6 <_printf_i+0xfa>
 8006ca2:	6821      	ldr	r1, [r4, #0]
 8006ca4:	6833      	ldr	r3, [r6, #0]
 8006ca6:	0608      	lsls	r0, r1, #24
 8006ca8:	f853 5b04 	ldr.w	r5, [r3], #4
 8006cac:	d402      	bmi.n	8006cb4 <_printf_i+0xe8>
 8006cae:	0649      	lsls	r1, r1, #25
 8006cb0:	bf48      	it	mi
 8006cb2:	b2ad      	uxthmi	r5, r5
 8006cb4:	2f6f      	cmp	r7, #111	@ 0x6f
 8006cb6:	4852      	ldr	r0, [pc, #328]	@ (8006e00 <_printf_i+0x234>)
 8006cb8:	6033      	str	r3, [r6, #0]
 8006cba:	bf14      	ite	ne
 8006cbc:	230a      	movne	r3, #10
 8006cbe:	2308      	moveq	r3, #8
 8006cc0:	2100      	movs	r1, #0
 8006cc2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006cc6:	6866      	ldr	r6, [r4, #4]
 8006cc8:	60a6      	str	r6, [r4, #8]
 8006cca:	2e00      	cmp	r6, #0
 8006ccc:	db05      	blt.n	8006cda <_printf_i+0x10e>
 8006cce:	6821      	ldr	r1, [r4, #0]
 8006cd0:	432e      	orrs	r6, r5
 8006cd2:	f021 0104 	bic.w	r1, r1, #4
 8006cd6:	6021      	str	r1, [r4, #0]
 8006cd8:	d04b      	beq.n	8006d72 <_printf_i+0x1a6>
 8006cda:	4616      	mov	r6, r2
 8006cdc:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ce0:	fb03 5711 	mls	r7, r3, r1, r5
 8006ce4:	5dc7      	ldrb	r7, [r0, r7]
 8006ce6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006cea:	462f      	mov	r7, r5
 8006cec:	42bb      	cmp	r3, r7
 8006cee:	460d      	mov	r5, r1
 8006cf0:	d9f4      	bls.n	8006cdc <_printf_i+0x110>
 8006cf2:	2b08      	cmp	r3, #8
 8006cf4:	d10b      	bne.n	8006d0e <_printf_i+0x142>
 8006cf6:	6823      	ldr	r3, [r4, #0]
 8006cf8:	07df      	lsls	r7, r3, #31
 8006cfa:	d508      	bpl.n	8006d0e <_printf_i+0x142>
 8006cfc:	6923      	ldr	r3, [r4, #16]
 8006cfe:	6861      	ldr	r1, [r4, #4]
 8006d00:	4299      	cmp	r1, r3
 8006d02:	bfde      	ittt	le
 8006d04:	2330      	movle	r3, #48	@ 0x30
 8006d06:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d0a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006d0e:	1b92      	subs	r2, r2, r6
 8006d10:	6122      	str	r2, [r4, #16]
 8006d12:	f8cd a000 	str.w	sl, [sp]
 8006d16:	464b      	mov	r3, r9
 8006d18:	aa03      	add	r2, sp, #12
 8006d1a:	4621      	mov	r1, r4
 8006d1c:	4640      	mov	r0, r8
 8006d1e:	f7ff fee7 	bl	8006af0 <_printf_common>
 8006d22:	3001      	adds	r0, #1
 8006d24:	d14a      	bne.n	8006dbc <_printf_i+0x1f0>
 8006d26:	f04f 30ff 	mov.w	r0, #4294967295
 8006d2a:	b004      	add	sp, #16
 8006d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d30:	6823      	ldr	r3, [r4, #0]
 8006d32:	f043 0320 	orr.w	r3, r3, #32
 8006d36:	6023      	str	r3, [r4, #0]
 8006d38:	4832      	ldr	r0, [pc, #200]	@ (8006e04 <_printf_i+0x238>)
 8006d3a:	2778      	movs	r7, #120	@ 0x78
 8006d3c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006d40:	6823      	ldr	r3, [r4, #0]
 8006d42:	6831      	ldr	r1, [r6, #0]
 8006d44:	061f      	lsls	r7, r3, #24
 8006d46:	f851 5b04 	ldr.w	r5, [r1], #4
 8006d4a:	d402      	bmi.n	8006d52 <_printf_i+0x186>
 8006d4c:	065f      	lsls	r7, r3, #25
 8006d4e:	bf48      	it	mi
 8006d50:	b2ad      	uxthmi	r5, r5
 8006d52:	6031      	str	r1, [r6, #0]
 8006d54:	07d9      	lsls	r1, r3, #31
 8006d56:	bf44      	itt	mi
 8006d58:	f043 0320 	orrmi.w	r3, r3, #32
 8006d5c:	6023      	strmi	r3, [r4, #0]
 8006d5e:	b11d      	cbz	r5, 8006d68 <_printf_i+0x19c>
 8006d60:	2310      	movs	r3, #16
 8006d62:	e7ad      	b.n	8006cc0 <_printf_i+0xf4>
 8006d64:	4826      	ldr	r0, [pc, #152]	@ (8006e00 <_printf_i+0x234>)
 8006d66:	e7e9      	b.n	8006d3c <_printf_i+0x170>
 8006d68:	6823      	ldr	r3, [r4, #0]
 8006d6a:	f023 0320 	bic.w	r3, r3, #32
 8006d6e:	6023      	str	r3, [r4, #0]
 8006d70:	e7f6      	b.n	8006d60 <_printf_i+0x194>
 8006d72:	4616      	mov	r6, r2
 8006d74:	e7bd      	b.n	8006cf2 <_printf_i+0x126>
 8006d76:	6833      	ldr	r3, [r6, #0]
 8006d78:	6825      	ldr	r5, [r4, #0]
 8006d7a:	6961      	ldr	r1, [r4, #20]
 8006d7c:	1d18      	adds	r0, r3, #4
 8006d7e:	6030      	str	r0, [r6, #0]
 8006d80:	062e      	lsls	r6, r5, #24
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	d501      	bpl.n	8006d8a <_printf_i+0x1be>
 8006d86:	6019      	str	r1, [r3, #0]
 8006d88:	e002      	b.n	8006d90 <_printf_i+0x1c4>
 8006d8a:	0668      	lsls	r0, r5, #25
 8006d8c:	d5fb      	bpl.n	8006d86 <_printf_i+0x1ba>
 8006d8e:	8019      	strh	r1, [r3, #0]
 8006d90:	2300      	movs	r3, #0
 8006d92:	6123      	str	r3, [r4, #16]
 8006d94:	4616      	mov	r6, r2
 8006d96:	e7bc      	b.n	8006d12 <_printf_i+0x146>
 8006d98:	6833      	ldr	r3, [r6, #0]
 8006d9a:	1d1a      	adds	r2, r3, #4
 8006d9c:	6032      	str	r2, [r6, #0]
 8006d9e:	681e      	ldr	r6, [r3, #0]
 8006da0:	6862      	ldr	r2, [r4, #4]
 8006da2:	2100      	movs	r1, #0
 8006da4:	4630      	mov	r0, r6
 8006da6:	f7f9 f9f3 	bl	8000190 <memchr>
 8006daa:	b108      	cbz	r0, 8006db0 <_printf_i+0x1e4>
 8006dac:	1b80      	subs	r0, r0, r6
 8006dae:	6060      	str	r0, [r4, #4]
 8006db0:	6863      	ldr	r3, [r4, #4]
 8006db2:	6123      	str	r3, [r4, #16]
 8006db4:	2300      	movs	r3, #0
 8006db6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006dba:	e7aa      	b.n	8006d12 <_printf_i+0x146>
 8006dbc:	6923      	ldr	r3, [r4, #16]
 8006dbe:	4632      	mov	r2, r6
 8006dc0:	4649      	mov	r1, r9
 8006dc2:	4640      	mov	r0, r8
 8006dc4:	47d0      	blx	sl
 8006dc6:	3001      	adds	r0, #1
 8006dc8:	d0ad      	beq.n	8006d26 <_printf_i+0x15a>
 8006dca:	6823      	ldr	r3, [r4, #0]
 8006dcc:	079b      	lsls	r3, r3, #30
 8006dce:	d413      	bmi.n	8006df8 <_printf_i+0x22c>
 8006dd0:	68e0      	ldr	r0, [r4, #12]
 8006dd2:	9b03      	ldr	r3, [sp, #12]
 8006dd4:	4298      	cmp	r0, r3
 8006dd6:	bfb8      	it	lt
 8006dd8:	4618      	movlt	r0, r3
 8006dda:	e7a6      	b.n	8006d2a <_printf_i+0x15e>
 8006ddc:	2301      	movs	r3, #1
 8006dde:	4632      	mov	r2, r6
 8006de0:	4649      	mov	r1, r9
 8006de2:	4640      	mov	r0, r8
 8006de4:	47d0      	blx	sl
 8006de6:	3001      	adds	r0, #1
 8006de8:	d09d      	beq.n	8006d26 <_printf_i+0x15a>
 8006dea:	3501      	adds	r5, #1
 8006dec:	68e3      	ldr	r3, [r4, #12]
 8006dee:	9903      	ldr	r1, [sp, #12]
 8006df0:	1a5b      	subs	r3, r3, r1
 8006df2:	42ab      	cmp	r3, r5
 8006df4:	dcf2      	bgt.n	8006ddc <_printf_i+0x210>
 8006df6:	e7eb      	b.n	8006dd0 <_printf_i+0x204>
 8006df8:	2500      	movs	r5, #0
 8006dfa:	f104 0619 	add.w	r6, r4, #25
 8006dfe:	e7f5      	b.n	8006dec <_printf_i+0x220>
 8006e00:	08007081 	.word	0x08007081
 8006e04:	08007092 	.word	0x08007092

08006e08 <memmove>:
 8006e08:	4288      	cmp	r0, r1
 8006e0a:	b510      	push	{r4, lr}
 8006e0c:	eb01 0402 	add.w	r4, r1, r2
 8006e10:	d902      	bls.n	8006e18 <memmove+0x10>
 8006e12:	4284      	cmp	r4, r0
 8006e14:	4623      	mov	r3, r4
 8006e16:	d807      	bhi.n	8006e28 <memmove+0x20>
 8006e18:	1e43      	subs	r3, r0, #1
 8006e1a:	42a1      	cmp	r1, r4
 8006e1c:	d008      	beq.n	8006e30 <memmove+0x28>
 8006e1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e26:	e7f8      	b.n	8006e1a <memmove+0x12>
 8006e28:	4402      	add	r2, r0
 8006e2a:	4601      	mov	r1, r0
 8006e2c:	428a      	cmp	r2, r1
 8006e2e:	d100      	bne.n	8006e32 <memmove+0x2a>
 8006e30:	bd10      	pop	{r4, pc}
 8006e32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e3a:	e7f7      	b.n	8006e2c <memmove+0x24>

08006e3c <_sbrk_r>:
 8006e3c:	b538      	push	{r3, r4, r5, lr}
 8006e3e:	4d06      	ldr	r5, [pc, #24]	@ (8006e58 <_sbrk_r+0x1c>)
 8006e40:	2300      	movs	r3, #0
 8006e42:	4604      	mov	r4, r0
 8006e44:	4608      	mov	r0, r1
 8006e46:	602b      	str	r3, [r5, #0]
 8006e48:	f7f9 fe74 	bl	8000b34 <_sbrk>
 8006e4c:	1c43      	adds	r3, r0, #1
 8006e4e:	d102      	bne.n	8006e56 <_sbrk_r+0x1a>
 8006e50:	682b      	ldr	r3, [r5, #0]
 8006e52:	b103      	cbz	r3, 8006e56 <_sbrk_r+0x1a>
 8006e54:	6023      	str	r3, [r4, #0]
 8006e56:	bd38      	pop	{r3, r4, r5, pc}
 8006e58:	20000590 	.word	0x20000590

08006e5c <memcpy>:
 8006e5c:	440a      	add	r2, r1
 8006e5e:	4291      	cmp	r1, r2
 8006e60:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e64:	d100      	bne.n	8006e68 <memcpy+0xc>
 8006e66:	4770      	bx	lr
 8006e68:	b510      	push	{r4, lr}
 8006e6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e72:	4291      	cmp	r1, r2
 8006e74:	d1f9      	bne.n	8006e6a <memcpy+0xe>
 8006e76:	bd10      	pop	{r4, pc}

08006e78 <_realloc_r>:
 8006e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e7c:	4607      	mov	r7, r0
 8006e7e:	4614      	mov	r4, r2
 8006e80:	460d      	mov	r5, r1
 8006e82:	b921      	cbnz	r1, 8006e8e <_realloc_r+0x16>
 8006e84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e88:	4611      	mov	r1, r2
 8006e8a:	f7ff bc4d 	b.w	8006728 <_malloc_r>
 8006e8e:	b92a      	cbnz	r2, 8006e9c <_realloc_r+0x24>
 8006e90:	f7ff fbde 	bl	8006650 <_free_r>
 8006e94:	4625      	mov	r5, r4
 8006e96:	4628      	mov	r0, r5
 8006e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e9c:	f000 f81a 	bl	8006ed4 <_malloc_usable_size_r>
 8006ea0:	4284      	cmp	r4, r0
 8006ea2:	4606      	mov	r6, r0
 8006ea4:	d802      	bhi.n	8006eac <_realloc_r+0x34>
 8006ea6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006eaa:	d8f4      	bhi.n	8006e96 <_realloc_r+0x1e>
 8006eac:	4621      	mov	r1, r4
 8006eae:	4638      	mov	r0, r7
 8006eb0:	f7ff fc3a 	bl	8006728 <_malloc_r>
 8006eb4:	4680      	mov	r8, r0
 8006eb6:	b908      	cbnz	r0, 8006ebc <_realloc_r+0x44>
 8006eb8:	4645      	mov	r5, r8
 8006eba:	e7ec      	b.n	8006e96 <_realloc_r+0x1e>
 8006ebc:	42b4      	cmp	r4, r6
 8006ebe:	4622      	mov	r2, r4
 8006ec0:	4629      	mov	r1, r5
 8006ec2:	bf28      	it	cs
 8006ec4:	4632      	movcs	r2, r6
 8006ec6:	f7ff ffc9 	bl	8006e5c <memcpy>
 8006eca:	4629      	mov	r1, r5
 8006ecc:	4638      	mov	r0, r7
 8006ece:	f7ff fbbf 	bl	8006650 <_free_r>
 8006ed2:	e7f1      	b.n	8006eb8 <_realloc_r+0x40>

08006ed4 <_malloc_usable_size_r>:
 8006ed4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ed8:	1f18      	subs	r0, r3, #4
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	bfbc      	itt	lt
 8006ede:	580b      	ldrlt	r3, [r1, r0]
 8006ee0:	18c0      	addlt	r0, r0, r3
 8006ee2:	4770      	bx	lr

08006ee4 <_init>:
 8006ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ee6:	bf00      	nop
 8006ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eea:	bc08      	pop	{r3}
 8006eec:	469e      	mov	lr, r3
 8006eee:	4770      	bx	lr

08006ef0 <_fini>:
 8006ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ef2:	bf00      	nop
 8006ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ef6:	bc08      	pop	{r3}
 8006ef8:	469e      	mov	lr, r3
 8006efa:	4770      	bx	lr
