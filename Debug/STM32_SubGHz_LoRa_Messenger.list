
STM32_SubGHz_LoRa_Messenger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cec  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08005e2c  08005e2c  00006e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f9c  08005f9c  0000716c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005f9c  08005f9c  00006f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fa4  08005fa4  0000716c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fa4  08005fa4  00006fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005fa8  08005fa8  00006fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000016c  20000000  08005fac  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000041c  2000016c  08006118  0000716c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000588  08006118  00007588  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000716c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000145e4  00000000  00000000  00007196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000317c  00000000  00000000  0001b77a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001480  00000000  00000000  0001e8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f7c  00000000  00000000  0001fd78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e004  00000000  00000000  00020cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013ea3  00000000  00000000  0003ecf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b663b  00000000  00000000  00052b9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001091d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059cc  00000000  00000000  0010921c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0010ebe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000016c 	.word	0x2000016c
 800015c:	00000000 	.word	0x00000000
 8000160:	08005e14 	.word	0x08005e14

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000170 	.word	0x20000170
 800017c:	08005e14 	.word	0x08005e14

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b988 	b.w	8000558 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	468e      	mov	lr, r1
 8000268:	4604      	mov	r4, r0
 800026a:	4688      	mov	r8, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14a      	bne.n	8000306 <__udivmoddi4+0xa6>
 8000270:	428a      	cmp	r2, r1
 8000272:	4617      	mov	r7, r2
 8000274:	d962      	bls.n	800033c <__udivmoddi4+0xdc>
 8000276:	fab2 f682 	clz	r6, r2
 800027a:	b14e      	cbz	r6, 8000290 <__udivmoddi4+0x30>
 800027c:	f1c6 0320 	rsb	r3, r6, #32
 8000280:	fa01 f806 	lsl.w	r8, r1, r6
 8000284:	fa20 f303 	lsr.w	r3, r0, r3
 8000288:	40b7      	lsls	r7, r6
 800028a:	ea43 0808 	orr.w	r8, r3, r8
 800028e:	40b4      	lsls	r4, r6
 8000290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000294:	fa1f fc87 	uxth.w	ip, r7
 8000298:	fbb8 f1fe 	udiv	r1, r8, lr
 800029c:	0c23      	lsrs	r3, r4, #16
 800029e:	fb0e 8811 	mls	r8, lr, r1, r8
 80002a2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a6:	fb01 f20c 	mul.w	r2, r1, ip
 80002aa:	429a      	cmp	r2, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x62>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002b4:	f080 80ea 	bcs.w	800048c <__udivmoddi4+0x22c>
 80002b8:	429a      	cmp	r2, r3
 80002ba:	f240 80e7 	bls.w	800048c <__udivmoddi4+0x22c>
 80002be:	3902      	subs	r1, #2
 80002c0:	443b      	add	r3, r7
 80002c2:	1a9a      	subs	r2, r3, r2
 80002c4:	b2a3      	uxth	r3, r4
 80002c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002d2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d6:	459c      	cmp	ip, r3
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0x8e>
 80002da:	18fb      	adds	r3, r7, r3
 80002dc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e0:	f080 80d6 	bcs.w	8000490 <__udivmoddi4+0x230>
 80002e4:	459c      	cmp	ip, r3
 80002e6:	f240 80d3 	bls.w	8000490 <__udivmoddi4+0x230>
 80002ea:	443b      	add	r3, r7
 80002ec:	3802      	subs	r0, #2
 80002ee:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f2:	eba3 030c 	sub.w	r3, r3, ip
 80002f6:	2100      	movs	r1, #0
 80002f8:	b11d      	cbz	r5, 8000302 <__udivmoddi4+0xa2>
 80002fa:	40f3      	lsrs	r3, r6
 80002fc:	2200      	movs	r2, #0
 80002fe:	e9c5 3200 	strd	r3, r2, [r5]
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	428b      	cmp	r3, r1
 8000308:	d905      	bls.n	8000316 <__udivmoddi4+0xb6>
 800030a:	b10d      	cbz	r5, 8000310 <__udivmoddi4+0xb0>
 800030c:	e9c5 0100 	strd	r0, r1, [r5]
 8000310:	2100      	movs	r1, #0
 8000312:	4608      	mov	r0, r1
 8000314:	e7f5      	b.n	8000302 <__udivmoddi4+0xa2>
 8000316:	fab3 f183 	clz	r1, r3
 800031a:	2900      	cmp	r1, #0
 800031c:	d146      	bne.n	80003ac <__udivmoddi4+0x14c>
 800031e:	4573      	cmp	r3, lr
 8000320:	d302      	bcc.n	8000328 <__udivmoddi4+0xc8>
 8000322:	4282      	cmp	r2, r0
 8000324:	f200 8105 	bhi.w	8000532 <__udivmoddi4+0x2d2>
 8000328:	1a84      	subs	r4, r0, r2
 800032a:	eb6e 0203 	sbc.w	r2, lr, r3
 800032e:	2001      	movs	r0, #1
 8000330:	4690      	mov	r8, r2
 8000332:	2d00      	cmp	r5, #0
 8000334:	d0e5      	beq.n	8000302 <__udivmoddi4+0xa2>
 8000336:	e9c5 4800 	strd	r4, r8, [r5]
 800033a:	e7e2      	b.n	8000302 <__udivmoddi4+0xa2>
 800033c:	2a00      	cmp	r2, #0
 800033e:	f000 8090 	beq.w	8000462 <__udivmoddi4+0x202>
 8000342:	fab2 f682 	clz	r6, r2
 8000346:	2e00      	cmp	r6, #0
 8000348:	f040 80a4 	bne.w	8000494 <__udivmoddi4+0x234>
 800034c:	1a8a      	subs	r2, r1, r2
 800034e:	0c03      	lsrs	r3, r0, #16
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	b280      	uxth	r0, r0
 8000356:	b2bc      	uxth	r4, r7
 8000358:	2101      	movs	r1, #1
 800035a:	fbb2 fcfe 	udiv	ip, r2, lr
 800035e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000362:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000366:	fb04 f20c 	mul.w	r2, r4, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d907      	bls.n	800037e <__udivmoddi4+0x11e>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000374:	d202      	bcs.n	800037c <__udivmoddi4+0x11c>
 8000376:	429a      	cmp	r2, r3
 8000378:	f200 80e0 	bhi.w	800053c <__udivmoddi4+0x2dc>
 800037c:	46c4      	mov	ip, r8
 800037e:	1a9b      	subs	r3, r3, r2
 8000380:	fbb3 f2fe 	udiv	r2, r3, lr
 8000384:	fb0e 3312 	mls	r3, lr, r2, r3
 8000388:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800038c:	fb02 f404 	mul.w	r4, r2, r4
 8000390:	429c      	cmp	r4, r3
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0x144>
 8000394:	18fb      	adds	r3, r7, r3
 8000396:	f102 30ff 	add.w	r0, r2, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x142>
 800039c:	429c      	cmp	r4, r3
 800039e:	f200 80ca 	bhi.w	8000536 <__udivmoddi4+0x2d6>
 80003a2:	4602      	mov	r2, r0
 80003a4:	1b1b      	subs	r3, r3, r4
 80003a6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003aa:	e7a5      	b.n	80002f8 <__udivmoddi4+0x98>
 80003ac:	f1c1 0620 	rsb	r6, r1, #32
 80003b0:	408b      	lsls	r3, r1
 80003b2:	fa22 f706 	lsr.w	r7, r2, r6
 80003b6:	431f      	orrs	r7, r3
 80003b8:	fa0e f401 	lsl.w	r4, lr, r1
 80003bc:	fa20 f306 	lsr.w	r3, r0, r6
 80003c0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003c4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003c8:	4323      	orrs	r3, r4
 80003ca:	fa00 f801 	lsl.w	r8, r0, r1
 80003ce:	fa1f fc87 	uxth.w	ip, r7
 80003d2:	fbbe f0f9 	udiv	r0, lr, r9
 80003d6:	0c1c      	lsrs	r4, r3, #16
 80003d8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003dc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003e0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ea:	d909      	bls.n	8000400 <__udivmoddi4+0x1a0>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 3aff 	add.w	sl, r0, #4294967295
 80003f2:	f080 809c 	bcs.w	800052e <__udivmoddi4+0x2ce>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f240 8099 	bls.w	800052e <__udivmoddi4+0x2ce>
 80003fc:	3802      	subs	r0, #2
 80003fe:	443c      	add	r4, r7
 8000400:	eba4 040e 	sub.w	r4, r4, lr
 8000404:	fa1f fe83 	uxth.w	lr, r3
 8000408:	fbb4 f3f9 	udiv	r3, r4, r9
 800040c:	fb09 4413 	mls	r4, r9, r3, r4
 8000410:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000414:	fb03 fc0c 	mul.w	ip, r3, ip
 8000418:	45a4      	cmp	ip, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x1ce>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000422:	f080 8082 	bcs.w	800052a <__udivmoddi4+0x2ca>
 8000426:	45a4      	cmp	ip, r4
 8000428:	d97f      	bls.n	800052a <__udivmoddi4+0x2ca>
 800042a:	3b02      	subs	r3, #2
 800042c:	443c      	add	r4, r7
 800042e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000432:	eba4 040c 	sub.w	r4, r4, ip
 8000436:	fba0 ec02 	umull	lr, ip, r0, r2
 800043a:	4564      	cmp	r4, ip
 800043c:	4673      	mov	r3, lr
 800043e:	46e1      	mov	r9, ip
 8000440:	d362      	bcc.n	8000508 <__udivmoddi4+0x2a8>
 8000442:	d05f      	beq.n	8000504 <__udivmoddi4+0x2a4>
 8000444:	b15d      	cbz	r5, 800045e <__udivmoddi4+0x1fe>
 8000446:	ebb8 0203 	subs.w	r2, r8, r3
 800044a:	eb64 0409 	sbc.w	r4, r4, r9
 800044e:	fa04 f606 	lsl.w	r6, r4, r6
 8000452:	fa22 f301 	lsr.w	r3, r2, r1
 8000456:	431e      	orrs	r6, r3
 8000458:	40cc      	lsrs	r4, r1
 800045a:	e9c5 6400 	strd	r6, r4, [r5]
 800045e:	2100      	movs	r1, #0
 8000460:	e74f      	b.n	8000302 <__udivmoddi4+0xa2>
 8000462:	fbb1 fcf2 	udiv	ip, r1, r2
 8000466:	0c01      	lsrs	r1, r0, #16
 8000468:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800046c:	b280      	uxth	r0, r0
 800046e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000472:	463b      	mov	r3, r7
 8000474:	4638      	mov	r0, r7
 8000476:	463c      	mov	r4, r7
 8000478:	46b8      	mov	r8, r7
 800047a:	46be      	mov	lr, r7
 800047c:	2620      	movs	r6, #32
 800047e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000482:	eba2 0208 	sub.w	r2, r2, r8
 8000486:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800048a:	e766      	b.n	800035a <__udivmoddi4+0xfa>
 800048c:	4601      	mov	r1, r0
 800048e:	e718      	b.n	80002c2 <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e72c      	b.n	80002ee <__udivmoddi4+0x8e>
 8000494:	f1c6 0220 	rsb	r2, r6, #32
 8000498:	fa2e f302 	lsr.w	r3, lr, r2
 800049c:	40b7      	lsls	r7, r6
 800049e:	40b1      	lsls	r1, r6
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	430a      	orrs	r2, r1
 80004aa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ae:	b2bc      	uxth	r4, r7
 80004b0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004b4:	0c11      	lsrs	r1, r2, #16
 80004b6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ba:	fb08 f904 	mul.w	r9, r8, r4
 80004be:	40b0      	lsls	r0, r6
 80004c0:	4589      	cmp	r9, r1
 80004c2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004c6:	b280      	uxth	r0, r0
 80004c8:	d93e      	bls.n	8000548 <__udivmoddi4+0x2e8>
 80004ca:	1879      	adds	r1, r7, r1
 80004cc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004d0:	d201      	bcs.n	80004d6 <__udivmoddi4+0x276>
 80004d2:	4589      	cmp	r9, r1
 80004d4:	d81f      	bhi.n	8000516 <__udivmoddi4+0x2b6>
 80004d6:	eba1 0109 	sub.w	r1, r1, r9
 80004da:	fbb1 f9fe 	udiv	r9, r1, lr
 80004de:	fb09 f804 	mul.w	r8, r9, r4
 80004e2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004e6:	b292      	uxth	r2, r2
 80004e8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004ec:	4542      	cmp	r2, r8
 80004ee:	d229      	bcs.n	8000544 <__udivmoddi4+0x2e4>
 80004f0:	18ba      	adds	r2, r7, r2
 80004f2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004f6:	d2c4      	bcs.n	8000482 <__udivmoddi4+0x222>
 80004f8:	4542      	cmp	r2, r8
 80004fa:	d2c2      	bcs.n	8000482 <__udivmoddi4+0x222>
 80004fc:	f1a9 0102 	sub.w	r1, r9, #2
 8000500:	443a      	add	r2, r7
 8000502:	e7be      	b.n	8000482 <__udivmoddi4+0x222>
 8000504:	45f0      	cmp	r8, lr
 8000506:	d29d      	bcs.n	8000444 <__udivmoddi4+0x1e4>
 8000508:	ebbe 0302 	subs.w	r3, lr, r2
 800050c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000510:	3801      	subs	r0, #1
 8000512:	46e1      	mov	r9, ip
 8000514:	e796      	b.n	8000444 <__udivmoddi4+0x1e4>
 8000516:	eba7 0909 	sub.w	r9, r7, r9
 800051a:	4449      	add	r1, r9
 800051c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000520:	fbb1 f9fe 	udiv	r9, r1, lr
 8000524:	fb09 f804 	mul.w	r8, r9, r4
 8000528:	e7db      	b.n	80004e2 <__udivmoddi4+0x282>
 800052a:	4673      	mov	r3, lr
 800052c:	e77f      	b.n	800042e <__udivmoddi4+0x1ce>
 800052e:	4650      	mov	r0, sl
 8000530:	e766      	b.n	8000400 <__udivmoddi4+0x1a0>
 8000532:	4608      	mov	r0, r1
 8000534:	e6fd      	b.n	8000332 <__udivmoddi4+0xd2>
 8000536:	443b      	add	r3, r7
 8000538:	3a02      	subs	r2, #2
 800053a:	e733      	b.n	80003a4 <__udivmoddi4+0x144>
 800053c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000540:	443b      	add	r3, r7
 8000542:	e71c      	b.n	800037e <__udivmoddi4+0x11e>
 8000544:	4649      	mov	r1, r9
 8000546:	e79c      	b.n	8000482 <__udivmoddi4+0x222>
 8000548:	eba1 0109 	sub.w	r1, r1, r9
 800054c:	46c4      	mov	ip, r8
 800054e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000552:	fb09 f804 	mul.w	r8, r9, r4
 8000556:	e7c4      	b.n	80004e2 <__udivmoddi4+0x282>

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000568:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800056a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4313      	orrs	r3, r2
 8000572:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000574:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000578:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4013      	ands	r3, r2
 800057e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000580:	68fb      	ldr	r3, [r7, #12]
}
 8000582:	bf00      	nop
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr

0800058c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a0:	2004      	movs	r0, #4
 80005a2:	f7ff ffdb 	bl	800055c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	2001      	movs	r0, #1
 80005a8:	f7ff ffd8 	bl	800055c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2138      	movs	r1, #56	@ 0x38
 80005b0:	4809      	ldr	r0, [pc, #36]	@ (80005d8 <MX_GPIO_Init+0x4c>)
 80005b2:	f000 fffd 	bl	80015b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 80005b6:	2338      	movs	r3, #56	@ 0x38
 80005b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ba:	2301      	movs	r3, #1
 80005bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005c2:	2303      	movs	r3, #3
 80005c4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	4619      	mov	r1, r3
 80005ca:	4803      	ldr	r0, [pc, #12]	@ (80005d8 <MX_GPIO_Init+0x4c>)
 80005cc:	f000 fe90 	bl	80012f0 <HAL_GPIO_Init>

}
 80005d0:	bf00      	nop
 80005d2:	3718      	adds	r7, #24
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	48000800 	.word	0x48000800

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 fbf2 	bl	8000dc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f864 	bl	80006b0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  HAL_Delay(3000);
 80005e8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80005ec:	f000 fc62 	bl	8000eb4 <HAL_Delay>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f0:	f7ff ffcc 	bl	800058c <MX_GPIO_Init>
  MX_SUBGHZ_Init();
 80005f4:	f000 f9a0 	bl	8000938 <MX_SUBGHZ_Init>
  MX_USART2_UART_Init();
 80005f8:	f000 fa30 	bl	8000a5c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  BSP_LED_Init(LED_BLUE);
 80005fc:	2000      	movs	r0, #0
 80005fe:	f000 fb09 	bl	8000c14 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8000602:	2001      	movs	r0, #1
 8000604:	f000 fb06 	bl	8000c14 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000608:	2002      	movs	r0, #2
 800060a:	f000 fb03 	bl	8000c14 <BSP_LED_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  snprintf((char*)buffer, MAX_BUFFER_SIZE, "\r\nSTM32 SubGHz LoRa Messenger\r\n\r\nPlease Enter an ID: ");
 800060e:	4a1d      	ldr	r2, [pc, #116]	@ (8000684 <main+0xa8>)
 8000610:	21ff      	movs	r1, #255	@ 0xff
 8000612:	481d      	ldr	r0, [pc, #116]	@ (8000688 <main+0xac>)
 8000614:	f004 ff28 	bl	8005468 <sniprintf>
  UART_Transmit((char*)buffer);
 8000618:	481b      	ldr	r0, [pc, #108]	@ (8000688 <main+0xac>)
 800061a:	f000 f89b 	bl	8000754 <UART_Transmit>
  while(!messageReady)HAL_UART_Receive_IT(&huart2, input, 1);
 800061e:	e004      	b.n	800062a <main+0x4e>
 8000620:	2201      	movs	r2, #1
 8000622:	491a      	ldr	r1, [pc, #104]	@ (800068c <main+0xb0>)
 8000624:	481a      	ldr	r0, [pc, #104]	@ (8000690 <main+0xb4>)
 8000626:	f002 ff61 	bl	80034ec <HAL_UART_Receive_IT>
 800062a:	4b1a      	ldr	r3, [pc, #104]	@ (8000694 <main+0xb8>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	f083 0301 	eor.w	r3, r3, #1
 8000632:	b2db      	uxtb	r3, r3
 8000634:	2b00      	cmp	r3, #0
 8000636:	d1f3      	bne.n	8000620 <main+0x44>
  messageReady = false;
 8000638:	4b16      	ldr	r3, [pc, #88]	@ (8000694 <main+0xb8>)
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
  HAL_NVIC_DisableIRQ(USART2_IRQn);
 800063e:	2025      	movs	r0, #37	@ 0x25
 8000640:	f000 fd7f 	bl	8001142 <HAL_NVIC_DisableIRQ>
  idLen = snprintf(id, MAX_BUFFER_SIZE, "%s", (char*)output);
 8000644:	4b14      	ldr	r3, [pc, #80]	@ (8000698 <main+0xbc>)
 8000646:	4a15      	ldr	r2, [pc, #84]	@ (800069c <main+0xc0>)
 8000648:	21ff      	movs	r1, #255	@ 0xff
 800064a:	4815      	ldr	r0, [pc, #84]	@ (80006a0 <main+0xc4>)
 800064c:	f004 ff0c 	bl	8005468 <sniprintf>
 8000650:	4603      	mov	r3, r0
 8000652:	4a14      	ldr	r2, [pc, #80]	@ (80006a4 <main+0xc8>)
 8000654:	6013      	str	r3, [r2, #0]
  UART_Transmit(id);
 8000656:	4812      	ldr	r0, [pc, #72]	@ (80006a0 <main+0xc4>)
 8000658:	f000 f87c 	bl	8000754 <UART_Transmit>
  UART_Transmit("\r\n\r\n");
 800065c:	4812      	ldr	r0, [pc, #72]	@ (80006a8 <main+0xcc>)
 800065e:	f000 f879 	bl	8000754 <UART_Transmit>
  resetTerminal();
 8000662:	f000 f8eb 	bl	800083c <resetTerminal>

  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000666:	2025      	movs	r0, #37	@ 0x25
 8000668:	f000 fd5d 	bl	8001126 <HAL_NVIC_EnableIRQ>

  while (1)
  {
    /* USER CODE END WHILE */

	currentEvent = NULL;
 800066c:	4b0f      	ldr	r3, [pc, #60]	@ (80006ac <main+0xd0>)
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
	while(!currentEvent);
 8000672:	bf00      	nop
 8000674:	4b0d      	ldr	r3, [pc, #52]	@ (80006ac <main+0xd0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d0fb      	beq.n	8000674 <main+0x98>
	currentEvent();
 800067c:	4b0b      	ldr	r3, [pc, #44]	@ (80006ac <main+0xd0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4798      	blx	r3
	currentEvent = NULL;
 8000682:	e7f3      	b.n	800066c <main+0x90>
 8000684:	08005e2c 	.word	0x08005e2c
 8000688:	20000188 	.word	0x20000188
 800068c:	20000388 	.word	0x20000388
 8000690:	200003a4 	.word	0x200003a4
 8000694:	2000038c 	.word	0x2000038c
 8000698:	20000288 	.word	0x20000288
 800069c:	08005e64 	.word	0x08005e64
 80006a0:	20000000 	.word	0x20000000
 80006a4:	20000100 	.word	0x20000100
 80006a8:	08005e68 	.word	0x08005e68
 80006ac:	20000390 	.word	0x20000390

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b09a      	sub	sp, #104	@ 0x68
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 0320 	add.w	r3, r7, #32
 80006ba:	2248      	movs	r2, #72	@ 0x48
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f004 ff2a 	bl	8005518 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]
 80006d2:	615a      	str	r2, [r3, #20]
 80006d4:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000750 <SystemClock_Config+0xa0>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80006de:	4a1c      	ldr	r2, [pc, #112]	@ (8000750 <SystemClock_Config+0xa0>)
 80006e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006e4:	6013      	str	r3, [r2, #0]
 80006e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000750 <SystemClock_Config+0xa0>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006f2:	2320      	movs	r3, #32
 80006f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006f6:	2301      	movs	r3, #1
 80006f8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006fa:	2300      	movs	r3, #0
 80006fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80006fe:	23b0      	movs	r3, #176	@ 0xb0
 8000700:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000702:	2300      	movs	r3, #0
 8000704:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000706:	f107 0320 	add.w	r3, r7, #32
 800070a:	4618      	mov	r0, r3
 800070c:	f001 fa3a 	bl	8001b84 <HAL_RCC_OscConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000716:	f000 f8ab 	bl	8000870 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800071a:	234f      	movs	r3, #79	@ 0x4f
 800071c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	2102      	movs	r1, #2
 8000736:	4618      	mov	r0, r3
 8000738:	f001 fda6 	bl	8002288 <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000742:	f000 f895 	bl	8000870 <Error_Handler>
  }
}
 8000746:	bf00      	nop
 8000748:	3768      	adds	r7, #104	@ 0x68
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	58000400 	.word	0x58000400

08000754 <UART_Transmit>:

/* USER CODE BEGIN 4 */

void UART_Transmit(const char* string){
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)string, strlen(string), HAL_MAX_DELAY);
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f7ff fd0f 	bl	8000180 <strlen>
 8000762:	4603      	mov	r3, r0
 8000764:	b29a      	uxth	r2, r3
 8000766:	f04f 33ff 	mov.w	r3, #4294967295
 800076a:	6879      	ldr	r1, [r7, #4]
 800076c:	4803      	ldr	r0, [pc, #12]	@ (800077c <UART_Transmit+0x28>)
 800076e:	f002 fe36 	bl	80033de <HAL_UART_Transmit>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200003a4 	.word	0x200003a4

08000780 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	switch(input[0]){
 8000788:	4b23      	ldr	r3, [pc, #140]	@ (8000818 <HAL_UART_RxCpltCallback+0x98>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b08      	cmp	r3, #8
 800078e:	d015      	beq.n	80007bc <HAL_UART_RxCpltCallback+0x3c>
 8000790:	2b0d      	cmp	r3, #13
 8000792:	d125      	bne.n	80007e0 <HAL_UART_RxCpltCallback+0x60>
		case 0xd:
			UART_Transmit("\r\n");
 8000794:	4821      	ldr	r0, [pc, #132]	@ (800081c <HAL_UART_RxCpltCallback+0x9c>)
 8000796:	f7ff ffdd 	bl	8000754 <UART_Transmit>
			sprintf((char*)output, "%s", (char*)buffer);
 800079a:	4a21      	ldr	r2, [pc, #132]	@ (8000820 <HAL_UART_RxCpltCallback+0xa0>)
 800079c:	4921      	ldr	r1, [pc, #132]	@ (8000824 <HAL_UART_RxCpltCallback+0xa4>)
 800079e:	4822      	ldr	r0, [pc, #136]	@ (8000828 <HAL_UART_RxCpltCallback+0xa8>)
 80007a0:	f004 fe98 	bl	80054d4 <siprintf>
			output[count] = '\0';
 80007a4:	4b21      	ldr	r3, [pc, #132]	@ (800082c <HAL_UART_RxCpltCallback+0xac>)
 80007a6:	881b      	ldrh	r3, [r3, #0]
 80007a8:	461a      	mov	r2, r3
 80007aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000828 <HAL_UART_RxCpltCallback+0xa8>)
 80007ac:	2100      	movs	r1, #0
 80007ae:	5499      	strb	r1, [r3, r2]
			messageReady = true;
 80007b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000830 <HAL_UART_RxCpltCallback+0xb0>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	701a      	strb	r2, [r3, #0]
			resetTerminal();
 80007b6:	f000 f841 	bl	800083c <resetTerminal>
			break;
 80007ba:	e029      	b.n	8000810 <HAL_UART_RxCpltCallback+0x90>

		case 0x8:
			if(count > (idLen + 2)){
 80007bc:	4b1b      	ldr	r3, [pc, #108]	@ (800082c <HAL_UART_RxCpltCallback+0xac>)
 80007be:	881b      	ldrh	r3, [r3, #0]
 80007c0:	461a      	mov	r2, r3
 80007c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000834 <HAL_UART_RxCpltCallback+0xb4>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	3302      	adds	r3, #2
 80007c8:	429a      	cmp	r2, r3
 80007ca:	dd20      	ble.n	800080e <HAL_UART_RxCpltCallback+0x8e>
				count--;
 80007cc:	4b17      	ldr	r3, [pc, #92]	@ (800082c <HAL_UART_RxCpltCallback+0xac>)
 80007ce:	881b      	ldrh	r3, [r3, #0]
 80007d0:	3b01      	subs	r3, #1
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	4b15      	ldr	r3, [pc, #84]	@ (800082c <HAL_UART_RxCpltCallback+0xac>)
 80007d6:	801a      	strh	r2, [r3, #0]
				UART_Transmit("\b \b");
 80007d8:	4817      	ldr	r0, [pc, #92]	@ (8000838 <HAL_UART_RxCpltCallback+0xb8>)
 80007da:	f7ff ffbb 	bl	8000754 <UART_Transmit>
			}
			break;
 80007de:	e016      	b.n	800080e <HAL_UART_RxCpltCallback+0x8e>

		default:
			if(count < MAX_BUFFER_SIZE){
 80007e0:	4b12      	ldr	r3, [pc, #72]	@ (800082c <HAL_UART_RxCpltCallback+0xac>)
 80007e2:	881b      	ldrh	r3, [r3, #0]
 80007e4:	2bfe      	cmp	r3, #254	@ 0xfe
 80007e6:	d813      	bhi.n	8000810 <HAL_UART_RxCpltCallback+0x90>
				buffer[count++] = input[0];
 80007e8:	4b10      	ldr	r3, [pc, #64]	@ (800082c <HAL_UART_RxCpltCallback+0xac>)
 80007ea:	881b      	ldrh	r3, [r3, #0]
 80007ec:	1c5a      	adds	r2, r3, #1
 80007ee:	b291      	uxth	r1, r2
 80007f0:	4a0e      	ldr	r2, [pc, #56]	@ (800082c <HAL_UART_RxCpltCallback+0xac>)
 80007f2:	8011      	strh	r1, [r2, #0]
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b08      	ldr	r3, [pc, #32]	@ (8000818 <HAL_UART_RxCpltCallback+0x98>)
 80007f8:	7819      	ldrb	r1, [r3, #0]
 80007fa:	4b09      	ldr	r3, [pc, #36]	@ (8000820 <HAL_UART_RxCpltCallback+0xa0>)
 80007fc:	5499      	strb	r1, [r3, r2]
				HAL_UART_Transmit(huart, input, 1, HAL_MAX_DELAY);
 80007fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000802:	2201      	movs	r2, #1
 8000804:	4904      	ldr	r1, [pc, #16]	@ (8000818 <HAL_UART_RxCpltCallback+0x98>)
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f002 fde9 	bl	80033de <HAL_UART_Transmit>
			}
	}
}
 800080c:	e000      	b.n	8000810 <HAL_UART_RxCpltCallback+0x90>
			break;
 800080e:	bf00      	nop
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000388 	.word	0x20000388
 800081c:	08005e70 	.word	0x08005e70
 8000820:	20000188 	.word	0x20000188
 8000824:	08005e64 	.word	0x08005e64
 8000828:	20000288 	.word	0x20000288
 800082c:	2000038a 	.word	0x2000038a
 8000830:	2000038c 	.word	0x2000038c
 8000834:	20000100 	.word	0x20000100
 8000838:	08005e74 	.word	0x08005e74

0800083c <resetTerminal>:

void resetTerminal(){
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
	UART_Transmit(id);
 8000840:	4807      	ldr	r0, [pc, #28]	@ (8000860 <resetTerminal+0x24>)
 8000842:	f7ff ff87 	bl	8000754 <UART_Transmit>
	UART_Transmit(": ");
 8000846:	4807      	ldr	r0, [pc, #28]	@ (8000864 <resetTerminal+0x28>)
 8000848:	f7ff ff84 	bl	8000754 <UART_Transmit>
	count = idLen + 2;
 800084c:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <resetTerminal+0x2c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	b29b      	uxth	r3, r3
 8000852:	3302      	adds	r3, #2
 8000854:	b29a      	uxth	r2, r3
 8000856:	4b05      	ldr	r3, [pc, #20]	@ (800086c <resetTerminal+0x30>)
 8000858:	801a      	strh	r2, [r3, #0]
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000000 	.word	0x20000000
 8000864:	08005e78 	.word	0x08005e78
 8000868:	20000100 	.word	0x20000100
 800086c:	2000038a 	.word	0x2000038a

08000870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000874:	b672      	cpsid	i
}
 8000876:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <Error_Handler+0x8>

0800087c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr

08000888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800088c:	bf00      	nop
 800088e:	e7fd      	b.n	800088c <NMI_Handler+0x4>

08000890 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000894:	bf00      	nop
 8000896:	e7fd      	b.n	8000894 <HardFault_Handler+0x4>

08000898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800089c:	bf00      	nop
 800089e:	e7fd      	b.n	800089c <MemManage_Handler+0x4>

080008a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a4:	bf00      	nop
 80008a6:	e7fd      	b.n	80008a4 <BusFault_Handler+0x4>

080008a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <UsageFault_Handler+0x4>

080008b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr

080008bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr

080008c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr

080008d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d8:	f000 fad0 	bl	8000e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}

080008e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008e4:	4802      	ldr	r0, [pc, #8]	@ (80008f0 <USART2_IRQHandler+0x10>)
 80008e6:	f002 fe4d 	bl	8003584 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	200003a4 	.word	0x200003a4

080008f4 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80008f8:	4802      	ldr	r0, [pc, #8]	@ (8000904 <SUBGHZ_Radio_IRQHandler+0x10>)
 80008fa:	f002 fb50 	bl	8002f9e <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000394 	.word	0x20000394

08000908 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000910:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000914:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000916:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4313      	orrs	r3, r2
 800091e:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000920:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000924:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4013      	ands	r3, r2
 800092a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800092c:	68fb      	ldr	r3, [r7, #12]
}
 800092e:	bf00      	nop
 8000930:	3714      	adds	r7, #20
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr

08000938 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 800093c:	4b06      	ldr	r3, [pc, #24]	@ (8000958 <MX_SUBGHZ_Init+0x20>)
 800093e:	2208      	movs	r2, #8
 8000940:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8000942:	4805      	ldr	r0, [pc, #20]	@ (8000958 <MX_SUBGHZ_Init+0x20>)
 8000944:	f002 fa14 	bl	8002d70 <HAL_SUBGHZ_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 800094e:	f7ff ff8f 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000394 	.word	0x20000394

0800095c <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000964:	2001      	movs	r0, #1
 8000966:	f7ff ffcf 	bl	8000908 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	2100      	movs	r1, #0
 800096e:	2032      	movs	r0, #50	@ 0x32
 8000970:	f000 fbbf 	bl	80010f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000974:	2032      	movs	r0, #50	@ 0x32
 8000976:	f000 fbd6 	bl	8001126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
	...

08000984 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800098c:	4a14      	ldr	r2, [pc, #80]	@ (80009e0 <_sbrk+0x5c>)
 800098e:	4b15      	ldr	r3, [pc, #84]	@ (80009e4 <_sbrk+0x60>)
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000998:	4b13      	ldr	r3, [pc, #76]	@ (80009e8 <_sbrk+0x64>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d102      	bne.n	80009a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009a0:	4b11      	ldr	r3, [pc, #68]	@ (80009e8 <_sbrk+0x64>)
 80009a2:	4a12      	ldr	r2, [pc, #72]	@ (80009ec <_sbrk+0x68>)
 80009a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009a6:	4b10      	ldr	r3, [pc, #64]	@ (80009e8 <_sbrk+0x64>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4413      	add	r3, r2
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d207      	bcs.n	80009c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b4:	f004 fdb8 	bl	8005528 <__errno>
 80009b8:	4603      	mov	r3, r0
 80009ba:	220c      	movs	r2, #12
 80009bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009be:	f04f 33ff 	mov.w	r3, #4294967295
 80009c2:	e009      	b.n	80009d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c4:	4b08      	ldr	r3, [pc, #32]	@ (80009e8 <_sbrk+0x64>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ca:	4b07      	ldr	r3, [pc, #28]	@ (80009e8 <_sbrk+0x64>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4413      	add	r3, r2
 80009d2:	4a05      	ldr	r2, [pc, #20]	@ (80009e8 <_sbrk+0x64>)
 80009d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009d6:	68fb      	ldr	r3, [r7, #12]
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3718      	adds	r7, #24
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20010000 	.word	0x20010000
 80009e4:	00000400 	.word	0x00000400
 80009e8:	200003a0 	.word	0x200003a0
 80009ec:	20000588 	.word	0x20000588

080009f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr

080009fc <LL_AHB2_GRP1_EnableClock>:
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a08:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a18:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a20:	68fb      	ldr	r3, [r7, #12]
}
 8000a22:	bf00      	nop
 8000a24:	3714      	adds	r7, #20
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr

08000a2c <LL_APB1_GRP1_EnableClock>:
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000a34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a38:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000a3a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000a44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a48:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a50:	68fb      	ldr	r3, [r7, #12]
}
 8000a52:	bf00      	nop
 8000a54:	3714      	adds	r7, #20
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr

08000a5c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a60:	4b22      	ldr	r3, [pc, #136]	@ (8000aec <MX_USART2_UART_Init+0x90>)
 8000a62:	4a23      	ldr	r2, [pc, #140]	@ (8000af0 <MX_USART2_UART_Init+0x94>)
 8000a64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a66:	4b21      	ldr	r3, [pc, #132]	@ (8000aec <MX_USART2_UART_Init+0x90>)
 8000a68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6e:	4b1f      	ldr	r3, [pc, #124]	@ (8000aec <MX_USART2_UART_Init+0x90>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a74:	4b1d      	ldr	r3, [pc, #116]	@ (8000aec <MX_USART2_UART_Init+0x90>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000aec <MX_USART2_UART_Init+0x90>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a80:	4b1a      	ldr	r3, [pc, #104]	@ (8000aec <MX_USART2_UART_Init+0x90>)
 8000a82:	220c      	movs	r2, #12
 8000a84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a86:	4b19      	ldr	r3, [pc, #100]	@ (8000aec <MX_USART2_UART_Init+0x90>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a8c:	4b17      	ldr	r3, [pc, #92]	@ (8000aec <MX_USART2_UART_Init+0x90>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a92:	4b16      	ldr	r3, [pc, #88]	@ (8000aec <MX_USART2_UART_Init+0x90>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a98:	4b14      	ldr	r3, [pc, #80]	@ (8000aec <MX_USART2_UART_Init+0x90>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a9e:	4b13      	ldr	r3, [pc, #76]	@ (8000aec <MX_USART2_UART_Init+0x90>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aa4:	4811      	ldr	r0, [pc, #68]	@ (8000aec <MX_USART2_UART_Init+0x90>)
 8000aa6:	f002 fc4a 	bl	800333e <HAL_UART_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ab0:	f7ff fede 	bl	8000870 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	480d      	ldr	r0, [pc, #52]	@ (8000aec <MX_USART2_UART_Init+0x90>)
 8000ab8:	f004 fc0d 	bl	80052d6 <HAL_UARTEx_SetTxFifoThreshold>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000ac2:	f7ff fed5 	bl	8000870 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4808      	ldr	r0, [pc, #32]	@ (8000aec <MX_USART2_UART_Init+0x90>)
 8000aca:	f004 fc42 	bl	8005352 <HAL_UARTEx_SetRxFifoThreshold>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000ad4:	f7ff fecc 	bl	8000870 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ad8:	4804      	ldr	r0, [pc, #16]	@ (8000aec <MX_USART2_UART_Init+0x90>)
 8000ada:	f004 fbc4 	bl	8005266 <HAL_UARTEx_DisableFifoMode>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ae4:	f7ff fec4 	bl	8000870 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	200003a4 	.word	0x200003a4
 8000af0:	40004400 	.word	0x40004400

08000af4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b096      	sub	sp, #88	@ 0x58
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b0c:	f107 030c 	add.w	r3, r7, #12
 8000b10:	2238      	movs	r2, #56	@ 0x38
 8000b12:	2100      	movs	r1, #0
 8000b14:	4618      	mov	r0, r3
 8000b16:	f004 fcff 	bl	8005518 <memset>
  if(uartHandle->Instance==USART2)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a1b      	ldr	r2, [pc, #108]	@ (8000b8c <HAL_UART_MspInit+0x98>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d12e      	bne.n	8000b82 <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b24:	2302      	movs	r3, #2
 8000b26:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b28:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8000b2c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b2e:	f107 030c 	add.w	r3, r7, #12
 8000b32:	4618      	mov	r0, r3
 8000b34:	f001 ff68 	bl	8002a08 <HAL_RCCEx_PeriphCLKConfig>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b3e:	f7ff fe97 	bl	8000870 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b42:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000b46:	f7ff ff71 	bl	8000a2c <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	f7ff ff56 	bl	80009fc <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000b50:	230c      	movs	r3, #12
 8000b52:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b54:	2302      	movs	r3, #2
 8000b56:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b60:	2307      	movs	r3, #7
 8000b62:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b64:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000b68:	4619      	mov	r1, r3
 8000b6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b6e:	f000 fbbf 	bl	80012f0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2100      	movs	r1, #0
 8000b76:	2025      	movs	r0, #37	@ 0x25
 8000b78:	f000 fabb 	bl	80010f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b7c:	2025      	movs	r0, #37	@ 0x25
 8000b7e:	f000 fad2 	bl	8001126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b82:	bf00      	nop
 8000b84:	3758      	adds	r7, #88	@ 0x58
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40004400 	.word	0x40004400

08000b90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b90:	480d      	ldr	r0, [pc, #52]	@ (8000bc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b92:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b94:	f7ff ff2c 	bl	80009f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b98:	480c      	ldr	r0, [pc, #48]	@ (8000bcc <LoopForever+0x6>)
  ldr r1, =_edata
 8000b9a:	490d      	ldr	r1, [pc, #52]	@ (8000bd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd4 <LoopForever+0xe>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba0:	e002      	b.n	8000ba8 <LoopCopyDataInit>

08000ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba6:	3304      	adds	r3, #4

08000ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bac:	d3f9      	bcc.n	8000ba2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bae:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bb0:	4c0a      	ldr	r4, [pc, #40]	@ (8000bdc <LoopForever+0x16>)
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb4:	e001      	b.n	8000bba <LoopFillZerobss>

08000bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb8:	3204      	adds	r2, #4

08000bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bbc:	d3fb      	bcc.n	8000bb6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bbe:	f004 fcb9 	bl	8005534 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bc2:	f7ff fd0b 	bl	80005dc <main>

08000bc6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bc6:	e7fe      	b.n	8000bc6 <LoopForever>
  ldr   r0, =_estack
 8000bc8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd0:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8000bd4:	08005fac 	.word	0x08005fac
  ldr r2, =_sbss
 8000bd8:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 8000bdc:	20000588 	.word	0x20000588

08000be0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000be0:	e7fe      	b.n	8000be0 <ADC_IRQHandler>

08000be2 <LL_AHB2_GRP1_EnableClock>:
{
 8000be2:	b480      	push	{r7}
 8000be4:	b085      	sub	sp, #20
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000bea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000bf0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000bfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bfe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4013      	ands	r3, r2
 8000c04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c06:	68fb      	ldr	r3, [r7, #12]
}
 8000c08:	bf00      	nop
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr
	...

08000c14 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b088      	sub	sp, #32
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8000c1e:	f107 030c 	add.w	r3, r7, #12
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]
 8000c2c:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000c2e:	2002      	movs	r0, #2
 8000c30:	f7ff ffd7 	bl	8000be2 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	4a12      	ldr	r2, [pc, #72]	@ (8000c80 <BSP_LED_Init+0x6c>)
 8000c38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c3c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c46:	2302      	movs	r3, #2
 8000c48:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c84 <BSP_LED_Init+0x70>)
 8000c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c52:	f107 020c 	add.w	r2, r7, #12
 8000c56:	4611      	mov	r1, r2
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f000 fb49 	bl	80012f0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	4a08      	ldr	r2, [pc, #32]	@ (8000c84 <BSP_LED_Init+0x70>)
 8000c62:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	4a05      	ldr	r2, [pc, #20]	@ (8000c80 <BSP_LED_Init+0x6c>)
 8000c6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	4619      	mov	r1, r3
 8000c72:	f000 fc9d 	bl	80015b0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000c76:	2300      	movs	r3, #0
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3720      	adds	r7, #32
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	08005f38 	.word	0x08005f38
 8000c84:	20000108 	.word	0x20000108

08000c88 <HAL_SUBGHZ_TxCpltCallback>:
    return RF_WAKEUP_TIME;
}

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8000c90:	4b03      	ldr	r3, [pc, #12]	@ (8000ca0 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2001      	movs	r0, #1
 8000c96:	4798      	blx	r3
}
 8000c98:	bf00      	nop
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000438 	.word	0x20000438

08000ca4 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8000cac:	4b03      	ldr	r3, [pc, #12]	@ (8000cbc <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2002      	movs	r0, #2
 8000cb2:	4798      	blx	r3
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000438 	.word	0x20000438

08000cc0 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8000cc8:	4b03      	ldr	r3, [pc, #12]	@ (8000cd8 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2040      	movs	r0, #64	@ 0x40
 8000cce:	4798      	blx	r3
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000438 	.word	0x20000438

08000cdc <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8000ce8:	78fb      	ldrb	r3, [r7, #3]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d002      	beq.n	8000cf4 <HAL_SUBGHZ_CADStatusCallback+0x18>
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d005      	beq.n	8000cfe <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8000cf2:	e00a      	b.n	8000d0a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8000cf4:	4b07      	ldr	r3, [pc, #28]	@ (8000d14 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2080      	movs	r0, #128	@ 0x80
 8000cfa:	4798      	blx	r3
            break;
 8000cfc:	e005      	b.n	8000d0a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8000cfe:	4b05      	ldr	r3, [pc, #20]	@ (8000d14 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000d06:	4798      	blx	r3
            break;
 8000d08:	bf00      	nop
    }
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000438 	.word	0x20000438

08000d18 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8000d20:	4b04      	ldr	r3, [pc, #16]	@ (8000d34 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000d28:	4798      	blx	r3
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000438 	.word	0x20000438

08000d38 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8000d40:	4b03      	ldr	r3, [pc, #12]	@ (8000d50 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2020      	movs	r0, #32
 8000d46:	4798      	blx	r3
}
 8000d48:	bf00      	nop
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000438 	.word	0x20000438

08000d54 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8000d5c:	4b03      	ldr	r3, [pc, #12]	@ (8000d6c <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2004      	movs	r0, #4
 8000d62:	4798      	blx	r3
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000438 	.word	0x20000438

08000d70 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8000d78:	4b03      	ldr	r3, [pc, #12]	@ (8000d88 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2008      	movs	r0, #8
 8000d7e:	4798      	blx	r3
}
 8000d80:	bf00      	nop
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20000438 	.word	0x20000438

08000d8c <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8000d94:	4b03      	ldr	r3, [pc, #12]	@ (8000da4 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2010      	movs	r0, #16
 8000d9a:	4798      	blx	r3
}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000438 	.word	0x20000438

08000da8 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8000db0:	4b04      	ldr	r3, [pc, #16]	@ (8000dc4 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000db8:	4798      	blx	r3
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000438 	.word	0x20000438

08000dc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd2:	2003      	movs	r0, #3
 8000dd4:	f000 f982 	bl	80010dc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000dd8:	f001 fc38 	bl	800264c <HAL_RCC_GetHCLKFreq>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	4a09      	ldr	r2, [pc, #36]	@ (8000e04 <HAL_Init+0x3c>)
 8000de0:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000de2:	2000      	movs	r0, #0
 8000de4:	f000 f810 	bl	8000e08 <HAL_InitTick>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d002      	beq.n	8000df4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	71fb      	strb	r3, [r7, #7]
 8000df2:	e001      	b.n	8000df8 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000df4:	f7ff fd42 	bl	800087c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000df8:	79fb      	ldrb	r3, [r7, #7]
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000104 	.word	0x20000104

08000e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e10:	2300      	movs	r3, #0
 8000e12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e14:	4b17      	ldr	r3, [pc, #92]	@ (8000e74 <HAL_InitTick+0x6c>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d024      	beq.n	8000e66 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e1c:	f001 fc16 	bl	800264c <HAL_RCC_GetHCLKFreq>
 8000e20:	4602      	mov	r2, r0
 8000e22:	4b14      	ldr	r3, [pc, #80]	@ (8000e74 <HAL_InitTick+0x6c>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	4619      	mov	r1, r3
 8000e28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e2c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e34:	4618      	mov	r0, r3
 8000e36:	f000 f992 	bl	800115e <HAL_SYSTICK_Config>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d10f      	bne.n	8000e60 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2b0f      	cmp	r3, #15
 8000e44:	d809      	bhi.n	8000e5a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e46:	2200      	movs	r2, #0
 8000e48:	6879      	ldr	r1, [r7, #4]
 8000e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e4e:	f000 f950 	bl	80010f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e52:	4a09      	ldr	r2, [pc, #36]	@ (8000e78 <HAL_InitTick+0x70>)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6013      	str	r3, [r2, #0]
 8000e58:	e007      	b.n	8000e6a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	73fb      	strb	r3, [r7, #15]
 8000e5e:	e004      	b.n	8000e6a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e60:	2301      	movs	r3, #1
 8000e62:	73fb      	strb	r3, [r7, #15]
 8000e64:	e001      	b.n	8000e6a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000118 	.word	0x20000118
 8000e78:	20000114 	.word	0x20000114

08000e7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e80:	4b05      	ldr	r3, [pc, #20]	@ (8000e98 <HAL_IncTick+0x1c>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	461a      	mov	r2, r3
 8000e86:	4b05      	ldr	r3, [pc, #20]	@ (8000e9c <HAL_IncTick+0x20>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	4a03      	ldr	r2, [pc, #12]	@ (8000e9c <HAL_IncTick+0x20>)
 8000e8e:	6013      	str	r3, [r2, #0]
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr
 8000e98:	20000118 	.word	0x20000118
 8000e9c:	2000043c 	.word	0x2000043c

08000ea0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea4:	4b02      	ldr	r3, [pc, #8]	@ (8000eb0 <HAL_GetTick+0x10>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr
 8000eb0:	2000043c 	.word	0x2000043c

08000eb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ebc:	f7ff fff0 	bl	8000ea0 <HAL_GetTick>
 8000ec0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ecc:	d005      	beq.n	8000eda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ece:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef8 <HAL_Delay+0x44>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eda:	bf00      	nop
 8000edc:	f7ff ffe0 	bl	8000ea0 <HAL_GetTick>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d8f7      	bhi.n	8000edc <HAL_Delay+0x28>
  {
  }
}
 8000eec:	bf00      	nop
 8000eee:	bf00      	nop
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000118 	.word	0x20000118

08000efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f40 <__NVIC_SetPriorityGrouping+0x44>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2e:	4a04      	ldr	r2, [pc, #16]	@ (8000f40 <__NVIC_SetPriorityGrouping+0x44>)
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	60d3      	str	r3, [r2, #12]
}
 8000f34:	bf00      	nop
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bc80      	pop	{r7}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f48:	4b04      	ldr	r3, [pc, #16]	@ (8000f5c <__NVIC_GetPriorityGrouping+0x18>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	0a1b      	lsrs	r3, r3, #8
 8000f4e:	f003 0307 	and.w	r3, r3, #7
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bc80      	pop	{r7}
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	db0b      	blt.n	8000f8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	f003 021f 	and.w	r2, r3, #31
 8000f78:	4906      	ldr	r1, [pc, #24]	@ (8000f94 <__NVIC_EnableIRQ+0x34>)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	095b      	lsrs	r3, r3, #5
 8000f80:	2001      	movs	r0, #1
 8000f82:	fa00 f202 	lsl.w	r2, r0, r2
 8000f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr
 8000f94:	e000e100 	.word	0xe000e100

08000f98 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	db12      	blt.n	8000fd0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	f003 021f 	and.w	r2, r3, #31
 8000fb0:	490a      	ldr	r1, [pc, #40]	@ (8000fdc <__NVIC_DisableIRQ+0x44>)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	095b      	lsrs	r3, r3, #5
 8000fb8:	2001      	movs	r0, #1
 8000fba:	fa00 f202 	lsl.w	r2, r0, r2
 8000fbe:	3320      	adds	r3, #32
 8000fc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000fc4:	f3bf 8f4f 	dsb	sy
}
 8000fc8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fca:	f3bf 8f6f 	isb	sy
}
 8000fce:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000e100 	.word	0xe000e100

08000fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	6039      	str	r1, [r7, #0]
 8000fea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	db0a      	blt.n	800100a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	490c      	ldr	r1, [pc, #48]	@ (800102c <__NVIC_SetPriority+0x4c>)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	0112      	lsls	r2, r2, #4
 8001000:	b2d2      	uxtb	r2, r2
 8001002:	440b      	add	r3, r1
 8001004:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001008:	e00a      	b.n	8001020 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	b2da      	uxtb	r2, r3
 800100e:	4908      	ldr	r1, [pc, #32]	@ (8001030 <__NVIC_SetPriority+0x50>)
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	f003 030f 	and.w	r3, r3, #15
 8001016:	3b04      	subs	r3, #4
 8001018:	0112      	lsls	r2, r2, #4
 800101a:	b2d2      	uxtb	r2, r2
 800101c:	440b      	add	r3, r1
 800101e:	761a      	strb	r2, [r3, #24]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000e100 	.word	0xe000e100
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001034:	b480      	push	{r7}
 8001036:	b089      	sub	sp, #36	@ 0x24
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f1c3 0307 	rsb	r3, r3, #7
 800104e:	2b04      	cmp	r3, #4
 8001050:	bf28      	it	cs
 8001052:	2304      	movcs	r3, #4
 8001054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3304      	adds	r3, #4
 800105a:	2b06      	cmp	r3, #6
 800105c:	d902      	bls.n	8001064 <NVIC_EncodePriority+0x30>
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3b03      	subs	r3, #3
 8001062:	e000      	b.n	8001066 <NVIC_EncodePriority+0x32>
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001068:	f04f 32ff 	mov.w	r2, #4294967295
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43da      	mvns	r2, r3
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	401a      	ands	r2, r3
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800107c:	f04f 31ff 	mov.w	r1, #4294967295
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	fa01 f303 	lsl.w	r3, r1, r3
 8001086:	43d9      	mvns	r1, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800108c:	4313      	orrs	r3, r2
         );
}
 800108e:	4618      	mov	r0, r3
 8001090:	3724      	adds	r7, #36	@ 0x24
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr

08001098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010a8:	d301      	bcc.n	80010ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00f      	b.n	80010ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ae:	4a0a      	ldr	r2, [pc, #40]	@ (80010d8 <SysTick_Config+0x40>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010b6:	210f      	movs	r1, #15
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295
 80010bc:	f7ff ff90 	bl	8000fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c0:	4b05      	ldr	r3, [pc, #20]	@ (80010d8 <SysTick_Config+0x40>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c6:	4b04      	ldr	r3, [pc, #16]	@ (80010d8 <SysTick_Config+0x40>)
 80010c8:	2207      	movs	r2, #7
 80010ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	e000e010 	.word	0xe000e010

080010dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff09 	bl	8000efc <__NVIC_SetPriorityGrouping>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b086      	sub	sp, #24
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
 80010fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001100:	f7ff ff20 	bl	8000f44 <__NVIC_GetPriorityGrouping>
 8001104:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	68b9      	ldr	r1, [r7, #8]
 800110a:	6978      	ldr	r0, [r7, #20]
 800110c:	f7ff ff92 	bl	8001034 <NVIC_EncodePriority>
 8001110:	4602      	mov	r2, r0
 8001112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001116:	4611      	mov	r1, r2
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff61 	bl	8000fe0 <__NVIC_SetPriority>
}
 800111e:	bf00      	nop
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	4603      	mov	r3, r0
 800112e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ff13 	bl	8000f60 <__NVIC_EnableIRQ>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	4603      	mov	r3, r0
 800114a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800114c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff21 	bl	8000f98 <__NVIC_DisableIRQ>
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff ff96 	bl	8001098 <SysTick_Config>
 800116c:	4603      	mov	r3, r0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d101      	bne.n	8001188 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e04f      	b.n	8001228 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800118e:	b2db      	uxtb	r3, r3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d008      	beq.n	80011a6 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2204      	movs	r2, #4
 8001198:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e040      	b.n	8001228 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f022 020e 	bic.w	r2, r2, #14
 80011b4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80011c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f022 0201 	bic.w	r2, r2, #1
 80011d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011da:	f003 021c 	and.w	r2, r3, #28
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e2:	2101      	movs	r1, #1
 80011e4:	fa01 f202 	lsl.w	r2, r1, r2
 80011e8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80011f2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d00c      	beq.n	8001216 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001206:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800120a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001214:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2201      	movs	r2, #1
 800121a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8001226:	2300      	movs	r3, #0
}
 8001228:	4618      	mov	r0, r3
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr

08001232 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b084      	sub	sp, #16
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800123a:	2300      	movs	r3, #0
 800123c:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b02      	cmp	r3, #2
 8001248:	d005      	beq.n	8001256 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2204      	movs	r2, #4
 800124e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	73fb      	strb	r3, [r7, #15]
 8001254:	e047      	b.n	80012e6 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f022 020e 	bic.w	r2, r2, #14
 8001264:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f022 0201 	bic.w	r2, r2, #1
 8001274:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001280:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001284:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800128a:	f003 021c 	and.w	r2, r3, #28
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001292:	2101      	movs	r1, #1
 8001294:	fa01 f202 	lsl.w	r2, r1, r2
 8001298:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80012a2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d00c      	beq.n	80012c6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012b6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80012ba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80012c4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2201      	movs	r2, #1
 80012ca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	4798      	blx	r3
    }
  }
  return status;
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b087      	sub	sp, #28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012fe:	e140      	b.n	8001582 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	2101      	movs	r1, #1
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	fa01 f303 	lsl.w	r3, r1, r3
 800130c:	4013      	ands	r3, r2
 800130e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2b00      	cmp	r3, #0
 8001314:	f000 8132 	beq.w	800157c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 0303 	and.w	r3, r3, #3
 8001320:	2b01      	cmp	r3, #1
 8001322:	d005      	beq.n	8001330 <HAL_GPIO_Init+0x40>
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 0303 	and.w	r3, r3, #3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d130      	bne.n	8001392 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	2203      	movs	r2, #3
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	4013      	ands	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	68da      	ldr	r2, [r3, #12]
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	4313      	orrs	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001366:	2201      	movs	r2, #1
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43db      	mvns	r3, r3
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	4013      	ands	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	091b      	lsrs	r3, r3, #4
 800137c:	f003 0201 	and.w	r2, r3, #1
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	4313      	orrs	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f003 0303 	and.w	r3, r3, #3
 800139a:	2b03      	cmp	r3, #3
 800139c:	d017      	beq.n	80013ce <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	2203      	movs	r2, #3
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43db      	mvns	r3, r3
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	689a      	ldr	r2, [r3, #8]
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f003 0303 	and.w	r3, r3, #3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d123      	bne.n	8001422 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	08da      	lsrs	r2, r3, #3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	3208      	adds	r2, #8
 80013e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	220f      	movs	r2, #15
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	4013      	ands	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	691a      	ldr	r2, [r3, #16]
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	f003 0307 	and.w	r3, r3, #7
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	4313      	orrs	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	08da      	lsrs	r2, r3, #3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3208      	adds	r2, #8
 800141c:	6939      	ldr	r1, [r7, #16]
 800141e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	2203      	movs	r2, #3
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43db      	mvns	r3, r3
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	4013      	ands	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f003 0203 	and.w	r2, r3, #3
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800145e:	2b00      	cmp	r3, #0
 8001460:	f000 808c 	beq.w	800157c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001464:	4a4e      	ldr	r2, [pc, #312]	@ (80015a0 <HAL_GPIO_Init+0x2b0>)
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	089b      	lsrs	r3, r3, #2
 800146a:	3302      	adds	r3, #2
 800146c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001470:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	f003 0303 	and.w	r3, r3, #3
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	2207      	movs	r2, #7
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	4013      	ands	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800148e:	d00d      	beq.n	80014ac <HAL_GPIO_Init+0x1bc>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4a44      	ldr	r2, [pc, #272]	@ (80015a4 <HAL_GPIO_Init+0x2b4>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d007      	beq.n	80014a8 <HAL_GPIO_Init+0x1b8>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a43      	ldr	r2, [pc, #268]	@ (80015a8 <HAL_GPIO_Init+0x2b8>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d101      	bne.n	80014a4 <HAL_GPIO_Init+0x1b4>
 80014a0:	2302      	movs	r3, #2
 80014a2:	e004      	b.n	80014ae <HAL_GPIO_Init+0x1be>
 80014a4:	2307      	movs	r3, #7
 80014a6:	e002      	b.n	80014ae <HAL_GPIO_Init+0x1be>
 80014a8:	2301      	movs	r3, #1
 80014aa:	e000      	b.n	80014ae <HAL_GPIO_Init+0x1be>
 80014ac:	2300      	movs	r3, #0
 80014ae:	697a      	ldr	r2, [r7, #20]
 80014b0:	f002 0203 	and.w	r2, r2, #3
 80014b4:	0092      	lsls	r2, r2, #2
 80014b6:	4093      	lsls	r3, r2
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014be:	4938      	ldr	r1, [pc, #224]	@ (80015a0 <HAL_GPIO_Init+0x2b0>)
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	089b      	lsrs	r3, r3, #2
 80014c4:	3302      	adds	r3, #2
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014cc:	4b37      	ldr	r3, [pc, #220]	@ (80015ac <HAL_GPIO_Init+0x2bc>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	43db      	mvns	r3, r3
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	4013      	ands	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d003      	beq.n	80014f0 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014f0:	4a2e      	ldr	r2, [pc, #184]	@ (80015ac <HAL_GPIO_Init+0x2bc>)
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80014f6:	4b2d      	ldr	r3, [pc, #180]	@ (80015ac <HAL_GPIO_Init+0x2bc>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	43db      	mvns	r3, r3
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	4013      	ands	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	4313      	orrs	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800151a:	4a24      	ldr	r2, [pc, #144]	@ (80015ac <HAL_GPIO_Init+0x2bc>)
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001520:	4b22      	ldr	r3, [pc, #136]	@ (80015ac <HAL_GPIO_Init+0x2bc>)
 8001522:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001526:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	43db      	mvns	r3, r3
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	4013      	ands	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4313      	orrs	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001546:	4a19      	ldr	r2, [pc, #100]	@ (80015ac <HAL_GPIO_Init+0x2bc>)
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800154e:	4b17      	ldr	r3, [pc, #92]	@ (80015ac <HAL_GPIO_Init+0x2bc>)
 8001550:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001554:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	43db      	mvns	r3, r3
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	4013      	ands	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	4313      	orrs	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001574:	4a0d      	ldr	r2, [pc, #52]	@ (80015ac <HAL_GPIO_Init+0x2bc>)
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	3301      	adds	r3, #1
 8001580:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	fa22 f303 	lsr.w	r3, r2, r3
 800158c:	2b00      	cmp	r3, #0
 800158e:	f47f aeb7 	bne.w	8001300 <HAL_GPIO_Init+0x10>
  }
}
 8001592:	bf00      	nop
 8001594:	bf00      	nop
 8001596:	371c      	adds	r7, #28
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	40010000 	.word	0x40010000
 80015a4:	48000400 	.word	0x48000400
 80015a8:	48000800 	.word	0x48000800
 80015ac:	58000800 	.word	0x58000800

080015b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	807b      	strh	r3, [r7, #2]
 80015bc:	4613      	mov	r3, r2
 80015be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015c0:	787b      	ldrb	r3, [r7, #1]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015c6:	887a      	ldrh	r2, [r7, #2]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015cc:	e002      	b.n	80015d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015ce:	887a      	ldrh	r2, [r7, #2]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr
	...

080015e0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015e4:	4b04      	ldr	r3, [pc, #16]	@ (80015f8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a03      	ldr	r2, [pc, #12]	@ (80015f8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80015ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015ee:	6013      	str	r3, [r2, #0]
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr
 80015f8:	58000400 	.word	0x58000400

080015fc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001600:	4b03      	ldr	r3, [pc, #12]	@ (8001610 <HAL_PWREx_GetVoltageRange+0x14>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8001608:	4618      	mov	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr
 8001610:	58000400 	.word	0x58000400

08001614 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001618:	4b06      	ldr	r3, [pc, #24]	@ (8001634 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001620:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001624:	d101      	bne.n	800162a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001626:	2301      	movs	r3, #1
 8001628:	e000      	b.n	800162c <LL_PWR_IsEnabledBkUpAccess+0x18>
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr
 8001634:	58000400 	.word	0x58000400

08001638 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800163c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001646:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800164a:	6013      	str	r3, [r2, #0]
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr

08001654 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001658:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001662:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001666:	6013      	str	r3, [r2, #0]
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr

08001670 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001674:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800167e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001682:	d101      	bne.n	8001688 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001684:	2301      	movs	r3, #1
 8001686:	e000      	b.n	800168a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr

08001692 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001696:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016a4:	6013      	str	r3, [r2, #0]
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr

080016ae <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80016b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016c0:	6013      	str	r3, [r2, #0]
}
 80016c2:	bf00      	nop
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr

080016ca <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80016ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80016dc:	d101      	bne.n	80016e2 <LL_RCC_HSE_IsReady+0x18>
 80016de:	2301      	movs	r3, #1
 80016e0:	e000      	b.n	80016e4 <LL_RCC_HSE_IsReady+0x1a>
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr

080016ec <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80016f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016fe:	6013      	str	r3, [r2, #0]
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr

08001708 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800170c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001716:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800171a:	6013      	str	r3, [r2, #0]
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr

08001724 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001728:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001732:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001736:	d101      	bne.n	800173c <LL_RCC_HSI_IsReady+0x18>
 8001738:	2301      	movs	r3, #1
 800173a:	e000      	b.n	800173e <LL_RCC_HSI_IsReady+0x1a>
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr

08001746 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800174e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	061b      	lsls	r3, r3, #24
 800175c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001760:	4313      	orrs	r3, r2
 8001762:	604b      	str	r3, [r1, #4]
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr

0800176e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001772:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b02      	cmp	r3, #2
 8001780:	d101      	bne.n	8001786 <LL_RCC_LSE_IsReady+0x18>
 8001782:	2301      	movs	r3, #1
 8001784:	e000      	b.n	8001788 <LL_RCC_LSE_IsReady+0x1a>
 8001786:	2300      	movs	r3, #0
}
 8001788:	4618      	mov	r0, r3
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr

08001790 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001794:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001798:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800179c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr

080017b0 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80017b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017c0:	f023 0301 	bic.w	r3, r3, #1
 80017c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr

080017d0 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80017d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d101      	bne.n	80017e8 <LL_RCC_LSI_IsReady+0x18>
 80017e4:	2301      	movs	r3, #1
 80017e6:	e000      	b.n	80017ea <LL_RCC_LSI_IsReady+0x1a>
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr

080017f2 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80017f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6013      	str	r3, [r2, #0]
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr

0800180e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001812:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800181c:	f023 0301 	bic.w	r3, r3, #1
 8001820:	6013      	str	r3, [r2, #0]
}
 8001822:	bf00      	nop
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr

0800182a <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800182e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b02      	cmp	r3, #2
 800183a:	d101      	bne.n	8001840 <LL_RCC_MSI_IsReady+0x16>
 800183c:	2301      	movs	r3, #1
 800183e:	e000      	b.n	8001842 <LL_RCC_MSI_IsReady+0x18>
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr

0800184a <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800184e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0308 	and.w	r3, r3, #8
 8001858:	2b08      	cmp	r3, #8
 800185a:	d101      	bne.n	8001860 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 800185c:	2301      	movs	r3, #1
 800185e:	e000      	b.n	8001862 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	46bd      	mov	sp, r7
 8001866:	bc80      	pop	{r7}
 8001868:	4770      	bx	lr

0800186a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800186e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001878:	4618      	mov	r0, r3
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr

08001880 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001884:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001888:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800188c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8001890:	4618      	mov	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr

08001898 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80018a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	021b      	lsls	r3, r3, #8
 80018ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018b2:	4313      	orrs	r3, r2
 80018b4:	604b      	str	r3, [r1, #4]
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr

080018c0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80018c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f023 0203 	bic.w	r2, r3, #3
 80018d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4313      	orrs	r3, r2
 80018da:	608b      	str	r3, [r1, #8]
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr

080018e6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80018ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f003 030c 	and.w	r3, r3, #12
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr

080018fc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001904:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800190e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4313      	orrs	r3, r2
 8001916:	608b      	str	r3, [r1, #8]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr

08001922 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800192a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800192e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001932:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001936:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4313      	orrs	r3, r2
 800193e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr

0800194c <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001954:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001958:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800195c:	f023 020f 	bic.w	r2, r3, #15
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	091b      	lsrs	r3, r3, #4
 8001964:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001968:	4313      	orrs	r3, r2
 800196a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr

08001978 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001980:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800198a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4313      	orrs	r3, r2
 8001992:	608b      	str	r3, [r1, #8]
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr

0800199e <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80019a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80019b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	608b      	str	r3, [r1, #8]
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr

080019c4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80019c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr

080019da <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80019de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80019e6:	011b      	lsls	r3, r3, #4
 80019e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr

080019f4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80019f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr

08001a0a <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001a0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr

08001a20 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001a24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a32:	6013      	str	r3, [r2, #0]
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr

08001a3c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001a40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a4e:	6013      	str	r3, [r2, #0]
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr

08001a58 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001a5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001a6a:	d101      	bne.n	8001a70 <LL_RCC_PLL_IsReady+0x18>
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e000      	b.n	8001a72 <LL_RCC_PLL_IsReady+0x1a>
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr

08001a7a <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001a7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	0a1b      	lsrs	r3, r3, #8
 8001a86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr

08001a92 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001a96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr

08001aa8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001aac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr

08001abe <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001ac2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	f003 0303 	and.w	r3, r3, #3
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr

08001ad4 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001ad8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ae2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ae6:	d101      	bne.n	8001aec <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e000      	b.n	8001aee <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bc80      	pop	{r7}
 8001af4:	4770      	bx	lr

08001af6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001afa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001afe:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001b0a:	d101      	bne.n	8001b10 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e000      	b.n	8001b12 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr

08001b1a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001b1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b22:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001b26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b2e:	d101      	bne.n	8001b34 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001b30:	2301      	movs	r3, #1
 8001b32:	e000      	b.n	8001b36 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr

08001b3e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001b42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001b50:	d101      	bne.n	8001b56 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001b52:	2301      	movs	r3, #1
 8001b54:	e000      	b.n	8001b58 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr

08001b60 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001b64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b6e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001b72:	d101      	bne.n	8001b78 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001b74:	2301      	movs	r3, #1
 8001b76:	e000      	b.n	8001b7a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bc80      	pop	{r7}
 8001b80:	4770      	bx	lr
	...

08001b84 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b088      	sub	sp, #32
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e36f      	b.n	8002276 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b96:	f7ff fea6 	bl	80018e6 <LL_RCC_GetSysClkSource>
 8001b9a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b9c:	f7ff ff8f 	bl	8001abe <LL_RCC_PLL_GetMainSource>
 8001ba0:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0320 	and.w	r3, r3, #32
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f000 80c4 	beq.w	8001d38 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d005      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x3e>
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	2b0c      	cmp	r3, #12
 8001bba:	d176      	bne.n	8001caa <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d173      	bne.n	8001caa <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e353      	b.n	8002276 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001bd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0308 	and.w	r3, r3, #8
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d005      	beq.n	8001bec <HAL_RCC_OscConfig+0x68>
 8001be0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bea:	e006      	b.n	8001bfa <HAL_RCC_OscConfig+0x76>
 8001bec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bf4:	091b      	lsrs	r3, r3, #4
 8001bf6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d222      	bcs.n	8001c44 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 fd5a 	bl	80026bc <RCC_SetFlashLatencyFromMSIRange>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e331      	b.n	8002276 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c1c:	f043 0308 	orr.w	r3, r3, #8
 8001c20:	6013      	str	r3, [r2, #0]
 8001c22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c30:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c34:	4313      	orrs	r3, r2
 8001c36:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff fe2b 	bl	8001898 <LL_RCC_MSI_SetCalibTrimming>
 8001c42:	e021      	b.n	8001c88 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c4e:	f043 0308 	orr.w	r3, r3, #8
 8001c52:	6013      	str	r3, [r2, #0]
 8001c54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c66:	4313      	orrs	r3, r2
 8001c68:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff fe12 	bl	8001898 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f000 fd1f 	bl	80026bc <RCC_SetFlashLatencyFromMSIRange>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e2f6      	b.n	8002276 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001c88:	f000 fce0 	bl	800264c <HAL_RCC_GetHCLKFreq>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	4aa7      	ldr	r2, [pc, #668]	@ (8001f2c <HAL_RCC_OscConfig+0x3a8>)
 8001c90:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001c92:	4ba7      	ldr	r3, [pc, #668]	@ (8001f30 <HAL_RCC_OscConfig+0x3ac>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff f8b6 	bl	8000e08 <HAL_InitTick>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001ca0:	7cfb      	ldrb	r3, [r7, #19]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d047      	beq.n	8001d36 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8001ca6:	7cfb      	ldrb	r3, [r7, #19]
 8001ca8:	e2e5      	b.n	8002276 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a1b      	ldr	r3, [r3, #32]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d02c      	beq.n	8001d0c <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cb2:	f7ff fd9e 	bl	80017f2 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cb6:	f7ff f8f3 	bl	8000ea0 <HAL_GetTick>
 8001cba:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cbe:	f7ff f8ef 	bl	8000ea0 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e2d2      	b.n	8002276 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001cd0:	f7ff fdab 	bl	800182a <LL_RCC_MSI_IsReady>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d0f1      	beq.n	8001cbe <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ce4:	f043 0308 	orr.w	r3, r3, #8
 8001ce8:	6013      	str	r3, [r2, #0]
 8001cea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff fdc7 	bl	8001898 <LL_RCC_MSI_SetCalibTrimming>
 8001d0a:	e015      	b.n	8001d38 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d0c:	f7ff fd7f 	bl	800180e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d10:	f7ff f8c6 	bl	8000ea0 <HAL_GetTick>
 8001d14:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d18:	f7ff f8c2 	bl	8000ea0 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e2a5      	b.n	8002276 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001d2a:	f7ff fd7e 	bl	800182a <LL_RCC_MSI_IsReady>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1f1      	bne.n	8001d18 <HAL_RCC_OscConfig+0x194>
 8001d34:	e000      	b.n	8001d38 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001d36:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d058      	beq.n	8001df6 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	2b08      	cmp	r3, #8
 8001d48:	d005      	beq.n	8001d56 <HAL_RCC_OscConfig+0x1d2>
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	2b0c      	cmp	r3, #12
 8001d4e:	d108      	bne.n	8001d62 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d105      	bne.n	8001d62 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d14b      	bne.n	8001df6 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e289      	b.n	8002276 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001d62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d74:	4313      	orrs	r3, r2
 8001d76:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d80:	d102      	bne.n	8001d88 <HAL_RCC_OscConfig+0x204>
 8001d82:	f7ff fc86 	bl	8001692 <LL_RCC_HSE_Enable>
 8001d86:	e00d      	b.n	8001da4 <HAL_RCC_OscConfig+0x220>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8001d90:	d104      	bne.n	8001d9c <HAL_RCC_OscConfig+0x218>
 8001d92:	f7ff fc51 	bl	8001638 <LL_RCC_HSE_EnableTcxo>
 8001d96:	f7ff fc7c 	bl	8001692 <LL_RCC_HSE_Enable>
 8001d9a:	e003      	b.n	8001da4 <HAL_RCC_OscConfig+0x220>
 8001d9c:	f7ff fc87 	bl	80016ae <LL_RCC_HSE_Disable>
 8001da0:	f7ff fc58 	bl	8001654 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d012      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dac:	f7ff f878 	bl	8000ea0 <HAL_GetTick>
 8001db0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001db4:	f7ff f874 	bl	8000ea0 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b64      	cmp	r3, #100	@ 0x64
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e257      	b.n	8002276 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001dc6:	f7ff fc80 	bl	80016ca <LL_RCC_HSE_IsReady>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0f1      	beq.n	8001db4 <HAL_RCC_OscConfig+0x230>
 8001dd0:	e011      	b.n	8001df6 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd2:	f7ff f865 	bl	8000ea0 <HAL_GetTick>
 8001dd6:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dda:	f7ff f861 	bl	8000ea0 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b64      	cmp	r3, #100	@ 0x64
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e244      	b.n	8002276 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001dec:	f7ff fc6d 	bl	80016ca <LL_RCC_HSE_IsReady>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1f1      	bne.n	8001dda <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d046      	beq.n	8001e90 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	2b04      	cmp	r3, #4
 8001e06:	d005      	beq.n	8001e14 <HAL_RCC_OscConfig+0x290>
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	2b0c      	cmp	r3, #12
 8001e0c:	d10e      	bne.n	8001e2c <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d10b      	bne.n	8001e2c <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e22a      	b.n	8002276 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	695b      	ldr	r3, [r3, #20]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fc8e 	bl	8001746 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001e2a:	e031      	b.n	8001e90 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d019      	beq.n	8001e68 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e34:	f7ff fc5a 	bl	80016ec <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e38:	f7ff f832 	bl	8000ea0 <HAL_GetTick>
 8001e3c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e40:	f7ff f82e 	bl	8000ea0 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e211      	b.n	8002276 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001e52:	f7ff fc67 	bl	8001724 <LL_RCC_HSI_IsReady>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0f1      	beq.n	8001e40 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	695b      	ldr	r3, [r3, #20]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff fc70 	bl	8001746 <LL_RCC_HSI_SetCalibTrimming>
 8001e66:	e013      	b.n	8001e90 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e68:	f7ff fc4e 	bl	8001708 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7ff f818 	bl	8000ea0 <HAL_GetTick>
 8001e70:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e74:	f7ff f814 	bl	8000ea0 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e1f7      	b.n	8002276 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001e86:	f7ff fc4d 	bl	8001724 <LL_RCC_HSI_IsReady>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1f1      	bne.n	8001e74 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0308 	and.w	r3, r3, #8
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d06e      	beq.n	8001f7a <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d056      	beq.n	8001f52 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001ea4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ea8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eac:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69da      	ldr	r2, [r3, #28]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f003 0310 	and.w	r3, r3, #16
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d031      	beq.n	8001f20 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d006      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d101      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e1d0      	b.n	8002276 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d013      	beq.n	8001f06 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8001ede:	f7ff fc67 	bl	80017b0 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ee2:	f7fe ffdd 	bl	8000ea0 <HAL_GetTick>
 8001ee6:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eea:	f7fe ffd9 	bl	8000ea0 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b11      	cmp	r3, #17
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e1bc      	b.n	8002276 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001efc:	f7ff fc68 	bl	80017d0 <LL_RCC_LSI_IsReady>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1f1      	bne.n	8001eea <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001f06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f0e:	f023 0210 	bic.w	r2, r3, #16
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f20:	f7ff fc36 	bl	8001790 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f24:	f7fe ffbc 	bl	8000ea0 <HAL_GetTick>
 8001f28:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001f2a:	e00c      	b.n	8001f46 <HAL_RCC_OscConfig+0x3c2>
 8001f2c:	20000104 	.word	0x20000104
 8001f30:	20000114 	.word	0x20000114
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f34:	f7fe ffb4 	bl	8000ea0 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b11      	cmp	r3, #17
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e197      	b.n	8002276 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001f46:	f7ff fc43 	bl	80017d0 <LL_RCC_LSI_IsReady>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d0f1      	beq.n	8001f34 <HAL_RCC_OscConfig+0x3b0>
 8001f50:	e013      	b.n	8001f7a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f52:	f7ff fc2d 	bl	80017b0 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f56:	f7fe ffa3 	bl	8000ea0 <HAL_GetTick>
 8001f5a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f5e:	f7fe ff9f 	bl	8000ea0 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b11      	cmp	r3, #17
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e182      	b.n	8002276 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001f70:	f7ff fc2e 	bl	80017d0 <LL_RCC_LSI_IsReady>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f1      	bne.n	8001f5e <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0304 	and.w	r3, r3, #4
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 80d8 	beq.w	8002138 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001f88:	f7ff fb44 	bl	8001614 <LL_PWR_IsEnabledBkUpAccess>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d113      	bne.n	8001fba <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001f92:	f7ff fb25 	bl	80015e0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f96:	f7fe ff83 	bl	8000ea0 <HAL_GetTick>
 8001f9a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f9e:	f7fe ff7f 	bl	8000ea0 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e162      	b.n	8002276 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001fb0:	f7ff fb30 	bl	8001614 <LL_PWR_IsEnabledBkUpAccess>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0f1      	beq.n	8001f9e <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d07b      	beq.n	80020ba <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	2b85      	cmp	r3, #133	@ 0x85
 8001fc8:	d003      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	2b05      	cmp	r3, #5
 8001fd0:	d109      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001fd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fda:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001fde:	f043 0304 	orr.w	r3, r3, #4
 8001fe2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe6:	f7fe ff5b 	bl	8000ea0 <HAL_GetTick>
 8001fea:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001fec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ff4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002000:	e00a      	b.n	8002018 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002002:	f7fe ff4d 	bl	8000ea0 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002010:	4293      	cmp	r3, r2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e12e      	b.n	8002276 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002018:	f7ff fba9 	bl	800176e <LL_RCC_LSE_IsReady>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0ef      	beq.n	8002002 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	2b81      	cmp	r3, #129	@ 0x81
 8002028:	d003      	beq.n	8002032 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	2b85      	cmp	r3, #133	@ 0x85
 8002030:	d121      	bne.n	8002076 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002032:	f7fe ff35 	bl	8000ea0 <HAL_GetTick>
 8002036:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002038:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800203c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002040:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002044:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002048:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800204c:	e00a      	b.n	8002064 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800204e:	f7fe ff27 	bl	8000ea0 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	f241 3288 	movw	r2, #5000	@ 0x1388
 800205c:	4293      	cmp	r3, r2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e108      	b.n	8002276 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002064:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800206c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0ec      	beq.n	800204e <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002074:	e060      	b.n	8002138 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002076:	f7fe ff13 	bl	8000ea0 <HAL_GetTick>
 800207a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800207c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002084:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002088:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800208c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002090:	e00a      	b.n	80020a8 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002092:	f7fe ff05 	bl	8000ea0 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e0e6      	b.n	8002276 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80020a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1ec      	bne.n	8002092 <HAL_RCC_OscConfig+0x50e>
 80020b8:	e03e      	b.n	8002138 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ba:	f7fe fef1 	bl	8000ea0 <HAL_GetTick>
 80020be:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80020c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80020d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80020d4:	e00a      	b.n	80020ec <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d6:	f7fe fee3 	bl	8000ea0 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e0c4      	b.n	8002276 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80020ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1ec      	bne.n	80020d6 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020fc:	f7fe fed0 	bl	8000ea0 <HAL_GetTick>
 8002100:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002102:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800210a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800210e:	f023 0301 	bic.w	r3, r3, #1
 8002112:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002116:	e00a      	b.n	800212e <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002118:	f7fe fec2 	bl	8000ea0 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002126:	4293      	cmp	r3, r2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e0a3      	b.n	8002276 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800212e:	f7ff fb1e 	bl	800176e <LL_RCC_LSE_IsReady>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1ef      	bne.n	8002118 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800213c:	2b00      	cmp	r3, #0
 800213e:	f000 8099 	beq.w	8002274 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	2b0c      	cmp	r3, #12
 8002146:	d06c      	beq.n	8002222 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800214c:	2b02      	cmp	r3, #2
 800214e:	d14b      	bne.n	80021e8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002150:	f7ff fc74 	bl	8001a3c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002154:	f7fe fea4 	bl	8000ea0 <HAL_GetTick>
 8002158:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800215c:	f7fe fea0 	bl	8000ea0 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b0a      	cmp	r3, #10
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e083      	b.n	8002276 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800216e:	f7ff fc73 	bl	8001a58 <LL_RCC_PLL_IsReady>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1f1      	bne.n	800215c <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002178:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	4b40      	ldr	r3, [pc, #256]	@ (8002280 <HAL_RCC_OscConfig+0x6fc>)
 8002180:	4013      	ands	r3, r2
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800218a:	4311      	orrs	r1, r2
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002190:	0212      	lsls	r2, r2, #8
 8002192:	4311      	orrs	r1, r2
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002198:	4311      	orrs	r1, r2
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800219e:	4311      	orrs	r1, r2
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80021a4:	430a      	orrs	r2, r1
 80021a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80021aa:	4313      	orrs	r3, r2
 80021ac:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021ae:	f7ff fc37 	bl	8001a20 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021c0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c2:	f7fe fe6d 	bl	8000ea0 <HAL_GetTick>
 80021c6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80021c8:	e008      	b.n	80021dc <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ca:	f7fe fe69 	bl	8000ea0 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b0a      	cmp	r3, #10
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e04c      	b.n	8002276 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80021dc:	f7ff fc3c 	bl	8001a58 <LL_RCC_PLL_IsReady>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0f1      	beq.n	80021ca <HAL_RCC_OscConfig+0x646>
 80021e6:	e045      	b.n	8002274 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e8:	f7ff fc28 	bl	8001a3c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ec:	f7fe fe58 	bl	8000ea0 <HAL_GetTick>
 80021f0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f4:	f7fe fe54 	bl	8000ea0 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b0a      	cmp	r3, #10
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e037      	b.n	8002276 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002206:	f7ff fc27 	bl	8001a58 <LL_RCC_PLL_IsReady>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1f1      	bne.n	80021f4 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002210:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002214:	68da      	ldr	r2, [r3, #12]
 8002216:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800221a:	4b1a      	ldr	r3, [pc, #104]	@ (8002284 <HAL_RCC_OscConfig+0x700>)
 800221c:	4013      	ands	r3, r2
 800221e:	60cb      	str	r3, [r1, #12]
 8002220:	e028      	b.n	8002274 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002226:	2b01      	cmp	r3, #1
 8002228:	d101      	bne.n	800222e <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e023      	b.n	8002276 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800222e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	f003 0203 	and.w	r2, r3, #3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002240:	429a      	cmp	r2, r3
 8002242:	d115      	bne.n	8002270 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800224e:	429a      	cmp	r2, r3
 8002250:	d10e      	bne.n	8002270 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800225c:	021b      	lsls	r3, r3, #8
 800225e:	429a      	cmp	r2, r3
 8002260:	d106      	bne.n	8002270 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800226c:	429a      	cmp	r2, r3
 800226e:	d001      	beq.n	8002274 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e000      	b.n	8002276 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3720      	adds	r7, #32
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	11c1808c 	.word	0x11c1808c
 8002284:	eefefffc 	.word	0xeefefffc

08002288 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d101      	bne.n	800229c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e12c      	b.n	80024f6 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800229c:	4b98      	ldr	r3, [pc, #608]	@ (8002500 <HAL_RCC_ClockConfig+0x278>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d91b      	bls.n	80022e2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022aa:	4b95      	ldr	r3, [pc, #596]	@ (8002500 <HAL_RCC_ClockConfig+0x278>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f023 0207 	bic.w	r2, r3, #7
 80022b2:	4993      	ldr	r1, [pc, #588]	@ (8002500 <HAL_RCC_ClockConfig+0x278>)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022ba:	f7fe fdf1 	bl	8000ea0 <HAL_GetTick>
 80022be:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80022c2:	f7fe fded 	bl	8000ea0 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e110      	b.n	80024f6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d4:	4b8a      	ldr	r3, [pc, #552]	@ (8002500 <HAL_RCC_ClockConfig+0x278>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d1ef      	bne.n	80022c2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d016      	beq.n	800231c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff fb02 	bl	80018fc <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80022f8:	f7fe fdd2 	bl	8000ea0 <HAL_GetTick>
 80022fc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002300:	f7fe fdce 	bl	8000ea0 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e0f1      	b.n	80024f6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002312:	f7ff fbdf 	bl	8001ad4 <LL_RCC_IsActiveFlag_HPRE>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d0f1      	beq.n	8002300 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0320 	and.w	r3, r3, #32
 8002324:	2b00      	cmp	r3, #0
 8002326:	d016      	beq.n	8002356 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff faf8 	bl	8001922 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002332:	f7fe fdb5 	bl	8000ea0 <HAL_GetTick>
 8002336:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002338:	e008      	b.n	800234c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800233a:	f7fe fdb1 	bl	8000ea0 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d901      	bls.n	800234c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e0d4      	b.n	80024f6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800234c:	f7ff fbd3 	bl	8001af6 <LL_RCC_IsActiveFlag_C2HPRE>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0f1      	beq.n	800233a <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800235e:	2b00      	cmp	r3, #0
 8002360:	d016      	beq.n	8002390 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff faf0 	bl	800194c <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800236c:	f7fe fd98 	bl	8000ea0 <HAL_GetTick>
 8002370:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002372:	e008      	b.n	8002386 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002374:	f7fe fd94 	bl	8000ea0 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e0b7      	b.n	80024f6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002386:	f7ff fbc8 	bl	8001b1a <LL_RCC_IsActiveFlag_SHDHPRE>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0f1      	beq.n	8002374 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d016      	beq.n	80023ca <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff fae9 	bl	8001978 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80023a6:	f7fe fd7b 	bl	8000ea0 <HAL_GetTick>
 80023aa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80023ae:	f7fe fd77 	bl	8000ea0 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e09a      	b.n	80024f6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80023c0:	f7ff fbbd 	bl	8001b3e <LL_RCC_IsActiveFlag_PPRE1>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d0f1      	beq.n	80023ae <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0308 	and.w	r3, r3, #8
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d017      	beq.n	8002406 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff fade 	bl	800199e <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80023e2:	f7fe fd5d 	bl	8000ea0 <HAL_GetTick>
 80023e6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80023e8:	e008      	b.n	80023fc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80023ea:	f7fe fd59 	bl	8000ea0 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e07c      	b.n	80024f6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80023fc:	f7ff fbb0 	bl	8001b60 <LL_RCC_IsActiveFlag_PPRE2>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0f1      	beq.n	80023ea <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d043      	beq.n	800249a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d106      	bne.n	8002428 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800241a:	f7ff f956 	bl	80016ca <LL_RCC_HSE_IsReady>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d11e      	bne.n	8002462 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e066      	b.n	80024f6 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2b03      	cmp	r3, #3
 800242e:	d106      	bne.n	800243e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002430:	f7ff fb12 	bl	8001a58 <LL_RCC_PLL_IsReady>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d113      	bne.n	8002462 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e05b      	b.n	80024f6 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d106      	bne.n	8002454 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002446:	f7ff f9f0 	bl	800182a <LL_RCC_MSI_IsReady>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d108      	bne.n	8002462 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e050      	b.n	80024f6 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002454:	f7ff f966 	bl	8001724 <LL_RCC_HSI_IsReady>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e049      	b.n	80024f6 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff fa2a 	bl	80018c0 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800246c:	f7fe fd18 	bl	8000ea0 <HAL_GetTick>
 8002470:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002472:	e00a      	b.n	800248a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002474:	f7fe fd14 	bl	8000ea0 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002482:	4293      	cmp	r3, r2
 8002484:	d901      	bls.n	800248a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e035      	b.n	80024f6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800248a:	f7ff fa2c 	bl	80018e6 <LL_RCC_GetSysClkSource>
 800248e:	4602      	mov	r2, r0
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	429a      	cmp	r2, r3
 8002498:	d1ec      	bne.n	8002474 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800249a:	4b19      	ldr	r3, [pc, #100]	@ (8002500 <HAL_RCC_ClockConfig+0x278>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d21b      	bcs.n	80024e0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a8:	4b15      	ldr	r3, [pc, #84]	@ (8002500 <HAL_RCC_ClockConfig+0x278>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f023 0207 	bic.w	r2, r3, #7
 80024b0:	4913      	ldr	r1, [pc, #76]	@ (8002500 <HAL_RCC_ClockConfig+0x278>)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024b8:	f7fe fcf2 	bl	8000ea0 <HAL_GetTick>
 80024bc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80024c0:	f7fe fcee 	bl	8000ea0 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e011      	b.n	80024f6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002500 <HAL_RCC_ClockConfig+0x278>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d1ef      	bne.n	80024c0 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80024e0:	f000 f8b4 	bl	800264c <HAL_RCC_GetHCLKFreq>
 80024e4:	4603      	mov	r3, r0
 80024e6:	4a07      	ldr	r2, [pc, #28]	@ (8002504 <HAL_RCC_ClockConfig+0x27c>)
 80024e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80024ea:	4b07      	ldr	r3, [pc, #28]	@ (8002508 <HAL_RCC_ClockConfig+0x280>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fe fc8a 	bl	8000e08 <HAL_InitTick>
 80024f4:	4603      	mov	r3, r0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	58004000 	.word	0x58004000
 8002504:	20000104 	.word	0x20000104
 8002508:	20000114 	.word	0x20000114

0800250c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800250c:	b590      	push	{r4, r7, lr}
 800250e:	b087      	sub	sp, #28
 8002510:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002516:	2300      	movs	r3, #0
 8002518:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800251a:	f7ff f9e4 	bl	80018e6 <LL_RCC_GetSysClkSource>
 800251e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002520:	f7ff facd 	bl	8001abe <LL_RCC_PLL_GetMainSource>
 8002524:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d005      	beq.n	8002538 <HAL_RCC_GetSysClockFreq+0x2c>
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2b0c      	cmp	r3, #12
 8002530:	d139      	bne.n	80025a6 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d136      	bne.n	80025a6 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002538:	f7ff f987 	bl	800184a <LL_RCC_MSI_IsEnabledRangeSelect>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d115      	bne.n	800256e <HAL_RCC_GetSysClockFreq+0x62>
 8002542:	f7ff f982 	bl	800184a <LL_RCC_MSI_IsEnabledRangeSelect>
 8002546:	4603      	mov	r3, r0
 8002548:	2b01      	cmp	r3, #1
 800254a:	d106      	bne.n	800255a <HAL_RCC_GetSysClockFreq+0x4e>
 800254c:	f7ff f98d 	bl	800186a <LL_RCC_MSI_GetRange>
 8002550:	4603      	mov	r3, r0
 8002552:	0a1b      	lsrs	r3, r3, #8
 8002554:	f003 030f 	and.w	r3, r3, #15
 8002558:	e005      	b.n	8002566 <HAL_RCC_GetSysClockFreq+0x5a>
 800255a:	f7ff f991 	bl	8001880 <LL_RCC_MSI_GetRangeAfterStandby>
 800255e:	4603      	mov	r3, r0
 8002560:	0a1b      	lsrs	r3, r3, #8
 8002562:	f003 030f 	and.w	r3, r3, #15
 8002566:	4a36      	ldr	r2, [pc, #216]	@ (8002640 <HAL_RCC_GetSysClockFreq+0x134>)
 8002568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256c:	e014      	b.n	8002598 <HAL_RCC_GetSysClockFreq+0x8c>
 800256e:	f7ff f96c 	bl	800184a <LL_RCC_MSI_IsEnabledRangeSelect>
 8002572:	4603      	mov	r3, r0
 8002574:	2b01      	cmp	r3, #1
 8002576:	d106      	bne.n	8002586 <HAL_RCC_GetSysClockFreq+0x7a>
 8002578:	f7ff f977 	bl	800186a <LL_RCC_MSI_GetRange>
 800257c:	4603      	mov	r3, r0
 800257e:	091b      	lsrs	r3, r3, #4
 8002580:	f003 030f 	and.w	r3, r3, #15
 8002584:	e005      	b.n	8002592 <HAL_RCC_GetSysClockFreq+0x86>
 8002586:	f7ff f97b 	bl	8001880 <LL_RCC_MSI_GetRangeAfterStandby>
 800258a:	4603      	mov	r3, r0
 800258c:	091b      	lsrs	r3, r3, #4
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	4a2b      	ldr	r2, [pc, #172]	@ (8002640 <HAL_RCC_GetSysClockFreq+0x134>)
 8002594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002598:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d115      	bne.n	80025cc <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80025a4:	e012      	b.n	80025cc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	2b04      	cmp	r3, #4
 80025aa:	d102      	bne.n	80025b2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025ac:	4b25      	ldr	r3, [pc, #148]	@ (8002644 <HAL_RCC_GetSysClockFreq+0x138>)
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	e00c      	b.n	80025cc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	2b08      	cmp	r3, #8
 80025b6:	d109      	bne.n	80025cc <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80025b8:	f7ff f85a 	bl	8001670 <LL_RCC_HSE_IsEnabledDiv2>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d102      	bne.n	80025c8 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80025c2:	4b20      	ldr	r3, [pc, #128]	@ (8002644 <HAL_RCC_GetSysClockFreq+0x138>)
 80025c4:	617b      	str	r3, [r7, #20]
 80025c6:	e001      	b.n	80025cc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80025c8:	4b1f      	ldr	r3, [pc, #124]	@ (8002648 <HAL_RCC_GetSysClockFreq+0x13c>)
 80025ca:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025cc:	f7ff f98b 	bl	80018e6 <LL_RCC_GetSysClkSource>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b0c      	cmp	r3, #12
 80025d4:	d12f      	bne.n	8002636 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80025d6:	f7ff fa72 	bl	8001abe <LL_RCC_PLL_GetMainSource>
 80025da:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d003      	beq.n	80025ea <HAL_RCC_GetSysClockFreq+0xde>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b03      	cmp	r3, #3
 80025e6:	d003      	beq.n	80025f0 <HAL_RCC_GetSysClockFreq+0xe4>
 80025e8:	e00d      	b.n	8002606 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80025ea:	4b16      	ldr	r3, [pc, #88]	@ (8002644 <HAL_RCC_GetSysClockFreq+0x138>)
 80025ec:	60fb      	str	r3, [r7, #12]
        break;
 80025ee:	e00d      	b.n	800260c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80025f0:	f7ff f83e 	bl	8001670 <LL_RCC_HSE_IsEnabledDiv2>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d102      	bne.n	8002600 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80025fa:	4b12      	ldr	r3, [pc, #72]	@ (8002644 <HAL_RCC_GetSysClockFreq+0x138>)
 80025fc:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80025fe:	e005      	b.n	800260c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002600:	4b11      	ldr	r3, [pc, #68]	@ (8002648 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002602:	60fb      	str	r3, [r7, #12]
        break;
 8002604:	e002      	b.n	800260c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	60fb      	str	r3, [r7, #12]
        break;
 800260a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800260c:	f7ff fa35 	bl	8001a7a <LL_RCC_PLL_GetN>
 8002610:	4602      	mov	r2, r0
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	fb03 f402 	mul.w	r4, r3, r2
 8002618:	f7ff fa46 	bl	8001aa8 <LL_RCC_PLL_GetDivider>
 800261c:	4603      	mov	r3, r0
 800261e:	091b      	lsrs	r3, r3, #4
 8002620:	3301      	adds	r3, #1
 8002622:	fbb4 f4f3 	udiv	r4, r4, r3
 8002626:	f7ff fa34 	bl	8001a92 <LL_RCC_PLL_GetR>
 800262a:	4603      	mov	r3, r0
 800262c:	0f5b      	lsrs	r3, r3, #29
 800262e:	3301      	adds	r3, #1
 8002630:	fbb4 f3f3 	udiv	r3, r4, r3
 8002634:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002636:	697b      	ldr	r3, [r7, #20]
}
 8002638:	4618      	mov	r0, r3
 800263a:	371c      	adds	r7, #28
 800263c:	46bd      	mov	sp, r7
 800263e:	bd90      	pop	{r4, r7, pc}
 8002640:	08005ef8 	.word	0x08005ef8
 8002644:	00f42400 	.word	0x00f42400
 8002648:	01e84800 	.word	0x01e84800

0800264c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800264c:	b598      	push	{r3, r4, r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002650:	f7ff ff5c 	bl	800250c <HAL_RCC_GetSysClockFreq>
 8002654:	4604      	mov	r4, r0
 8002656:	f7ff f9b5 	bl	80019c4 <LL_RCC_GetAHBPrescaler>
 800265a:	4603      	mov	r3, r0
 800265c:	091b      	lsrs	r3, r3, #4
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	4a03      	ldr	r2, [pc, #12]	@ (8002670 <HAL_RCC_GetHCLKFreq+0x24>)
 8002664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002668:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800266c:	4618      	mov	r0, r3
 800266e:	bd98      	pop	{r3, r4, r7, pc}
 8002670:	08005e98 	.word	0x08005e98

08002674 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002674:	b598      	push	{r3, r4, r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002678:	f7ff ffe8 	bl	800264c <HAL_RCC_GetHCLKFreq>
 800267c:	4604      	mov	r4, r0
 800267e:	f7ff f9b9 	bl	80019f4 <LL_RCC_GetAPB1Prescaler>
 8002682:	4603      	mov	r3, r0
 8002684:	0a1b      	lsrs	r3, r3, #8
 8002686:	4a03      	ldr	r2, [pc, #12]	@ (8002694 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800268c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002690:	4618      	mov	r0, r3
 8002692:	bd98      	pop	{r3, r4, r7, pc}
 8002694:	08005ed8 	.word	0x08005ed8

08002698 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002698:	b598      	push	{r3, r4, r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800269c:	f7ff ffd6 	bl	800264c <HAL_RCC_GetHCLKFreq>
 80026a0:	4604      	mov	r4, r0
 80026a2:	f7ff f9b2 	bl	8001a0a <LL_RCC_GetAPB2Prescaler>
 80026a6:	4603      	mov	r3, r0
 80026a8:	0adb      	lsrs	r3, r3, #11
 80026aa:	4a03      	ldr	r2, [pc, #12]	@ (80026b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	bd98      	pop	{r3, r4, r7, pc}
 80026b8:	08005ed8 	.word	0x08005ed8

080026bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80026bc:	b590      	push	{r4, r7, lr}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	091b      	lsrs	r3, r3, #4
 80026c8:	f003 030f 	and.w	r3, r3, #15
 80026cc:	4a10      	ldr	r2, [pc, #64]	@ (8002710 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80026ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d2:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80026d4:	f7ff f981 	bl	80019da <LL_RCC_GetAHB3Prescaler>
 80026d8:	4603      	mov	r3, r0
 80026da:	091b      	lsrs	r3, r3, #4
 80026dc:	f003 030f 	and.w	r3, r3, #15
 80026e0:	4a0c      	ldr	r2, [pc, #48]	@ (8002714 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80026e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ec:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	4a09      	ldr	r2, [pc, #36]	@ (8002718 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80026f2:	fba2 2303 	umull	r2, r3, r2, r3
 80026f6:	0c9c      	lsrs	r4, r3, #18
 80026f8:	f7fe ff80 	bl	80015fc <HAL_PWREx_GetVoltageRange>
 80026fc:	4603      	mov	r3, r0
 80026fe:	4619      	mov	r1, r3
 8002700:	4620      	mov	r0, r4
 8002702:	f000 f80b 	bl	800271c <RCC_SetFlashLatency>
 8002706:	4603      	mov	r3, r0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	bd90      	pop	{r4, r7, pc}
 8002710:	08005ef8 	.word	0x08005ef8
 8002714:	08005e98 	.word	0x08005e98
 8002718:	431bde83 	.word	0x431bde83

0800271c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b08e      	sub	sp, #56	@ 0x38
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002726:	4a3a      	ldr	r2, [pc, #232]	@ (8002810 <RCC_SetFlashLatency+0xf4>)
 8002728:	f107 0320 	add.w	r3, r7, #32
 800272c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002730:	6018      	str	r0, [r3, #0]
 8002732:	3304      	adds	r3, #4
 8002734:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002736:	4a37      	ldr	r2, [pc, #220]	@ (8002814 <RCC_SetFlashLatency+0xf8>)
 8002738:	f107 0318 	add.w	r3, r7, #24
 800273c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002740:	6018      	str	r0, [r3, #0]
 8002742:	3304      	adds	r3, #4
 8002744:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002746:	4a34      	ldr	r2, [pc, #208]	@ (8002818 <RCC_SetFlashLatency+0xfc>)
 8002748:	f107 030c 	add.w	r3, r7, #12
 800274c:	ca07      	ldmia	r2, {r0, r1, r2}
 800274e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002752:	2300      	movs	r3, #0
 8002754:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800275c:	d11b      	bne.n	8002796 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800275e:	2300      	movs	r3, #0
 8002760:	633b      	str	r3, [r7, #48]	@ 0x30
 8002762:	e014      	b.n	800278e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	3338      	adds	r3, #56	@ 0x38
 800276a:	443b      	add	r3, r7
 800276c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002770:	461a      	mov	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4293      	cmp	r3, r2
 8002776:	d807      	bhi.n	8002788 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	3338      	adds	r3, #56	@ 0x38
 800277e:	443b      	add	r3, r7
 8002780:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002784:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002786:	e021      	b.n	80027cc <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800278a:	3301      	adds	r3, #1
 800278c:	633b      	str	r3, [r7, #48]	@ 0x30
 800278e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002790:	2b02      	cmp	r3, #2
 8002792:	d9e7      	bls.n	8002764 <RCC_SetFlashLatency+0x48>
 8002794:	e01a      	b.n	80027cc <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002796:	2300      	movs	r3, #0
 8002798:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800279a:	e014      	b.n	80027c6 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800279c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	3338      	adds	r3, #56	@ 0x38
 80027a2:	443b      	add	r3, r7
 80027a4:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80027a8:	461a      	mov	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d807      	bhi.n	80027c0 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80027b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	3338      	adds	r3, #56	@ 0x38
 80027b6:	443b      	add	r3, r7
 80027b8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80027bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80027be:	e005      	b.n	80027cc <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80027c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027c2:	3301      	adds	r3, #1
 80027c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d9e7      	bls.n	800279c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80027cc:	4b13      	ldr	r3, [pc, #76]	@ (800281c <RCC_SetFlashLatency+0x100>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f023 0207 	bic.w	r2, r3, #7
 80027d4:	4911      	ldr	r1, [pc, #68]	@ (800281c <RCC_SetFlashLatency+0x100>)
 80027d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027d8:	4313      	orrs	r3, r2
 80027da:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80027dc:	f7fe fb60 	bl	8000ea0 <HAL_GetTick>
 80027e0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80027e2:	e008      	b.n	80027f6 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80027e4:	f7fe fb5c 	bl	8000ea0 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d901      	bls.n	80027f6 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e007      	b.n	8002806 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80027f6:	4b09      	ldr	r3, [pc, #36]	@ (800281c <RCC_SetFlashLatency+0x100>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002800:	429a      	cmp	r2, r3
 8002802:	d1ef      	bne.n	80027e4 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3738      	adds	r7, #56	@ 0x38
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	08005e7c 	.word	0x08005e7c
 8002814:	08005e84 	.word	0x08005e84
 8002818:	08005e8c 	.word	0x08005e8c
 800281c:	58004000 	.word	0x58004000

08002820 <LL_RCC_LSE_IsReady>:
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002824:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b02      	cmp	r3, #2
 8002832:	d101      	bne.n	8002838 <LL_RCC_LSE_IsReady+0x18>
 8002834:	2301      	movs	r3, #1
 8002836:	e000      	b.n	800283a <LL_RCC_LSE_IsReady+0x1a>
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	46bd      	mov	sp, r7
 800283e:	bc80      	pop	{r7}
 8002840:	4770      	bx	lr

08002842 <LL_RCC_SetUSARTClockSource>:
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800284a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800284e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	0c1b      	lsrs	r3, r3, #16
 8002856:	43db      	mvns	r3, r3
 8002858:	401a      	ands	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	b29b      	uxth	r3, r3
 800285e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002862:	4313      	orrs	r3, r2
 8002864:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	bc80      	pop	{r7}
 8002870:	4770      	bx	lr

08002872 <LL_RCC_SetI2SClockSource>:
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800287a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800287e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002882:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002886:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4313      	orrs	r3, r2
 800288e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr

0800289c <LL_RCC_SetLPUARTClockSource>:
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80028a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ac:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80028b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bc80      	pop	{r7}
 80028c4:	4770      	bx	lr

080028c6 <LL_RCC_SetI2CClockSource>:
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80028ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028d2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	091b      	lsrs	r3, r3, #4
 80028da:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80028de:	43db      	mvns	r3, r3
 80028e0:	401a      	ands	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80028ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028ee:	4313      	orrs	r3, r2
 80028f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bc80      	pop	{r7}
 80028fc:	4770      	bx	lr

080028fe <LL_RCC_SetLPTIMClockSource>:
{
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002906:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800290a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	0c1b      	lsrs	r3, r3, #16
 8002912:	041b      	lsls	r3, r3, #16
 8002914:	43db      	mvns	r3, r3
 8002916:	401a      	ands	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	041b      	lsls	r3, r3, #16
 800291c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002920:	4313      	orrs	r3, r2
 8002922:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr

08002930 <LL_RCC_SetRNGClockSource>:
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002938:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800293c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002940:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002944:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4313      	orrs	r3, r2
 800294c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	bc80      	pop	{r7}
 8002958:	4770      	bx	lr

0800295a <LL_RCC_SetADCClockSource>:
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002962:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800296a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800296e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4313      	orrs	r3, r2
 8002976:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr

08002984 <LL_RCC_SetRTCClockSource>:
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800298c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002990:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002994:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002998:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4313      	orrs	r3, r2
 80029a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr

080029ae <LL_RCC_GetRTCClockSource>:
{
 80029ae:	b480      	push	{r7}
 80029b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80029b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80029be:	4618      	mov	r0, r3
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bc80      	pop	{r7}
 80029c4:	4770      	bx	lr

080029c6 <LL_RCC_ForceBackupDomainReset>:
{
 80029c6:	b480      	push	{r7}
 80029c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80029ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80029de:	bf00      	nop
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr

080029e6 <LL_RCC_ReleaseBackupDomainReset>:
{
 80029e6:	b480      	push	{r7}
 80029e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80029ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80029fe:	bf00      	nop
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr
	...

08002a08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002a14:	2300      	movs	r3, #0
 8002a16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002a18:	2300      	movs	r3, #0
 8002a1a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d058      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002a28:	f7fe fdda 	bl	80015e0 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a2c:	f7fe fa38 	bl	8000ea0 <HAL_GetTick>
 8002a30:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002a32:	e009      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a34:	f7fe fa34 	bl	8000ea0 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d902      	bls.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	74fb      	strb	r3, [r7, #19]
        break;
 8002a46:	e006      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002a48:	4b7b      	ldr	r3, [pc, #492]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a54:	d1ee      	bne.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002a56:	7cfb      	ldrb	r3, [r7, #19]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d13c      	bne.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002a5c:	f7ff ffa7 	bl	80029ae <LL_RCC_GetRTCClockSource>
 8002a60:	4602      	mov	r2, r0
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d00f      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a76:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a78:	f7ff ffa5 	bl	80029c6 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a7c:	f7ff ffb3 	bl	80029e6 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d014      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a94:	f7fe fa04 	bl	8000ea0 <HAL_GetTick>
 8002a98:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002a9a:	e00b      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a9c:	f7fe fa00 	bl	8000ea0 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d902      	bls.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	74fb      	strb	r3, [r7, #19]
            break;
 8002ab2:	e004      	b.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002ab4:	f7ff feb4 	bl	8002820 <LL_RCC_LSE_IsReady>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d1ee      	bne.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002abe:	7cfb      	ldrb	r3, [r7, #19]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d105      	bne.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff ff5b 	bl	8002984 <LL_RCC_SetRTCClockSource>
 8002ace:	e004      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ad0:	7cfb      	ldrb	r3, [r7, #19]
 8002ad2:	74bb      	strb	r3, [r7, #18]
 8002ad4:	e001      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ad6:	7cfb      	ldrb	r3, [r7, #19]
 8002ad8:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d004      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff fea9 	bl	8002842 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d004      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff fe9e 	bl	8002842 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0320 	and.w	r3, r3, #32
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d004      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff fec0 	bl	800289c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d004      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff fee6 	bl	80028fe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d004      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff fedb 	bl	80028fe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d004      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff fed0 	bl	80028fe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d004      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fea9 	bl	80028c6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d004      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff fe9e 	bl	80028c6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d004      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff fe93 	bl	80028c6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0310 	and.w	r3, r3, #16
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d011      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff fe5e 	bl	8002872 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bbe:	d107      	bne.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002bc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d010      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff fea5 	bl	8002930 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d107      	bne.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002bee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bf8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bfc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d011      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7ff fea3 	bl	800295a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c1c:	d107      	bne.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002c1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c2c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002c2e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3718      	adds	r7, #24
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	58000400 	.word	0x58000400

08002c3c <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8002c44:	4b06      	ldr	r3, [pc, #24]	@ (8002c60 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002c4c:	4904      	ldr	r1, [pc, #16]	@ (8002c60 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	608b      	str	r3, [r1, #8]
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bc80      	pop	{r7}
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	58000400 	.word	0x58000400

08002c64 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8002c68:	4b05      	ldr	r3, [pc, #20]	@ (8002c80 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8002c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c6e:	4a04      	ldr	r2, [pc, #16]	@ (8002c80 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8002c70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002c78:	bf00      	nop
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bc80      	pop	{r7}
 8002c7e:	4770      	bx	lr
 8002c80:	58000400 	.word	0x58000400

08002c84 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8002c88:	4b05      	ldr	r3, [pc, #20]	@ (8002ca0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8002c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c8e:	4a04      	ldr	r2, [pc, #16]	@ (8002ca0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8002c90:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002c94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002c98:	bf00      	nop
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bc80      	pop	{r7}
 8002c9e:	4770      	bx	lr
 8002ca0:	58000400 	.word	0x58000400

08002ca4 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8002ca8:	4b03      	ldr	r3, [pc, #12]	@ (8002cb8 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8002caa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002cae:	619a      	str	r2, [r3, #24]
}
 8002cb0:	bf00      	nop
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bc80      	pop	{r7}
 8002cb6:	4770      	bx	lr
 8002cb8:	58000400 	.word	0x58000400

08002cbc <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8002cc0:	4b06      	ldr	r3, [pc, #24]	@ (8002cdc <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d101      	bne.n	8002cd0 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e000      	b.n	8002cd2 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bc80      	pop	{r7}
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	58000400 	.word	0x58000400

08002ce0 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8002ce4:	4b06      	ldr	r3, [pc, #24]	@ (8002d00 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b04      	cmp	r3, #4
 8002cee:	d101      	bne.n	8002cf4 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	58000400 	.word	0x58000400

08002d04 <LL_RCC_RF_DisableReset>:
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8002d08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d14:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002d18:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002d1c:	bf00      	nop
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr

08002d24 <LL_RCC_IsRFUnderReset>:
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8002d28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d38:	d101      	bne.n	8002d3e <LL_RCC_IsRFUnderReset+0x1a>
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e000      	b.n	8002d40 <LL_RCC_IsRFUnderReset+0x1c>
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr

08002d48 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002d50:	4b06      	ldr	r3, [pc, #24]	@ (8002d6c <LL_EXTI_EnableIT_32_63+0x24>)
 8002d52:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002d56:	4905      	ldr	r1, [pc, #20]	@ (8002d6c <LL_EXTI_EnableIT_32_63+0x24>)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bc80      	pop	{r7}
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	58000800 	.word	0x58000800

08002d70 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d103      	bne.n	8002d86 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	73fb      	strb	r3, [r7, #15]
    return status;
 8002d82:	7bfb      	ldrb	r3, [r7, #15]
 8002d84:	e052      	b.n	8002e2c <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	799b      	ldrb	r3, [r3, #6]
 8002d8e:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8002d90:	7bbb      	ldrb	r3, [r7, #14]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d002      	beq.n	8002d9c <HAL_SUBGHZ_Init+0x2c>
 8002d96:	7bbb      	ldrb	r3, [r7, #14]
 8002d98:	2b03      	cmp	r3, #3
 8002d9a:	d109      	bne.n	8002db0 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7fd fdda 	bl	800095c <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8002da8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002dac:	f7ff ffcc 	bl	8002d48 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8002db0:	7bbb      	ldrb	r3, [r7, #14]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d126      	bne.n	8002e04 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2202      	movs	r2, #2
 8002dba:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8002dbc:	f7ff ffa2 	bl	8002d04 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8002dc0:	4b1c      	ldr	r3, [pc, #112]	@ (8002e34 <HAL_SUBGHZ_Init+0xc4>)
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	1a9b      	subs	r3, r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	0cdb      	lsrs	r3, r3, #19
 8002dce:	2264      	movs	r2, #100	@ 0x64
 8002dd0:	fb02 f303 	mul.w	r3, r2, r3
 8002dd4:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d105      	bne.n	8002de8 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	609a      	str	r2, [r3, #8]
        break;
 8002de6:	e007      	b.n	8002df8 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	3b01      	subs	r3, #1
 8002dec:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8002dee:	f7ff ff99 	bl	8002d24 <LL_RCC_IsRFUnderReset>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1ee      	bne.n	8002dd6 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002df8:	f7ff ff34 	bl	8002c64 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8002dfc:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002e00:	f7ff ff1c 	bl	8002c3c <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8002e04:	f7ff ff4e 	bl	8002ca4 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8002e08:	7bfb      	ldrb	r3, [r7, #15]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10a      	bne.n	8002e24 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f000 f952 	bl	80030bc <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	719a      	strb	r2, [r3, #6]

  return status;
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	20000104 	.word	0x20000104

08002e38 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	607a      	str	r2, [r7, #4]
 8002e42:	461a      	mov	r2, r3
 8002e44:	460b      	mov	r3, r1
 8002e46:	72fb      	strb	r3, [r7, #11]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	799b      	ldrb	r3, [r3, #6]
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d14a      	bne.n	8002eec <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	795b      	ldrb	r3, [r3, #5]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d101      	bne.n	8002e62 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	e045      	b.n	8002eee <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2201      	movs	r2, #1
 8002e66:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f000 f9f5 	bl	8003258 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8002e6e:	7afb      	ldrb	r3, [r7, #11]
 8002e70:	2b84      	cmp	r3, #132	@ 0x84
 8002e72:	d002      	beq.n	8002e7a <HAL_SUBGHZ_ExecSetCmd+0x42>
 8002e74:	7afb      	ldrb	r3, [r7, #11]
 8002e76:	2b94      	cmp	r3, #148	@ 0x94
 8002e78:	d103      	bne.n	8002e82 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	711a      	strb	r2, [r3, #4]
 8002e80:	e002      	b.n	8002e88 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002e88:	f7ff fefc 	bl	8002c84 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8002e8c:	7afb      	ldrb	r3, [r7, #11]
 8002e8e:	4619      	mov	r1, r3
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f000 f933 	bl	80030fc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8002e96:	2300      	movs	r3, #0
 8002e98:	82bb      	strh	r3, [r7, #20]
 8002e9a:	e00a      	b.n	8002eb2 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8002e9c:	8abb      	ldrh	r3, [r7, #20]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f000 f928 	bl	80030fc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8002eac:	8abb      	ldrh	r3, [r7, #20]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	82bb      	strh	r3, [r7, #20]
 8002eb2:	8aba      	ldrh	r2, [r7, #20]
 8002eb4:	893b      	ldrh	r3, [r7, #8]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d3f0      	bcc.n	8002e9c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002eba:	f7ff fed3 	bl	8002c64 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8002ebe:	7afb      	ldrb	r3, [r7, #11]
 8002ec0:	2b84      	cmp	r3, #132	@ 0x84
 8002ec2:	d002      	beq.n	8002eca <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f000 f9eb 	bl	80032a0 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d002      	beq.n	8002ed8 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	75fb      	strb	r3, [r7, #23]
 8002ed6:	e001      	b.n	8002edc <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	715a      	strb	r2, [r3, #5]

    return status;
 8002ee8:	7dfb      	ldrb	r3, [r7, #23]
 8002eea:	e000      	b.n	8002eee <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8002eec:	2302      	movs	r3, #2
  }
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3718      	adds	r7, #24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b088      	sub	sp, #32
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	60f8      	str	r0, [r7, #12]
 8002efe:	607a      	str	r2, [r7, #4]
 8002f00:	461a      	mov	r2, r3
 8002f02:	460b      	mov	r3, r1
 8002f04:	72fb      	strb	r3, [r7, #11]
 8002f06:	4613      	mov	r3, r2
 8002f08:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	799b      	ldrb	r3, [r3, #6]
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d13d      	bne.n	8002f94 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	795b      	ldrb	r3, [r3, #5]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d101      	bne.n	8002f24 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8002f20:	2302      	movs	r3, #2
 8002f22:	e038      	b.n	8002f96 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2201      	movs	r2, #1
 8002f28:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 f994 	bl	8003258 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002f30:	f7ff fea8 	bl	8002c84 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8002f34:	7afb      	ldrb	r3, [r7, #11]
 8002f36:	4619      	mov	r1, r3
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f000 f8df 	bl	80030fc <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8002f3e:	2100      	movs	r1, #0
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f000 f8db 	bl	80030fc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8002f46:	2300      	movs	r3, #0
 8002f48:	82fb      	strh	r3, [r7, #22]
 8002f4a:	e009      	b.n	8002f60 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8002f4c:	69b9      	ldr	r1, [r7, #24]
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 f92a 	bl	80031a8 <SUBGHZSPI_Receive>
      pData++;
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	3301      	adds	r3, #1
 8002f58:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8002f5a:	8afb      	ldrh	r3, [r7, #22]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	82fb      	strh	r3, [r7, #22]
 8002f60:	8afa      	ldrh	r2, [r7, #22]
 8002f62:	893b      	ldrh	r3, [r7, #8]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d3f1      	bcc.n	8002f4c <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002f68:	f7ff fe7c 	bl	8002c64 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f000 f997 	bl	80032a0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d002      	beq.n	8002f80 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	77fb      	strb	r3, [r7, #31]
 8002f7e:	e001      	b.n	8002f84 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8002f80:	2300      	movs	r3, #0
 8002f82:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2201      	movs	r2, #1
 8002f88:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	715a      	strb	r2, [r3, #5]

    return status;
 8002f90:	7ffb      	ldrb	r3, [r7, #31]
 8002f92:	e000      	b.n	8002f96 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002f94:	2302      	movs	r3, #2
  }
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3720      	adds	r7, #32
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b084      	sub	sp, #16
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8002faa:	f107 020c 	add.w	r2, r7, #12
 8002fae:	2302      	movs	r3, #2
 8002fb0:	2112      	movs	r1, #18
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7ff ff9f 	bl	8002ef6 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8002fb8:	7b3b      	ldrb	r3, [r7, #12]
 8002fba:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8002fbc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fc0:	021b      	lsls	r3, r3, #8
 8002fc2:	b21a      	sxth	r2, r3
 8002fc4:	7b7b      	ldrb	r3, [r7, #13]
 8002fc6:	b21b      	sxth	r3, r3
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	b21b      	sxth	r3, r3
 8002fcc:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8002fce:	f107 020c 	add.w	r2, r7, #12
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	2102      	movs	r1, #2
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7ff ff2e 	bl	8002e38 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8002fdc:	89fb      	ldrh	r3, [r7, #14]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d002      	beq.n	8002fec <HAL_SUBGHZ_IRQHandler+0x4e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7fd fe4e 	bl	8000c88 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8002fec:	89fb      	ldrh	r3, [r7, #14]
 8002fee:	085b      	lsrs	r3, r3, #1
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d008      	beq.n	800300a <HAL_SUBGHZ_IRQHandler+0x6c>
      (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) == RESET))
 8002ff8:	89fb      	ldrh	r3, [r7, #14]
 8002ffa:	099b      	lsrs	r3, r3, #6
 8002ffc:	f003 0301 	and.w	r3, r3, #1
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 8003000:	2b00      	cmp	r3, #0
 8003002:	d102      	bne.n	800300a <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f7fd fe4d 	bl	8000ca4 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800300a:	89fb      	ldrh	r3, [r7, #14]
 800300c:	089b      	lsrs	r3, r3, #2
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d002      	beq.n	800301c <HAL_SUBGHZ_IRQHandler+0x7e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7fd fe9c 	bl	8000d54 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800301c:	89fb      	ldrh	r3, [r7, #14]
 800301e:	08db      	lsrs	r3, r3, #3
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b00      	cmp	r3, #0
 8003026:	d002      	beq.n	800302e <HAL_SUBGHZ_IRQHandler+0x90>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f7fd fea1 	bl	8000d70 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800302e:	89fb      	ldrh	r3, [r7, #14]
 8003030:	091b      	lsrs	r3, r3, #4
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	d002      	beq.n	8003040 <HAL_SUBGHZ_IRQHandler+0xa2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7fd fea6 	bl	8000d8c <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8003040:	89fb      	ldrh	r3, [r7, #14]
 8003042:	095b      	lsrs	r3, r3, #5
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b00      	cmp	r3, #0
 800304a:	d002      	beq.n	8003052 <HAL_SUBGHZ_IRQHandler+0xb4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f7fd fe73 	bl	8000d38 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8003052:	89fb      	ldrh	r3, [r7, #14]
 8003054:	099b      	lsrs	r3, r3, #6
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d002      	beq.n	8003064 <HAL_SUBGHZ_IRQHandler+0xc6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7fd fe2e 	bl	8000cc0 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8003064:	89fb      	ldrh	r3, [r7, #14]
 8003066:	09db      	lsrs	r3, r3, #7
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00e      	beq.n	800308e <HAL_SUBGHZ_IRQHandler+0xf0>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8003070:	89fb      	ldrh	r3, [r7, #14]
 8003072:	0a1b      	lsrs	r3, r3, #8
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	2b00      	cmp	r3, #0
 800307a:	d004      	beq.n	8003086 <HAL_SUBGHZ_IRQHandler+0xe8>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800307c:	2101      	movs	r1, #1
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7fd fe2c 	bl	8000cdc <HAL_SUBGHZ_CADStatusCallback>
 8003084:	e003      	b.n	800308e <HAL_SUBGHZ_IRQHandler+0xf0>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8003086:	2100      	movs	r1, #0
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f7fd fe27 	bl	8000cdc <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800308e:	89fb      	ldrh	r3, [r7, #14]
 8003090:	0a5b      	lsrs	r3, r3, #9
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b00      	cmp	r3, #0
 8003098:	d002      	beq.n	80030a0 <HAL_SUBGHZ_IRQHandler+0x102>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7fd fe3c 	bl	8000d18 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 80030a0:	89fb      	ldrh	r3, [r7, #14]
 80030a2:	0b9b      	lsrs	r3, r3, #14
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d002      	beq.n	80030b2 <HAL_SUBGHZ_IRQHandler+0x114>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7fd fe7b 	bl	8000da8 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 80030b2:	bf00      	nop
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
	...

080030bc <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80030c4:	4b0c      	ldr	r3, [pc, #48]	@ (80030f8 <SUBGHZSPI_Init+0x3c>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a0b      	ldr	r2, [pc, #44]	@ (80030f8 <SUBGHZSPI_Init+0x3c>)
 80030ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030ce:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80030d0:	4a09      	ldr	r2, [pc, #36]	@ (80030f8 <SUBGHZSPI_Init+0x3c>)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 80030d8:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80030da:	4b07      	ldr	r3, [pc, #28]	@ (80030f8 <SUBGHZSPI_Init+0x3c>)
 80030dc:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 80030e0:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80030e2:	4b05      	ldr	r3, [pc, #20]	@ (80030f8 <SUBGHZSPI_Init+0x3c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a04      	ldr	r2, [pc, #16]	@ (80030f8 <SUBGHZSPI_Init+0x3c>)
 80030e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030ec:	6013      	str	r3, [r2, #0]
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr
 80030f8:	58010000 	.word	0x58010000

080030fc <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b087      	sub	sp, #28
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	460b      	mov	r3, r1
 8003106:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003108:	2300      	movs	r3, #0
 800310a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800310c:	4b23      	ldr	r3, [pc, #140]	@ (800319c <SUBGHZSPI_Transmit+0xa0>)
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	4613      	mov	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	1a9b      	subs	r3, r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	0cdb      	lsrs	r3, r3, #19
 800311a:	2264      	movs	r2, #100	@ 0x64
 800311c:	fb02 f303 	mul.w	r3, r2, r3
 8003120:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d105      	bne.n	8003134 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	609a      	str	r2, [r3, #8]
      break;
 8003132:	e008      	b.n	8003146 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	3b01      	subs	r3, #1
 8003138:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800313a:	4b19      	ldr	r3, [pc, #100]	@ (80031a0 <SUBGHZSPI_Transmit+0xa4>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b02      	cmp	r3, #2
 8003144:	d1ed      	bne.n	8003122 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8003146:	4b17      	ldr	r3, [pc, #92]	@ (80031a4 <SUBGHZSPI_Transmit+0xa8>)
 8003148:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	78fa      	ldrb	r2, [r7, #3]
 800314e:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003150:	4b12      	ldr	r3, [pc, #72]	@ (800319c <SUBGHZSPI_Transmit+0xa0>)
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	4613      	mov	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	1a9b      	subs	r3, r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	0cdb      	lsrs	r3, r3, #19
 800315e:	2264      	movs	r2, #100	@ 0x64
 8003160:	fb02 f303 	mul.w	r3, r2, r3
 8003164:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d105      	bne.n	8003178 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	609a      	str	r2, [r3, #8]
      break;
 8003176:	e008      	b.n	800318a <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	3b01      	subs	r3, #1
 800317c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800317e:	4b08      	ldr	r3, [pc, #32]	@ (80031a0 <SUBGHZSPI_Transmit+0xa4>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b01      	cmp	r3, #1
 8003188:	d1ed      	bne.n	8003166 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800318a:	4b05      	ldr	r3, [pc, #20]	@ (80031a0 <SUBGHZSPI_Transmit+0xa4>)
 800318c:	68db      	ldr	r3, [r3, #12]

  return status;
 800318e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003190:	4618      	mov	r0, r3
 8003192:	371c      	adds	r7, #28
 8003194:	46bd      	mov	sp, r7
 8003196:	bc80      	pop	{r7}
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	20000104 	.word	0x20000104
 80031a0:	58010000 	.word	0x58010000
 80031a4:	5801000c 	.word	0x5801000c

080031a8 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b087      	sub	sp, #28
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031b2:	2300      	movs	r3, #0
 80031b4:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80031b6:	4b25      	ldr	r3, [pc, #148]	@ (800324c <SUBGHZSPI_Receive+0xa4>)
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	4613      	mov	r3, r2
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	1a9b      	subs	r3, r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	0cdb      	lsrs	r3, r3, #19
 80031c4:	2264      	movs	r2, #100	@ 0x64
 80031c6:	fb02 f303 	mul.w	r3, r2, r3
 80031ca:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d105      	bne.n	80031de <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	609a      	str	r2, [r3, #8]
      break;
 80031dc:	e008      	b.n	80031f0 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	3b01      	subs	r3, #1
 80031e2:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80031e4:	4b1a      	ldr	r3, [pc, #104]	@ (8003250 <SUBGHZSPI_Receive+0xa8>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d1ed      	bne.n	80031cc <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80031f0:	4b18      	ldr	r3, [pc, #96]	@ (8003254 <SUBGHZSPI_Receive+0xac>)
 80031f2:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	22ff      	movs	r2, #255	@ 0xff
 80031f8:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80031fa:	4b14      	ldr	r3, [pc, #80]	@ (800324c <SUBGHZSPI_Receive+0xa4>)
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	4613      	mov	r3, r2
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	1a9b      	subs	r3, r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	0cdb      	lsrs	r3, r3, #19
 8003208:	2264      	movs	r2, #100	@ 0x64
 800320a:	fb02 f303 	mul.w	r3, r2, r3
 800320e:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d105      	bne.n	8003222 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	609a      	str	r2, [r3, #8]
      break;
 8003220:	e008      	b.n	8003234 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	3b01      	subs	r3, #1
 8003226:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8003228:	4b09      	ldr	r3, [pc, #36]	@ (8003250 <SUBGHZSPI_Receive+0xa8>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b01      	cmp	r3, #1
 8003232:	d1ed      	bne.n	8003210 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8003234:	4b06      	ldr	r3, [pc, #24]	@ (8003250 <SUBGHZSPI_Receive+0xa8>)
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	b2da      	uxtb	r2, r3
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	701a      	strb	r2, [r3, #0]

  return status;
 800323e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003240:	4618      	mov	r0, r3
 8003242:	371c      	adds	r7, #28
 8003244:	46bd      	mov	sp, r7
 8003246:	bc80      	pop	{r7}
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	20000104 	.word	0x20000104
 8003250:	58010000 	.word	0x58010000
 8003254:	5801000c 	.word	0x5801000c

08003258 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	791b      	ldrb	r3, [r3, #4]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d111      	bne.n	800328c <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8003268:	4b0c      	ldr	r3, [pc, #48]	@ (800329c <SUBGHZ_CheckDeviceReady+0x44>)
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	4613      	mov	r3, r2
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	4413      	add	r3, r2
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	0c1b      	lsrs	r3, r3, #16
 8003276:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003278:	f7ff fd04 	bl	8002c84 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	3b01      	subs	r3, #1
 8003280:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1f9      	bne.n	800327c <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003288:	f7ff fcec 	bl	8002c64 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 f807 	bl	80032a0 <SUBGHZ_WaitOnBusy>
 8003292:	4603      	mov	r3, r0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	20000104 	.word	0x20000104

080032a0 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80032a8:	2300      	movs	r3, #0
 80032aa:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80032ac:	4b12      	ldr	r3, [pc, #72]	@ (80032f8 <SUBGHZ_WaitOnBusy+0x58>)
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	4613      	mov	r3, r2
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	4413      	add	r3, r2
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	0d1b      	lsrs	r3, r3, #20
 80032ba:	2264      	movs	r2, #100	@ 0x64
 80032bc:	fb02 f303 	mul.w	r3, r2, r3
 80032c0:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80032c2:	f7ff fd0d 	bl	8002ce0 <LL_PWR_IsActiveFlag_RFBUSYMS>
 80032c6:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d105      	bne.n	80032da <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2202      	movs	r2, #2
 80032d6:	609a      	str	r2, [r3, #8]
      break;
 80032d8:	e009      	b.n	80032ee <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	3b01      	subs	r3, #1
 80032de:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80032e0:	f7ff fcec 	bl	8002cbc <LL_PWR_IsActiveFlag_RFBUSYS>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	4013      	ands	r3, r2
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d0e9      	beq.n	80032c2 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80032ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3718      	adds	r7, #24
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	20000104 	.word	0x20000104

080032fc <LL_RCC_GetUSARTClockSource>:
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8003304:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003308:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	401a      	ands	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	041b      	lsls	r3, r3, #16
 8003314:	4313      	orrs	r3, r2
}
 8003316:	4618      	mov	r0, r3
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr

08003320 <LL_RCC_GetLPUARTClockSource>:
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003328:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800332c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4013      	ands	r3, r2
}
 8003334:	4618      	mov	r0, r3
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	bc80      	pop	{r7}
 800333c:	4770      	bx	lr

0800333e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b082      	sub	sp, #8
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e042      	b.n	80033d6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003356:	2b00      	cmp	r3, #0
 8003358:	d106      	bne.n	8003368 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7fd fbc6 	bl	8000af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2224      	movs	r2, #36	@ 0x24
 800336c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 0201 	bic.w	r2, r2, #1
 800337e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003384:	2b00      	cmp	r3, #0
 8003386:	d002      	beq.n	800338e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 feb1 	bl	80040f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 fc3a 	bl	8003c08 <UART_SetConfig>
 8003394:	4603      	mov	r3, r0
 8003396:	2b01      	cmp	r3, #1
 8003398:	d101      	bne.n	800339e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e01b      	b.n	80033d6 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80033ac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80033bc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f042 0201 	orr.w	r2, r2, #1
 80033cc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 ff2f 	bl	8004232 <UART_CheckIdleState>
 80033d4:	4603      	mov	r3, r0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b08a      	sub	sp, #40	@ 0x28
 80033e2:	af02      	add	r7, sp, #8
 80033e4:	60f8      	str	r0, [r7, #12]
 80033e6:	60b9      	str	r1, [r7, #8]
 80033e8:	603b      	str	r3, [r7, #0]
 80033ea:	4613      	mov	r3, r2
 80033ec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033f4:	2b20      	cmp	r3, #32
 80033f6:	d173      	bne.n	80034e0 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d002      	beq.n	8003404 <HAL_UART_Transmit+0x26>
 80033fe:	88fb      	ldrh	r3, [r7, #6]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d101      	bne.n	8003408 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e06c      	b.n	80034e2 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2221      	movs	r2, #33	@ 0x21
 8003414:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003418:	f7fd fd42 	bl	8000ea0 <HAL_GetTick>
 800341c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	88fa      	ldrh	r2, [r7, #6]
 8003422:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	88fa      	ldrh	r2, [r7, #6]
 800342a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003436:	d108      	bne.n	800344a <HAL_UART_Transmit+0x6c>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d104      	bne.n	800344a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003440:	2300      	movs	r3, #0
 8003442:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	61bb      	str	r3, [r7, #24]
 8003448:	e003      	b.n	8003452 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800344e:	2300      	movs	r3, #0
 8003450:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003452:	e02c      	b.n	80034ae <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	2200      	movs	r2, #0
 800345c:	2180      	movs	r1, #128	@ 0x80
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 ff35 	bl	80042ce <UART_WaitOnFlagUntilTimeout>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e039      	b.n	80034e2 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10b      	bne.n	800348c <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	881b      	ldrh	r3, [r3, #0]
 8003478:	461a      	mov	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003482:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	3302      	adds	r3, #2
 8003488:	61bb      	str	r3, [r7, #24]
 800348a:	e007      	b.n	800349c <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	781a      	ldrb	r2, [r3, #0]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	3301      	adds	r3, #1
 800349a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	3b01      	subs	r3, #1
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1cc      	bne.n	8003454 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	2200      	movs	r2, #0
 80034c2:	2140      	movs	r1, #64	@ 0x40
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f000 ff02 	bl	80042ce <UART_WaitOnFlagUntilTimeout>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e006      	b.n	80034e2 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80034dc:	2300      	movs	r3, #0
 80034de:	e000      	b.n	80034e2 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 80034e0:	2302      	movs	r3, #2
  }
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3720      	adds	r7, #32
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
	...

080034ec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b08a      	sub	sp, #40	@ 0x28
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	4613      	mov	r3, r2
 80034f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003500:	2b20      	cmp	r3, #32
 8003502:	d137      	bne.n	8003574 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d002      	beq.n	8003510 <HAL_UART_Receive_IT+0x24>
 800350a:	88fb      	ldrh	r3, [r7, #6]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d101      	bne.n	8003514 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e030      	b.n	8003576 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a18      	ldr	r2, [pc, #96]	@ (8003580 <HAL_UART_Receive_IT+0x94>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d01f      	beq.n	8003564 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d018      	beq.n	8003564 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	e853 3f00 	ldrex	r3, [r3]
 800353e:	613b      	str	r3, [r7, #16]
   return(result);
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003546:	627b      	str	r3, [r7, #36]	@ 0x24
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	461a      	mov	r2, r3
 800354e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003550:	623b      	str	r3, [r7, #32]
 8003552:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003554:	69f9      	ldr	r1, [r7, #28]
 8003556:	6a3a      	ldr	r2, [r7, #32]
 8003558:	e841 2300 	strex	r3, r2, [r1]
 800355c:	61bb      	str	r3, [r7, #24]
   return(result);
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1e6      	bne.n	8003532 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003564:	88fb      	ldrh	r3, [r7, #6]
 8003566:	461a      	mov	r2, r3
 8003568:	68b9      	ldr	r1, [r7, #8]
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 ff7e 	bl	800446c <UART_Start_Receive_IT>
 8003570:	4603      	mov	r3, r0
 8003572:	e000      	b.n	8003576 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003574:	2302      	movs	r3, #2
  }
}
 8003576:	4618      	mov	r0, r3
 8003578:	3728      	adds	r7, #40	@ 0x28
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	40008000 	.word	0x40008000

08003584 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b0ba      	sub	sp, #232	@ 0xe8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	69db      	ldr	r3, [r3, #28]
 8003592:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80035aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80035ae:	f640 030f 	movw	r3, #2063	@ 0x80f
 80035b2:	4013      	ands	r3, r2
 80035b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80035b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d11b      	bne.n	80035f8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80035c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035c4:	f003 0320 	and.w	r3, r3, #32
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d015      	beq.n	80035f8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80035cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035d0:	f003 0320 	and.w	r3, r3, #32
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d105      	bne.n	80035e4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80035d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d009      	beq.n	80035f8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 82e3 	beq.w	8003bb4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	4798      	blx	r3
      }
      return;
 80035f6:	e2dd      	b.n	8003bb4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80035f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 8123 	beq.w	8003848 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003602:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003606:	4b8d      	ldr	r3, [pc, #564]	@ (800383c <HAL_UART_IRQHandler+0x2b8>)
 8003608:	4013      	ands	r3, r2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d106      	bne.n	800361c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800360e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003612:	4b8b      	ldr	r3, [pc, #556]	@ (8003840 <HAL_UART_IRQHandler+0x2bc>)
 8003614:	4013      	ands	r3, r2
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 8116 	beq.w	8003848 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800361c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	2b00      	cmp	r3, #0
 8003626:	d011      	beq.n	800364c <HAL_UART_IRQHandler+0xc8>
 8003628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800362c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00b      	beq.n	800364c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2201      	movs	r2, #1
 800363a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003642:	f043 0201 	orr.w	r2, r3, #1
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800364c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d011      	beq.n	800367c <HAL_UART_IRQHandler+0xf8>
 8003658:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00b      	beq.n	800367c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2202      	movs	r2, #2
 800366a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003672:	f043 0204 	orr.w	r2, r3, #4
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800367c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	d011      	beq.n	80036ac <HAL_UART_IRQHandler+0x128>
 8003688:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00b      	beq.n	80036ac <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2204      	movs	r2, #4
 800369a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036a2:	f043 0202 	orr.w	r2, r3, #2
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80036ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036b0:	f003 0308 	and.w	r3, r3, #8
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d017      	beq.n	80036e8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80036b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036bc:	f003 0320 	and.w	r3, r3, #32
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d105      	bne.n	80036d0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80036c4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80036c8:	4b5c      	ldr	r3, [pc, #368]	@ (800383c <HAL_UART_IRQHandler+0x2b8>)
 80036ca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00b      	beq.n	80036e8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2208      	movs	r2, #8
 80036d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036de:	f043 0208 	orr.w	r2, r3, #8
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80036e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d012      	beq.n	800371a <HAL_UART_IRQHandler+0x196>
 80036f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00c      	beq.n	800371a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003708:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003710:	f043 0220 	orr.w	r2, r3, #32
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 8249 	beq.w	8003bb8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800372a:	f003 0320 	and.w	r3, r3, #32
 800372e:	2b00      	cmp	r3, #0
 8003730:	d013      	beq.n	800375a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003732:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003736:	f003 0320 	and.w	r3, r3, #32
 800373a:	2b00      	cmp	r3, #0
 800373c:	d105      	bne.n	800374a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800373e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d007      	beq.n	800375a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003760:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800376e:	2b40      	cmp	r3, #64	@ 0x40
 8003770:	d005      	beq.n	800377e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003772:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003776:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800377a:	2b00      	cmp	r3, #0
 800377c:	d054      	beq.n	8003828 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 ff94 	bl	80046ac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800378e:	2b40      	cmp	r3, #64	@ 0x40
 8003790:	d146      	bne.n	8003820 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	3308      	adds	r3, #8
 8003798:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037a0:	e853 3f00 	ldrex	r3, [r3]
 80037a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80037a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80037ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	3308      	adds	r3, #8
 80037ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80037be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80037c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80037ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80037ce:	e841 2300 	strex	r3, r2, [r1]
 80037d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80037d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1d9      	bne.n	8003792 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d017      	beq.n	8003818 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037ee:	4a15      	ldr	r2, [pc, #84]	@ (8003844 <HAL_UART_IRQHandler+0x2c0>)
 80037f0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7fd fd1a 	bl	8001232 <HAL_DMA_Abort_IT>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d019      	beq.n	8003838 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800380a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8003812:	4610      	mov	r0, r2
 8003814:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003816:	e00f      	b.n	8003838 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 f9e0 	bl	8003bde <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800381e:	e00b      	b.n	8003838 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f9dc 	bl	8003bde <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003826:	e007      	b.n	8003838 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 f9d8 	bl	8003bde <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8003836:	e1bf      	b.n	8003bb8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003838:	bf00      	nop
    return;
 800383a:	e1bd      	b.n	8003bb8 <HAL_UART_IRQHandler+0x634>
 800383c:	10000001 	.word	0x10000001
 8003840:	04000120 	.word	0x04000120
 8003844:	08004777 	.word	0x08004777

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800384c:	2b01      	cmp	r3, #1
 800384e:	f040 8153 	bne.w	8003af8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003856:	f003 0310 	and.w	r3, r3, #16
 800385a:	2b00      	cmp	r3, #0
 800385c:	f000 814c 	beq.w	8003af8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003864:	f003 0310 	and.w	r3, r3, #16
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 8145 	beq.w	8003af8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2210      	movs	r2, #16
 8003874:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003880:	2b40      	cmp	r3, #64	@ 0x40
 8003882:	f040 80bb 	bne.w	80039fc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003894:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 818f 	beq.w	8003bbc <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80038a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038a8:	429a      	cmp	r2, r3
 80038aa:	f080 8187 	bcs.w	8003bbc <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0320 	and.w	r3, r3, #32
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f040 8087 	bne.w	80039da <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038d8:	e853 3f00 	ldrex	r3, [r3]
 80038dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80038e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	461a      	mov	r2, r3
 80038f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80038f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80038fa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003902:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003906:	e841 2300 	strex	r3, r2, [r1]
 800390a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800390e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1da      	bne.n	80038cc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	3308      	adds	r3, #8
 800391c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003920:	e853 3f00 	ldrex	r3, [r3]
 8003924:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003926:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003928:	f023 0301 	bic.w	r3, r3, #1
 800392c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	3308      	adds	r3, #8
 8003936:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800393a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800393e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003940:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003942:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003946:	e841 2300 	strex	r3, r2, [r1]
 800394a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800394c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1e1      	bne.n	8003916 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	3308      	adds	r3, #8
 8003958:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800395c:	e853 3f00 	ldrex	r3, [r3]
 8003960:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003962:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003964:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003968:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	3308      	adds	r3, #8
 8003972:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003976:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003978:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800397c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800397e:	e841 2300 	strex	r3, r2, [r1]
 8003982:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003984:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1e3      	bne.n	8003952 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2220      	movs	r2, #32
 800398e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039a0:	e853 3f00 	ldrex	r3, [r3]
 80039a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80039a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039a8:	f023 0310 	bic.w	r3, r3, #16
 80039ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	461a      	mov	r2, r3
 80039b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80039ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80039bc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80039c2:	e841 2300 	strex	r3, r2, [r1]
 80039c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80039c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1e4      	bne.n	8003998 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7fd fbce 	bl	8001176 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2202      	movs	r2, #2
 80039de:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	4619      	mov	r1, r3
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 f8fb 	bl	8003bf0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80039fa:	e0df      	b.n	8003bbc <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 80d1 	beq.w	8003bc0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8003a1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 80cc 	beq.w	8003bc0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a30:	e853 3f00 	ldrex	r3, [r3]
 8003a34:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	461a      	mov	r2, r3
 8003a46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003a4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a4c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a52:	e841 2300 	strex	r3, r2, [r1]
 8003a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1e4      	bne.n	8003a28 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	3308      	adds	r3, #8
 8003a64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a68:	e853 3f00 	ldrex	r3, [r3]
 8003a6c:	623b      	str	r3, [r7, #32]
   return(result);
 8003a6e:	6a3b      	ldr	r3, [r7, #32]
 8003a70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a74:	f023 0301 	bic.w	r3, r3, #1
 8003a78:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	3308      	adds	r3, #8
 8003a82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003a86:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a8e:	e841 2300 	strex	r3, r2, [r1]
 8003a92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1e1      	bne.n	8003a5e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	e853 3f00 	ldrex	r3, [r3]
 8003aba:	60fb      	str	r3, [r7, #12]
   return(result);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f023 0310 	bic.w	r3, r3, #16
 8003ac2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	461a      	mov	r2, r3
 8003acc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ad0:	61fb      	str	r3, [r7, #28]
 8003ad2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad4:	69b9      	ldr	r1, [r7, #24]
 8003ad6:	69fa      	ldr	r2, [r7, #28]
 8003ad8:	e841 2300 	strex	r3, r2, [r1]
 8003adc:	617b      	str	r3, [r7, #20]
   return(result);
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1e4      	bne.n	8003aae <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003aea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003aee:	4619      	mov	r1, r3
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 f87d 	bl	8003bf0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003af6:	e063      	b.n	8003bc0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003afc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00e      	beq.n	8003b22 <HAL_UART_IRQHandler+0x59e>
 8003b04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d008      	beq.n	8003b22 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003b18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f001 fb88 	bl	8005230 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b20:	e051      	b.n	8003bc6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d014      	beq.n	8003b58 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003b2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d105      	bne.n	8003b46 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003b3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d008      	beq.n	8003b58 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d03a      	beq.n	8003bc4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	4798      	blx	r3
    }
    return;
 8003b56:	e035      	b.n	8003bc4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d009      	beq.n	8003b78 <HAL_UART_IRQHandler+0x5f4>
 8003b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d003      	beq.n	8003b78 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 fe16 	bl	80047a2 <UART_EndTransmit_IT>
    return;
 8003b76:	e026      	b.n	8003bc6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d009      	beq.n	8003b98 <HAL_UART_IRQHandler+0x614>
 8003b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b88:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d003      	beq.n	8003b98 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f001 fb5f 	bl	8005254 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b96:	e016      	b.n	8003bc6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d010      	beq.n	8003bc6 <HAL_UART_IRQHandler+0x642>
 8003ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	da0c      	bge.n	8003bc6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f001 fb48 	bl	8005242 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003bb2:	e008      	b.n	8003bc6 <HAL_UART_IRQHandler+0x642>
      return;
 8003bb4:	bf00      	nop
 8003bb6:	e006      	b.n	8003bc6 <HAL_UART_IRQHandler+0x642>
    return;
 8003bb8:	bf00      	nop
 8003bba:	e004      	b.n	8003bc6 <HAL_UART_IRQHandler+0x642>
      return;
 8003bbc:	bf00      	nop
 8003bbe:	e002      	b.n	8003bc6 <HAL_UART_IRQHandler+0x642>
      return;
 8003bc0:	bf00      	nop
 8003bc2:	e000      	b.n	8003bc6 <HAL_UART_IRQHandler+0x642>
    return;
 8003bc4:	bf00      	nop
  }
}
 8003bc6:	37e8      	adds	r7, #232	@ 0xe8
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bc80      	pop	{r7}
 8003bdc:	4770      	bx	lr

08003bde <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bde:	b480      	push	{r7}
 8003be0:	b083      	sub	sp, #12
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bc80      	pop	{r7}
 8003bee:	4770      	bx	lr

08003bf0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bc80      	pop	{r7}
 8003c04:	4770      	bx	lr
	...

08003c08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c0c:	b08c      	sub	sp, #48	@ 0x30
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c12:	2300      	movs	r3, #0
 8003c14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	431a      	orrs	r2, r3
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	431a      	orrs	r2, r3
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	69db      	ldr	r3, [r3, #28]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	4b94      	ldr	r3, [pc, #592]	@ (8003e88 <UART_SetConfig+0x280>)
 8003c38:	4013      	ands	r3, r2
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	6812      	ldr	r2, [r2, #0]
 8003c3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c40:	430b      	orrs	r3, r1
 8003c42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	68da      	ldr	r2, [r3, #12]
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a89      	ldr	r2, [pc, #548]	@ (8003e8c <UART_SetConfig+0x284>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d004      	beq.n	8003c74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c70:	4313      	orrs	r3, r2
 8003c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003c7e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	6812      	ldr	r2, [r2, #0]
 8003c86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c88:	430b      	orrs	r3, r1
 8003c8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c92:	f023 010f 	bic.w	r1, r3, #15
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a7a      	ldr	r2, [pc, #488]	@ (8003e90 <UART_SetConfig+0x288>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d127      	bne.n	8003cfc <UART_SetConfig+0xf4>
 8003cac:	2003      	movs	r0, #3
 8003cae:	f7ff fb25 	bl	80032fc <LL_RCC_GetUSARTClockSource>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8003cb8:	2b03      	cmp	r3, #3
 8003cba:	d81b      	bhi.n	8003cf4 <UART_SetConfig+0xec>
 8003cbc:	a201      	add	r2, pc, #4	@ (adr r2, 8003cc4 <UART_SetConfig+0xbc>)
 8003cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc2:	bf00      	nop
 8003cc4:	08003cd5 	.word	0x08003cd5
 8003cc8:	08003ce5 	.word	0x08003ce5
 8003ccc:	08003cdd 	.word	0x08003cdd
 8003cd0:	08003ced 	.word	0x08003ced
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cda:	e080      	b.n	8003dde <UART_SetConfig+0x1d6>
 8003cdc:	2302      	movs	r3, #2
 8003cde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ce2:	e07c      	b.n	8003dde <UART_SetConfig+0x1d6>
 8003ce4:	2304      	movs	r3, #4
 8003ce6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cea:	e078      	b.n	8003dde <UART_SetConfig+0x1d6>
 8003cec:	2308      	movs	r3, #8
 8003cee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cf2:	e074      	b.n	8003dde <UART_SetConfig+0x1d6>
 8003cf4:	2310      	movs	r3, #16
 8003cf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cfa:	e070      	b.n	8003dde <UART_SetConfig+0x1d6>
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a64      	ldr	r2, [pc, #400]	@ (8003e94 <UART_SetConfig+0x28c>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d138      	bne.n	8003d78 <UART_SetConfig+0x170>
 8003d06:	200c      	movs	r0, #12
 8003d08:	f7ff faf8 	bl	80032fc <LL_RCC_GetUSARTClockSource>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8003d12:	2b0c      	cmp	r3, #12
 8003d14:	d82c      	bhi.n	8003d70 <UART_SetConfig+0x168>
 8003d16:	a201      	add	r2, pc, #4	@ (adr r2, 8003d1c <UART_SetConfig+0x114>)
 8003d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d1c:	08003d51 	.word	0x08003d51
 8003d20:	08003d71 	.word	0x08003d71
 8003d24:	08003d71 	.word	0x08003d71
 8003d28:	08003d71 	.word	0x08003d71
 8003d2c:	08003d61 	.word	0x08003d61
 8003d30:	08003d71 	.word	0x08003d71
 8003d34:	08003d71 	.word	0x08003d71
 8003d38:	08003d71 	.word	0x08003d71
 8003d3c:	08003d59 	.word	0x08003d59
 8003d40:	08003d71 	.word	0x08003d71
 8003d44:	08003d71 	.word	0x08003d71
 8003d48:	08003d71 	.word	0x08003d71
 8003d4c:	08003d69 	.word	0x08003d69
 8003d50:	2300      	movs	r3, #0
 8003d52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d56:	e042      	b.n	8003dde <UART_SetConfig+0x1d6>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d5e:	e03e      	b.n	8003dde <UART_SetConfig+0x1d6>
 8003d60:	2304      	movs	r3, #4
 8003d62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d66:	e03a      	b.n	8003dde <UART_SetConfig+0x1d6>
 8003d68:	2308      	movs	r3, #8
 8003d6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d6e:	e036      	b.n	8003dde <UART_SetConfig+0x1d6>
 8003d70:	2310      	movs	r3, #16
 8003d72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d76:	e032      	b.n	8003dde <UART_SetConfig+0x1d6>
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a43      	ldr	r2, [pc, #268]	@ (8003e8c <UART_SetConfig+0x284>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d12a      	bne.n	8003dd8 <UART_SetConfig+0x1d0>
 8003d82:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8003d86:	f7ff facb 	bl	8003320 <LL_RCC_GetLPUARTClockSource>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d90:	d01a      	beq.n	8003dc8 <UART_SetConfig+0x1c0>
 8003d92:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d96:	d81b      	bhi.n	8003dd0 <UART_SetConfig+0x1c8>
 8003d98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d9c:	d00c      	beq.n	8003db8 <UART_SetConfig+0x1b0>
 8003d9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003da2:	d815      	bhi.n	8003dd0 <UART_SetConfig+0x1c8>
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d003      	beq.n	8003db0 <UART_SetConfig+0x1a8>
 8003da8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dac:	d008      	beq.n	8003dc0 <UART_SetConfig+0x1b8>
 8003dae:	e00f      	b.n	8003dd0 <UART_SetConfig+0x1c8>
 8003db0:	2300      	movs	r3, #0
 8003db2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003db6:	e012      	b.n	8003dde <UART_SetConfig+0x1d6>
 8003db8:	2302      	movs	r3, #2
 8003dba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dbe:	e00e      	b.n	8003dde <UART_SetConfig+0x1d6>
 8003dc0:	2304      	movs	r3, #4
 8003dc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dc6:	e00a      	b.n	8003dde <UART_SetConfig+0x1d6>
 8003dc8:	2308      	movs	r3, #8
 8003dca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dce:	e006      	b.n	8003dde <UART_SetConfig+0x1d6>
 8003dd0:	2310      	movs	r3, #16
 8003dd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dd6:	e002      	b.n	8003dde <UART_SetConfig+0x1d6>
 8003dd8:	2310      	movs	r3, #16
 8003dda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a2a      	ldr	r2, [pc, #168]	@ (8003e8c <UART_SetConfig+0x284>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	f040 80a4 	bne.w	8003f32 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003dea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003dee:	2b08      	cmp	r3, #8
 8003df0:	d823      	bhi.n	8003e3a <UART_SetConfig+0x232>
 8003df2:	a201      	add	r2, pc, #4	@ (adr r2, 8003df8 <UART_SetConfig+0x1f0>)
 8003df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df8:	08003e1d 	.word	0x08003e1d
 8003dfc:	08003e3b 	.word	0x08003e3b
 8003e00:	08003e25 	.word	0x08003e25
 8003e04:	08003e3b 	.word	0x08003e3b
 8003e08:	08003e2b 	.word	0x08003e2b
 8003e0c:	08003e3b 	.word	0x08003e3b
 8003e10:	08003e3b 	.word	0x08003e3b
 8003e14:	08003e3b 	.word	0x08003e3b
 8003e18:	08003e33 	.word	0x08003e33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e1c:	f7fe fc2a 	bl	8002674 <HAL_RCC_GetPCLK1Freq>
 8003e20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e22:	e010      	b.n	8003e46 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e24:	4b1c      	ldr	r3, [pc, #112]	@ (8003e98 <UART_SetConfig+0x290>)
 8003e26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e28:	e00d      	b.n	8003e46 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e2a:	f7fe fb6f 	bl	800250c <HAL_RCC_GetSysClockFreq>
 8003e2e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e30:	e009      	b.n	8003e46 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e38:	e005      	b.n	8003e46 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003e44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 8137 	beq.w	80040bc <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e52:	4a12      	ldr	r2, [pc, #72]	@ (8003e9c <UART_SetConfig+0x294>)
 8003e54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e58:	461a      	mov	r2, r3
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e60:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	685a      	ldr	r2, [r3, #4]
 8003e66:	4613      	mov	r3, r2
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	4413      	add	r3, r2
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d305      	bcc.n	8003e7e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d910      	bls.n	8003ea0 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003e84:	e11a      	b.n	80040bc <UART_SetConfig+0x4b4>
 8003e86:	bf00      	nop
 8003e88:	cfff69f3 	.word	0xcfff69f3
 8003e8c:	40008000 	.word	0x40008000
 8003e90:	40013800 	.word	0x40013800
 8003e94:	40004400 	.word	0x40004400
 8003e98:	00f42400 	.word	0x00f42400
 8003e9c:	08005f40 	.word	0x08005f40
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	60bb      	str	r3, [r7, #8]
 8003ea6:	60fa      	str	r2, [r7, #12]
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eac:	4a8e      	ldr	r2, [pc, #568]	@ (80040e8 <UART_SetConfig+0x4e0>)
 8003eae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	603b      	str	r3, [r7, #0]
 8003eb8:	607a      	str	r2, [r7, #4]
 8003eba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ebe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ec2:	f7fc f9b5 	bl	8000230 <__aeabi_uldivmod>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	460b      	mov	r3, r1
 8003eca:	4610      	mov	r0, r2
 8003ecc:	4619      	mov	r1, r3
 8003ece:	f04f 0200 	mov.w	r2, #0
 8003ed2:	f04f 0300 	mov.w	r3, #0
 8003ed6:	020b      	lsls	r3, r1, #8
 8003ed8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003edc:	0202      	lsls	r2, r0, #8
 8003ede:	6979      	ldr	r1, [r7, #20]
 8003ee0:	6849      	ldr	r1, [r1, #4]
 8003ee2:	0849      	lsrs	r1, r1, #1
 8003ee4:	2000      	movs	r0, #0
 8003ee6:	460c      	mov	r4, r1
 8003ee8:	4605      	mov	r5, r0
 8003eea:	eb12 0804 	adds.w	r8, r2, r4
 8003eee:	eb43 0905 	adc.w	r9, r3, r5
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	469a      	mov	sl, r3
 8003efa:	4693      	mov	fp, r2
 8003efc:	4652      	mov	r2, sl
 8003efe:	465b      	mov	r3, fp
 8003f00:	4640      	mov	r0, r8
 8003f02:	4649      	mov	r1, r9
 8003f04:	f7fc f994 	bl	8000230 <__aeabi_uldivmod>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f10:	6a3b      	ldr	r3, [r7, #32]
 8003f12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f16:	d308      	bcc.n	8003f2a <UART_SetConfig+0x322>
 8003f18:	6a3b      	ldr	r3, [r7, #32]
 8003f1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f1e:	d204      	bcs.n	8003f2a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6a3a      	ldr	r2, [r7, #32]
 8003f26:	60da      	str	r2, [r3, #12]
 8003f28:	e0c8      	b.n	80040bc <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003f30:	e0c4      	b.n	80040bc <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f3a:	d167      	bne.n	800400c <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8003f3c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003f40:	2b08      	cmp	r3, #8
 8003f42:	d828      	bhi.n	8003f96 <UART_SetConfig+0x38e>
 8003f44:	a201      	add	r2, pc, #4	@ (adr r2, 8003f4c <UART_SetConfig+0x344>)
 8003f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4a:	bf00      	nop
 8003f4c:	08003f71 	.word	0x08003f71
 8003f50:	08003f79 	.word	0x08003f79
 8003f54:	08003f81 	.word	0x08003f81
 8003f58:	08003f97 	.word	0x08003f97
 8003f5c:	08003f87 	.word	0x08003f87
 8003f60:	08003f97 	.word	0x08003f97
 8003f64:	08003f97 	.word	0x08003f97
 8003f68:	08003f97 	.word	0x08003f97
 8003f6c:	08003f8f 	.word	0x08003f8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f70:	f7fe fb80 	bl	8002674 <HAL_RCC_GetPCLK1Freq>
 8003f74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f76:	e014      	b.n	8003fa2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f78:	f7fe fb8e 	bl	8002698 <HAL_RCC_GetPCLK2Freq>
 8003f7c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f7e:	e010      	b.n	8003fa2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f80:	4b5a      	ldr	r3, [pc, #360]	@ (80040ec <UART_SetConfig+0x4e4>)
 8003f82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003f84:	e00d      	b.n	8003fa2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f86:	f7fe fac1 	bl	800250c <HAL_RCC_GetSysClockFreq>
 8003f8a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f8c:	e009      	b.n	8003fa2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003f94:	e005      	b.n	8003fa2 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003fa0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 8089 	beq.w	80040bc <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fae:	4a4e      	ldr	r2, [pc, #312]	@ (80040e8 <UART_SetConfig+0x4e0>)
 8003fb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fbc:	005a      	lsls	r2, r3, #1
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	085b      	lsrs	r3, r3, #1
 8003fc4:	441a      	add	r2, r3
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fd0:	6a3b      	ldr	r3, [r7, #32]
 8003fd2:	2b0f      	cmp	r3, #15
 8003fd4:	d916      	bls.n	8004004 <UART_SetConfig+0x3fc>
 8003fd6:	6a3b      	ldr	r3, [r7, #32]
 8003fd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fdc:	d212      	bcs.n	8004004 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fde:	6a3b      	ldr	r3, [r7, #32]
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	f023 030f 	bic.w	r3, r3, #15
 8003fe6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fe8:	6a3b      	ldr	r3, [r7, #32]
 8003fea:	085b      	lsrs	r3, r3, #1
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	f003 0307 	and.w	r3, r3, #7
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	8bfb      	ldrh	r3, [r7, #30]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	8bfa      	ldrh	r2, [r7, #30]
 8004000:	60da      	str	r2, [r3, #12]
 8004002:	e05b      	b.n	80040bc <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800400a:	e057      	b.n	80040bc <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800400c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004010:	2b08      	cmp	r3, #8
 8004012:	d828      	bhi.n	8004066 <UART_SetConfig+0x45e>
 8004014:	a201      	add	r2, pc, #4	@ (adr r2, 800401c <UART_SetConfig+0x414>)
 8004016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401a:	bf00      	nop
 800401c:	08004041 	.word	0x08004041
 8004020:	08004049 	.word	0x08004049
 8004024:	08004051 	.word	0x08004051
 8004028:	08004067 	.word	0x08004067
 800402c:	08004057 	.word	0x08004057
 8004030:	08004067 	.word	0x08004067
 8004034:	08004067 	.word	0x08004067
 8004038:	08004067 	.word	0x08004067
 800403c:	0800405f 	.word	0x0800405f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004040:	f7fe fb18 	bl	8002674 <HAL_RCC_GetPCLK1Freq>
 8004044:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004046:	e014      	b.n	8004072 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004048:	f7fe fb26 	bl	8002698 <HAL_RCC_GetPCLK2Freq>
 800404c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800404e:	e010      	b.n	8004072 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004050:	4b26      	ldr	r3, [pc, #152]	@ (80040ec <UART_SetConfig+0x4e4>)
 8004052:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004054:	e00d      	b.n	8004072 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004056:	f7fe fa59 	bl	800250c <HAL_RCC_GetSysClockFreq>
 800405a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800405c:	e009      	b.n	8004072 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800405e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004062:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004064:	e005      	b.n	8004072 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8004066:	2300      	movs	r3, #0
 8004068:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004070:	bf00      	nop
    }

    if (pclk != 0U)
 8004072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004074:	2b00      	cmp	r3, #0
 8004076:	d021      	beq.n	80040bc <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407c:	4a1a      	ldr	r2, [pc, #104]	@ (80040e8 <UART_SetConfig+0x4e0>)
 800407e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004082:	461a      	mov	r2, r3
 8004084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004086:	fbb3 f2f2 	udiv	r2, r3, r2
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	085b      	lsrs	r3, r3, #1
 8004090:	441a      	add	r2, r3
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	fbb2 f3f3 	udiv	r3, r2, r3
 800409a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800409c:	6a3b      	ldr	r3, [r7, #32]
 800409e:	2b0f      	cmp	r3, #15
 80040a0:	d909      	bls.n	80040b6 <UART_SetConfig+0x4ae>
 80040a2:	6a3b      	ldr	r3, [r7, #32]
 80040a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040a8:	d205      	bcs.n	80040b6 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040aa:	6a3b      	ldr	r3, [r7, #32]
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	60da      	str	r2, [r3, #12]
 80040b4:	e002      	b.n	80040bc <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	2201      	movs	r2, #1
 80040c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	2200      	movs	r2, #0
 80040d0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	2200      	movs	r2, #0
 80040d6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80040d8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3730      	adds	r7, #48	@ 0x30
 80040e0:	46bd      	mov	sp, r7
 80040e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040e6:	bf00      	nop
 80040e8:	08005f40 	.word	0x08005f40
 80040ec:	00f42400 	.word	0x00f42400

080040f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040fc:	f003 0308 	and.w	r3, r3, #8
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00a      	beq.n	800411a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	430a      	orrs	r2, r1
 8004118:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00a      	beq.n	800413c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	430a      	orrs	r2, r1
 800413a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00a      	beq.n	800415e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	430a      	orrs	r2, r1
 800415c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004162:	f003 0304 	and.w	r3, r3, #4
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00a      	beq.n	8004180 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	430a      	orrs	r2, r1
 800417e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004184:	f003 0310 	and.w	r3, r3, #16
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00a      	beq.n	80041a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a6:	f003 0320 	and.w	r3, r3, #32
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00a      	beq.n	80041c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	430a      	orrs	r2, r1
 80041c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d01a      	beq.n	8004206 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041ee:	d10a      	bne.n	8004206 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800420a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00a      	beq.n	8004228 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	430a      	orrs	r2, r1
 8004226:	605a      	str	r2, [r3, #4]
  }
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	bc80      	pop	{r7}
 8004230:	4770      	bx	lr

08004232 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b086      	sub	sp, #24
 8004236:	af02      	add	r7, sp, #8
 8004238:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004242:	f7fc fe2d 	bl	8000ea0 <HAL_GetTick>
 8004246:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0308 	and.w	r3, r3, #8
 8004252:	2b08      	cmp	r3, #8
 8004254:	d10e      	bne.n	8004274 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004256:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f832 	bl	80042ce <UART_WaitOnFlagUntilTimeout>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d001      	beq.n	8004274 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e028      	b.n	80042c6 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0304 	and.w	r3, r3, #4
 800427e:	2b04      	cmp	r3, #4
 8004280:	d10e      	bne.n	80042a0 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004282:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004286:	9300      	str	r3, [sp, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 f81c 	bl	80042ce <UART_WaitOnFlagUntilTimeout>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e012      	b.n	80042c6 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2220      	movs	r2, #32
 80042a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2220      	movs	r2, #32
 80042ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b09c      	sub	sp, #112	@ 0x70
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	60f8      	str	r0, [r7, #12]
 80042d6:	60b9      	str	r1, [r7, #8]
 80042d8:	603b      	str	r3, [r7, #0]
 80042da:	4613      	mov	r3, r2
 80042dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042de:	e0af      	b.n	8004440 <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e6:	f000 80ab 	beq.w	8004440 <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ea:	f7fc fdd9 	bl	8000ea0 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d302      	bcc.n	8004300 <UART_WaitOnFlagUntilTimeout+0x32>
 80042fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d140      	bne.n	8004382 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004306:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004308:	e853 3f00 	ldrex	r3, [r3]
 800430c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800430e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004310:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004314:	667b      	str	r3, [r7, #100]	@ 0x64
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	461a      	mov	r2, r3
 800431c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800431e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004320:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004322:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004324:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004326:	e841 2300 	strex	r3, r2, [r1]
 800432a:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800432c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1e6      	bne.n	8004300 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	3308      	adds	r3, #8
 8004338:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800433c:	e853 3f00 	ldrex	r3, [r3]
 8004340:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004344:	f023 0301 	bic.w	r3, r3, #1
 8004348:	663b      	str	r3, [r7, #96]	@ 0x60
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	3308      	adds	r3, #8
 8004350:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004352:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004354:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004356:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004358:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800435a:	e841 2300 	strex	r3, r2, [r1]
 800435e:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004360:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1e5      	bne.n	8004332 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2220      	movs	r2, #32
 800436a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2220      	movs	r2, #32
 8004372:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e06f      	b.n	8004462 <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0304 	and.w	r3, r3, #4
 800438c:	2b00      	cmp	r3, #0
 800438e:	d057      	beq.n	8004440 <UART_WaitOnFlagUntilTimeout+0x172>
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2b80      	cmp	r3, #128	@ 0x80
 8004394:	d054      	beq.n	8004440 <UART_WaitOnFlagUntilTimeout+0x172>
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	2b40      	cmp	r3, #64	@ 0x40
 800439a:	d051      	beq.n	8004440 <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043aa:	d149      	bne.n	8004440 <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80043b4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043be:	e853 3f00 	ldrex	r3, [r3]
 80043c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c6:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80043ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	461a      	mov	r2, r3
 80043d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80043d6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80043da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80043dc:	e841 2300 	strex	r3, r2, [r1]
 80043e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80043e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1e6      	bne.n	80043b6 <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	3308      	adds	r3, #8
 80043ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	e853 3f00 	ldrex	r3, [r3]
 80043f6:	613b      	str	r3, [r7, #16]
   return(result);
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	f023 0301 	bic.w	r3, r3, #1
 80043fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	3308      	adds	r3, #8
 8004406:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004408:	623a      	str	r2, [r7, #32]
 800440a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440c:	69f9      	ldr	r1, [r7, #28]
 800440e:	6a3a      	ldr	r2, [r7, #32]
 8004410:	e841 2300 	strex	r3, r2, [r1]
 8004414:	61bb      	str	r3, [r7, #24]
   return(result);
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1e5      	bne.n	80043e8 <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2220      	movs	r2, #32
 8004420:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2220      	movs	r2, #32
 8004428:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2220      	movs	r2, #32
 8004430:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e010      	b.n	8004462 <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	69da      	ldr	r2, [r3, #28]
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	4013      	ands	r3, r2
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	429a      	cmp	r2, r3
 800444e:	bf0c      	ite	eq
 8004450:	2301      	moveq	r3, #1
 8004452:	2300      	movne	r3, #0
 8004454:	b2db      	uxtb	r3, r3
 8004456:	461a      	mov	r2, r3
 8004458:	79fb      	ldrb	r3, [r7, #7]
 800445a:	429a      	cmp	r2, r3
 800445c:	f43f af40 	beq.w	80042e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3770      	adds	r7, #112	@ 0x70
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
	...

0800446c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800446c:	b480      	push	{r7}
 800446e:	b0a3      	sub	sp, #140	@ 0x8c
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	4613      	mov	r3, r2
 8004478:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	88fa      	ldrh	r2, [r7, #6]
 8004484:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	88fa      	ldrh	r2, [r7, #6]
 800448c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800449e:	d10e      	bne.n	80044be <UART_Start_Receive_IT+0x52>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d105      	bne.n	80044b4 <UART_Start_Receive_IT+0x48>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80044ae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80044b2:	e02d      	b.n	8004510 <UART_Start_Receive_IT+0xa4>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	22ff      	movs	r2, #255	@ 0xff
 80044b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80044bc:	e028      	b.n	8004510 <UART_Start_Receive_IT+0xa4>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10d      	bne.n	80044e2 <UART_Start_Receive_IT+0x76>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d104      	bne.n	80044d8 <UART_Start_Receive_IT+0x6c>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	22ff      	movs	r2, #255	@ 0xff
 80044d2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80044d6:	e01b      	b.n	8004510 <UART_Start_Receive_IT+0xa4>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	227f      	movs	r2, #127	@ 0x7f
 80044dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80044e0:	e016      	b.n	8004510 <UART_Start_Receive_IT+0xa4>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80044ea:	d10d      	bne.n	8004508 <UART_Start_Receive_IT+0x9c>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d104      	bne.n	80044fe <UART_Start_Receive_IT+0x92>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	227f      	movs	r2, #127	@ 0x7f
 80044f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80044fc:	e008      	b.n	8004510 <UART_Start_Receive_IT+0xa4>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	223f      	movs	r2, #63	@ 0x3f
 8004502:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004506:	e003      	b.n	8004510 <UART_Start_Receive_IT+0xa4>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2222      	movs	r2, #34	@ 0x22
 800451c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	3308      	adds	r3, #8
 8004526:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004528:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800452a:	e853 3f00 	ldrex	r3, [r3]
 800452e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8004530:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004532:	f043 0301 	orr.w	r3, r3, #1
 8004536:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	3308      	adds	r3, #8
 8004540:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004544:	673a      	str	r2, [r7, #112]	@ 0x70
 8004546:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004548:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800454a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800454c:	e841 2300 	strex	r3, r2, [r1]
 8004550:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8004552:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1e3      	bne.n	8004520 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800455c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004560:	d14f      	bne.n	8004602 <UART_Start_Receive_IT+0x196>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004568:	88fa      	ldrh	r2, [r7, #6]
 800456a:	429a      	cmp	r2, r3
 800456c:	d349      	bcc.n	8004602 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004576:	d107      	bne.n	8004588 <UART_Start_Receive_IT+0x11c>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d103      	bne.n	8004588 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	4a46      	ldr	r2, [pc, #280]	@ (800469c <UART_Start_Receive_IT+0x230>)
 8004584:	675a      	str	r2, [r3, #116]	@ 0x74
 8004586:	e002      	b.n	800458e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4a45      	ldr	r2, [pc, #276]	@ (80046a0 <UART_Start_Receive_IT+0x234>)
 800458c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d01a      	beq.n	80045cc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800459e:	e853 3f00 	ldrex	r3, [r3]
 80045a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80045a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	461a      	mov	r2, r3
 80045b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80045b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045ba:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045bc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80045be:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80045c0:	e841 2300 	strex	r3, r2, [r1]
 80045c4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80045c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1e4      	bne.n	8004596 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	3308      	adds	r3, #8
 80045d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045d6:	e853 3f00 	ldrex	r3, [r3]
 80045da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80045dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	3308      	adds	r3, #8
 80045ea:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80045ec:	64ba      	str	r2, [r7, #72]	@ 0x48
 80045ee:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80045f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045f4:	e841 2300 	strex	r3, r2, [r1]
 80045f8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80045fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1e5      	bne.n	80045cc <UART_Start_Receive_IT+0x160>
 8004600:	e046      	b.n	8004690 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800460a:	d107      	bne.n	800461c <UART_Start_Receive_IT+0x1b0>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d103      	bne.n	800461c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	4a23      	ldr	r2, [pc, #140]	@ (80046a4 <UART_Start_Receive_IT+0x238>)
 8004618:	675a      	str	r2, [r3, #116]	@ 0x74
 800461a:	e002      	b.n	8004622 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	4a22      	ldr	r2, [pc, #136]	@ (80046a8 <UART_Start_Receive_IT+0x23c>)
 8004620:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d019      	beq.n	800465e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004632:	e853 3f00 	ldrex	r3, [r3]
 8004636:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800463e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	461a      	mov	r2, r3
 8004646:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004648:	637b      	str	r3, [r7, #52]	@ 0x34
 800464a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800464e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004650:	e841 2300 	strex	r3, r2, [r1]
 8004654:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1e6      	bne.n	800462a <UART_Start_Receive_IT+0x1be>
 800465c:	e018      	b.n	8004690 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	e853 3f00 	ldrex	r3, [r3]
 800466a:	613b      	str	r3, [r7, #16]
   return(result);
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	f043 0320 	orr.w	r3, r3, #32
 8004672:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	461a      	mov	r2, r3
 800467a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800467c:	623b      	str	r3, [r7, #32]
 800467e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004680:	69f9      	ldr	r1, [r7, #28]
 8004682:	6a3a      	ldr	r2, [r7, #32]
 8004684:	e841 2300 	strex	r3, r2, [r1]
 8004688:	61bb      	str	r3, [r7, #24]
   return(result);
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1e6      	bne.n	800465e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	378c      	adds	r7, #140	@ 0x8c
 8004696:	46bd      	mov	sp, r7
 8004698:	bc80      	pop	{r7}
 800469a:	4770      	bx	lr
 800469c:	08004ec9 	.word	0x08004ec9
 80046a0:	08004b69 	.word	0x08004b69
 80046a4:	080049b1 	.word	0x080049b1
 80046a8:	080047f9 	.word	0x080047f9

080046ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b095      	sub	sp, #84	@ 0x54
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046bc:	e853 3f00 	ldrex	r3, [r3]
 80046c0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80046c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	461a      	mov	r2, r3
 80046d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80046d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80046d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80046da:	e841 2300 	strex	r3, r2, [r1]
 80046de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80046e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1e6      	bne.n	80046b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	3308      	adds	r3, #8
 80046ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ee:	6a3b      	ldr	r3, [r7, #32]
 80046f0:	e853 3f00 	ldrex	r3, [r3]
 80046f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046fc:	f023 0301 	bic.w	r3, r3, #1
 8004700:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	3308      	adds	r3, #8
 8004708:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800470a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800470c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004710:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004712:	e841 2300 	strex	r3, r2, [r1]
 8004716:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1e3      	bne.n	80046e6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004722:	2b01      	cmp	r3, #1
 8004724:	d118      	bne.n	8004758 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	e853 3f00 	ldrex	r3, [r3]
 8004732:	60bb      	str	r3, [r7, #8]
   return(result);
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	f023 0310 	bic.w	r3, r3, #16
 800473a:	647b      	str	r3, [r7, #68]	@ 0x44
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	461a      	mov	r2, r3
 8004742:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004744:	61bb      	str	r3, [r7, #24]
 8004746:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004748:	6979      	ldr	r1, [r7, #20]
 800474a:	69ba      	ldr	r2, [r7, #24]
 800474c:	e841 2300 	strex	r3, r2, [r1]
 8004750:	613b      	str	r3, [r7, #16]
   return(result);
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1e6      	bne.n	8004726 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2220      	movs	r2, #32
 800475c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800476c:	bf00      	nop
 800476e:	3754      	adds	r7, #84	@ 0x54
 8004770:	46bd      	mov	sp, r7
 8004772:	bc80      	pop	{r7}
 8004774:	4770      	bx	lr

08004776 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b084      	sub	sp, #16
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004782:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f7ff fa22 	bl	8003bde <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800479a:	bf00      	nop
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b088      	sub	sp, #32
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	e853 3f00 	ldrex	r3, [r3]
 80047b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047be:	61fb      	str	r3, [r7, #28]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	461a      	mov	r2, r3
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	61bb      	str	r3, [r7, #24]
 80047ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047cc:	6979      	ldr	r1, [r7, #20]
 80047ce:	69ba      	ldr	r2, [r7, #24]
 80047d0:	e841 2300 	strex	r3, r2, [r1]
 80047d4:	613b      	str	r3, [r7, #16]
   return(result);
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1e6      	bne.n	80047aa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2220      	movs	r2, #32
 80047e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f7ff f9ee 	bl	8003bcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047f0:	bf00      	nop
 80047f2:	3720      	adds	r7, #32
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b09c      	sub	sp, #112	@ 0x70
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004806:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004810:	2b22      	cmp	r3, #34	@ 0x22
 8004812:	f040 80be 	bne.w	8004992 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800481c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004820:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004824:	b2d9      	uxtb	r1, r3
 8004826:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800482a:	b2da      	uxtb	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004830:	400a      	ands	r2, r1
 8004832:	b2d2      	uxtb	r2, r2
 8004834:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800483a:	1c5a      	adds	r2, r3, #1
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004846:	b29b      	uxth	r3, r3
 8004848:	3b01      	subs	r3, #1
 800484a:	b29a      	uxth	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004858:	b29b      	uxth	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	f040 80a1 	bne.w	80049a2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004866:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004868:	e853 3f00 	ldrex	r3, [r3]
 800486c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800486e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004870:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004874:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	461a      	mov	r2, r3
 800487c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800487e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004880:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004882:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004884:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004886:	e841 2300 	strex	r3, r2, [r1]
 800488a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800488c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1e6      	bne.n	8004860 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	3308      	adds	r3, #8
 8004898:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800489c:	e853 3f00 	ldrex	r3, [r3]
 80048a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80048a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048a4:	f023 0301 	bic.w	r3, r3, #1
 80048a8:	667b      	str	r3, [r7, #100]	@ 0x64
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	3308      	adds	r3, #8
 80048b0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80048b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80048b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80048b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048ba:	e841 2300 	strex	r3, r2, [r1]
 80048be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80048c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1e5      	bne.n	8004892 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2220      	movs	r2, #32
 80048ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a33      	ldr	r2, [pc, #204]	@ (80049ac <UART_RxISR_8BIT+0x1b4>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d01f      	beq.n	8004924 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d018      	beq.n	8004924 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fa:	e853 3f00 	ldrex	r3, [r3]
 80048fe:	623b      	str	r3, [r7, #32]
   return(result);
 8004900:	6a3b      	ldr	r3, [r7, #32]
 8004902:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004906:	663b      	str	r3, [r7, #96]	@ 0x60
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	461a      	mov	r2, r3
 800490e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004910:	633b      	str	r3, [r7, #48]	@ 0x30
 8004912:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004914:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004916:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004918:	e841 2300 	strex	r3, r2, [r1]
 800491c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800491e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1e6      	bne.n	80048f2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004928:	2b01      	cmp	r3, #1
 800492a:	d12e      	bne.n	800498a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	e853 3f00 	ldrex	r3, [r3]
 800493e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f023 0310 	bic.w	r3, r3, #16
 8004946:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	461a      	mov	r2, r3
 800494e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004950:	61fb      	str	r3, [r7, #28]
 8004952:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004954:	69b9      	ldr	r1, [r7, #24]
 8004956:	69fa      	ldr	r2, [r7, #28]
 8004958:	e841 2300 	strex	r3, r2, [r1]
 800495c:	617b      	str	r3, [r7, #20]
   return(result);
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1e6      	bne.n	8004932 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	f003 0310 	and.w	r3, r3, #16
 800496e:	2b10      	cmp	r3, #16
 8004970:	d103      	bne.n	800497a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2210      	movs	r2, #16
 8004978:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004980:	4619      	mov	r1, r3
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7ff f934 	bl	8003bf0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004988:	e00b      	b.n	80049a2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7fb fef8 	bl	8000780 <HAL_UART_RxCpltCallback>
}
 8004990:	e007      	b.n	80049a2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	699a      	ldr	r2, [r3, #24]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f042 0208 	orr.w	r2, r2, #8
 80049a0:	619a      	str	r2, [r3, #24]
}
 80049a2:	bf00      	nop
 80049a4:	3770      	adds	r7, #112	@ 0x70
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	40008000 	.word	0x40008000

080049b0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b09c      	sub	sp, #112	@ 0x70
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80049be:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049c8:	2b22      	cmp	r3, #34	@ 0x22
 80049ca:	f040 80be 	bne.w	8004b4a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049dc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80049de:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80049e2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80049e6:	4013      	ands	r3, r2
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80049ec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049f2:	1c9a      	adds	r2, r3, #2
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	3b01      	subs	r3, #1
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f040 80a1 	bne.w	8004b5a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a20:	e853 3f00 	ldrex	r3, [r3]
 8004a24:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004a26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a2c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	461a      	mov	r2, r3
 8004a34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a36:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a38:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004a3c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004a3e:	e841 2300 	strex	r3, r2, [r1]
 8004a42:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004a44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1e6      	bne.n	8004a18 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	3308      	adds	r3, #8
 8004a50:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a54:	e853 3f00 	ldrex	r3, [r3]
 8004a58:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a5c:	f023 0301 	bic.w	r3, r3, #1
 8004a60:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	3308      	adds	r3, #8
 8004a68:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004a6a:	643a      	str	r2, [r7, #64]	@ 0x40
 8004a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a70:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a72:	e841 2300 	strex	r3, r2, [r1]
 8004a76:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1e5      	bne.n	8004a4a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2220      	movs	r2, #32
 8004a82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a33      	ldr	r2, [pc, #204]	@ (8004b64 <UART_RxISR_16BIT+0x1b4>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d01f      	beq.n	8004adc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d018      	beq.n	8004adc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab0:	6a3b      	ldr	r3, [r7, #32]
 8004ab2:	e853 3f00 	ldrex	r3, [r3]
 8004ab6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004abe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004aca:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004acc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ace:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ad0:	e841 2300 	strex	r3, r2, [r1]
 8004ad4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1e6      	bne.n	8004aaa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d12e      	bne.n	8004b42 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	e853 3f00 	ldrex	r3, [r3]
 8004af6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	f023 0310 	bic.w	r3, r3, #16
 8004afe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	461a      	mov	r2, r3
 8004b06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b08:	61bb      	str	r3, [r7, #24]
 8004b0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0c:	6979      	ldr	r1, [r7, #20]
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	e841 2300 	strex	r3, r2, [r1]
 8004b14:	613b      	str	r3, [r7, #16]
   return(result);
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1e6      	bne.n	8004aea <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	f003 0310 	and.w	r3, r3, #16
 8004b26:	2b10      	cmp	r3, #16
 8004b28:	d103      	bne.n	8004b32 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2210      	movs	r2, #16
 8004b30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004b38:	4619      	mov	r1, r3
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7ff f858 	bl	8003bf0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004b40:	e00b      	b.n	8004b5a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7fb fe1c 	bl	8000780 <HAL_UART_RxCpltCallback>
}
 8004b48:	e007      	b.n	8004b5a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	699a      	ldr	r2, [r3, #24]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f042 0208 	orr.w	r2, r2, #8
 8004b58:	619a      	str	r2, [r3, #24]
}
 8004b5a:	bf00      	nop
 8004b5c:	3770      	adds	r7, #112	@ 0x70
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	40008000 	.word	0x40008000

08004b68 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b0ac      	sub	sp, #176	@ 0xb0
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004b76:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b9e:	2b22      	cmp	r3, #34	@ 0x22
 8004ba0:	f040 8182 	bne.w	8004ea8 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004baa:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004bae:	e125      	b.n	8004dfc <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004bba:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8004bbe:	b2d9      	uxtb	r1, r3
 8004bc0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8004bc4:	b2da      	uxtb	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bca:	400a      	ands	r2, r1
 8004bcc:	b2d2      	uxtb	r2, r2
 8004bce:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bd4:	1c5a      	adds	r2, r3, #1
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	3b01      	subs	r3, #1
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	69db      	ldr	r3, [r3, #28]
 8004bf2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004bf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004bfa:	f003 0307 	and.w	r3, r3, #7
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d053      	beq.n	8004caa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004c02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d011      	beq.n	8004c32 <UART_RxISR_8BIT_FIFOEN+0xca>
 8004c0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004c12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00b      	beq.n	8004c32 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c28:	f043 0201 	orr.w	r2, r3, #1
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d011      	beq.n	8004c62 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8004c3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00b      	beq.n	8004c62 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2202      	movs	r2, #2
 8004c50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c58:	f043 0204 	orr.w	r2, r3, #4
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c66:	f003 0304 	and.w	r3, r3, #4
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d011      	beq.n	8004c92 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8004c6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00b      	beq.n	8004c92 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2204      	movs	r2, #4
 8004c80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c88:	f043 0202 	orr.w	r2, r3, #2
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d006      	beq.n	8004caa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f7fe ff9e 	bl	8003bde <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f040 80a2 	bne.w	8004dfc <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cbe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004cc0:	e853 3f00 	ldrex	r3, [r3]
 8004cc4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8004cc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ccc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004cda:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004cdc:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cde:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8004ce0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004ce2:	e841 2300 	strex	r3, r2, [r1]
 8004ce6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8004ce8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1e4      	bne.n	8004cb8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	3308      	adds	r3, #8
 8004cf4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cf8:	e853 3f00 	ldrex	r3, [r3]
 8004cfc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8004cfe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d04:	f023 0301 	bic.w	r3, r3, #1
 8004d08:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	3308      	adds	r3, #8
 8004d12:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004d16:	66ba      	str	r2, [r7, #104]	@ 0x68
 8004d18:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8004d1c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004d1e:	e841 2300 	strex	r3, r2, [r1]
 8004d22:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8004d24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1e1      	bne.n	8004cee <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2220      	movs	r2, #32
 8004d2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a5f      	ldr	r2, [pc, #380]	@ (8004ec0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d021      	beq.n	8004d8c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d01a      	beq.n	8004d8c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d5e:	e853 3f00 	ldrex	r3, [r3]
 8004d62:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004d64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d66:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004d6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	461a      	mov	r2, r3
 8004d74:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004d78:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d7a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004d7e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004d80:	e841 2300 	strex	r3, r2, [r1]
 8004d84:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004d86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1e4      	bne.n	8004d56 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d130      	bne.n	8004df6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004da2:	e853 3f00 	ldrex	r3, [r3]
 8004da6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004daa:	f023 0310 	bic.w	r3, r3, #16
 8004dae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	461a      	mov	r2, r3
 8004db8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8004dbe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004dc2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004dc4:	e841 2300 	strex	r3, r2, [r1]
 8004dc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1e4      	bne.n	8004d9a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	69db      	ldr	r3, [r3, #28]
 8004dd6:	f003 0310 	and.w	r3, r3, #16
 8004dda:	2b10      	cmp	r3, #16
 8004ddc:	d103      	bne.n	8004de6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2210      	movs	r2, #16
 8004de4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004dec:	4619      	mov	r1, r3
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f7fe fefe 	bl	8003bf0 <HAL_UARTEx_RxEventCallback>
 8004df4:	e002      	b.n	8004dfc <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f7fb fcc2 	bl	8000780 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004dfc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d006      	beq.n	8004e12 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8004e04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e08:	f003 0320 	and.w	r3, r3, #32
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f47f aecf 	bne.w	8004bb0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004e18:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004e1c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d049      	beq.n	8004eb8 <UART_RxISR_8BIT_FIFOEN+0x350>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004e2a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d242      	bcs.n	8004eb8 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	3308      	adds	r3, #8
 8004e38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
 8004e3c:	e853 3f00 	ldrex	r3, [r3]
 8004e40:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	3308      	adds	r3, #8
 8004e52:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004e56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e58:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e5e:	e841 2300 	strex	r3, r2, [r1]
 8004e62:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1e3      	bne.n	8004e32 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a15      	ldr	r2, [pc, #84]	@ (8004ec4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8004e6e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	e853 3f00 	ldrex	r3, [r3]
 8004e7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	f043 0320 	orr.w	r3, r3, #32
 8004e84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004e92:	61bb      	str	r3, [r7, #24]
 8004e94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e96:	6979      	ldr	r1, [r7, #20]
 8004e98:	69ba      	ldr	r2, [r7, #24]
 8004e9a:	e841 2300 	strex	r3, r2, [r1]
 8004e9e:	613b      	str	r3, [r7, #16]
   return(result);
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1e4      	bne.n	8004e70 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004ea6:	e007      	b.n	8004eb8 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	699a      	ldr	r2, [r3, #24]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f042 0208 	orr.w	r2, r2, #8
 8004eb6:	619a      	str	r2, [r3, #24]
}
 8004eb8:	bf00      	nop
 8004eba:	37b0      	adds	r7, #176	@ 0xb0
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	40008000 	.word	0x40008000
 8004ec4:	080047f9 	.word	0x080047f9

08004ec8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b0ae      	sub	sp, #184	@ 0xb8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004ed6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	69db      	ldr	r3, [r3, #28]
 8004ee0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004efe:	2b22      	cmp	r3, #34	@ 0x22
 8004f00:	f040 8186 	bne.w	8005210 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004f0a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004f0e:	e129      	b.n	8005164 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f16:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8004f22:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8004f26:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f32:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f38:	1c9a      	adds	r2, r3, #2
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	3b01      	subs	r3, #1
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	69db      	ldr	r3, [r3, #28]
 8004f56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004f5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004f5e:	f003 0307 	and.w	r3, r3, #7
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d053      	beq.n	800500e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d011      	beq.n	8004f96 <UART_RxISR_16BIT_FIFOEN+0xce>
 8004f72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00b      	beq.n	8004f96 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2201      	movs	r2, #1
 8004f84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f8c:	f043 0201 	orr.w	r2, r3, #1
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d011      	beq.n	8004fc6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8004fa2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00b      	beq.n	8004fc6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2202      	movs	r2, #2
 8004fb4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fbc:	f043 0204 	orr.w	r2, r3, #4
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004fca:	f003 0304 	and.w	r3, r3, #4
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d011      	beq.n	8004ff6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8004fd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00b      	beq.n	8004ff6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2204      	movs	r2, #4
 8004fe4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fec:	f043 0202 	orr.w	r2, r3, #2
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d006      	beq.n	800500e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f7fe fdec 	bl	8003bde <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005014:	b29b      	uxth	r3, r3
 8005016:	2b00      	cmp	r3, #0
 8005018:	f040 80a4 	bne.w	8005164 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005022:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005024:	e853 3f00 	ldrex	r3, [r3]
 8005028:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800502a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800502c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005030:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	461a      	mov	r2, r3
 800503a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800503e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005042:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005044:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005046:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800504a:	e841 2300 	strex	r3, r2, [r1]
 800504e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005050:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1e2      	bne.n	800501c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	3308      	adds	r3, #8
 800505c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005060:	e853 3f00 	ldrex	r3, [r3]
 8005064:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005066:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005068:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800506c:	f023 0301 	bic.w	r3, r3, #1
 8005070:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	3308      	adds	r3, #8
 800507a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800507e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005080:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005082:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005084:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005086:	e841 2300 	strex	r3, r2, [r1]
 800508a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800508c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1e1      	bne.n	8005056 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2220      	movs	r2, #32
 8005096:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a5f      	ldr	r2, [pc, #380]	@ (8005228 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d021      	beq.n	80050f4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d01a      	beq.n	80050f4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050c6:	e853 3f00 	ldrex	r3, [r3]
 80050ca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80050cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80050d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	461a      	mov	r2, r3
 80050dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80050e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80050e2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80050e6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80050e8:	e841 2300 	strex	r3, r2, [r1]
 80050ec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80050ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1e4      	bne.n	80050be <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d130      	bne.n	800515e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800510a:	e853 3f00 	ldrex	r3, [r3]
 800510e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005112:	f023 0310 	bic.w	r3, r3, #16
 8005116:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	461a      	mov	r2, r3
 8005120:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005124:	647b      	str	r3, [r7, #68]	@ 0x44
 8005126:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005128:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800512a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800512c:	e841 2300 	strex	r3, r2, [r1]
 8005130:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005132:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1e4      	bne.n	8005102 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	f003 0310 	and.w	r3, r3, #16
 8005142:	2b10      	cmp	r3, #16
 8005144:	d103      	bne.n	800514e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2210      	movs	r2, #16
 800514c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005154:	4619      	mov	r1, r3
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7fe fd4a 	bl	8003bf0 <HAL_UARTEx_RxEventCallback>
 800515c:	e002      	b.n	8005164 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f7fb fb0e 	bl	8000780 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005164:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8005168:	2b00      	cmp	r3, #0
 800516a:	d006      	beq.n	800517a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800516c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005170:	f003 0320 	and.w	r3, r3, #32
 8005174:	2b00      	cmp	r3, #0
 8005176:	f47f aecb 	bne.w	8004f10 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005180:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005184:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8005188:	2b00      	cmp	r3, #0
 800518a:	d049      	beq.n	8005220 <UART_RxISR_16BIT_FIFOEN+0x358>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005192:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8005196:	429a      	cmp	r2, r3
 8005198:	d242      	bcs.n	8005220 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	3308      	adds	r3, #8
 80051a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a4:	e853 3f00 	ldrex	r3, [r3]
 80051a8:	623b      	str	r3, [r7, #32]
   return(result);
 80051aa:	6a3b      	ldr	r3, [r7, #32]
 80051ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	3308      	adds	r3, #8
 80051ba:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80051be:	633a      	str	r2, [r7, #48]	@ 0x30
 80051c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051c6:	e841 2300 	strex	r3, r2, [r1]
 80051ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1e3      	bne.n	800519a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a15      	ldr	r2, [pc, #84]	@ (800522c <UART_RxISR_16BIT_FIFOEN+0x364>)
 80051d6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	e853 3f00 	ldrex	r3, [r3]
 80051e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f043 0320 	orr.w	r3, r3, #32
 80051ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	461a      	mov	r2, r3
 80051f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80051fa:	61fb      	str	r3, [r7, #28]
 80051fc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fe:	69b9      	ldr	r1, [r7, #24]
 8005200:	69fa      	ldr	r2, [r7, #28]
 8005202:	e841 2300 	strex	r3, r2, [r1]
 8005206:	617b      	str	r3, [r7, #20]
   return(result);
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1e4      	bne.n	80051d8 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800520e:	e007      	b.n	8005220 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	699a      	ldr	r2, [r3, #24]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 0208 	orr.w	r2, r2, #8
 800521e:	619a      	str	r2, [r3, #24]
}
 8005220:	bf00      	nop
 8005222:	37b8      	adds	r7, #184	@ 0xb8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	40008000 	.word	0x40008000
 800522c:	080049b1 	.word	0x080049b1

08005230 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	bc80      	pop	{r7}
 8005240:	4770      	bx	lr

08005242 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005242:	b480      	push	{r7}
 8005244:	b083      	sub	sp, #12
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800524a:	bf00      	nop
 800524c:	370c      	adds	r7, #12
 800524e:	46bd      	mov	sp, r7
 8005250:	bc80      	pop	{r7}
 8005252:	4770      	bx	lr

08005254 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	bc80      	pop	{r7}
 8005264:	4770      	bx	lr

08005266 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005266:	b480      	push	{r7}
 8005268:	b085      	sub	sp, #20
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005274:	2b01      	cmp	r3, #1
 8005276:	d101      	bne.n	800527c <HAL_UARTEx_DisableFifoMode+0x16>
 8005278:	2302      	movs	r3, #2
 800527a:	e027      	b.n	80052cc <HAL_UARTEx_DisableFifoMode+0x66>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2224      	movs	r2, #36	@ 0x24
 8005288:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f022 0201 	bic.w	r2, r2, #1
 80052a2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80052aa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2220      	movs	r2, #32
 80052be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3714      	adds	r7, #20
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bc80      	pop	{r7}
 80052d4:	4770      	bx	lr

080052d6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b084      	sub	sp, #16
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
 80052de:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d101      	bne.n	80052ee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80052ea:	2302      	movs	r3, #2
 80052ec:	e02d      	b.n	800534a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2224      	movs	r2, #36	@ 0x24
 80052fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f022 0201 	bic.w	r2, r2, #1
 8005314:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	683a      	ldr	r2, [r7, #0]
 8005326:	430a      	orrs	r2, r1
 8005328:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f850 	bl	80053d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2220      	movs	r2, #32
 800533c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3710      	adds	r7, #16
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b084      	sub	sp, #16
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
 800535a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005362:	2b01      	cmp	r3, #1
 8005364:	d101      	bne.n	800536a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005366:	2302      	movs	r3, #2
 8005368:	e02d      	b.n	80053c6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2224      	movs	r2, #36	@ 0x24
 8005376:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f022 0201 	bic.w	r2, r2, #1
 8005390:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	683a      	ldr	r2, [r7, #0]
 80053a2:	430a      	orrs	r2, r1
 80053a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f812 	bl	80053d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2220      	movs	r2, #32
 80053b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
	...

080053d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d108      	bne.n	80053f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80053f0:	e031      	b.n	8005456 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80053f2:	2308      	movs	r3, #8
 80053f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80053f6:	2308      	movs	r3, #8
 80053f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	0e5b      	lsrs	r3, r3, #25
 8005402:	b2db      	uxtb	r3, r3
 8005404:	f003 0307 	and.w	r3, r3, #7
 8005408:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	0f5b      	lsrs	r3, r3, #29
 8005412:	b2db      	uxtb	r3, r3
 8005414:	f003 0307 	and.w	r3, r3, #7
 8005418:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800541a:	7bbb      	ldrb	r3, [r7, #14]
 800541c:	7b3a      	ldrb	r2, [r7, #12]
 800541e:	4910      	ldr	r1, [pc, #64]	@ (8005460 <UARTEx_SetNbDataToProcess+0x90>)
 8005420:	5c8a      	ldrb	r2, [r1, r2]
 8005422:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005426:	7b3a      	ldrb	r2, [r7, #12]
 8005428:	490e      	ldr	r1, [pc, #56]	@ (8005464 <UARTEx_SetNbDataToProcess+0x94>)
 800542a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800542c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005430:	b29a      	uxth	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005438:	7bfb      	ldrb	r3, [r7, #15]
 800543a:	7b7a      	ldrb	r2, [r7, #13]
 800543c:	4908      	ldr	r1, [pc, #32]	@ (8005460 <UARTEx_SetNbDataToProcess+0x90>)
 800543e:	5c8a      	ldrb	r2, [r1, r2]
 8005440:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005444:	7b7a      	ldrb	r2, [r7, #13]
 8005446:	4907      	ldr	r1, [pc, #28]	@ (8005464 <UARTEx_SetNbDataToProcess+0x94>)
 8005448:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800544a:	fb93 f3f2 	sdiv	r3, r3, r2
 800544e:	b29a      	uxth	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005456:	bf00      	nop
 8005458:	3714      	adds	r7, #20
 800545a:	46bd      	mov	sp, r7
 800545c:	bc80      	pop	{r7}
 800545e:	4770      	bx	lr
 8005460:	08005f58 	.word	0x08005f58
 8005464:	08005f60 	.word	0x08005f60

08005468 <sniprintf>:
 8005468:	b40c      	push	{r2, r3}
 800546a:	b530      	push	{r4, r5, lr}
 800546c:	4b18      	ldr	r3, [pc, #96]	@ (80054d0 <sniprintf+0x68>)
 800546e:	1e0c      	subs	r4, r1, #0
 8005470:	681d      	ldr	r5, [r3, #0]
 8005472:	b09d      	sub	sp, #116	@ 0x74
 8005474:	da08      	bge.n	8005488 <sniprintf+0x20>
 8005476:	238b      	movs	r3, #139	@ 0x8b
 8005478:	602b      	str	r3, [r5, #0]
 800547a:	f04f 30ff 	mov.w	r0, #4294967295
 800547e:	b01d      	add	sp, #116	@ 0x74
 8005480:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005484:	b002      	add	sp, #8
 8005486:	4770      	bx	lr
 8005488:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800548c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005490:	f04f 0300 	mov.w	r3, #0
 8005494:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005496:	bf14      	ite	ne
 8005498:	f104 33ff 	addne.w	r3, r4, #4294967295
 800549c:	4623      	moveq	r3, r4
 800549e:	9304      	str	r3, [sp, #16]
 80054a0:	9307      	str	r3, [sp, #28]
 80054a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80054a6:	9002      	str	r0, [sp, #8]
 80054a8:	9006      	str	r0, [sp, #24]
 80054aa:	f8ad 3016 	strh.w	r3, [sp, #22]
 80054ae:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80054b0:	ab21      	add	r3, sp, #132	@ 0x84
 80054b2:	a902      	add	r1, sp, #8
 80054b4:	4628      	mov	r0, r5
 80054b6:	9301      	str	r3, [sp, #4]
 80054b8:	f000 f9b6 	bl	8005828 <_svfiprintf_r>
 80054bc:	1c43      	adds	r3, r0, #1
 80054be:	bfbc      	itt	lt
 80054c0:	238b      	movlt	r3, #139	@ 0x8b
 80054c2:	602b      	strlt	r3, [r5, #0]
 80054c4:	2c00      	cmp	r4, #0
 80054c6:	d0da      	beq.n	800547e <sniprintf+0x16>
 80054c8:	9b02      	ldr	r3, [sp, #8]
 80054ca:	2200      	movs	r2, #0
 80054cc:	701a      	strb	r2, [r3, #0]
 80054ce:	e7d6      	b.n	800547e <sniprintf+0x16>
 80054d0:	2000011c 	.word	0x2000011c

080054d4 <siprintf>:
 80054d4:	b40e      	push	{r1, r2, r3}
 80054d6:	b510      	push	{r4, lr}
 80054d8:	b09d      	sub	sp, #116	@ 0x74
 80054da:	ab1f      	add	r3, sp, #124	@ 0x7c
 80054dc:	9002      	str	r0, [sp, #8]
 80054de:	9006      	str	r0, [sp, #24]
 80054e0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80054e4:	480a      	ldr	r0, [pc, #40]	@ (8005510 <siprintf+0x3c>)
 80054e6:	9107      	str	r1, [sp, #28]
 80054e8:	9104      	str	r1, [sp, #16]
 80054ea:	490a      	ldr	r1, [pc, #40]	@ (8005514 <siprintf+0x40>)
 80054ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80054f0:	9105      	str	r1, [sp, #20]
 80054f2:	2400      	movs	r4, #0
 80054f4:	a902      	add	r1, sp, #8
 80054f6:	6800      	ldr	r0, [r0, #0]
 80054f8:	9301      	str	r3, [sp, #4]
 80054fa:	941b      	str	r4, [sp, #108]	@ 0x6c
 80054fc:	f000 f994 	bl	8005828 <_svfiprintf_r>
 8005500:	9b02      	ldr	r3, [sp, #8]
 8005502:	701c      	strb	r4, [r3, #0]
 8005504:	b01d      	add	sp, #116	@ 0x74
 8005506:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800550a:	b003      	add	sp, #12
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	2000011c 	.word	0x2000011c
 8005514:	ffff0208 	.word	0xffff0208

08005518 <memset>:
 8005518:	4402      	add	r2, r0
 800551a:	4603      	mov	r3, r0
 800551c:	4293      	cmp	r3, r2
 800551e:	d100      	bne.n	8005522 <memset+0xa>
 8005520:	4770      	bx	lr
 8005522:	f803 1b01 	strb.w	r1, [r3], #1
 8005526:	e7f9      	b.n	800551c <memset+0x4>

08005528 <__errno>:
 8005528:	4b01      	ldr	r3, [pc, #4]	@ (8005530 <__errno+0x8>)
 800552a:	6818      	ldr	r0, [r3, #0]
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	2000011c 	.word	0x2000011c

08005534 <__libc_init_array>:
 8005534:	b570      	push	{r4, r5, r6, lr}
 8005536:	4d0d      	ldr	r5, [pc, #52]	@ (800556c <__libc_init_array+0x38>)
 8005538:	4c0d      	ldr	r4, [pc, #52]	@ (8005570 <__libc_init_array+0x3c>)
 800553a:	1b64      	subs	r4, r4, r5
 800553c:	10a4      	asrs	r4, r4, #2
 800553e:	2600      	movs	r6, #0
 8005540:	42a6      	cmp	r6, r4
 8005542:	d109      	bne.n	8005558 <__libc_init_array+0x24>
 8005544:	4d0b      	ldr	r5, [pc, #44]	@ (8005574 <__libc_init_array+0x40>)
 8005546:	4c0c      	ldr	r4, [pc, #48]	@ (8005578 <__libc_init_array+0x44>)
 8005548:	f000 fc64 	bl	8005e14 <_init>
 800554c:	1b64      	subs	r4, r4, r5
 800554e:	10a4      	asrs	r4, r4, #2
 8005550:	2600      	movs	r6, #0
 8005552:	42a6      	cmp	r6, r4
 8005554:	d105      	bne.n	8005562 <__libc_init_array+0x2e>
 8005556:	bd70      	pop	{r4, r5, r6, pc}
 8005558:	f855 3b04 	ldr.w	r3, [r5], #4
 800555c:	4798      	blx	r3
 800555e:	3601      	adds	r6, #1
 8005560:	e7ee      	b.n	8005540 <__libc_init_array+0xc>
 8005562:	f855 3b04 	ldr.w	r3, [r5], #4
 8005566:	4798      	blx	r3
 8005568:	3601      	adds	r6, #1
 800556a:	e7f2      	b.n	8005552 <__libc_init_array+0x1e>
 800556c:	08005fa4 	.word	0x08005fa4
 8005570:	08005fa4 	.word	0x08005fa4
 8005574:	08005fa4 	.word	0x08005fa4
 8005578:	08005fa8 	.word	0x08005fa8

0800557c <__retarget_lock_acquire_recursive>:
 800557c:	4770      	bx	lr

0800557e <__retarget_lock_release_recursive>:
 800557e:	4770      	bx	lr

08005580 <_free_r>:
 8005580:	b538      	push	{r3, r4, r5, lr}
 8005582:	4605      	mov	r5, r0
 8005584:	2900      	cmp	r1, #0
 8005586:	d041      	beq.n	800560c <_free_r+0x8c>
 8005588:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800558c:	1f0c      	subs	r4, r1, #4
 800558e:	2b00      	cmp	r3, #0
 8005590:	bfb8      	it	lt
 8005592:	18e4      	addlt	r4, r4, r3
 8005594:	f000 f8e0 	bl	8005758 <__malloc_lock>
 8005598:	4a1d      	ldr	r2, [pc, #116]	@ (8005610 <_free_r+0x90>)
 800559a:	6813      	ldr	r3, [r2, #0]
 800559c:	b933      	cbnz	r3, 80055ac <_free_r+0x2c>
 800559e:	6063      	str	r3, [r4, #4]
 80055a0:	6014      	str	r4, [r2, #0]
 80055a2:	4628      	mov	r0, r5
 80055a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055a8:	f000 b8dc 	b.w	8005764 <__malloc_unlock>
 80055ac:	42a3      	cmp	r3, r4
 80055ae:	d908      	bls.n	80055c2 <_free_r+0x42>
 80055b0:	6820      	ldr	r0, [r4, #0]
 80055b2:	1821      	adds	r1, r4, r0
 80055b4:	428b      	cmp	r3, r1
 80055b6:	bf01      	itttt	eq
 80055b8:	6819      	ldreq	r1, [r3, #0]
 80055ba:	685b      	ldreq	r3, [r3, #4]
 80055bc:	1809      	addeq	r1, r1, r0
 80055be:	6021      	streq	r1, [r4, #0]
 80055c0:	e7ed      	b.n	800559e <_free_r+0x1e>
 80055c2:	461a      	mov	r2, r3
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	b10b      	cbz	r3, 80055cc <_free_r+0x4c>
 80055c8:	42a3      	cmp	r3, r4
 80055ca:	d9fa      	bls.n	80055c2 <_free_r+0x42>
 80055cc:	6811      	ldr	r1, [r2, #0]
 80055ce:	1850      	adds	r0, r2, r1
 80055d0:	42a0      	cmp	r0, r4
 80055d2:	d10b      	bne.n	80055ec <_free_r+0x6c>
 80055d4:	6820      	ldr	r0, [r4, #0]
 80055d6:	4401      	add	r1, r0
 80055d8:	1850      	adds	r0, r2, r1
 80055da:	4283      	cmp	r3, r0
 80055dc:	6011      	str	r1, [r2, #0]
 80055de:	d1e0      	bne.n	80055a2 <_free_r+0x22>
 80055e0:	6818      	ldr	r0, [r3, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	6053      	str	r3, [r2, #4]
 80055e6:	4408      	add	r0, r1
 80055e8:	6010      	str	r0, [r2, #0]
 80055ea:	e7da      	b.n	80055a2 <_free_r+0x22>
 80055ec:	d902      	bls.n	80055f4 <_free_r+0x74>
 80055ee:	230c      	movs	r3, #12
 80055f0:	602b      	str	r3, [r5, #0]
 80055f2:	e7d6      	b.n	80055a2 <_free_r+0x22>
 80055f4:	6820      	ldr	r0, [r4, #0]
 80055f6:	1821      	adds	r1, r4, r0
 80055f8:	428b      	cmp	r3, r1
 80055fa:	bf04      	itt	eq
 80055fc:	6819      	ldreq	r1, [r3, #0]
 80055fe:	685b      	ldreq	r3, [r3, #4]
 8005600:	6063      	str	r3, [r4, #4]
 8005602:	bf04      	itt	eq
 8005604:	1809      	addeq	r1, r1, r0
 8005606:	6021      	streq	r1, [r4, #0]
 8005608:	6054      	str	r4, [r2, #4]
 800560a:	e7ca      	b.n	80055a2 <_free_r+0x22>
 800560c:	bd38      	pop	{r3, r4, r5, pc}
 800560e:	bf00      	nop
 8005610:	20000584 	.word	0x20000584

08005614 <sbrk_aligned>:
 8005614:	b570      	push	{r4, r5, r6, lr}
 8005616:	4e0f      	ldr	r6, [pc, #60]	@ (8005654 <sbrk_aligned+0x40>)
 8005618:	460c      	mov	r4, r1
 800561a:	6831      	ldr	r1, [r6, #0]
 800561c:	4605      	mov	r5, r0
 800561e:	b911      	cbnz	r1, 8005626 <sbrk_aligned+0x12>
 8005620:	f000 fba4 	bl	8005d6c <_sbrk_r>
 8005624:	6030      	str	r0, [r6, #0]
 8005626:	4621      	mov	r1, r4
 8005628:	4628      	mov	r0, r5
 800562a:	f000 fb9f 	bl	8005d6c <_sbrk_r>
 800562e:	1c43      	adds	r3, r0, #1
 8005630:	d103      	bne.n	800563a <sbrk_aligned+0x26>
 8005632:	f04f 34ff 	mov.w	r4, #4294967295
 8005636:	4620      	mov	r0, r4
 8005638:	bd70      	pop	{r4, r5, r6, pc}
 800563a:	1cc4      	adds	r4, r0, #3
 800563c:	f024 0403 	bic.w	r4, r4, #3
 8005640:	42a0      	cmp	r0, r4
 8005642:	d0f8      	beq.n	8005636 <sbrk_aligned+0x22>
 8005644:	1a21      	subs	r1, r4, r0
 8005646:	4628      	mov	r0, r5
 8005648:	f000 fb90 	bl	8005d6c <_sbrk_r>
 800564c:	3001      	adds	r0, #1
 800564e:	d1f2      	bne.n	8005636 <sbrk_aligned+0x22>
 8005650:	e7ef      	b.n	8005632 <sbrk_aligned+0x1e>
 8005652:	bf00      	nop
 8005654:	20000580 	.word	0x20000580

08005658 <_malloc_r>:
 8005658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800565c:	1ccd      	adds	r5, r1, #3
 800565e:	f025 0503 	bic.w	r5, r5, #3
 8005662:	3508      	adds	r5, #8
 8005664:	2d0c      	cmp	r5, #12
 8005666:	bf38      	it	cc
 8005668:	250c      	movcc	r5, #12
 800566a:	2d00      	cmp	r5, #0
 800566c:	4606      	mov	r6, r0
 800566e:	db01      	blt.n	8005674 <_malloc_r+0x1c>
 8005670:	42a9      	cmp	r1, r5
 8005672:	d904      	bls.n	800567e <_malloc_r+0x26>
 8005674:	230c      	movs	r3, #12
 8005676:	6033      	str	r3, [r6, #0]
 8005678:	2000      	movs	r0, #0
 800567a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800567e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005754 <_malloc_r+0xfc>
 8005682:	f000 f869 	bl	8005758 <__malloc_lock>
 8005686:	f8d8 3000 	ldr.w	r3, [r8]
 800568a:	461c      	mov	r4, r3
 800568c:	bb44      	cbnz	r4, 80056e0 <_malloc_r+0x88>
 800568e:	4629      	mov	r1, r5
 8005690:	4630      	mov	r0, r6
 8005692:	f7ff ffbf 	bl	8005614 <sbrk_aligned>
 8005696:	1c43      	adds	r3, r0, #1
 8005698:	4604      	mov	r4, r0
 800569a:	d158      	bne.n	800574e <_malloc_r+0xf6>
 800569c:	f8d8 4000 	ldr.w	r4, [r8]
 80056a0:	4627      	mov	r7, r4
 80056a2:	2f00      	cmp	r7, #0
 80056a4:	d143      	bne.n	800572e <_malloc_r+0xd6>
 80056a6:	2c00      	cmp	r4, #0
 80056a8:	d04b      	beq.n	8005742 <_malloc_r+0xea>
 80056aa:	6823      	ldr	r3, [r4, #0]
 80056ac:	4639      	mov	r1, r7
 80056ae:	4630      	mov	r0, r6
 80056b0:	eb04 0903 	add.w	r9, r4, r3
 80056b4:	f000 fb5a 	bl	8005d6c <_sbrk_r>
 80056b8:	4581      	cmp	r9, r0
 80056ba:	d142      	bne.n	8005742 <_malloc_r+0xea>
 80056bc:	6821      	ldr	r1, [r4, #0]
 80056be:	1a6d      	subs	r5, r5, r1
 80056c0:	4629      	mov	r1, r5
 80056c2:	4630      	mov	r0, r6
 80056c4:	f7ff ffa6 	bl	8005614 <sbrk_aligned>
 80056c8:	3001      	adds	r0, #1
 80056ca:	d03a      	beq.n	8005742 <_malloc_r+0xea>
 80056cc:	6823      	ldr	r3, [r4, #0]
 80056ce:	442b      	add	r3, r5
 80056d0:	6023      	str	r3, [r4, #0]
 80056d2:	f8d8 3000 	ldr.w	r3, [r8]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	bb62      	cbnz	r2, 8005734 <_malloc_r+0xdc>
 80056da:	f8c8 7000 	str.w	r7, [r8]
 80056de:	e00f      	b.n	8005700 <_malloc_r+0xa8>
 80056e0:	6822      	ldr	r2, [r4, #0]
 80056e2:	1b52      	subs	r2, r2, r5
 80056e4:	d420      	bmi.n	8005728 <_malloc_r+0xd0>
 80056e6:	2a0b      	cmp	r2, #11
 80056e8:	d917      	bls.n	800571a <_malloc_r+0xc2>
 80056ea:	1961      	adds	r1, r4, r5
 80056ec:	42a3      	cmp	r3, r4
 80056ee:	6025      	str	r5, [r4, #0]
 80056f0:	bf18      	it	ne
 80056f2:	6059      	strne	r1, [r3, #4]
 80056f4:	6863      	ldr	r3, [r4, #4]
 80056f6:	bf08      	it	eq
 80056f8:	f8c8 1000 	streq.w	r1, [r8]
 80056fc:	5162      	str	r2, [r4, r5]
 80056fe:	604b      	str	r3, [r1, #4]
 8005700:	4630      	mov	r0, r6
 8005702:	f000 f82f 	bl	8005764 <__malloc_unlock>
 8005706:	f104 000b 	add.w	r0, r4, #11
 800570a:	1d23      	adds	r3, r4, #4
 800570c:	f020 0007 	bic.w	r0, r0, #7
 8005710:	1ac2      	subs	r2, r0, r3
 8005712:	bf1c      	itt	ne
 8005714:	1a1b      	subne	r3, r3, r0
 8005716:	50a3      	strne	r3, [r4, r2]
 8005718:	e7af      	b.n	800567a <_malloc_r+0x22>
 800571a:	6862      	ldr	r2, [r4, #4]
 800571c:	42a3      	cmp	r3, r4
 800571e:	bf0c      	ite	eq
 8005720:	f8c8 2000 	streq.w	r2, [r8]
 8005724:	605a      	strne	r2, [r3, #4]
 8005726:	e7eb      	b.n	8005700 <_malloc_r+0xa8>
 8005728:	4623      	mov	r3, r4
 800572a:	6864      	ldr	r4, [r4, #4]
 800572c:	e7ae      	b.n	800568c <_malloc_r+0x34>
 800572e:	463c      	mov	r4, r7
 8005730:	687f      	ldr	r7, [r7, #4]
 8005732:	e7b6      	b.n	80056a2 <_malloc_r+0x4a>
 8005734:	461a      	mov	r2, r3
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	42a3      	cmp	r3, r4
 800573a:	d1fb      	bne.n	8005734 <_malloc_r+0xdc>
 800573c:	2300      	movs	r3, #0
 800573e:	6053      	str	r3, [r2, #4]
 8005740:	e7de      	b.n	8005700 <_malloc_r+0xa8>
 8005742:	230c      	movs	r3, #12
 8005744:	6033      	str	r3, [r6, #0]
 8005746:	4630      	mov	r0, r6
 8005748:	f000 f80c 	bl	8005764 <__malloc_unlock>
 800574c:	e794      	b.n	8005678 <_malloc_r+0x20>
 800574e:	6005      	str	r5, [r0, #0]
 8005750:	e7d6      	b.n	8005700 <_malloc_r+0xa8>
 8005752:	bf00      	nop
 8005754:	20000584 	.word	0x20000584

08005758 <__malloc_lock>:
 8005758:	4801      	ldr	r0, [pc, #4]	@ (8005760 <__malloc_lock+0x8>)
 800575a:	f7ff bf0f 	b.w	800557c <__retarget_lock_acquire_recursive>
 800575e:	bf00      	nop
 8005760:	2000057c 	.word	0x2000057c

08005764 <__malloc_unlock>:
 8005764:	4801      	ldr	r0, [pc, #4]	@ (800576c <__malloc_unlock+0x8>)
 8005766:	f7ff bf0a 	b.w	800557e <__retarget_lock_release_recursive>
 800576a:	bf00      	nop
 800576c:	2000057c 	.word	0x2000057c

08005770 <__ssputs_r>:
 8005770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005774:	688e      	ldr	r6, [r1, #8]
 8005776:	461f      	mov	r7, r3
 8005778:	42be      	cmp	r6, r7
 800577a:	680b      	ldr	r3, [r1, #0]
 800577c:	4682      	mov	sl, r0
 800577e:	460c      	mov	r4, r1
 8005780:	4690      	mov	r8, r2
 8005782:	d82d      	bhi.n	80057e0 <__ssputs_r+0x70>
 8005784:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005788:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800578c:	d026      	beq.n	80057dc <__ssputs_r+0x6c>
 800578e:	6965      	ldr	r5, [r4, #20]
 8005790:	6909      	ldr	r1, [r1, #16]
 8005792:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005796:	eba3 0901 	sub.w	r9, r3, r1
 800579a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800579e:	1c7b      	adds	r3, r7, #1
 80057a0:	444b      	add	r3, r9
 80057a2:	106d      	asrs	r5, r5, #1
 80057a4:	429d      	cmp	r5, r3
 80057a6:	bf38      	it	cc
 80057a8:	461d      	movcc	r5, r3
 80057aa:	0553      	lsls	r3, r2, #21
 80057ac:	d527      	bpl.n	80057fe <__ssputs_r+0x8e>
 80057ae:	4629      	mov	r1, r5
 80057b0:	f7ff ff52 	bl	8005658 <_malloc_r>
 80057b4:	4606      	mov	r6, r0
 80057b6:	b360      	cbz	r0, 8005812 <__ssputs_r+0xa2>
 80057b8:	6921      	ldr	r1, [r4, #16]
 80057ba:	464a      	mov	r2, r9
 80057bc:	f000 fae6 	bl	8005d8c <memcpy>
 80057c0:	89a3      	ldrh	r3, [r4, #12]
 80057c2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80057c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057ca:	81a3      	strh	r3, [r4, #12]
 80057cc:	6126      	str	r6, [r4, #16]
 80057ce:	6165      	str	r5, [r4, #20]
 80057d0:	444e      	add	r6, r9
 80057d2:	eba5 0509 	sub.w	r5, r5, r9
 80057d6:	6026      	str	r6, [r4, #0]
 80057d8:	60a5      	str	r5, [r4, #8]
 80057da:	463e      	mov	r6, r7
 80057dc:	42be      	cmp	r6, r7
 80057de:	d900      	bls.n	80057e2 <__ssputs_r+0x72>
 80057e0:	463e      	mov	r6, r7
 80057e2:	6820      	ldr	r0, [r4, #0]
 80057e4:	4632      	mov	r2, r6
 80057e6:	4641      	mov	r1, r8
 80057e8:	f000 faa6 	bl	8005d38 <memmove>
 80057ec:	68a3      	ldr	r3, [r4, #8]
 80057ee:	1b9b      	subs	r3, r3, r6
 80057f0:	60a3      	str	r3, [r4, #8]
 80057f2:	6823      	ldr	r3, [r4, #0]
 80057f4:	4433      	add	r3, r6
 80057f6:	6023      	str	r3, [r4, #0]
 80057f8:	2000      	movs	r0, #0
 80057fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057fe:	462a      	mov	r2, r5
 8005800:	f000 fad2 	bl	8005da8 <_realloc_r>
 8005804:	4606      	mov	r6, r0
 8005806:	2800      	cmp	r0, #0
 8005808:	d1e0      	bne.n	80057cc <__ssputs_r+0x5c>
 800580a:	6921      	ldr	r1, [r4, #16]
 800580c:	4650      	mov	r0, sl
 800580e:	f7ff feb7 	bl	8005580 <_free_r>
 8005812:	230c      	movs	r3, #12
 8005814:	f8ca 3000 	str.w	r3, [sl]
 8005818:	89a3      	ldrh	r3, [r4, #12]
 800581a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800581e:	81a3      	strh	r3, [r4, #12]
 8005820:	f04f 30ff 	mov.w	r0, #4294967295
 8005824:	e7e9      	b.n	80057fa <__ssputs_r+0x8a>
	...

08005828 <_svfiprintf_r>:
 8005828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800582c:	4698      	mov	r8, r3
 800582e:	898b      	ldrh	r3, [r1, #12]
 8005830:	061b      	lsls	r3, r3, #24
 8005832:	b09d      	sub	sp, #116	@ 0x74
 8005834:	4607      	mov	r7, r0
 8005836:	460d      	mov	r5, r1
 8005838:	4614      	mov	r4, r2
 800583a:	d510      	bpl.n	800585e <_svfiprintf_r+0x36>
 800583c:	690b      	ldr	r3, [r1, #16]
 800583e:	b973      	cbnz	r3, 800585e <_svfiprintf_r+0x36>
 8005840:	2140      	movs	r1, #64	@ 0x40
 8005842:	f7ff ff09 	bl	8005658 <_malloc_r>
 8005846:	6028      	str	r0, [r5, #0]
 8005848:	6128      	str	r0, [r5, #16]
 800584a:	b930      	cbnz	r0, 800585a <_svfiprintf_r+0x32>
 800584c:	230c      	movs	r3, #12
 800584e:	603b      	str	r3, [r7, #0]
 8005850:	f04f 30ff 	mov.w	r0, #4294967295
 8005854:	b01d      	add	sp, #116	@ 0x74
 8005856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800585a:	2340      	movs	r3, #64	@ 0x40
 800585c:	616b      	str	r3, [r5, #20]
 800585e:	2300      	movs	r3, #0
 8005860:	9309      	str	r3, [sp, #36]	@ 0x24
 8005862:	2320      	movs	r3, #32
 8005864:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005868:	f8cd 800c 	str.w	r8, [sp, #12]
 800586c:	2330      	movs	r3, #48	@ 0x30
 800586e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005a0c <_svfiprintf_r+0x1e4>
 8005872:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005876:	f04f 0901 	mov.w	r9, #1
 800587a:	4623      	mov	r3, r4
 800587c:	469a      	mov	sl, r3
 800587e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005882:	b10a      	cbz	r2, 8005888 <_svfiprintf_r+0x60>
 8005884:	2a25      	cmp	r2, #37	@ 0x25
 8005886:	d1f9      	bne.n	800587c <_svfiprintf_r+0x54>
 8005888:	ebba 0b04 	subs.w	fp, sl, r4
 800588c:	d00b      	beq.n	80058a6 <_svfiprintf_r+0x7e>
 800588e:	465b      	mov	r3, fp
 8005890:	4622      	mov	r2, r4
 8005892:	4629      	mov	r1, r5
 8005894:	4638      	mov	r0, r7
 8005896:	f7ff ff6b 	bl	8005770 <__ssputs_r>
 800589a:	3001      	adds	r0, #1
 800589c:	f000 80a7 	beq.w	80059ee <_svfiprintf_r+0x1c6>
 80058a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80058a2:	445a      	add	r2, fp
 80058a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80058a6:	f89a 3000 	ldrb.w	r3, [sl]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f000 809f 	beq.w	80059ee <_svfiprintf_r+0x1c6>
 80058b0:	2300      	movs	r3, #0
 80058b2:	f04f 32ff 	mov.w	r2, #4294967295
 80058b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058ba:	f10a 0a01 	add.w	sl, sl, #1
 80058be:	9304      	str	r3, [sp, #16]
 80058c0:	9307      	str	r3, [sp, #28]
 80058c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80058c6:	931a      	str	r3, [sp, #104]	@ 0x68
 80058c8:	4654      	mov	r4, sl
 80058ca:	2205      	movs	r2, #5
 80058cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058d0:	484e      	ldr	r0, [pc, #312]	@ (8005a0c <_svfiprintf_r+0x1e4>)
 80058d2:	f7fa fc5d 	bl	8000190 <memchr>
 80058d6:	9a04      	ldr	r2, [sp, #16]
 80058d8:	b9d8      	cbnz	r0, 8005912 <_svfiprintf_r+0xea>
 80058da:	06d0      	lsls	r0, r2, #27
 80058dc:	bf44      	itt	mi
 80058de:	2320      	movmi	r3, #32
 80058e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80058e4:	0711      	lsls	r1, r2, #28
 80058e6:	bf44      	itt	mi
 80058e8:	232b      	movmi	r3, #43	@ 0x2b
 80058ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80058ee:	f89a 3000 	ldrb.w	r3, [sl]
 80058f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80058f4:	d015      	beq.n	8005922 <_svfiprintf_r+0xfa>
 80058f6:	9a07      	ldr	r2, [sp, #28]
 80058f8:	4654      	mov	r4, sl
 80058fa:	2000      	movs	r0, #0
 80058fc:	f04f 0c0a 	mov.w	ip, #10
 8005900:	4621      	mov	r1, r4
 8005902:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005906:	3b30      	subs	r3, #48	@ 0x30
 8005908:	2b09      	cmp	r3, #9
 800590a:	d94b      	bls.n	80059a4 <_svfiprintf_r+0x17c>
 800590c:	b1b0      	cbz	r0, 800593c <_svfiprintf_r+0x114>
 800590e:	9207      	str	r2, [sp, #28]
 8005910:	e014      	b.n	800593c <_svfiprintf_r+0x114>
 8005912:	eba0 0308 	sub.w	r3, r0, r8
 8005916:	fa09 f303 	lsl.w	r3, r9, r3
 800591a:	4313      	orrs	r3, r2
 800591c:	9304      	str	r3, [sp, #16]
 800591e:	46a2      	mov	sl, r4
 8005920:	e7d2      	b.n	80058c8 <_svfiprintf_r+0xa0>
 8005922:	9b03      	ldr	r3, [sp, #12]
 8005924:	1d19      	adds	r1, r3, #4
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	9103      	str	r1, [sp, #12]
 800592a:	2b00      	cmp	r3, #0
 800592c:	bfbb      	ittet	lt
 800592e:	425b      	neglt	r3, r3
 8005930:	f042 0202 	orrlt.w	r2, r2, #2
 8005934:	9307      	strge	r3, [sp, #28]
 8005936:	9307      	strlt	r3, [sp, #28]
 8005938:	bfb8      	it	lt
 800593a:	9204      	strlt	r2, [sp, #16]
 800593c:	7823      	ldrb	r3, [r4, #0]
 800593e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005940:	d10a      	bne.n	8005958 <_svfiprintf_r+0x130>
 8005942:	7863      	ldrb	r3, [r4, #1]
 8005944:	2b2a      	cmp	r3, #42	@ 0x2a
 8005946:	d132      	bne.n	80059ae <_svfiprintf_r+0x186>
 8005948:	9b03      	ldr	r3, [sp, #12]
 800594a:	1d1a      	adds	r2, r3, #4
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	9203      	str	r2, [sp, #12]
 8005950:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005954:	3402      	adds	r4, #2
 8005956:	9305      	str	r3, [sp, #20]
 8005958:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005a10 <_svfiprintf_r+0x1e8>
 800595c:	7821      	ldrb	r1, [r4, #0]
 800595e:	2203      	movs	r2, #3
 8005960:	4650      	mov	r0, sl
 8005962:	f7fa fc15 	bl	8000190 <memchr>
 8005966:	b138      	cbz	r0, 8005978 <_svfiprintf_r+0x150>
 8005968:	9b04      	ldr	r3, [sp, #16]
 800596a:	eba0 000a 	sub.w	r0, r0, sl
 800596e:	2240      	movs	r2, #64	@ 0x40
 8005970:	4082      	lsls	r2, r0
 8005972:	4313      	orrs	r3, r2
 8005974:	3401      	adds	r4, #1
 8005976:	9304      	str	r3, [sp, #16]
 8005978:	f814 1b01 	ldrb.w	r1, [r4], #1
 800597c:	4825      	ldr	r0, [pc, #148]	@ (8005a14 <_svfiprintf_r+0x1ec>)
 800597e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005982:	2206      	movs	r2, #6
 8005984:	f7fa fc04 	bl	8000190 <memchr>
 8005988:	2800      	cmp	r0, #0
 800598a:	d036      	beq.n	80059fa <_svfiprintf_r+0x1d2>
 800598c:	4b22      	ldr	r3, [pc, #136]	@ (8005a18 <_svfiprintf_r+0x1f0>)
 800598e:	bb1b      	cbnz	r3, 80059d8 <_svfiprintf_r+0x1b0>
 8005990:	9b03      	ldr	r3, [sp, #12]
 8005992:	3307      	adds	r3, #7
 8005994:	f023 0307 	bic.w	r3, r3, #7
 8005998:	3308      	adds	r3, #8
 800599a:	9303      	str	r3, [sp, #12]
 800599c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800599e:	4433      	add	r3, r6
 80059a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80059a2:	e76a      	b.n	800587a <_svfiprintf_r+0x52>
 80059a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80059a8:	460c      	mov	r4, r1
 80059aa:	2001      	movs	r0, #1
 80059ac:	e7a8      	b.n	8005900 <_svfiprintf_r+0xd8>
 80059ae:	2300      	movs	r3, #0
 80059b0:	3401      	adds	r4, #1
 80059b2:	9305      	str	r3, [sp, #20]
 80059b4:	4619      	mov	r1, r3
 80059b6:	f04f 0c0a 	mov.w	ip, #10
 80059ba:	4620      	mov	r0, r4
 80059bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059c0:	3a30      	subs	r2, #48	@ 0x30
 80059c2:	2a09      	cmp	r2, #9
 80059c4:	d903      	bls.n	80059ce <_svfiprintf_r+0x1a6>
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d0c6      	beq.n	8005958 <_svfiprintf_r+0x130>
 80059ca:	9105      	str	r1, [sp, #20]
 80059cc:	e7c4      	b.n	8005958 <_svfiprintf_r+0x130>
 80059ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80059d2:	4604      	mov	r4, r0
 80059d4:	2301      	movs	r3, #1
 80059d6:	e7f0      	b.n	80059ba <_svfiprintf_r+0x192>
 80059d8:	ab03      	add	r3, sp, #12
 80059da:	9300      	str	r3, [sp, #0]
 80059dc:	462a      	mov	r2, r5
 80059de:	4b0f      	ldr	r3, [pc, #60]	@ (8005a1c <_svfiprintf_r+0x1f4>)
 80059e0:	a904      	add	r1, sp, #16
 80059e2:	4638      	mov	r0, r7
 80059e4:	f3af 8000 	nop.w
 80059e8:	1c42      	adds	r2, r0, #1
 80059ea:	4606      	mov	r6, r0
 80059ec:	d1d6      	bne.n	800599c <_svfiprintf_r+0x174>
 80059ee:	89ab      	ldrh	r3, [r5, #12]
 80059f0:	065b      	lsls	r3, r3, #25
 80059f2:	f53f af2d 	bmi.w	8005850 <_svfiprintf_r+0x28>
 80059f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80059f8:	e72c      	b.n	8005854 <_svfiprintf_r+0x2c>
 80059fa:	ab03      	add	r3, sp, #12
 80059fc:	9300      	str	r3, [sp, #0]
 80059fe:	462a      	mov	r2, r5
 8005a00:	4b06      	ldr	r3, [pc, #24]	@ (8005a1c <_svfiprintf_r+0x1f4>)
 8005a02:	a904      	add	r1, sp, #16
 8005a04:	4638      	mov	r0, r7
 8005a06:	f000 f879 	bl	8005afc <_printf_i>
 8005a0a:	e7ed      	b.n	80059e8 <_svfiprintf_r+0x1c0>
 8005a0c:	08005f68 	.word	0x08005f68
 8005a10:	08005f6e 	.word	0x08005f6e
 8005a14:	08005f72 	.word	0x08005f72
 8005a18:	00000000 	.word	0x00000000
 8005a1c:	08005771 	.word	0x08005771

08005a20 <_printf_common>:
 8005a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a24:	4616      	mov	r6, r2
 8005a26:	4698      	mov	r8, r3
 8005a28:	688a      	ldr	r2, [r1, #8]
 8005a2a:	690b      	ldr	r3, [r1, #16]
 8005a2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a30:	4293      	cmp	r3, r2
 8005a32:	bfb8      	it	lt
 8005a34:	4613      	movlt	r3, r2
 8005a36:	6033      	str	r3, [r6, #0]
 8005a38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005a3c:	4607      	mov	r7, r0
 8005a3e:	460c      	mov	r4, r1
 8005a40:	b10a      	cbz	r2, 8005a46 <_printf_common+0x26>
 8005a42:	3301      	adds	r3, #1
 8005a44:	6033      	str	r3, [r6, #0]
 8005a46:	6823      	ldr	r3, [r4, #0]
 8005a48:	0699      	lsls	r1, r3, #26
 8005a4a:	bf42      	ittt	mi
 8005a4c:	6833      	ldrmi	r3, [r6, #0]
 8005a4e:	3302      	addmi	r3, #2
 8005a50:	6033      	strmi	r3, [r6, #0]
 8005a52:	6825      	ldr	r5, [r4, #0]
 8005a54:	f015 0506 	ands.w	r5, r5, #6
 8005a58:	d106      	bne.n	8005a68 <_printf_common+0x48>
 8005a5a:	f104 0a19 	add.w	sl, r4, #25
 8005a5e:	68e3      	ldr	r3, [r4, #12]
 8005a60:	6832      	ldr	r2, [r6, #0]
 8005a62:	1a9b      	subs	r3, r3, r2
 8005a64:	42ab      	cmp	r3, r5
 8005a66:	dc26      	bgt.n	8005ab6 <_printf_common+0x96>
 8005a68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005a6c:	6822      	ldr	r2, [r4, #0]
 8005a6e:	3b00      	subs	r3, #0
 8005a70:	bf18      	it	ne
 8005a72:	2301      	movne	r3, #1
 8005a74:	0692      	lsls	r2, r2, #26
 8005a76:	d42b      	bmi.n	8005ad0 <_printf_common+0xb0>
 8005a78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005a7c:	4641      	mov	r1, r8
 8005a7e:	4638      	mov	r0, r7
 8005a80:	47c8      	blx	r9
 8005a82:	3001      	adds	r0, #1
 8005a84:	d01e      	beq.n	8005ac4 <_printf_common+0xa4>
 8005a86:	6823      	ldr	r3, [r4, #0]
 8005a88:	6922      	ldr	r2, [r4, #16]
 8005a8a:	f003 0306 	and.w	r3, r3, #6
 8005a8e:	2b04      	cmp	r3, #4
 8005a90:	bf02      	ittt	eq
 8005a92:	68e5      	ldreq	r5, [r4, #12]
 8005a94:	6833      	ldreq	r3, [r6, #0]
 8005a96:	1aed      	subeq	r5, r5, r3
 8005a98:	68a3      	ldr	r3, [r4, #8]
 8005a9a:	bf0c      	ite	eq
 8005a9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005aa0:	2500      	movne	r5, #0
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	bfc4      	itt	gt
 8005aa6:	1a9b      	subgt	r3, r3, r2
 8005aa8:	18ed      	addgt	r5, r5, r3
 8005aaa:	2600      	movs	r6, #0
 8005aac:	341a      	adds	r4, #26
 8005aae:	42b5      	cmp	r5, r6
 8005ab0:	d11a      	bne.n	8005ae8 <_printf_common+0xc8>
 8005ab2:	2000      	movs	r0, #0
 8005ab4:	e008      	b.n	8005ac8 <_printf_common+0xa8>
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	4652      	mov	r2, sl
 8005aba:	4641      	mov	r1, r8
 8005abc:	4638      	mov	r0, r7
 8005abe:	47c8      	blx	r9
 8005ac0:	3001      	adds	r0, #1
 8005ac2:	d103      	bne.n	8005acc <_printf_common+0xac>
 8005ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005acc:	3501      	adds	r5, #1
 8005ace:	e7c6      	b.n	8005a5e <_printf_common+0x3e>
 8005ad0:	18e1      	adds	r1, r4, r3
 8005ad2:	1c5a      	adds	r2, r3, #1
 8005ad4:	2030      	movs	r0, #48	@ 0x30
 8005ad6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005ada:	4422      	add	r2, r4
 8005adc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005ae0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005ae4:	3302      	adds	r3, #2
 8005ae6:	e7c7      	b.n	8005a78 <_printf_common+0x58>
 8005ae8:	2301      	movs	r3, #1
 8005aea:	4622      	mov	r2, r4
 8005aec:	4641      	mov	r1, r8
 8005aee:	4638      	mov	r0, r7
 8005af0:	47c8      	blx	r9
 8005af2:	3001      	adds	r0, #1
 8005af4:	d0e6      	beq.n	8005ac4 <_printf_common+0xa4>
 8005af6:	3601      	adds	r6, #1
 8005af8:	e7d9      	b.n	8005aae <_printf_common+0x8e>
	...

08005afc <_printf_i>:
 8005afc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b00:	7e0f      	ldrb	r7, [r1, #24]
 8005b02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005b04:	2f78      	cmp	r7, #120	@ 0x78
 8005b06:	4691      	mov	r9, r2
 8005b08:	4680      	mov	r8, r0
 8005b0a:	460c      	mov	r4, r1
 8005b0c:	469a      	mov	sl, r3
 8005b0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005b12:	d807      	bhi.n	8005b24 <_printf_i+0x28>
 8005b14:	2f62      	cmp	r7, #98	@ 0x62
 8005b16:	d80a      	bhi.n	8005b2e <_printf_i+0x32>
 8005b18:	2f00      	cmp	r7, #0
 8005b1a:	f000 80d1 	beq.w	8005cc0 <_printf_i+0x1c4>
 8005b1e:	2f58      	cmp	r7, #88	@ 0x58
 8005b20:	f000 80b8 	beq.w	8005c94 <_printf_i+0x198>
 8005b24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005b2c:	e03a      	b.n	8005ba4 <_printf_i+0xa8>
 8005b2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005b32:	2b15      	cmp	r3, #21
 8005b34:	d8f6      	bhi.n	8005b24 <_printf_i+0x28>
 8005b36:	a101      	add	r1, pc, #4	@ (adr r1, 8005b3c <_printf_i+0x40>)
 8005b38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b3c:	08005b95 	.word	0x08005b95
 8005b40:	08005ba9 	.word	0x08005ba9
 8005b44:	08005b25 	.word	0x08005b25
 8005b48:	08005b25 	.word	0x08005b25
 8005b4c:	08005b25 	.word	0x08005b25
 8005b50:	08005b25 	.word	0x08005b25
 8005b54:	08005ba9 	.word	0x08005ba9
 8005b58:	08005b25 	.word	0x08005b25
 8005b5c:	08005b25 	.word	0x08005b25
 8005b60:	08005b25 	.word	0x08005b25
 8005b64:	08005b25 	.word	0x08005b25
 8005b68:	08005ca7 	.word	0x08005ca7
 8005b6c:	08005bd3 	.word	0x08005bd3
 8005b70:	08005c61 	.word	0x08005c61
 8005b74:	08005b25 	.word	0x08005b25
 8005b78:	08005b25 	.word	0x08005b25
 8005b7c:	08005cc9 	.word	0x08005cc9
 8005b80:	08005b25 	.word	0x08005b25
 8005b84:	08005bd3 	.word	0x08005bd3
 8005b88:	08005b25 	.word	0x08005b25
 8005b8c:	08005b25 	.word	0x08005b25
 8005b90:	08005c69 	.word	0x08005c69
 8005b94:	6833      	ldr	r3, [r6, #0]
 8005b96:	1d1a      	adds	r2, r3, #4
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	6032      	str	r2, [r6, #0]
 8005b9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ba0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e09c      	b.n	8005ce2 <_printf_i+0x1e6>
 8005ba8:	6833      	ldr	r3, [r6, #0]
 8005baa:	6820      	ldr	r0, [r4, #0]
 8005bac:	1d19      	adds	r1, r3, #4
 8005bae:	6031      	str	r1, [r6, #0]
 8005bb0:	0606      	lsls	r6, r0, #24
 8005bb2:	d501      	bpl.n	8005bb8 <_printf_i+0xbc>
 8005bb4:	681d      	ldr	r5, [r3, #0]
 8005bb6:	e003      	b.n	8005bc0 <_printf_i+0xc4>
 8005bb8:	0645      	lsls	r5, r0, #25
 8005bba:	d5fb      	bpl.n	8005bb4 <_printf_i+0xb8>
 8005bbc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005bc0:	2d00      	cmp	r5, #0
 8005bc2:	da03      	bge.n	8005bcc <_printf_i+0xd0>
 8005bc4:	232d      	movs	r3, #45	@ 0x2d
 8005bc6:	426d      	negs	r5, r5
 8005bc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bcc:	4858      	ldr	r0, [pc, #352]	@ (8005d30 <_printf_i+0x234>)
 8005bce:	230a      	movs	r3, #10
 8005bd0:	e011      	b.n	8005bf6 <_printf_i+0xfa>
 8005bd2:	6821      	ldr	r1, [r4, #0]
 8005bd4:	6833      	ldr	r3, [r6, #0]
 8005bd6:	0608      	lsls	r0, r1, #24
 8005bd8:	f853 5b04 	ldr.w	r5, [r3], #4
 8005bdc:	d402      	bmi.n	8005be4 <_printf_i+0xe8>
 8005bde:	0649      	lsls	r1, r1, #25
 8005be0:	bf48      	it	mi
 8005be2:	b2ad      	uxthmi	r5, r5
 8005be4:	2f6f      	cmp	r7, #111	@ 0x6f
 8005be6:	4852      	ldr	r0, [pc, #328]	@ (8005d30 <_printf_i+0x234>)
 8005be8:	6033      	str	r3, [r6, #0]
 8005bea:	bf14      	ite	ne
 8005bec:	230a      	movne	r3, #10
 8005bee:	2308      	moveq	r3, #8
 8005bf0:	2100      	movs	r1, #0
 8005bf2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005bf6:	6866      	ldr	r6, [r4, #4]
 8005bf8:	60a6      	str	r6, [r4, #8]
 8005bfa:	2e00      	cmp	r6, #0
 8005bfc:	db05      	blt.n	8005c0a <_printf_i+0x10e>
 8005bfe:	6821      	ldr	r1, [r4, #0]
 8005c00:	432e      	orrs	r6, r5
 8005c02:	f021 0104 	bic.w	r1, r1, #4
 8005c06:	6021      	str	r1, [r4, #0]
 8005c08:	d04b      	beq.n	8005ca2 <_printf_i+0x1a6>
 8005c0a:	4616      	mov	r6, r2
 8005c0c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c10:	fb03 5711 	mls	r7, r3, r1, r5
 8005c14:	5dc7      	ldrb	r7, [r0, r7]
 8005c16:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c1a:	462f      	mov	r7, r5
 8005c1c:	42bb      	cmp	r3, r7
 8005c1e:	460d      	mov	r5, r1
 8005c20:	d9f4      	bls.n	8005c0c <_printf_i+0x110>
 8005c22:	2b08      	cmp	r3, #8
 8005c24:	d10b      	bne.n	8005c3e <_printf_i+0x142>
 8005c26:	6823      	ldr	r3, [r4, #0]
 8005c28:	07df      	lsls	r7, r3, #31
 8005c2a:	d508      	bpl.n	8005c3e <_printf_i+0x142>
 8005c2c:	6923      	ldr	r3, [r4, #16]
 8005c2e:	6861      	ldr	r1, [r4, #4]
 8005c30:	4299      	cmp	r1, r3
 8005c32:	bfde      	ittt	le
 8005c34:	2330      	movle	r3, #48	@ 0x30
 8005c36:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c3a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c3e:	1b92      	subs	r2, r2, r6
 8005c40:	6122      	str	r2, [r4, #16]
 8005c42:	f8cd a000 	str.w	sl, [sp]
 8005c46:	464b      	mov	r3, r9
 8005c48:	aa03      	add	r2, sp, #12
 8005c4a:	4621      	mov	r1, r4
 8005c4c:	4640      	mov	r0, r8
 8005c4e:	f7ff fee7 	bl	8005a20 <_printf_common>
 8005c52:	3001      	adds	r0, #1
 8005c54:	d14a      	bne.n	8005cec <_printf_i+0x1f0>
 8005c56:	f04f 30ff 	mov.w	r0, #4294967295
 8005c5a:	b004      	add	sp, #16
 8005c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c60:	6823      	ldr	r3, [r4, #0]
 8005c62:	f043 0320 	orr.w	r3, r3, #32
 8005c66:	6023      	str	r3, [r4, #0]
 8005c68:	4832      	ldr	r0, [pc, #200]	@ (8005d34 <_printf_i+0x238>)
 8005c6a:	2778      	movs	r7, #120	@ 0x78
 8005c6c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005c70:	6823      	ldr	r3, [r4, #0]
 8005c72:	6831      	ldr	r1, [r6, #0]
 8005c74:	061f      	lsls	r7, r3, #24
 8005c76:	f851 5b04 	ldr.w	r5, [r1], #4
 8005c7a:	d402      	bmi.n	8005c82 <_printf_i+0x186>
 8005c7c:	065f      	lsls	r7, r3, #25
 8005c7e:	bf48      	it	mi
 8005c80:	b2ad      	uxthmi	r5, r5
 8005c82:	6031      	str	r1, [r6, #0]
 8005c84:	07d9      	lsls	r1, r3, #31
 8005c86:	bf44      	itt	mi
 8005c88:	f043 0320 	orrmi.w	r3, r3, #32
 8005c8c:	6023      	strmi	r3, [r4, #0]
 8005c8e:	b11d      	cbz	r5, 8005c98 <_printf_i+0x19c>
 8005c90:	2310      	movs	r3, #16
 8005c92:	e7ad      	b.n	8005bf0 <_printf_i+0xf4>
 8005c94:	4826      	ldr	r0, [pc, #152]	@ (8005d30 <_printf_i+0x234>)
 8005c96:	e7e9      	b.n	8005c6c <_printf_i+0x170>
 8005c98:	6823      	ldr	r3, [r4, #0]
 8005c9a:	f023 0320 	bic.w	r3, r3, #32
 8005c9e:	6023      	str	r3, [r4, #0]
 8005ca0:	e7f6      	b.n	8005c90 <_printf_i+0x194>
 8005ca2:	4616      	mov	r6, r2
 8005ca4:	e7bd      	b.n	8005c22 <_printf_i+0x126>
 8005ca6:	6833      	ldr	r3, [r6, #0]
 8005ca8:	6825      	ldr	r5, [r4, #0]
 8005caa:	6961      	ldr	r1, [r4, #20]
 8005cac:	1d18      	adds	r0, r3, #4
 8005cae:	6030      	str	r0, [r6, #0]
 8005cb0:	062e      	lsls	r6, r5, #24
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	d501      	bpl.n	8005cba <_printf_i+0x1be>
 8005cb6:	6019      	str	r1, [r3, #0]
 8005cb8:	e002      	b.n	8005cc0 <_printf_i+0x1c4>
 8005cba:	0668      	lsls	r0, r5, #25
 8005cbc:	d5fb      	bpl.n	8005cb6 <_printf_i+0x1ba>
 8005cbe:	8019      	strh	r1, [r3, #0]
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	6123      	str	r3, [r4, #16]
 8005cc4:	4616      	mov	r6, r2
 8005cc6:	e7bc      	b.n	8005c42 <_printf_i+0x146>
 8005cc8:	6833      	ldr	r3, [r6, #0]
 8005cca:	1d1a      	adds	r2, r3, #4
 8005ccc:	6032      	str	r2, [r6, #0]
 8005cce:	681e      	ldr	r6, [r3, #0]
 8005cd0:	6862      	ldr	r2, [r4, #4]
 8005cd2:	2100      	movs	r1, #0
 8005cd4:	4630      	mov	r0, r6
 8005cd6:	f7fa fa5b 	bl	8000190 <memchr>
 8005cda:	b108      	cbz	r0, 8005ce0 <_printf_i+0x1e4>
 8005cdc:	1b80      	subs	r0, r0, r6
 8005cde:	6060      	str	r0, [r4, #4]
 8005ce0:	6863      	ldr	r3, [r4, #4]
 8005ce2:	6123      	str	r3, [r4, #16]
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cea:	e7aa      	b.n	8005c42 <_printf_i+0x146>
 8005cec:	6923      	ldr	r3, [r4, #16]
 8005cee:	4632      	mov	r2, r6
 8005cf0:	4649      	mov	r1, r9
 8005cf2:	4640      	mov	r0, r8
 8005cf4:	47d0      	blx	sl
 8005cf6:	3001      	adds	r0, #1
 8005cf8:	d0ad      	beq.n	8005c56 <_printf_i+0x15a>
 8005cfa:	6823      	ldr	r3, [r4, #0]
 8005cfc:	079b      	lsls	r3, r3, #30
 8005cfe:	d413      	bmi.n	8005d28 <_printf_i+0x22c>
 8005d00:	68e0      	ldr	r0, [r4, #12]
 8005d02:	9b03      	ldr	r3, [sp, #12]
 8005d04:	4298      	cmp	r0, r3
 8005d06:	bfb8      	it	lt
 8005d08:	4618      	movlt	r0, r3
 8005d0a:	e7a6      	b.n	8005c5a <_printf_i+0x15e>
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	4632      	mov	r2, r6
 8005d10:	4649      	mov	r1, r9
 8005d12:	4640      	mov	r0, r8
 8005d14:	47d0      	blx	sl
 8005d16:	3001      	adds	r0, #1
 8005d18:	d09d      	beq.n	8005c56 <_printf_i+0x15a>
 8005d1a:	3501      	adds	r5, #1
 8005d1c:	68e3      	ldr	r3, [r4, #12]
 8005d1e:	9903      	ldr	r1, [sp, #12]
 8005d20:	1a5b      	subs	r3, r3, r1
 8005d22:	42ab      	cmp	r3, r5
 8005d24:	dcf2      	bgt.n	8005d0c <_printf_i+0x210>
 8005d26:	e7eb      	b.n	8005d00 <_printf_i+0x204>
 8005d28:	2500      	movs	r5, #0
 8005d2a:	f104 0619 	add.w	r6, r4, #25
 8005d2e:	e7f5      	b.n	8005d1c <_printf_i+0x220>
 8005d30:	08005f79 	.word	0x08005f79
 8005d34:	08005f8a 	.word	0x08005f8a

08005d38 <memmove>:
 8005d38:	4288      	cmp	r0, r1
 8005d3a:	b510      	push	{r4, lr}
 8005d3c:	eb01 0402 	add.w	r4, r1, r2
 8005d40:	d902      	bls.n	8005d48 <memmove+0x10>
 8005d42:	4284      	cmp	r4, r0
 8005d44:	4623      	mov	r3, r4
 8005d46:	d807      	bhi.n	8005d58 <memmove+0x20>
 8005d48:	1e43      	subs	r3, r0, #1
 8005d4a:	42a1      	cmp	r1, r4
 8005d4c:	d008      	beq.n	8005d60 <memmove+0x28>
 8005d4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d56:	e7f8      	b.n	8005d4a <memmove+0x12>
 8005d58:	4402      	add	r2, r0
 8005d5a:	4601      	mov	r1, r0
 8005d5c:	428a      	cmp	r2, r1
 8005d5e:	d100      	bne.n	8005d62 <memmove+0x2a>
 8005d60:	bd10      	pop	{r4, pc}
 8005d62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d6a:	e7f7      	b.n	8005d5c <memmove+0x24>

08005d6c <_sbrk_r>:
 8005d6c:	b538      	push	{r3, r4, r5, lr}
 8005d6e:	4d06      	ldr	r5, [pc, #24]	@ (8005d88 <_sbrk_r+0x1c>)
 8005d70:	2300      	movs	r3, #0
 8005d72:	4604      	mov	r4, r0
 8005d74:	4608      	mov	r0, r1
 8005d76:	602b      	str	r3, [r5, #0]
 8005d78:	f7fa fe04 	bl	8000984 <_sbrk>
 8005d7c:	1c43      	adds	r3, r0, #1
 8005d7e:	d102      	bne.n	8005d86 <_sbrk_r+0x1a>
 8005d80:	682b      	ldr	r3, [r5, #0]
 8005d82:	b103      	cbz	r3, 8005d86 <_sbrk_r+0x1a>
 8005d84:	6023      	str	r3, [r4, #0]
 8005d86:	bd38      	pop	{r3, r4, r5, pc}
 8005d88:	20000578 	.word	0x20000578

08005d8c <memcpy>:
 8005d8c:	440a      	add	r2, r1
 8005d8e:	4291      	cmp	r1, r2
 8005d90:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d94:	d100      	bne.n	8005d98 <memcpy+0xc>
 8005d96:	4770      	bx	lr
 8005d98:	b510      	push	{r4, lr}
 8005d9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005da2:	4291      	cmp	r1, r2
 8005da4:	d1f9      	bne.n	8005d9a <memcpy+0xe>
 8005da6:	bd10      	pop	{r4, pc}

08005da8 <_realloc_r>:
 8005da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dac:	4607      	mov	r7, r0
 8005dae:	4614      	mov	r4, r2
 8005db0:	460d      	mov	r5, r1
 8005db2:	b921      	cbnz	r1, 8005dbe <_realloc_r+0x16>
 8005db4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005db8:	4611      	mov	r1, r2
 8005dba:	f7ff bc4d 	b.w	8005658 <_malloc_r>
 8005dbe:	b92a      	cbnz	r2, 8005dcc <_realloc_r+0x24>
 8005dc0:	f7ff fbde 	bl	8005580 <_free_r>
 8005dc4:	4625      	mov	r5, r4
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dcc:	f000 f81a 	bl	8005e04 <_malloc_usable_size_r>
 8005dd0:	4284      	cmp	r4, r0
 8005dd2:	4606      	mov	r6, r0
 8005dd4:	d802      	bhi.n	8005ddc <_realloc_r+0x34>
 8005dd6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005dda:	d8f4      	bhi.n	8005dc6 <_realloc_r+0x1e>
 8005ddc:	4621      	mov	r1, r4
 8005dde:	4638      	mov	r0, r7
 8005de0:	f7ff fc3a 	bl	8005658 <_malloc_r>
 8005de4:	4680      	mov	r8, r0
 8005de6:	b908      	cbnz	r0, 8005dec <_realloc_r+0x44>
 8005de8:	4645      	mov	r5, r8
 8005dea:	e7ec      	b.n	8005dc6 <_realloc_r+0x1e>
 8005dec:	42b4      	cmp	r4, r6
 8005dee:	4622      	mov	r2, r4
 8005df0:	4629      	mov	r1, r5
 8005df2:	bf28      	it	cs
 8005df4:	4632      	movcs	r2, r6
 8005df6:	f7ff ffc9 	bl	8005d8c <memcpy>
 8005dfa:	4629      	mov	r1, r5
 8005dfc:	4638      	mov	r0, r7
 8005dfe:	f7ff fbbf 	bl	8005580 <_free_r>
 8005e02:	e7f1      	b.n	8005de8 <_realloc_r+0x40>

08005e04 <_malloc_usable_size_r>:
 8005e04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e08:	1f18      	subs	r0, r3, #4
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	bfbc      	itt	lt
 8005e0e:	580b      	ldrlt	r3, [r1, r0]
 8005e10:	18c0      	addlt	r0, r0, r3
 8005e12:	4770      	bx	lr

08005e14 <_init>:
 8005e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e16:	bf00      	nop
 8005e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e1a:	bc08      	pop	{r3}
 8005e1c:	469e      	mov	lr, r3
 8005e1e:	4770      	bx	lr

08005e20 <_fini>:
 8005e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e22:	bf00      	nop
 8005e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e26:	bc08      	pop	{r3}
 8005e28:	469e      	mov	lr, r3
 8005e2a:	4770      	bx	lr
