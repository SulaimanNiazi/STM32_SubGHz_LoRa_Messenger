
STM32_SubGHz_LoRa_Messenger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076c0  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08007800  08007800  00008800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079f0  080079f0  00009084  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080079f0  080079f0  000089f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079f8  080079f8  00009084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079f8  080079f8  000089f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080079fc  080079fc  000089fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08007a00  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000053c  20000084  08007a84  00009084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005c0  08007a84  000095c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00009084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d38  00000000  00000000  000090ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000360c  00000000  00000000  0001ede6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001598  00000000  00000000  000223f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001044  00000000  00000000  00023990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e894  00000000  00000000  000249d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015ad3  00000000  00000000  00043268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b695d  00000000  00000000  00058d3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010f698  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d80  00000000  00000000  0010f6dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0011545c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000084 	.word	0x20000084
 800015c:	00000000 	.word	0x00000000
 8000160:	080077e8 	.word	0x080077e8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000088 	.word	0x20000088
 800017c:	080077e8 	.word	0x080077e8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b988 	b.w	8000558 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	468e      	mov	lr, r1
 8000268:	4604      	mov	r4, r0
 800026a:	4688      	mov	r8, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14a      	bne.n	8000306 <__udivmoddi4+0xa6>
 8000270:	428a      	cmp	r2, r1
 8000272:	4617      	mov	r7, r2
 8000274:	d962      	bls.n	800033c <__udivmoddi4+0xdc>
 8000276:	fab2 f682 	clz	r6, r2
 800027a:	b14e      	cbz	r6, 8000290 <__udivmoddi4+0x30>
 800027c:	f1c6 0320 	rsb	r3, r6, #32
 8000280:	fa01 f806 	lsl.w	r8, r1, r6
 8000284:	fa20 f303 	lsr.w	r3, r0, r3
 8000288:	40b7      	lsls	r7, r6
 800028a:	ea43 0808 	orr.w	r8, r3, r8
 800028e:	40b4      	lsls	r4, r6
 8000290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000294:	fa1f fc87 	uxth.w	ip, r7
 8000298:	fbb8 f1fe 	udiv	r1, r8, lr
 800029c:	0c23      	lsrs	r3, r4, #16
 800029e:	fb0e 8811 	mls	r8, lr, r1, r8
 80002a2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a6:	fb01 f20c 	mul.w	r2, r1, ip
 80002aa:	429a      	cmp	r2, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x62>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002b4:	f080 80ea 	bcs.w	800048c <__udivmoddi4+0x22c>
 80002b8:	429a      	cmp	r2, r3
 80002ba:	f240 80e7 	bls.w	800048c <__udivmoddi4+0x22c>
 80002be:	3902      	subs	r1, #2
 80002c0:	443b      	add	r3, r7
 80002c2:	1a9a      	subs	r2, r3, r2
 80002c4:	b2a3      	uxth	r3, r4
 80002c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002d2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d6:	459c      	cmp	ip, r3
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0x8e>
 80002da:	18fb      	adds	r3, r7, r3
 80002dc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e0:	f080 80d6 	bcs.w	8000490 <__udivmoddi4+0x230>
 80002e4:	459c      	cmp	ip, r3
 80002e6:	f240 80d3 	bls.w	8000490 <__udivmoddi4+0x230>
 80002ea:	443b      	add	r3, r7
 80002ec:	3802      	subs	r0, #2
 80002ee:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f2:	eba3 030c 	sub.w	r3, r3, ip
 80002f6:	2100      	movs	r1, #0
 80002f8:	b11d      	cbz	r5, 8000302 <__udivmoddi4+0xa2>
 80002fa:	40f3      	lsrs	r3, r6
 80002fc:	2200      	movs	r2, #0
 80002fe:	e9c5 3200 	strd	r3, r2, [r5]
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	428b      	cmp	r3, r1
 8000308:	d905      	bls.n	8000316 <__udivmoddi4+0xb6>
 800030a:	b10d      	cbz	r5, 8000310 <__udivmoddi4+0xb0>
 800030c:	e9c5 0100 	strd	r0, r1, [r5]
 8000310:	2100      	movs	r1, #0
 8000312:	4608      	mov	r0, r1
 8000314:	e7f5      	b.n	8000302 <__udivmoddi4+0xa2>
 8000316:	fab3 f183 	clz	r1, r3
 800031a:	2900      	cmp	r1, #0
 800031c:	d146      	bne.n	80003ac <__udivmoddi4+0x14c>
 800031e:	4573      	cmp	r3, lr
 8000320:	d302      	bcc.n	8000328 <__udivmoddi4+0xc8>
 8000322:	4282      	cmp	r2, r0
 8000324:	f200 8105 	bhi.w	8000532 <__udivmoddi4+0x2d2>
 8000328:	1a84      	subs	r4, r0, r2
 800032a:	eb6e 0203 	sbc.w	r2, lr, r3
 800032e:	2001      	movs	r0, #1
 8000330:	4690      	mov	r8, r2
 8000332:	2d00      	cmp	r5, #0
 8000334:	d0e5      	beq.n	8000302 <__udivmoddi4+0xa2>
 8000336:	e9c5 4800 	strd	r4, r8, [r5]
 800033a:	e7e2      	b.n	8000302 <__udivmoddi4+0xa2>
 800033c:	2a00      	cmp	r2, #0
 800033e:	f000 8090 	beq.w	8000462 <__udivmoddi4+0x202>
 8000342:	fab2 f682 	clz	r6, r2
 8000346:	2e00      	cmp	r6, #0
 8000348:	f040 80a4 	bne.w	8000494 <__udivmoddi4+0x234>
 800034c:	1a8a      	subs	r2, r1, r2
 800034e:	0c03      	lsrs	r3, r0, #16
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	b280      	uxth	r0, r0
 8000356:	b2bc      	uxth	r4, r7
 8000358:	2101      	movs	r1, #1
 800035a:	fbb2 fcfe 	udiv	ip, r2, lr
 800035e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000362:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000366:	fb04 f20c 	mul.w	r2, r4, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d907      	bls.n	800037e <__udivmoddi4+0x11e>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000374:	d202      	bcs.n	800037c <__udivmoddi4+0x11c>
 8000376:	429a      	cmp	r2, r3
 8000378:	f200 80e0 	bhi.w	800053c <__udivmoddi4+0x2dc>
 800037c:	46c4      	mov	ip, r8
 800037e:	1a9b      	subs	r3, r3, r2
 8000380:	fbb3 f2fe 	udiv	r2, r3, lr
 8000384:	fb0e 3312 	mls	r3, lr, r2, r3
 8000388:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800038c:	fb02 f404 	mul.w	r4, r2, r4
 8000390:	429c      	cmp	r4, r3
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0x144>
 8000394:	18fb      	adds	r3, r7, r3
 8000396:	f102 30ff 	add.w	r0, r2, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x142>
 800039c:	429c      	cmp	r4, r3
 800039e:	f200 80ca 	bhi.w	8000536 <__udivmoddi4+0x2d6>
 80003a2:	4602      	mov	r2, r0
 80003a4:	1b1b      	subs	r3, r3, r4
 80003a6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003aa:	e7a5      	b.n	80002f8 <__udivmoddi4+0x98>
 80003ac:	f1c1 0620 	rsb	r6, r1, #32
 80003b0:	408b      	lsls	r3, r1
 80003b2:	fa22 f706 	lsr.w	r7, r2, r6
 80003b6:	431f      	orrs	r7, r3
 80003b8:	fa0e f401 	lsl.w	r4, lr, r1
 80003bc:	fa20 f306 	lsr.w	r3, r0, r6
 80003c0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003c4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003c8:	4323      	orrs	r3, r4
 80003ca:	fa00 f801 	lsl.w	r8, r0, r1
 80003ce:	fa1f fc87 	uxth.w	ip, r7
 80003d2:	fbbe f0f9 	udiv	r0, lr, r9
 80003d6:	0c1c      	lsrs	r4, r3, #16
 80003d8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003dc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003e0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ea:	d909      	bls.n	8000400 <__udivmoddi4+0x1a0>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 3aff 	add.w	sl, r0, #4294967295
 80003f2:	f080 809c 	bcs.w	800052e <__udivmoddi4+0x2ce>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f240 8099 	bls.w	800052e <__udivmoddi4+0x2ce>
 80003fc:	3802      	subs	r0, #2
 80003fe:	443c      	add	r4, r7
 8000400:	eba4 040e 	sub.w	r4, r4, lr
 8000404:	fa1f fe83 	uxth.w	lr, r3
 8000408:	fbb4 f3f9 	udiv	r3, r4, r9
 800040c:	fb09 4413 	mls	r4, r9, r3, r4
 8000410:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000414:	fb03 fc0c 	mul.w	ip, r3, ip
 8000418:	45a4      	cmp	ip, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x1ce>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000422:	f080 8082 	bcs.w	800052a <__udivmoddi4+0x2ca>
 8000426:	45a4      	cmp	ip, r4
 8000428:	d97f      	bls.n	800052a <__udivmoddi4+0x2ca>
 800042a:	3b02      	subs	r3, #2
 800042c:	443c      	add	r4, r7
 800042e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000432:	eba4 040c 	sub.w	r4, r4, ip
 8000436:	fba0 ec02 	umull	lr, ip, r0, r2
 800043a:	4564      	cmp	r4, ip
 800043c:	4673      	mov	r3, lr
 800043e:	46e1      	mov	r9, ip
 8000440:	d362      	bcc.n	8000508 <__udivmoddi4+0x2a8>
 8000442:	d05f      	beq.n	8000504 <__udivmoddi4+0x2a4>
 8000444:	b15d      	cbz	r5, 800045e <__udivmoddi4+0x1fe>
 8000446:	ebb8 0203 	subs.w	r2, r8, r3
 800044a:	eb64 0409 	sbc.w	r4, r4, r9
 800044e:	fa04 f606 	lsl.w	r6, r4, r6
 8000452:	fa22 f301 	lsr.w	r3, r2, r1
 8000456:	431e      	orrs	r6, r3
 8000458:	40cc      	lsrs	r4, r1
 800045a:	e9c5 6400 	strd	r6, r4, [r5]
 800045e:	2100      	movs	r1, #0
 8000460:	e74f      	b.n	8000302 <__udivmoddi4+0xa2>
 8000462:	fbb1 fcf2 	udiv	ip, r1, r2
 8000466:	0c01      	lsrs	r1, r0, #16
 8000468:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800046c:	b280      	uxth	r0, r0
 800046e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000472:	463b      	mov	r3, r7
 8000474:	4638      	mov	r0, r7
 8000476:	463c      	mov	r4, r7
 8000478:	46b8      	mov	r8, r7
 800047a:	46be      	mov	lr, r7
 800047c:	2620      	movs	r6, #32
 800047e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000482:	eba2 0208 	sub.w	r2, r2, r8
 8000486:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800048a:	e766      	b.n	800035a <__udivmoddi4+0xfa>
 800048c:	4601      	mov	r1, r0
 800048e:	e718      	b.n	80002c2 <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e72c      	b.n	80002ee <__udivmoddi4+0x8e>
 8000494:	f1c6 0220 	rsb	r2, r6, #32
 8000498:	fa2e f302 	lsr.w	r3, lr, r2
 800049c:	40b7      	lsls	r7, r6
 800049e:	40b1      	lsls	r1, r6
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	430a      	orrs	r2, r1
 80004aa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ae:	b2bc      	uxth	r4, r7
 80004b0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004b4:	0c11      	lsrs	r1, r2, #16
 80004b6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ba:	fb08 f904 	mul.w	r9, r8, r4
 80004be:	40b0      	lsls	r0, r6
 80004c0:	4589      	cmp	r9, r1
 80004c2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004c6:	b280      	uxth	r0, r0
 80004c8:	d93e      	bls.n	8000548 <__udivmoddi4+0x2e8>
 80004ca:	1879      	adds	r1, r7, r1
 80004cc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004d0:	d201      	bcs.n	80004d6 <__udivmoddi4+0x276>
 80004d2:	4589      	cmp	r9, r1
 80004d4:	d81f      	bhi.n	8000516 <__udivmoddi4+0x2b6>
 80004d6:	eba1 0109 	sub.w	r1, r1, r9
 80004da:	fbb1 f9fe 	udiv	r9, r1, lr
 80004de:	fb09 f804 	mul.w	r8, r9, r4
 80004e2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004e6:	b292      	uxth	r2, r2
 80004e8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004ec:	4542      	cmp	r2, r8
 80004ee:	d229      	bcs.n	8000544 <__udivmoddi4+0x2e4>
 80004f0:	18ba      	adds	r2, r7, r2
 80004f2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004f6:	d2c4      	bcs.n	8000482 <__udivmoddi4+0x222>
 80004f8:	4542      	cmp	r2, r8
 80004fa:	d2c2      	bcs.n	8000482 <__udivmoddi4+0x222>
 80004fc:	f1a9 0102 	sub.w	r1, r9, #2
 8000500:	443a      	add	r2, r7
 8000502:	e7be      	b.n	8000482 <__udivmoddi4+0x222>
 8000504:	45f0      	cmp	r8, lr
 8000506:	d29d      	bcs.n	8000444 <__udivmoddi4+0x1e4>
 8000508:	ebbe 0302 	subs.w	r3, lr, r2
 800050c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000510:	3801      	subs	r0, #1
 8000512:	46e1      	mov	r9, ip
 8000514:	e796      	b.n	8000444 <__udivmoddi4+0x1e4>
 8000516:	eba7 0909 	sub.w	r9, r7, r9
 800051a:	4449      	add	r1, r9
 800051c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000520:	fbb1 f9fe 	udiv	r9, r1, lr
 8000524:	fb09 f804 	mul.w	r8, r9, r4
 8000528:	e7db      	b.n	80004e2 <__udivmoddi4+0x282>
 800052a:	4673      	mov	r3, lr
 800052c:	e77f      	b.n	800042e <__udivmoddi4+0x1ce>
 800052e:	4650      	mov	r0, sl
 8000530:	e766      	b.n	8000400 <__udivmoddi4+0x1a0>
 8000532:	4608      	mov	r0, r1
 8000534:	e6fd      	b.n	8000332 <__udivmoddi4+0xd2>
 8000536:	443b      	add	r3, r7
 8000538:	3a02      	subs	r2, #2
 800053a:	e733      	b.n	80003a4 <__udivmoddi4+0x144>
 800053c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000540:	443b      	add	r3, r7
 8000542:	e71c      	b.n	800037e <__udivmoddi4+0x11e>
 8000544:	4649      	mov	r1, r9
 8000546:	e79c      	b.n	8000482 <__udivmoddi4+0x222>
 8000548:	eba1 0109 	sub.w	r1, r1, r9
 800054c:	46c4      	mov	ip, r8
 800054e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000552:	fb09 f804 	mul.w	r8, r9, r4
 8000556:	e7c4      	b.n	80004e2 <__udivmoddi4+0x282>

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000568:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800056a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4313      	orrs	r3, r2
 8000572:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000574:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000578:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4013      	ands	r3, r2
 800057e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000580:	68fb      	ldr	r3, [r7, #12]
}
 8000582:	bf00      	nop
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr

0800058c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a0:	2004      	movs	r0, #4
 80005a2:	f7ff ffdb 	bl	800055c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	2001      	movs	r0, #1
 80005a8:	f7ff ffd8 	bl	800055c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2138      	movs	r1, #56	@ 0x38
 80005b0:	4809      	ldr	r0, [pc, #36]	@ (80005d8 <MX_GPIO_Init+0x4c>)
 80005b2:	f002 fb49 	bl	8002c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 80005b6:	2338      	movs	r3, #56	@ 0x38
 80005b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ba:	2301      	movs	r3, #1
 80005bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005c2:	2303      	movs	r3, #3
 80005c4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	4619      	mov	r1, r3
 80005ca:	4803      	ldr	r0, [pc, #12]	@ (80005d8 <MX_GPIO_Init+0x4c>)
 80005cc:	f002 f9dc 	bl	8002988 <HAL_GPIO_Init>

}
 80005d0:	bf00      	nop
 80005d2:	3718      	adds	r7, #24
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	48000800 	.word	0x48000800

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b0c4      	sub	sp, #272	@ 0x110
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f001 ff3d 	bl	8002460 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f891 	bl	800070c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  HAL_Delay(3000);
 80005ea:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80005ee:	f001 ffad 	bl	800254c <HAL_Delay>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f2:	f7ff ffcb 	bl	800058c <MX_GPIO_Init>
  MX_SUBGHZ_Init();
 80005f6:	f000 fc2b 	bl	8000e50 <MX_SUBGHZ_Init>
  MX_USART2_UART_Init();
 80005fa:	f000 fcbb 	bl	8000f74 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  BSP_LED_Init(LED_BLUE);	// Connected Master
 80005fe:	2000      	movs	r0, #0
 8000600:	f000 fd94 	bl	800112c <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);	// Connected Slave
 8000604:	2001      	movs	r0, #1
 8000606:	f000 fd91 	bl	800112c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);	// Disconnected
 800060a:	2002      	movs	r0, #2
 800060c:	f000 fd8e 	bl	800112c <BSP_LED_Init>

  Radio_Init();
 8000610:	f000 fa18 	bl	8000a44 <Radio_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  snprintf((char*)buffer, MAX_BUFFER_SIZE, "\r\n\r\nSTM32 SubGHz LoRa Messenger\r\n\r\nPlease Enter an ID of maximum 20 characters: ");
 8000614:	4a32      	ldr	r2, [pc, #200]	@ (80006e0 <main+0x104>)
 8000616:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800061a:	4832      	ldr	r0, [pc, #200]	@ (80006e4 <main+0x108>)
 800061c:	f006 fc0e 	bl	8006e3c <sniprintf>
  UART_Transmit((char*)buffer);
 8000620:	4830      	ldr	r0, [pc, #192]	@ (80006e4 <main+0x108>)
 8000622:	f000 f8c5 	bl	80007b0 <UART_Transmit>
  while(!messageReady) HAL_UART_Receive_IT(&huart2, input, 1);
 8000626:	e004      	b.n	8000632 <main+0x56>
 8000628:	2201      	movs	r2, #1
 800062a:	492f      	ldr	r1, [pc, #188]	@ (80006e8 <main+0x10c>)
 800062c:	482f      	ldr	r0, [pc, #188]	@ (80006ec <main+0x110>)
 800062e:	f004 fc2b 	bl	8004e88 <HAL_UART_Receive_IT>
 8000632:	4b2f      	ldr	r3, [pc, #188]	@ (80006f0 <main+0x114>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	f083 0301 	eor.w	r3, r3, #1
 800063a:	b2db      	uxtb	r3, r3
 800063c:	2b00      	cmp	r3, #0
 800063e:	d1f3      	bne.n	8000628 <main+0x4c>
  HAL_NVIC_DisableIRQ(USART2_IRQn);
 8000640:	2025      	movs	r0, #37	@ 0x25
 8000642:	f002 f8ca 	bl	80027da <HAL_NVIC_DisableIRQ>
  idLen = snprintf(id, 20, "%s", (char*)output);
 8000646:	4b2b      	ldr	r3, [pc, #172]	@ (80006f4 <main+0x118>)
 8000648:	4a2b      	ldr	r2, [pc, #172]	@ (80006f8 <main+0x11c>)
 800064a:	2114      	movs	r1, #20
 800064c:	482b      	ldr	r0, [pc, #172]	@ (80006fc <main+0x120>)
 800064e:	f006 fbf5 	bl	8006e3c <sniprintf>
 8000652:	4603      	mov	r3, r0
 8000654:	4a2a      	ldr	r2, [pc, #168]	@ (8000700 <main+0x124>)
 8000656:	6013      	str	r3, [r2, #0]
  UART_Transmit(id);
 8000658:	4828      	ldr	r0, [pc, #160]	@ (80006fc <main+0x120>)
 800065a:	f000 f8a9 	bl	80007b0 <UART_Transmit>
  UART_Transmit("\r\n\r\n");
 800065e:	4829      	ldr	r0, [pc, #164]	@ (8000704 <main+0x128>)
 8000660:	f000 f8a6 	bl	80007b0 <UART_Transmit>
  resetTerminal();
 8000664:	f000 f8ba 	bl	80007dc <resetTerminal>

  BSP_LED_On(LED_RED); 							// Disconnected at first
 8000668:	2002      	movs	r0, #2
 800066a:	f000 fd99 	bl	80011a0 <BSP_LED_On>

  SessionContext sessionContext = {
 800066e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000672:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000676:	4618      	mov	r0, r3
 8000678:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800067c:	461a      	mov	r2, r3
 800067e:	2100      	movs	r1, #0
 8000680:	f006 fc34 	bl	8006eec <memset>
 8000684:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000688:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800068c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000690:	605a      	str	r2, [r3, #4]
		  .state = MASTER,						// Start as Master
		  .rxTimeout = 3000,					// ms
		  // get random number from Radio's RNG (from RSSI noise)
		  .txDelay = SUBGRF_GetRandom() >> 22	// (0 to 1023) ms
 8000692:	f000 ffbc 	bl	800160e <SUBGRF_GetRandom>
 8000696:	4603      	mov	r3, r0
 8000698:	0d9a      	lsrs	r2, r3, #22
  SessionContext sessionContext = {
 800069a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800069e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80006a2:	609a      	str	r2, [r3, #8]
  };
  start_RX_mode(&sessionContext);				// Start by listening
 80006a4:	463b      	mov	r3, r7
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 faaa 	bl	8000c00 <start_RX_mode>

  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006ac:	2025      	movs	r0, #37	@ 0x25
 80006ae:	f002 f886 	bl	80027be <HAL_NVIC_EnableIRQ>
  messageReady = false;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <main+0x114>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	701a      	strb	r2, [r3, #0]

  while (1)
  {
    /* USER CODE END WHILE */

	currentEvent = NULL;
 80006b8:	4b13      	ldr	r3, [pc, #76]	@ (8000708 <main+0x12c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
	while(!currentEvent) HAL_UART_Receive_IT(&huart2, input, 1);
 80006be:	e004      	b.n	80006ca <main+0xee>
 80006c0:	2201      	movs	r2, #1
 80006c2:	4909      	ldr	r1, [pc, #36]	@ (80006e8 <main+0x10c>)
 80006c4:	4809      	ldr	r0, [pc, #36]	@ (80006ec <main+0x110>)
 80006c6:	f004 fbdf 	bl	8004e88 <HAL_UART_Receive_IT>
 80006ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000708 <main+0x12c>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d0f6      	beq.n	80006c0 <main+0xe4>
	currentEvent(&sessionContext);
 80006d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000708 <main+0x12c>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	463a      	mov	r2, r7
 80006d8:	4610      	mov	r0, r2
 80006da:	4798      	blx	r3
	currentEvent = NULL;
 80006dc:	e7ec      	b.n	80006b8 <main+0xdc>
 80006de:	bf00      	nop
 80006e0:	08007800 	.word	0x08007800
 80006e4:	200000a0 	.word	0x200000a0
 80006e8:	200002a0 	.word	0x200002a0
 80006ec:	200003d0 	.word	0x200003d0
 80006f0:	200002a4 	.word	0x200002a4
 80006f4:	200001a0 	.word	0x200001a0
 80006f8:	08007854 	.word	0x08007854
 80006fc:	20000004 	.word	0x20000004
 8000700:	20000018 	.word	0x20000018
 8000704:	08007858 	.word	0x08007858
 8000708:	200003a8 	.word	0x200003a8

0800070c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b09a      	sub	sp, #104	@ 0x68
 8000710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000712:	f107 0320 	add.w	r3, r7, #32
 8000716:	2248      	movs	r2, #72	@ 0x48
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f006 fbe6 	bl	8006eec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]
 800072e:	615a      	str	r2, [r3, #20]
 8000730:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000732:	4b1e      	ldr	r3, [pc, #120]	@ (80007ac <SystemClock_Config+0xa0>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800073a:	4a1c      	ldr	r2, [pc, #112]	@ (80007ac <SystemClock_Config+0xa0>)
 800073c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000740:	6013      	str	r3, [r2, #0]
 8000742:	4b1a      	ldr	r3, [pc, #104]	@ (80007ac <SystemClock_Config+0xa0>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800074e:	2320      	movs	r3, #32
 8000750:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000752:	2301      	movs	r3, #1
 8000754:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000756:	2300      	movs	r3, #0
 8000758:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800075a:	23b0      	movs	r3, #176	@ 0xb0
 800075c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800075e:	2300      	movs	r3, #0
 8000760:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000762:	f107 0320 	add.w	r3, r7, #32
 8000766:	4618      	mov	r0, r3
 8000768:	f002 fd70 	bl	800324c <HAL_RCC_OscConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000772:	f000 fb09 	bl	8000d88 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000776:	234f      	movs	r3, #79	@ 0x4f
 8000778:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	2102      	movs	r1, #2
 8000792:	4618      	mov	r0, r3
 8000794:	f003 f8dc 	bl	8003950 <HAL_RCC_ClockConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800079e:	f000 faf3 	bl	8000d88 <Error_Handler>
  }
}
 80007a2:	bf00      	nop
 80007a4:	3768      	adds	r7, #104	@ 0x68
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	58000400 	.word	0x58000400

080007b0 <UART_Transmit>:
 *  APB clocks = AHB = SYSCLK;
 *  flash latency 2.
 *  This is a low-power, simple config suitable for the WL.
 */

void UART_Transmit(const char* string){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)string, strlen(string), HAL_MAX_DELAY);
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f7ff fce1 	bl	8000180 <strlen>
 80007be:	4603      	mov	r3, r0
 80007c0:	b29a      	uxth	r2, r3
 80007c2:	f04f 33ff 	mov.w	r3, #4294967295
 80007c6:	6879      	ldr	r1, [r7, #4]
 80007c8:	4803      	ldr	r0, [pc, #12]	@ (80007d8 <UART_Transmit+0x28>)
 80007ca:	f004 fad6 	bl	8004d7a <HAL_UART_Transmit>
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200003d0 	.word	0x200003d0

080007dc <resetTerminal>:

void resetTerminal(){
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
	count = (uint16_t)snprintf((char*)buffer, MAX_BUFFER_SIZE, "%s: ", id);
 80007e0:	4b07      	ldr	r3, [pc, #28]	@ (8000800 <resetTerminal+0x24>)
 80007e2:	4a08      	ldr	r2, [pc, #32]	@ (8000804 <resetTerminal+0x28>)
 80007e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007e8:	4807      	ldr	r0, [pc, #28]	@ (8000808 <resetTerminal+0x2c>)
 80007ea:	f006 fb27 	bl	8006e3c <sniprintf>
 80007ee:	4603      	mov	r3, r0
 80007f0:	b29a      	uxth	r2, r3
 80007f2:	4b06      	ldr	r3, [pc, #24]	@ (800080c <resetTerminal+0x30>)
 80007f4:	801a      	strh	r2, [r3, #0]
	UART_Transmit((char*)buffer);
 80007f6:	4804      	ldr	r0, [pc, #16]	@ (8000808 <resetTerminal+0x2c>)
 80007f8:	f7ff ffda 	bl	80007b0 <UART_Transmit>
}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000004 	.word	0x20000004
 8000804:	08007860 	.word	0x08007860
 8000808:	200000a0 	.word	0x200000a0
 800080c:	200002a2 	.word	0x200002a2

08000810 <interruptTerminal>:

void interruptTerminal(const char* interruption){
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	for(uint16_t x = 0; x < count; x++) UART_Transmit("\b \b");
 8000818:	2300      	movs	r3, #0
 800081a:	81fb      	strh	r3, [r7, #14]
 800081c:	e005      	b.n	800082a <interruptTerminal+0x1a>
 800081e:	4810      	ldr	r0, [pc, #64]	@ (8000860 <interruptTerminal+0x50>)
 8000820:	f7ff ffc6 	bl	80007b0 <UART_Transmit>
 8000824:	89fb      	ldrh	r3, [r7, #14]
 8000826:	3301      	adds	r3, #1
 8000828:	81fb      	strh	r3, [r7, #14]
 800082a:	4b0e      	ldr	r3, [pc, #56]	@ (8000864 <interruptTerminal+0x54>)
 800082c:	881b      	ldrh	r3, [r3, #0]
 800082e:	89fa      	ldrh	r2, [r7, #14]
 8000830:	429a      	cmp	r2, r3
 8000832:	d3f4      	bcc.n	800081e <interruptTerminal+0xe>
	UART_Transmit("\r\n");
 8000834:	480c      	ldr	r0, [pc, #48]	@ (8000868 <interruptTerminal+0x58>)
 8000836:	f7ff ffbb 	bl	80007b0 <UART_Transmit>
	UART_Transmit(interruption);
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f7ff ffb8 	bl	80007b0 <UART_Transmit>
	UART_Transmit("\r\n\r\n");
 8000840:	480a      	ldr	r0, [pc, #40]	@ (800086c <interruptTerminal+0x5c>)
 8000842:	f7ff ffb5 	bl	80007b0 <UART_Transmit>
	HAL_UART_Transmit(&huart2, buffer, count, HAL_MAX_DELAY);
 8000846:	4b07      	ldr	r3, [pc, #28]	@ (8000864 <interruptTerminal+0x54>)
 8000848:	881a      	ldrh	r2, [r3, #0]
 800084a:	f04f 33ff 	mov.w	r3, #4294967295
 800084e:	4908      	ldr	r1, [pc, #32]	@ (8000870 <interruptTerminal+0x60>)
 8000850:	4808      	ldr	r0, [pc, #32]	@ (8000874 <interruptTerminal+0x64>)
 8000852:	f004 fa92 	bl	8004d7a <HAL_UART_Transmit>
}
 8000856:	bf00      	nop
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	08007868 	.word	0x08007868
 8000864:	200002a2 	.word	0x200002a2
 8000868:	0800786c 	.word	0x0800786c
 800086c:	08007858 	.word	0x08007858
 8000870:	200000a0 	.word	0x200000a0
 8000874:	200003d0 	.word	0x200003d0

08000878 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	switch(input[0]){
 8000880:	4b23      	ldr	r3, [pc, #140]	@ (8000910 <HAL_UART_RxCpltCallback+0x98>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b08      	cmp	r3, #8
 8000886:	d015      	beq.n	80008b4 <HAL_UART_RxCpltCallback+0x3c>
 8000888:	2b0d      	cmp	r3, #13
 800088a:	d125      	bne.n	80008d8 <HAL_UART_RxCpltCallback+0x60>
		case 0xd:
			UART_Transmit("\r\n");
 800088c:	4821      	ldr	r0, [pc, #132]	@ (8000914 <HAL_UART_RxCpltCallback+0x9c>)
 800088e:	f7ff ff8f 	bl	80007b0 <UART_Transmit>
			sprintf((char*)output, "%s", (char*)buffer);
 8000892:	4a21      	ldr	r2, [pc, #132]	@ (8000918 <HAL_UART_RxCpltCallback+0xa0>)
 8000894:	4921      	ldr	r1, [pc, #132]	@ (800091c <HAL_UART_RxCpltCallback+0xa4>)
 8000896:	4822      	ldr	r0, [pc, #136]	@ (8000920 <HAL_UART_RxCpltCallback+0xa8>)
 8000898:	f006 fb06 	bl	8006ea8 <siprintf>
			output[count] = '\0';
 800089c:	4b21      	ldr	r3, [pc, #132]	@ (8000924 <HAL_UART_RxCpltCallback+0xac>)
 800089e:	881b      	ldrh	r3, [r3, #0]
 80008a0:	461a      	mov	r2, r3
 80008a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000920 <HAL_UART_RxCpltCallback+0xa8>)
 80008a4:	2100      	movs	r1, #0
 80008a6:	5499      	strb	r1, [r3, r2]
			messageReady = true;
 80008a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000928 <HAL_UART_RxCpltCallback+0xb0>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	701a      	strb	r2, [r3, #0]
			resetTerminal();
 80008ae:	f7ff ff95 	bl	80007dc <resetTerminal>
			break;
 80008b2:	e029      	b.n	8000908 <HAL_UART_RxCpltCallback+0x90>

		case 0x8:
			if(count > (idLen + 2)){
 80008b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000924 <HAL_UART_RxCpltCallback+0xac>)
 80008b6:	881b      	ldrh	r3, [r3, #0]
 80008b8:	461a      	mov	r2, r3
 80008ba:	4b1c      	ldr	r3, [pc, #112]	@ (800092c <HAL_UART_RxCpltCallback+0xb4>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	3302      	adds	r3, #2
 80008c0:	429a      	cmp	r2, r3
 80008c2:	dd20      	ble.n	8000906 <HAL_UART_RxCpltCallback+0x8e>
				count--;
 80008c4:	4b17      	ldr	r3, [pc, #92]	@ (8000924 <HAL_UART_RxCpltCallback+0xac>)
 80008c6:	881b      	ldrh	r3, [r3, #0]
 80008c8:	3b01      	subs	r3, #1
 80008ca:	b29a      	uxth	r2, r3
 80008cc:	4b15      	ldr	r3, [pc, #84]	@ (8000924 <HAL_UART_RxCpltCallback+0xac>)
 80008ce:	801a      	strh	r2, [r3, #0]
				UART_Transmit("\b \b");
 80008d0:	4817      	ldr	r0, [pc, #92]	@ (8000930 <HAL_UART_RxCpltCallback+0xb8>)
 80008d2:	f7ff ff6d 	bl	80007b0 <UART_Transmit>
			}
			break;
 80008d6:	e016      	b.n	8000906 <HAL_UART_RxCpltCallback+0x8e>

		default:
			if(count < MAX_BUFFER_SIZE){
 80008d8:	4b12      	ldr	r3, [pc, #72]	@ (8000924 <HAL_UART_RxCpltCallback+0xac>)
 80008da:	881b      	ldrh	r3, [r3, #0]
 80008dc:	2bff      	cmp	r3, #255	@ 0xff
 80008de:	d813      	bhi.n	8000908 <HAL_UART_RxCpltCallback+0x90>
				buffer[count++] = input[0];
 80008e0:	4b10      	ldr	r3, [pc, #64]	@ (8000924 <HAL_UART_RxCpltCallback+0xac>)
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	1c5a      	adds	r2, r3, #1
 80008e6:	b291      	uxth	r1, r2
 80008e8:	4a0e      	ldr	r2, [pc, #56]	@ (8000924 <HAL_UART_RxCpltCallback+0xac>)
 80008ea:	8011      	strh	r1, [r2, #0]
 80008ec:	461a      	mov	r2, r3
 80008ee:	4b08      	ldr	r3, [pc, #32]	@ (8000910 <HAL_UART_RxCpltCallback+0x98>)
 80008f0:	7819      	ldrb	r1, [r3, #0]
 80008f2:	4b09      	ldr	r3, [pc, #36]	@ (8000918 <HAL_UART_RxCpltCallback+0xa0>)
 80008f4:	5499      	strb	r1, [r3, r2]
				HAL_UART_Transmit(huart, input, 1, HAL_MAX_DELAY);
 80008f6:	f04f 33ff 	mov.w	r3, #4294967295
 80008fa:	2201      	movs	r2, #1
 80008fc:	4904      	ldr	r1, [pc, #16]	@ (8000910 <HAL_UART_RxCpltCallback+0x98>)
 80008fe:	6878      	ldr	r0, [r7, #4]
 8000900:	f004 fa3b 	bl	8004d7a <HAL_UART_Transmit>
			}
	}
}
 8000904:	e000      	b.n	8000908 <HAL_UART_RxCpltCallback+0x90>
			break;
 8000906:	bf00      	nop
}
 8000908:	bf00      	nop
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	200002a0 	.word	0x200002a0
 8000914:	0800786c 	.word	0x0800786c
 8000918:	200000a0 	.word	0x200000a0
 800091c:	08007854 	.word	0x08007854
 8000920:	200001a0 	.word	0x200001a0
 8000924:	200002a2 	.word	0x200002a2
 8000928:	200002a4 	.word	0x200002a4
 800092c:	20000018 	.word	0x20000018
 8000930:	08007868 	.word	0x08007868

08000934 <Radio_DIO_IRq_Callback_Handler>:

void Radio_DIO_IRq_Callback_Handler(const RadioIrqMasks_t radioIRq){
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	80fb      	strh	r3, [r7, #6]
	switch(radioIRq){
 800093e:	88fb      	ldrh	r3, [r7, #6]
 8000940:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000944:	d026      	beq.n	8000994 <Radio_DIO_IRq_Callback_Handler+0x60>
 8000946:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800094a:	dc5c      	bgt.n	8000a06 <Radio_DIO_IRq_Callback_Handler+0xd2>
 800094c:	2b40      	cmp	r3, #64	@ 0x40
 800094e:	d04c      	beq.n	80009ea <Radio_DIO_IRq_Callback_Handler+0xb6>
 8000950:	2b40      	cmp	r3, #64	@ 0x40
 8000952:	dc58      	bgt.n	8000a06 <Radio_DIO_IRq_Callback_Handler+0xd2>
 8000954:	2b01      	cmp	r3, #1
 8000956:	d002      	beq.n	800095e <Radio_DIO_IRq_Callback_Handler+0x2a>
 8000958:	2b02      	cmp	r3, #2
 800095a:	d004      	beq.n	8000966 <Radio_DIO_IRq_Callback_Handler+0x32>
			interruptTerminal("RX CRC ERROR");
			sprintf((char*)output, "\\\\\\");	// message to repeat last message
			output[4] = '\0';
			messageReady = true;
			break;
		default: break;
 800095c:	e053      	b.n	8000a06 <Radio_DIO_IRq_Callback_Handler+0xd2>
			currentEvent = start_RX_mode;
 800095e:	4b2c      	ldr	r3, [pc, #176]	@ (8000a10 <Radio_DIO_IRq_Callback_Handler+0xdc>)
 8000960:	4a2c      	ldr	r2, [pc, #176]	@ (8000a14 <Radio_DIO_IRq_Callback_Handler+0xe0>)
 8000962:	601a      	str	r2, [r3, #0]
			break;
 8000964:	e050      	b.n	8000a08 <Radio_DIO_IRq_Callback_Handler+0xd4>
			if(!connected){
 8000966:	4b2c      	ldr	r3, [pc, #176]	@ (8000a18 <Radio_DIO_IRq_Callback_Handler+0xe4>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	f083 0301 	eor.w	r3, r3, #1
 800096e:	b2db      	uxtb	r3, r3
 8000970:	2b00      	cmp	r3, #0
 8000972:	d00b      	beq.n	800098c <Radio_DIO_IRq_Callback_Handler+0x58>
				connected = true;
 8000974:	4b28      	ldr	r3, [pc, #160]	@ (8000a18 <Radio_DIO_IRq_Callback_Handler+0xe4>)
 8000976:	2201      	movs	r2, #1
 8000978:	701a      	strb	r2, [r3, #0]
				retries = 0;
 800097a:	4b28      	ldr	r3, [pc, #160]	@ (8000a1c <Radio_DIO_IRq_Callback_Handler+0xe8>)
 800097c:	2200      	movs	r2, #0
 800097e:	801a      	strh	r2, [r3, #0]
				BSP_LED_Off(LED_RED);
 8000980:	2002      	movs	r0, #2
 8000982:	f000 fc27 	bl	80011d4 <BSP_LED_Off>
				interruptTerminal("Connected");
 8000986:	4826      	ldr	r0, [pc, #152]	@ (8000a20 <Radio_DIO_IRq_Callback_Handler+0xec>)
 8000988:	f7ff ff42 	bl	8000810 <interruptTerminal>
			currentEvent = RX_done_event;
 800098c:	4b20      	ldr	r3, [pc, #128]	@ (8000a10 <Radio_DIO_IRq_Callback_Handler+0xdc>)
 800098e:	4a25      	ldr	r2, [pc, #148]	@ (8000a24 <Radio_DIO_IRq_Callback_Handler+0xf0>)
 8000990:	601a      	str	r2, [r3, #0]
			break;
 8000992:	e039      	b.n	8000a08 <Radio_DIO_IRq_Callback_Handler+0xd4>
			switch(SUBGRF_GetOperatingMode()){
 8000994:	f000 fdac 	bl	80014f0 <SUBGRF_GetOperatingMode>
 8000998:	4603      	mov	r3, r0
 800099a:	2b04      	cmp	r3, #4
 800099c:	d002      	beq.n	80009a4 <Radio_DIO_IRq_Callback_Handler+0x70>
 800099e:	2b05      	cmp	r3, #5
 80009a0:	d004      	beq.n	80009ac <Radio_DIO_IRq_Callback_Handler+0x78>
				default:break;
 80009a2:	e01e      	b.n	80009e2 <Radio_DIO_IRq_Callback_Handler+0xae>
					interruptTerminal("TX TIMEOUT");
 80009a4:	4820      	ldr	r0, [pc, #128]	@ (8000a28 <Radio_DIO_IRq_Callback_Handler+0xf4>)
 80009a6:	f7ff ff33 	bl	8000810 <interruptTerminal>
					break;
 80009aa:	e01a      	b.n	80009e2 <Radio_DIO_IRq_Callback_Handler+0xae>
					if(connected) if(++retries > RETRY_LIMIT){
 80009ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000a18 <Radio_DIO_IRq_Callback_Handler+0xe4>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d015      	beq.n	80009e0 <Radio_DIO_IRq_Callback_Handler+0xac>
 80009b4:	4b19      	ldr	r3, [pc, #100]	@ (8000a1c <Radio_DIO_IRq_Callback_Handler+0xe8>)
 80009b6:	881b      	ldrh	r3, [r3, #0]
 80009b8:	3301      	adds	r3, #1
 80009ba:	b29a      	uxth	r2, r3
 80009bc:	4b17      	ldr	r3, [pc, #92]	@ (8000a1c <Radio_DIO_IRq_Callback_Handler+0xe8>)
 80009be:	801a      	strh	r2, [r3, #0]
 80009c0:	4b16      	ldr	r3, [pc, #88]	@ (8000a1c <Radio_DIO_IRq_Callback_Handler+0xe8>)
 80009c2:	881b      	ldrh	r3, [r3, #0]
 80009c4:	2b0a      	cmp	r3, #10
 80009c6:	d90b      	bls.n	80009e0 <Radio_DIO_IRq_Callback_Handler+0xac>
						connected = false;
 80009c8:	4b13      	ldr	r3, [pc, #76]	@ (8000a18 <Radio_DIO_IRq_Callback_Handler+0xe4>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	701a      	strb	r2, [r3, #0]
						BSP_LED_On(LED_RED);
 80009ce:	2002      	movs	r0, #2
 80009d0:	f000 fbe6 	bl	80011a0 <BSP_LED_On>
						BSP_LED_Off(LED_BLUE|LED_GREEN);
 80009d4:	2001      	movs	r0, #1
 80009d6:	f000 fbfd 	bl	80011d4 <BSP_LED_Off>
						interruptTerminal("\r\nDisconnected\r\n");
 80009da:	4814      	ldr	r0, [pc, #80]	@ (8000a2c <Radio_DIO_IRq_Callback_Handler+0xf8>)
 80009dc:	f7ff ff18 	bl	8000810 <interruptTerminal>
					break;
 80009e0:	bf00      	nop
			currentEvent = timeout_error_event;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a10 <Radio_DIO_IRq_Callback_Handler+0xdc>)
 80009e4:	4a12      	ldr	r2, [pc, #72]	@ (8000a30 <Radio_DIO_IRq_Callback_Handler+0xfc>)
 80009e6:	601a      	str	r2, [r3, #0]
			break;
 80009e8:	e00e      	b.n	8000a08 <Radio_DIO_IRq_Callback_Handler+0xd4>
			interruptTerminal("RX CRC ERROR");
 80009ea:	4812      	ldr	r0, [pc, #72]	@ (8000a34 <Radio_DIO_IRq_Callback_Handler+0x100>)
 80009ec:	f7ff ff10 	bl	8000810 <interruptTerminal>
			sprintf((char*)output, "\\\\\\");	// message to repeat last message
 80009f0:	4911      	ldr	r1, [pc, #68]	@ (8000a38 <Radio_DIO_IRq_Callback_Handler+0x104>)
 80009f2:	4812      	ldr	r0, [pc, #72]	@ (8000a3c <Radio_DIO_IRq_Callback_Handler+0x108>)
 80009f4:	f006 fa58 	bl	8006ea8 <siprintf>
			output[4] = '\0';
 80009f8:	4b10      	ldr	r3, [pc, #64]	@ (8000a3c <Radio_DIO_IRq_Callback_Handler+0x108>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	711a      	strb	r2, [r3, #4]
			messageReady = true;
 80009fe:	4b10      	ldr	r3, [pc, #64]	@ (8000a40 <Radio_DIO_IRq_Callback_Handler+0x10c>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	701a      	strb	r2, [r3, #0]
			break;
 8000a04:	e000      	b.n	8000a08 <Radio_DIO_IRq_Callback_Handler+0xd4>
		default: break;
 8000a06:	bf00      	nop
	}
}
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	200003a8 	.word	0x200003a8
 8000a14:	08000c01 	.word	0x08000c01
 8000a18:	200002a5 	.word	0x200002a5
 8000a1c:	20000000 	.word	0x20000000
 8000a20:	08007870 	.word	0x08007870
 8000a24:	08000c75 	.word	0x08000c75
 8000a28:	0800787c 	.word	0x0800787c
 8000a2c:	08007888 	.word	0x08007888
 8000a30:	08000c4d 	.word	0x08000c4d
 8000a34:	0800789c 	.word	0x0800789c
 8000a38:	080078ac 	.word	0x080078ac
 8000a3c:	200001a0 	.word	0x200001a0
 8000a40:	200002a4 	.word	0x200002a4

08000a44 <Radio_Init>:

/** Initialize the Sub-GHz radio and dependent hardware.
  */
void Radio_Init(){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af00      	add	r7, sp, #0
	// Initialize the hardware (SPI bus, TCXO control, RF switch) or the SUBGHZ (SX126x) and registers the IRQ callback.
	SUBGRF_Init(Radio_DIO_IRq_Callback_Handler);
 8000a4a:	4830      	ldr	r0, [pc, #192]	@ (8000b0c <Radio_Init+0xc8>)
 8000a4c:	f000 fd08 	bl	8001460 <SUBGRF_Init>

	// Use DCDC converter if `DCDC_ENABLE` is defined in radio_conf.h
	// "By default, the SMPS clock detection is disabled and must be enabled before enabling the SMPS." (6.1 in RM0453)
	SUBGRF_WriteRegister(SUBGHZ_SMPSC0R, (SUBGRF_ReadRegister(SUBGHZ_SMPSC0R) | SMPS_CLK_DET_ENABLE));
 8000a50:	f640 1016 	movw	r0, #2326	@ 0x916
 8000a54:	f001 fb06 	bl	8002064 <SUBGRF_ReadRegister>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	4619      	mov	r1, r3
 8000a62:	f640 1016 	movw	r0, #2326	@ 0x916
 8000a66:	f001 fae9 	bl	800203c <SUBGRF_WriteRegister>
	SUBGRF_SetRegulatorMode(); // use DCDC if configured in radio_conf.h
 8000a6a:	f000 fe82 	bl	8001772 <SUBGRF_SetRegulatorMode>

	// Use the whole 256-byte buffer for both TX and RX (starting at 0)
	SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 8000a6e:	2100      	movs	r1, #0
 8000a70:	2000      	movs	r0, #0
 8000a72:	f001 fa4d 	bl	8001f10 <SUBGRF_SetBufferBaseAddress>

	SUBGRF_SetRfFrequency(RF_FREQ);
 8000a76:	4826      	ldr	r0, [pc, #152]	@ (8000b10 <Radio_Init+0xcc>)
 8000a78:	f000 ffa6 	bl	80019c8 <SUBGRF_SetRfFrequency>
	SUBGRF_SetRfTxPower(TX_POWER);
 8000a7c:	200e      	movs	r0, #14
 8000a7e:	f001 fbf9 	bl	8002274 <SUBGRF_SetRfTxPower>
	SUBGRF_SetStopRxTimerOnPreambleDetect(false);
 8000a82:	2000      	movs	r0, #0
 8000a84:	f000 fe66 	bl	8001754 <SUBGRF_SetStopRxTimerOnPreambleDetect>

	SUBGRF_SetPacketType(PACKET_TYPE_LORA);
 8000a88:	2001      	movs	r0, #1
 8000a8a:	f000 ffe3 	bl	8001a54 <SUBGRF_SetPacketType>

	// Sets LoRa private syncword (not the public 0x34). Ensures you only talk to your nodes (not public network).
	SUBGRF_WriteRegister(REG_LR_SYNCWORD, (LORA_MAC_PRIVATE_SYNCWORD >> 8) & 0xFF);
 8000a8e:	2114      	movs	r1, #20
 8000a90:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8000a94:	f001 fad2 	bl	800203c <SUBGRF_WriteRegister>
	SUBGRF_WriteRegister(REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF);
 8000a98:	2124      	movs	r1, #36	@ 0x24
 8000a9a:	f240 7041 	movw	r0, #1857	@ 0x741
 8000a9e:	f001 facd 	bl	800203c <SUBGRF_WriteRegister>

	// Applies SF/BW/CR. Low data rate optimize off (OK for SF7/BW125).
	ModulationParams_t modulationParams;
	modulationParams.PacketType = PACKET_TYPE_LORA;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	713b      	strb	r3, [r7, #4]
	modulationParams.Params.LoRa.Bandwidth = LORA_BANDWIDTH;
 8000aa6:	2304      	movs	r3, #4
 8000aa8:	777b      	strb	r3, [r7, #29]
	modulationParams.Params.LoRa.CodingRate = LORA_CODING_RATE;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	77bb      	strb	r3, [r7, #30]
	modulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	77fb      	strb	r3, [r7, #31]
	modulationParams.Params.LoRa.SpreadingFactor = LORA_SPREADING_FACTOR;
 8000ab2:	2307      	movs	r3, #7
 8000ab4:	773b      	strb	r3, [r7, #28]
	SUBGRF_SetModulationParams(&modulationParams);
 8000ab6:	1d3b      	adds	r3, r7, #4
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f001 f8bf 	bl	8001c3c <SUBGRF_SetModulationParams>

	// CRC on, variable length, normal IQ, long RX FIFO length.
	packetParams.PacketType = PACKET_TYPE_LORA;
 8000abe:	4b15      	ldr	r3, [pc, #84]	@ (8000b14 <Radio_Init+0xd0>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	701a      	strb	r2, [r3, #0]
	packetParams.Params.LoRa.CrcMode = LORA_CRC_ON;
 8000ac4:	4b13      	ldr	r3, [pc, #76]	@ (8000b14 <Radio_Init+0xd0>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	749a      	strb	r2, [r3, #18]
	packetParams.Params.LoRa.HeaderType = LORA_PACKET_VARIABLE_LENGTH;
 8000aca:	4b12      	ldr	r3, [pc, #72]	@ (8000b14 <Radio_Init+0xd0>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	741a      	strb	r2, [r3, #16]
	packetParams.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 8000ad0:	4b10      	ldr	r3, [pc, #64]	@ (8000b14 <Radio_Init+0xd0>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	74da      	strb	r2, [r3, #19]
	packetParams.Params.LoRa.PayloadLength = 0xFF;
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b14 <Radio_Init+0xd0>)
 8000ad8:	22ff      	movs	r2, #255	@ 0xff
 8000ada:	745a      	strb	r2, [r3, #17]
	packetParams.Params.LoRa.PreambleLength = LORA_PREAMBLE_LENGTH;
 8000adc:	4b0d      	ldr	r3, [pc, #52]	@ (8000b14 <Radio_Init+0xd0>)
 8000ade:	2208      	movs	r2, #8
 8000ae0:	81da      	strh	r2, [r3, #14]
	SUBGRF_SetPacketParams(&packetParams);
 8000ae2:	480c      	ldr	r0, [pc, #48]	@ (8000b14 <Radio_Init+0xd0>)
 8000ae4:	f001 f978 	bl	8001dd8 <SUBGRF_SetPacketParams>

	// WORKAROUND - Optimizing the Inverted IQ Operation, see DS_SX1261-2_V1.2 datasheet chapter 15.4
	// RegIqPolaritySetup @address 0x0736
	// SX126x errata: improves IQ handling (safe even with normal IQ).
	SUBGRF_WriteRegister(0x0736, SUBGRF_ReadRegister(0x0736) | (1 << 2));
 8000ae8:	f240 7036 	movw	r0, #1846	@ 0x736
 8000aec:	f001 faba 	bl	8002064 <SUBGRF_ReadRegister>
 8000af0:	4603      	mov	r3, r0
 8000af2:	f043 0304 	orr.w	r3, r3, #4
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	4619      	mov	r1, r3
 8000afa:	f240 7036 	movw	r0, #1846	@ 0x736
 8000afe:	f001 fa9d 	bl	800203c <SUBGRF_WriteRegister>
}
 8000b02:	bf00      	nop
 8000b04:	3720      	adds	r7, #32
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	08000935 	.word	0x08000935
 8000b10:	33bca100 	.word	0x33bca100
 8000b14:	200003ac 	.word	0x200003ac

08000b18 <SUBGRF_Transmit>:

void SUBGRF_Transmit(uint8_t* payload, const uint8_t size){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	460b      	mov	r3, r1
 8000b22:	70fb      	strb	r3, [r7, #3]
	uint16_t mask = IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT;
 8000b24:	f240 2301 	movw	r3, #513	@ 0x201
 8000b28:	81fb      	strh	r3, [r7, #14]
	SUBGRF_SetDioIrqParams(mask, mask, IRQ_RADIO_NONE, IRQ_RADIO_NONE);
 8000b2a:	89f9      	ldrh	r1, [r7, #14]
 8000b2c:	89f8      	ldrh	r0, [r7, #14]
 8000b2e:	2300      	movs	r3, #0
 8000b30:	2200      	movs	r2, #0
 8000b32:	f000 feed 	bl	8001910 <SUBGRF_SetDioIrqParams>
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 8000b36:	2101      	movs	r1, #1
 8000b38:	2001      	movs	r0, #1
 8000b3a:	f001 fb73 	bl	8002224 <SUBGRF_SetSwitch>
	// Workaround 5.1 in DS.SX1261-2.W.APP (before each packet transmission)
	// SX126x errata 5.1: set bit before each TX
	SUBGRF_WriteRegister(0x0889, (SUBGRF_ReadRegister(0x0889) | 0x04));
 8000b3e:	f640 0089 	movw	r0, #2185	@ 0x889
 8000b42:	f001 fa8f 	bl	8002064 <SUBGRF_ReadRegister>
 8000b46:	4603      	mov	r3, r0
 8000b48:	f043 0304 	orr.w	r3, r3, #4
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	4619      	mov	r1, r3
 8000b50:	f640 0089 	movw	r0, #2185	@ 0x889
 8000b54:	f001 fa72 	bl	800203c <SUBGRF_WriteRegister>
	packetParams.Params.LoRa.PayloadLength = size;
 8000b58:	4a07      	ldr	r2, [pc, #28]	@ (8000b78 <SUBGRF_Transmit+0x60>)
 8000b5a:	78fb      	ldrb	r3, [r7, #3]
 8000b5c:	7453      	strb	r3, [r2, #17]
	SUBGRF_SetPacketParams(&packetParams);
 8000b5e:	4806      	ldr	r0, [pc, #24]	@ (8000b78 <SUBGRF_Transmit+0x60>)
 8000b60:	f001 f93a 	bl	8001dd8 <SUBGRF_SetPacketParams>
	SUBGRF_SendPayload(payload, size, 0);
 8000b64:	78fb      	ldrb	r3, [r7, #3]
 8000b66:	2200      	movs	r2, #0
 8000b68:	4619      	mov	r1, r3
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f000 fcfc 	bl	8001568 <SUBGRF_SendPayload>
}
 8000b70:	bf00      	nop
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	200003ac 	.word	0x200003ac

08000b7c <start_TX_mode>:

void start_TX_mode(SessionContext *sessionContext)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
	HAL_Delay(sessionContext->txDelay);						// Delay to allow one to be fixed as Master and the other as slave
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f001 fcdf 	bl	800254c <HAL_Delay>
	sessionContext->subState = TX;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2201      	movs	r2, #1
 8000b92:	705a      	strb	r2, [r3, #1]

	if(messageReady){										// Send Message if ready instead of \\\PING / \\\PONG
 8000b94:	4b14      	ldr	r3, [pc, #80]	@ (8000be8 <start_TX_mode+0x6c>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d016      	beq.n	8000bca <start_TX_mode+0x4e>
		uint8_t size = sprintf(backup, "%s", (char*)output);
 8000b9c:	4a13      	ldr	r2, [pc, #76]	@ (8000bec <start_TX_mode+0x70>)
 8000b9e:	4914      	ldr	r1, [pc, #80]	@ (8000bf0 <start_TX_mode+0x74>)
 8000ba0:	4814      	ldr	r0, [pc, #80]	@ (8000bf4 <start_TX_mode+0x78>)
 8000ba2:	f006 f981 	bl	8006ea8 <siprintf>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	73fb      	strb	r3, [r7, #15]
		backup[size++] = '\0';								// + 1 for last null character
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
 8000bac:	1c5a      	adds	r2, r3, #1
 8000bae:	73fa      	strb	r2, [r7, #15]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4b10      	ldr	r3, [pc, #64]	@ (8000bf4 <start_TX_mode+0x78>)
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	5499      	strb	r1, [r3, r2]
		SUBGRF_Transmit(output, size);
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
 8000bba:	4619      	mov	r1, r3
 8000bbc:	480b      	ldr	r0, [pc, #44]	@ (8000bec <start_TX_mode+0x70>)
 8000bbe:	f7ff ffab 	bl	8000b18 <SUBGRF_Transmit>
		messageReady = false;
 8000bc2:	4b09      	ldr	r3, [pc, #36]	@ (8000be8 <start_TX_mode+0x6c>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
	}else{
		SUBGRF_Transmit((uint8_t*)((sessionContext->state == MASTER)?"\\\\\\PING":"\\\\\\PONG"), 7);
	}
}
 8000bc8:	e00a      	b.n	8000be0 <start_TX_mode+0x64>
		SUBGRF_Transmit((uint8_t*)((sessionContext->state == MASTER)?"\\\\\\PING":"\\\\\\PONG"), 7);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d101      	bne.n	8000bd6 <start_TX_mode+0x5a>
 8000bd2:	4b09      	ldr	r3, [pc, #36]	@ (8000bf8 <start_TX_mode+0x7c>)
 8000bd4:	e000      	b.n	8000bd8 <start_TX_mode+0x5c>
 8000bd6:	4b09      	ldr	r3, [pc, #36]	@ (8000bfc <start_TX_mode+0x80>)
 8000bd8:	2107      	movs	r1, #7
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff ff9c 	bl	8000b18 <SUBGRF_Transmit>
}
 8000be0:	bf00      	nop
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	200002a4 	.word	0x200002a4
 8000bec:	200001a0 	.word	0x200001a0
 8000bf0:	08007854 	.word	0x08007854
 8000bf4:	200002a8 	.word	0x200002a8
 8000bf8:	080078b0 	.word	0x080078b0
 8000bfc:	080078b8 	.word	0x080078b8

08000c00 <start_RX_mode>:

void start_RX_mode(SessionContext *sessionContext){
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
	sessionContext->subState = RX;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	705a      	strb	r2, [r3, #1]

	uint16_t mask = IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR;
 8000c0e:	f240 2362 	movw	r3, #610	@ 0x262
 8000c12:	81fb      	strh	r3, [r7, #14]
	// Arm radio IRQs for RX done, timeout, CRC error
	SUBGRF_SetDioIrqParams(mask, mask, IRQ_RADIO_NONE, IRQ_RADIO_NONE);
 8000c14:	89f9      	ldrh	r1, [r7, #14]
 8000c16:	89f8      	ldrh	r0, [r7, #14]
 8000c18:	2300      	movs	r3, #0
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f000 fe78 	bl	8001910 <SUBGRF_SetDioIrqParams>
	// Set RF switch to RX path on low-power PA path
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 8000c20:	2100      	movs	r1, #0
 8000c22:	2001      	movs	r0, #1
 8000c24:	f001 fafe 	bl	8002224 <SUBGRF_SetSwitch>

	packetParams.Params.LoRa.PayloadLength = 0xFF;	// Maximum Length
 8000c28:	4b07      	ldr	r3, [pc, #28]	@ (8000c48 <start_RX_mode+0x48>)
 8000c2a:	22ff      	movs	r2, #255	@ 0xff
 8000c2c:	745a      	strb	r2, [r3, #17]
	SUBGRF_SetPacketParams(&packetParams);
 8000c2e:	4806      	ldr	r0, [pc, #24]	@ (8000c48 <start_RX_mode+0x48>)
 8000c30:	f001 f8d2 	bl	8001dd8 <SUBGRF_SetPacketParams>
	// SetRx(timeout): SX126x timeout units are 15.625 µs (1/64 ms). Multiplying ms by 64 = << 6.
	SUBGRF_SetRx(sessionContext->rxTimeout << 6);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	019b      	lsls	r3, r3, #6
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 fd6a 	bl	8001714 <SUBGRF_SetRx>
}
 8000c40:	bf00      	nop
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	200003ac 	.word	0x200003ac

08000c4c <timeout_error_event>:

/** MASTER/RX CRC/header error → treat like “no valid frame” and attempt TX "PING" after random backoff.
  * SLAVE/RX → simply re-enter RX.
  */
void timeout_error_event(SessionContext *sessionContext){
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
	if(sessionContext->state == MASTER){
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d103      	bne.n	8000c64 <timeout_error_event+0x18>
		start_TX_mode(sessionContext);
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f7ff ff8d 	bl	8000b7c <start_TX_mode>
	}else{
		start_RX_mode(sessionContext);
	}
}
 8000c62:	e002      	b.n	8000c6a <timeout_error_event+0x1e>
		start_RX_mode(sessionContext);
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f7ff ffcb 	bl	8000c00 <start_RX_mode>
}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <RX_done_event>:

void RX_done_event(SessionContext *sessionContext){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	@ 0x28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	// Initialize with MASTER values
	Led_TypeDef desiredLED = LED_BLUE, undesiredLED = LED_GREEN;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000c82:	2301      	movs	r3, #1
 8000c84:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	char desiredChar = 'O';
 8000c88:	234f      	movs	r3, #79	@ 0x4f
 8000c8a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	PacketStatus_t packetStatus;

	// Workaround 15.3 in DS.SX1261-2.W.APP (following RX w/ timeout sequence fix)
	SUBGRF_WriteRegister(0x0920, 0x00);
 8000c8e:	2100      	movs	r1, #0
 8000c90:	f44f 6012 	mov.w	r0, #2336	@ 0x920
 8000c94:	f001 f9d2 	bl	800203c <SUBGRF_WriteRegister>
	SUBGRF_WriteRegister(0x0944, (SUBGRF_ReadRegister(0x0944) | 0x02));
 8000c98:	f640 1044 	movw	r0, #2372	@ 0x944
 8000c9c:	f001 f9e2 	bl	8002064 <SUBGRF_ReadRegister>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	f043 0302 	orr.w	r3, r3, #2
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f640 1044 	movw	r0, #2372	@ 0x944
 8000cae:	f001 f9c5 	bl	800203c <SUBGRF_WriteRegister>

	SUBGRF_GetPayload((uint8_t *)sessionContext->rxBuffer, &sessionContext->rxLen, 0xFF);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	f103 000d 	add.w	r0, r3, #13
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	330c      	adds	r3, #12
 8000cbc:	22ff      	movs	r2, #255	@ 0xff
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	f000 fc30 	bl	8001524 <SUBGRF_GetPayload>
	SUBGRF_GetPacketStatus(&packetStatus);
 8000cc4:	f107 030c 	add.w	r3, r7, #12
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f001 f965 	bl	8001f98 <SUBGRF_GetPacketStatus>

	if(sessionContext->state == SLAVE){
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d108      	bne.n	8000ce8 <RX_done_event+0x74>
		desiredChar = 'I';
 8000cd6:	2349      	movs	r3, #73	@ 0x49
 8000cd8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		desiredLED = LED_GREEN;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		undesiredLED = LED_BLUE;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	}

	if ((sessionContext->rxBuffer[0] == '\\') && (sessionContext->rxBuffer[1] == '\\') && (sessionContext->rxBuffer[2] == '\\')){
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	7b5b      	ldrb	r3, [r3, #13]
 8000cec:	2b5c      	cmp	r3, #92	@ 0x5c
 8000cee:	d135      	bne.n	8000d5c <RX_done_event+0xe8>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	7b9b      	ldrb	r3, [r3, #14]
 8000cf4:	2b5c      	cmp	r3, #92	@ 0x5c
 8000cf6:	d131      	bne.n	8000d5c <RX_done_event+0xe8>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	7bdb      	ldrb	r3, [r3, #15]
 8000cfc:	2b5c      	cmp	r3, #92	@ 0x5c
 8000cfe:	d12d      	bne.n	8000d5c <RX_done_event+0xe8>
		if(sessionContext->rxBuffer[4] == desiredChar){
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	7c5b      	ldrb	r3, [r3, #17]
 8000d04:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d10d      	bne.n	8000d28 <RX_done_event+0xb4>
			BSP_LED_Off(undesiredLED);
 8000d0c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000d10:	4618      	mov	r0, r3
 8000d12:	f000 fa5f 	bl	80011d4 <BSP_LED_Off>
			BSP_LED_Toggle(desiredLED);
 8000d16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f000 fa74 	bl	8001208 <BSP_LED_Toggle>
			start_TX_mode(sessionContext);
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff ff2b 	bl	8000b7c <start_TX_mode>
 8000d26:	e021      	b.n	8000d6c <RX_done_event+0xf8>
			return;
		}
		else if(sessionContext->rxBuffer[4] == '\0'){
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	7c5b      	ldrb	r3, [r3, #17]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d111      	bne.n	8000d54 <RX_done_event+0xe0>
			interruptTerminal("TX CRC Error");
 8000d30:	4810      	ldr	r0, [pc, #64]	@ (8000d74 <RX_done_event+0x100>)
 8000d32:	f7ff fd6d 	bl	8000810 <interruptTerminal>
			int size = sprintf((char*)output, "%s", backup);
 8000d36:	4a10      	ldr	r2, [pc, #64]	@ (8000d78 <RX_done_event+0x104>)
 8000d38:	4910      	ldr	r1, [pc, #64]	@ (8000d7c <RX_done_event+0x108>)
 8000d3a:	4811      	ldr	r0, [pc, #68]	@ (8000d80 <RX_done_event+0x10c>)
 8000d3c:	f006 f8b4 	bl	8006ea8 <siprintf>
 8000d40:	6238      	str	r0, [r7, #32]
			output[size] = '\0';
 8000d42:	4a0f      	ldr	r2, [pc, #60]	@ (8000d80 <RX_done_event+0x10c>)
 8000d44:	6a3b      	ldr	r3, [r7, #32]
 8000d46:	4413      	add	r3, r2
 8000d48:	2200      	movs	r2, #0
 8000d4a:	701a      	strb	r2, [r3, #0]
			messageReady = true;
 8000d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d84 <RX_done_event+0x110>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	701a      	strb	r2, [r3, #0]
		if(sessionContext->rxBuffer[4] == desiredChar){
 8000d52:	e008      	b.n	8000d66 <RX_done_event+0xf2>
		}else{								// unDesired char
			sessionContext->state = SLAVE;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2201      	movs	r2, #1
 8000d58:	701a      	strb	r2, [r3, #0]
		if(sessionContext->rxBuffer[4] == desiredChar){
 8000d5a:	e004      	b.n	8000d66 <RX_done_event+0xf2>
		}
	}else{
		interruptTerminal(sessionContext->rxBuffer);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	330d      	adds	r3, #13
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fd55 	bl	8000810 <interruptTerminal>
	}
	start_RX_mode(sessionContext);
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff ff4a 	bl	8000c00 <start_RX_mode>
}
 8000d6c:	3728      	adds	r7, #40	@ 0x28
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	080078c0 	.word	0x080078c0
 8000d78:	200002a8 	.word	0x200002a8
 8000d7c:	08007854 	.word	0x08007854
 8000d80:	200001a0 	.word	0x200001a0
 8000d84:	200002a4 	.word	0x200002a4

08000d88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d8c:	b672      	cpsid	i
}
 8000d8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <Error_Handler+0x8>

08000d94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr

08000da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <NMI_Handler+0x4>

08000da8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <HardFault_Handler+0x4>

08000db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <MemManage_Handler+0x4>

08000db8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <BusFault_Handler+0x4>

08000dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <UsageFault_Handler+0x4>

08000dc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc80      	pop	{r7}
 8000dd2:	4770      	bx	lr

08000dd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr

08000de0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr

08000dec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df0:	f001 fb90 	bl	8002514 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000dfc:	4802      	ldr	r0, [pc, #8]	@ (8000e08 <USART2_IRQHandler+0x10>)
 8000dfe:	f004 f88f 	bl	8004f20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	200003d0 	.word	0x200003d0

08000e0c <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000e10:	4802      	ldr	r0, [pc, #8]	@ (8000e1c <SUBGHZ_Radio_IRQHandler+0x10>)
 8000e12:	f003 fd93 	bl	800493c <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	200003c0 	.word	0x200003c0

08000e20 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000e28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e2c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000e2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000e38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e3c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4013      	ands	r3, r2
 8000e42:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e44:	68fb      	ldr	r3, [r7, #12]
}
 8000e46:	bf00      	nop
 8000e48:	3714      	adds	r7, #20
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr

08000e50 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8000e54:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <MX_SUBGHZ_Init+0x20>)
 8000e56:	2208      	movs	r2, #8
 8000e58:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8000e5a:	4805      	ldr	r0, [pc, #20]	@ (8000e70 <MX_SUBGHZ_Init+0x20>)
 8000e5c:	f003 faec 	bl	8004438 <HAL_SUBGHZ_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8000e66:	f7ff ff8f 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200003c0 	.word	0x200003c0

08000e74 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	f7ff ffcf 	bl	8000e20 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2100      	movs	r1, #0
 8000e86:	2032      	movs	r0, #50	@ 0x32
 8000e88:	f001 fc7f 	bl	800278a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000e8c:	2032      	movs	r0, #50	@ 0x32
 8000e8e:	f001 fc96 	bl	80027be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea4:	4a14      	ldr	r2, [pc, #80]	@ (8000ef8 <_sbrk+0x5c>)
 8000ea6:	4b15      	ldr	r3, [pc, #84]	@ (8000efc <_sbrk+0x60>)
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb0:	4b13      	ldr	r3, [pc, #76]	@ (8000f00 <_sbrk+0x64>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d102      	bne.n	8000ebe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	@ (8000f00 <_sbrk+0x64>)
 8000eba:	4a12      	ldr	r2, [pc, #72]	@ (8000f04 <_sbrk+0x68>)
 8000ebc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ebe:	4b10      	ldr	r3, [pc, #64]	@ (8000f00 <_sbrk+0x64>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d207      	bcs.n	8000edc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ecc:	f006 f816 	bl	8006efc <__errno>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	220c      	movs	r2, #12
 8000ed4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eda:	e009      	b.n	8000ef0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000edc:	4b08      	ldr	r3, [pc, #32]	@ (8000f00 <_sbrk+0x64>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ee2:	4b07      	ldr	r3, [pc, #28]	@ (8000f00 <_sbrk+0x64>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	4a05      	ldr	r2, [pc, #20]	@ (8000f00 <_sbrk+0x64>)
 8000eec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eee:	68fb      	ldr	r3, [r7, #12]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20010000 	.word	0x20010000
 8000efc:	00000400 	.word	0x00000400
 8000f00:	200003cc 	.word	0x200003cc
 8000f04:	200005c0 	.word	0x200005c0

08000f08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr

08000f14 <LL_AHB2_GRP1_EnableClock>:
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f20:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000f22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f30:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4013      	ands	r3, r2
 8000f36:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f38:	68fb      	ldr	r3, [r7, #12]
}
 8000f3a:	bf00      	nop
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr

08000f44 <LL_APB1_GRP1_EnableClock>:
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000f4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f50:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000f52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000f5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f60:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4013      	ands	r3, r2
 8000f66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f68:	68fb      	ldr	r3, [r7, #12]
}
 8000f6a:	bf00      	nop
 8000f6c:	3714      	adds	r7, #20
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr

08000f74 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f78:	4b22      	ldr	r3, [pc, #136]	@ (8001004 <MX_USART2_UART_Init+0x90>)
 8000f7a:	4a23      	ldr	r2, [pc, #140]	@ (8001008 <MX_USART2_UART_Init+0x94>)
 8000f7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f7e:	4b21      	ldr	r3, [pc, #132]	@ (8001004 <MX_USART2_UART_Init+0x90>)
 8000f80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f86:	4b1f      	ldr	r3, [pc, #124]	@ (8001004 <MX_USART2_UART_Init+0x90>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001004 <MX_USART2_UART_Init+0x90>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f92:	4b1c      	ldr	r3, [pc, #112]	@ (8001004 <MX_USART2_UART_Init+0x90>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f98:	4b1a      	ldr	r3, [pc, #104]	@ (8001004 <MX_USART2_UART_Init+0x90>)
 8000f9a:	220c      	movs	r2, #12
 8000f9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f9e:	4b19      	ldr	r3, [pc, #100]	@ (8001004 <MX_USART2_UART_Init+0x90>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa4:	4b17      	ldr	r3, [pc, #92]	@ (8001004 <MX_USART2_UART_Init+0x90>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000faa:	4b16      	ldr	r3, [pc, #88]	@ (8001004 <MX_USART2_UART_Init+0x90>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fb0:	4b14      	ldr	r3, [pc, #80]	@ (8001004 <MX_USART2_UART_Init+0x90>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fb6:	4b13      	ldr	r3, [pc, #76]	@ (8001004 <MX_USART2_UART_Init+0x90>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fbc:	4811      	ldr	r0, [pc, #68]	@ (8001004 <MX_USART2_UART_Init+0x90>)
 8000fbe:	f003 fe8c 	bl	8004cda <HAL_UART_Init>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000fc8:	f7ff fede 	bl	8000d88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fcc:	2100      	movs	r1, #0
 8000fce:	480d      	ldr	r0, [pc, #52]	@ (8001004 <MX_USART2_UART_Init+0x90>)
 8000fd0:	f005 fe4f 	bl	8006c72 <HAL_UARTEx_SetTxFifoThreshold>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000fda:	f7ff fed5 	bl	8000d88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4808      	ldr	r0, [pc, #32]	@ (8001004 <MX_USART2_UART_Init+0x90>)
 8000fe2:	f005 fe84 	bl	8006cee <HAL_UARTEx_SetRxFifoThreshold>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000fec:	f7ff fecc 	bl	8000d88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ff0:	4804      	ldr	r0, [pc, #16]	@ (8001004 <MX_USART2_UART_Init+0x90>)
 8000ff2:	f005 fe06 	bl	8006c02 <HAL_UARTEx_DisableFifoMode>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ffc:	f7ff fec4 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}
 8001004:	200003d0 	.word	0x200003d0
 8001008:	40004400 	.word	0x40004400

0800100c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b096      	sub	sp, #88	@ 0x58
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	2238      	movs	r2, #56	@ 0x38
 800102a:	2100      	movs	r1, #0
 800102c:	4618      	mov	r0, r3
 800102e:	f005 ff5d 	bl	8006eec <memset>
  if(uartHandle->Instance==USART2)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a1b      	ldr	r2, [pc, #108]	@ (80010a4 <HAL_UART_MspInit+0x98>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d12e      	bne.n	800109a <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800103c:	2302      	movs	r3, #2
 800103e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001040:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8001044:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	4618      	mov	r0, r3
 800104c:	f003 f840 	bl	80040d0 <HAL_RCCEx_PeriphCLKConfig>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001056:	f7ff fe97 	bl	8000d88 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800105a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800105e:	f7ff ff71 	bl	8000f44 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	2001      	movs	r0, #1
 8001064:	f7ff ff56 	bl	8000f14 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8001068:	230c      	movs	r3, #12
 800106a:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	2302      	movs	r3, #2
 800106e:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001078:	2307      	movs	r3, #7
 800107a:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001080:	4619      	mov	r1, r3
 8001082:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001086:	f001 fc7f 	bl	8002988 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	2100      	movs	r1, #0
 800108e:	2025      	movs	r0, #37	@ 0x25
 8001090:	f001 fb7b 	bl	800278a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001094:	2025      	movs	r0, #37	@ 0x25
 8001096:	f001 fb92 	bl	80027be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800109a:	bf00      	nop
 800109c:	3758      	adds	r7, #88	@ 0x58
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40004400 	.word	0x40004400

080010a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010a8:	480d      	ldr	r0, [pc, #52]	@ (80010e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010aa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010ac:	f7ff ff2c 	bl	8000f08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010b0:	480c      	ldr	r0, [pc, #48]	@ (80010e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80010b2:	490d      	ldr	r1, [pc, #52]	@ (80010e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010b4:	4a0d      	ldr	r2, [pc, #52]	@ (80010ec <LoopForever+0xe>)
  movs r3, #0
 80010b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b8:	e002      	b.n	80010c0 <LoopCopyDataInit>

080010ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010be:	3304      	adds	r3, #4

080010c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c4:	d3f9      	bcc.n	80010ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010c6:	4a0a      	ldr	r2, [pc, #40]	@ (80010f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010c8:	4c0a      	ldr	r4, [pc, #40]	@ (80010f4 <LoopForever+0x16>)
  movs r3, #0
 80010ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010cc:	e001      	b.n	80010d2 <LoopFillZerobss>

080010ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d0:	3204      	adds	r2, #4

080010d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d4:	d3fb      	bcc.n	80010ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010d6:	f005 ff17 	bl	8006f08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010da:	f7ff fa7f 	bl	80005dc <main>

080010de <LoopForever>:

LoopForever:
    b LoopForever
 80010de:	e7fe      	b.n	80010de <LoopForever>
  ldr   r0, =_estack
 80010e0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80010e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e8:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80010ec:	08007a00 	.word	0x08007a00
  ldr r2, =_sbss
 80010f0:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80010f4:	200005c0 	.word	0x200005c0

080010f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010f8:	e7fe      	b.n	80010f8 <ADC_IRQHandler>

080010fa <LL_AHB2_GRP1_EnableClock>:
{
 80010fa:	b480      	push	{r7}
 80010fc:	b085      	sub	sp, #20
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001102:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001106:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001108:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4313      	orrs	r3, r2
 8001110:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001112:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001116:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4013      	ands	r3, r2
 800111c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800111e:	68fb      	ldr	r3, [r7, #12]
}
 8001120:	bf00      	nop
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	bc80      	pop	{r7}
 8001128:	4770      	bx	lr
	...

0800112c <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8001136:	f107 030c 	add.w	r3, r7, #12
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
 8001144:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001146:	2002      	movs	r0, #2
 8001148:	f7ff ffd7 	bl	80010fa <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	4a12      	ldr	r2, [pc, #72]	@ (8001198 <BSP_LED_Init+0x6c>)
 8001150:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001154:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001156:	2301      	movs	r3, #1
 8001158:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800115e:	2302      	movs	r3, #2
 8001160:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	4a0d      	ldr	r2, [pc, #52]	@ (800119c <BSP_LED_Init+0x70>)
 8001166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800116a:	f107 020c 	add.w	r2, r7, #12
 800116e:	4611      	mov	r1, r2
 8001170:	4618      	mov	r0, r3
 8001172:	f001 fc09 	bl	8002988 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	4a08      	ldr	r2, [pc, #32]	@ (800119c <BSP_LED_Init+0x70>)
 800117a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	4a05      	ldr	r2, [pc, #20]	@ (8001198 <BSP_LED_Init+0x6c>)
 8001182:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001186:	2200      	movs	r2, #0
 8001188:	4619      	mov	r1, r3
 800118a:	f001 fd5d 	bl	8002c48 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800118e:	2300      	movs	r3, #0
}
 8001190:	4618      	mov	r0, r3
 8001192:	3720      	adds	r7, #32
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	0800798c 	.word	0x0800798c
 800119c:	20000020 	.word	0x20000020

080011a0 <BSP_LED_On>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	4a07      	ldr	r2, [pc, #28]	@ (80011cc <BSP_LED_On+0x2c>)
 80011ae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	4a06      	ldr	r2, [pc, #24]	@ (80011d0 <BSP_LED_On+0x30>)
 80011b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011ba:	2201      	movs	r2, #1
 80011bc:	4619      	mov	r1, r3
 80011be:	f001 fd43 	bl	8002c48 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80011c2:	2300      	movs	r3, #0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000020 	.word	0x20000020
 80011d0:	0800798c 	.word	0x0800798c

080011d4 <BSP_LED_Off>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	4a07      	ldr	r2, [pc, #28]	@ (8001200 <BSP_LED_Off+0x2c>)
 80011e2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	4a06      	ldr	r2, [pc, #24]	@ (8001204 <BSP_LED_Off+0x30>)
 80011ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011ee:	2200      	movs	r2, #0
 80011f0:	4619      	mov	r1, r3
 80011f2:	f001 fd29 	bl	8002c48 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000020 	.word	0x20000020
 8001204:	0800798c 	.word	0x0800798c

08001208 <BSP_LED_Toggle>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	4a07      	ldr	r2, [pc, #28]	@ (8001234 <BSP_LED_Toggle+0x2c>)
 8001216:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	4906      	ldr	r1, [pc, #24]	@ (8001238 <BSP_LED_Toggle+0x30>)
 800121e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001222:	4619      	mov	r1, r3
 8001224:	4610      	mov	r0, r2
 8001226:	f001 fd26 	bl	8002c76 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 800122a:	2300      	movs	r3, #0
}
 800122c:	4618      	mov	r0, r3
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000020 	.word	0x20000020
 8001238:	0800798c 	.word	0x0800798c

0800123c <LL_AHB2_GRP1_EnableClock>:
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001244:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001248:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800124a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4313      	orrs	r3, r2
 8001252:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001254:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001258:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4013      	ands	r3, r2
 800125e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001260:	68fb      	ldr	r3, [r7, #12]
}
 8001262:	bf00      	nop
 8001264:	3714      	adds	r7, #20
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr

0800126c <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 8001280:	2004      	movs	r0, #4
 8001282:	f7ff ffdb 	bl	800123c <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8001286:	2310      	movs	r3, #16
 8001288:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800128a:	2301      	movs	r3, #1
 800128c:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001292:	2303      	movs	r3, #3
 8001294:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	4619      	mov	r1, r3
 800129a:	4812      	ldr	r0, [pc, #72]	@ (80012e4 <BSP_RADIO_Init+0x78>)
 800129c:	f001 fb74 	bl	8002988 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80012a0:	2320      	movs	r3, #32
 80012a2:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	4619      	mov	r1, r3
 80012a8:	480e      	ldr	r0, [pc, #56]	@ (80012e4 <BSP_RADIO_Init+0x78>)
 80012aa:	f001 fb6d 	bl	8002988 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 80012ae:	2308      	movs	r3, #8
 80012b0:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	4619      	mov	r1, r3
 80012b6:	480b      	ldr	r0, [pc, #44]	@ (80012e4 <BSP_RADIO_Init+0x78>)
 80012b8:	f001 fb66 	bl	8002988 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80012bc:	2200      	movs	r2, #0
 80012be:	2120      	movs	r1, #32
 80012c0:	4808      	ldr	r0, [pc, #32]	@ (80012e4 <BSP_RADIO_Init+0x78>)
 80012c2:	f001 fcc1 	bl	8002c48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80012c6:	2200      	movs	r2, #0
 80012c8:	2110      	movs	r1, #16
 80012ca:	4806      	ldr	r0, [pc, #24]	@ (80012e4 <BSP_RADIO_Init+0x78>)
 80012cc:	f001 fcbc 	bl	8002c48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 80012d0:	2200      	movs	r2, #0
 80012d2:	2108      	movs	r1, #8
 80012d4:	4803      	ldr	r0, [pc, #12]	@ (80012e4 <BSP_RADIO_Init+0x78>)
 80012d6:	f001 fcb7 	bl	8002c48 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80012da:	2300      	movs	r3, #0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	48000800 	.word	0x48000800

080012e8 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	2b03      	cmp	r3, #3
 80012f6:	d84b      	bhi.n	8001390 <BSP_RADIO_ConfigRFSwitch+0xa8>
 80012f8:	a201      	add	r2, pc, #4	@ (adr r2, 8001300 <BSP_RADIO_ConfigRFSwitch+0x18>)
 80012fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012fe:	bf00      	nop
 8001300:	08001311 	.word	0x08001311
 8001304:	08001331 	.word	0x08001331
 8001308:	08001351 	.word	0x08001351
 800130c:	08001371 	.word	0x08001371
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	2108      	movs	r1, #8
 8001314:	4821      	ldr	r0, [pc, #132]	@ (800139c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001316:	f001 fc97 	bl	8002c48 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	2110      	movs	r1, #16
 800131e:	481f      	ldr	r0, [pc, #124]	@ (800139c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001320:	f001 fc92 	bl	8002c48 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8001324:	2200      	movs	r2, #0
 8001326:	2120      	movs	r1, #32
 8001328:	481c      	ldr	r0, [pc, #112]	@ (800139c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800132a:	f001 fc8d 	bl	8002c48 <HAL_GPIO_WritePin>
      break;      
 800132e:	e030      	b.n	8001392 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001330:	2201      	movs	r2, #1
 8001332:	2108      	movs	r1, #8
 8001334:	4819      	ldr	r0, [pc, #100]	@ (800139c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001336:	f001 fc87 	bl	8002c48 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800133a:	2201      	movs	r2, #1
 800133c:	2110      	movs	r1, #16
 800133e:	4817      	ldr	r0, [pc, #92]	@ (800139c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001340:	f001 fc82 	bl	8002c48 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001344:	2200      	movs	r2, #0
 8001346:	2120      	movs	r1, #32
 8001348:	4814      	ldr	r0, [pc, #80]	@ (800139c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800134a:	f001 fc7d 	bl	8002c48 <HAL_GPIO_WritePin>
      break;
 800134e:	e020      	b.n	8001392 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001350:	2201      	movs	r2, #1
 8001352:	2108      	movs	r1, #8
 8001354:	4811      	ldr	r0, [pc, #68]	@ (800139c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001356:	f001 fc77 	bl	8002c48 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800135a:	2201      	movs	r2, #1
 800135c:	2110      	movs	r1, #16
 800135e:	480f      	ldr	r0, [pc, #60]	@ (800139c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001360:	f001 fc72 	bl	8002c48 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8001364:	2201      	movs	r2, #1
 8001366:	2120      	movs	r1, #32
 8001368:	480c      	ldr	r0, [pc, #48]	@ (800139c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800136a:	f001 fc6d 	bl	8002c48 <HAL_GPIO_WritePin>
      break;
 800136e:	e010      	b.n	8001392 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001370:	2201      	movs	r2, #1
 8001372:	2108      	movs	r1, #8
 8001374:	4809      	ldr	r0, [pc, #36]	@ (800139c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001376:	f001 fc67 	bl	8002c48 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800137a:	2200      	movs	r2, #0
 800137c:	2110      	movs	r1, #16
 800137e:	4807      	ldr	r0, [pc, #28]	@ (800139c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001380:	f001 fc62 	bl	8002c48 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8001384:	2201      	movs	r2, #1
 8001386:	2120      	movs	r1, #32
 8001388:	4804      	ldr	r0, [pc, #16]	@ (800139c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800138a:	f001 fc5d 	bl	8002c48 <HAL_GPIO_WritePin>
      break;
 800138e:	e000      	b.n	8001392 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    default:
      break;    
 8001390:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8001392:	2300      	movs	r3, #0
}
 8001394:	4618      	mov	r0, r3
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	48000800 	.word	0x48000800

080013a0 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr

080013ae <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 80013b2:	2301      	movs	r3, #1
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr

080013bc <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 80013c0:	2301      	movs	r3, #1
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr

080013ca <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b085      	sub	sp, #20
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	4603      	mov	r3, r0
 80013d2:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d102      	bne.n	80013e0 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 80013da:	230f      	movs	r3, #15
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	e001      	b.n	80013e4 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 80013e0:	2316      	movs	r3, #22
 80013e2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80013e4:	68fb      	ldr	r3, [r7, #12]
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3714      	adds	r7, #20
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr

080013f0 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 80013f4:	f7ff ff3a 	bl	800126c <BSP_RADIO_Init>
 80013f8:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	bd80      	pop	{r7, pc}

080013fe <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	4603      	mov	r3, r0
 8001406:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff ff6c 	bl	80012e8 <BSP_RADIO_ConfigRFSwitch>
 8001410:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800141e:	f7ff ffbf 	bl	80013a0 <BSP_RADIO_GetTxConfig>
 8001422:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8001424:	4618      	mov	r0, r3
 8001426:	bd80      	pop	{r7, pc}

08001428 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800142c:	f7ff ffbf 	bl	80013ae <BSP_RADIO_IsTCXO>
 8001430:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001432:	4618      	mov	r0, r3
 8001434:	bd80      	pop	{r7, pc}

08001436 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800143a:	f7ff ffbf 	bl	80013bc <BSP_RADIO_IsDCDC>
 800143e:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001440:	4618      	mov	r0, r3
 8001442:	bd80      	pop	{r7, pc}

08001444 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff ffba 	bl	80013ca <BSP_RADIO_GetRFOMaxPowerConfig>
 8001456:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8001458:	4618      	mov	r0, r3
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d002      	beq.n	8001474 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 800146e:	4a1d      	ldr	r2, [pc, #116]	@ (80014e4 <SUBGRF_Init+0x84>)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8001474:	f7ff fcec 	bl	8000e50 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8001478:	2002      	movs	r0, #2
 800147a:	f000 ffcf 	bl	800241c <Radio_SMPS_Set>

    ImageCalibrated = false;
 800147e:	4b1a      	ldr	r3, [pc, #104]	@ (80014e8 <SUBGRF_Init+0x88>)
 8001480:	2200      	movs	r2, #0
 8001482:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8001484:	2000      	movs	r0, #0
 8001486:	f000 f909 	bl	800169c <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 800148a:	f7ff ffcd 	bl	8001428 <RBI_IsTCXO>
 800148e:	4603      	mov	r3, r0
 8001490:	2b01      	cmp	r3, #1
 8001492:	d10e      	bne.n	80014b2 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8001494:	2140      	movs	r1, #64	@ 0x40
 8001496:	2001      	movs	r0, #1
 8001498:	f000 fa74 	bl	8001984 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 800149c:	2100      	movs	r1, #0
 800149e:	f640 1011 	movw	r0, #2321	@ 0x911
 80014a2:	f000 fdcb 	bl	800203c <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 80014a6:	237f      	movs	r3, #127	@ 0x7f
 80014a8:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 80014aa:	7b38      	ldrb	r0, [r7, #12]
 80014ac:	f000 f978 	bl	80017a0 <SUBGRF_Calibrate>
 80014b0:	e009      	b.n	80014c6 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80014b2:	2120      	movs	r1, #32
 80014b4:	f640 1011 	movw	r0, #2321	@ 0x911
 80014b8:	f000 fdc0 	bl	800203c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80014bc:	2120      	movs	r1, #32
 80014be:	f640 1012 	movw	r0, #2322	@ 0x912
 80014c2:	f000 fdbb 	bl	800203c <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80014c6:	210e      	movs	r1, #14
 80014c8:	f640 101f 	movw	r0, #2335	@ 0x91f
 80014cc:	f000 fdb6 	bl	800203c <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 80014d0:	f7ff ff8e 	bl	80013f0 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 80014d4:	4b05      	ldr	r3, [pc, #20]	@ (80014ec <SUBGRF_Init+0x8c>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	701a      	strb	r2, [r3, #0]
}
 80014da:	bf00      	nop
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000470 	.word	0x20000470
 80014e8:	2000046c 	.word	0x2000046c
 80014ec:	20000464 	.word	0x20000464

080014f0 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
    return OperatingMode;
 80014f4:	4b02      	ldr	r3, [pc, #8]	@ (8001500 <SUBGRF_GetOperatingMode+0x10>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr
 8001500:	20000464 	.word	0x20000464

08001504 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	460b      	mov	r3, r1
 800150e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8001510:	78fb      	ldrb	r3, [r7, #3]
 8001512:	461a      	mov	r2, r3
 8001514:	6879      	ldr	r1, [r7, #4]
 8001516:	2000      	movs	r0, #0
 8001518:	f000 fdfc 	bl	8002114 <SUBGRF_WriteBuffer>
}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	4613      	mov	r3, r2
 8001530:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8001536:	f107 0317 	add.w	r3, r7, #23
 800153a:	4619      	mov	r1, r3
 800153c:	68b8      	ldr	r0, [r7, #8]
 800153e:	f000 fcff 	bl	8001f40 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	79fa      	ldrb	r2, [r7, #7]
 8001548:	429a      	cmp	r2, r3
 800154a:	d201      	bcs.n	8001550 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 800154c:	2301      	movs	r3, #1
 800154e:	e007      	b.n	8001560 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8001550:	7df8      	ldrb	r0, [r7, #23]
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	461a      	mov	r2, r3
 8001558:	68f9      	ldr	r1, [r7, #12]
 800155a:	f000 fdfd 	bl	8002158 <SUBGRF_ReadBuffer>

    return 0;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	460b      	mov	r3, r1
 8001572:	607a      	str	r2, [r7, #4]
 8001574:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8001576:	7afb      	ldrb	r3, [r7, #11]
 8001578:	4619      	mov	r1, r3
 800157a:	68f8      	ldr	r0, [r7, #12]
 800157c:	f7ff ffc2 	bl	8001504 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f000 f8a7 	bl	80016d4 <SUBGRF_SetTx>
}
 8001586:	bf00      	nop
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <SUBGRF_SetCrcSeed>:
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
    return 0;
}

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b084      	sub	sp, #16
 8001592:	af00      	add	r7, sp, #0
 8001594:	4603      	mov	r3, r0
 8001596:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8001598:	88fb      	ldrh	r3, [r7, #6]
 800159a:	0a1b      	lsrs	r3, r3, #8
 800159c:	b29b      	uxth	r3, r3
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80015a2:	88fb      	ldrh	r3, [r7, #6]
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80015a8:	f000 fa70 	bl	8001a8c <SUBGRF_GetPacketType>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d108      	bne.n	80015c4 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80015b2:	f107 030c 	add.w	r3, r7, #12
 80015b6:	2202      	movs	r2, #2
 80015b8:	4619      	mov	r1, r3
 80015ba:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 80015be:	f000 fd65 	bl	800208c <SUBGRF_WriteRegisters>
            break;
 80015c2:	e000      	b.n	80015c6 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 80015c4:	bf00      	nop
    }
}
 80015c6:	bf00      	nop
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b084      	sub	sp, #16
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	4603      	mov	r3, r0
 80015d6:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80015d8:	88fb      	ldrh	r3, [r7, #6]
 80015da:	0a1b      	lsrs	r3, r3, #8
 80015dc:	b29b      	uxth	r3, r3
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 80015e2:	88fb      	ldrh	r3, [r7, #6]
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80015e8:	f000 fa50 	bl	8001a8c <SUBGRF_GetPacketType>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d108      	bne.n	8001604 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 80015f2:	f107 030c 	add.w	r3, r7, #12
 80015f6:	2202      	movs	r2, #2
 80015f8:	4619      	mov	r1, r3
 80015fa:	f240 60be 	movw	r0, #1726	@ 0x6be
 80015fe:	f000 fd45 	bl	800208c <SUBGRF_WriteRegisters>
            break;
 8001602:	e000      	b.n	8001606 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8001604:	bf00      	nop
    }
}
 8001606:	bf00      	nop
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <SUBGRF_GetRandom>:
            break;
    }
}

uint32_t SUBGRF_GetRandom( void )
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8001620:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8001624:	f000 fd1e 	bl	8002064 <SUBGRF_ReadRegister>
 8001628:	4603      	mov	r3, r0
 800162a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	f023 0301 	bic.w	r3, r3, #1
 8001632:	b2db      	uxtb	r3, r3
 8001634:	4619      	mov	r1, r3
 8001636:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800163a:	f000 fcff 	bl	800203c <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800163e:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8001642:	f000 fd0f 	bl	8002064 <SUBGRF_ReadRegister>
 8001646:	4603      	mov	r3, r0
 8001648:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800164a:	79bb      	ldrb	r3, [r7, #6]
 800164c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001650:	b2db      	uxtb	r3, r3
 8001652:	4619      	mov	r1, r3
 8001654:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8001658:	f000 fcf0 	bl	800203c <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800165c:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8001660:	f000 f858 	bl	8001714 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8001664:	463b      	mov	r3, r7
 8001666:	2204      	movs	r2, #4
 8001668:	4619      	mov	r1, r3
 800166a:	f640 0019 	movw	r0, #2073	@ 0x819
 800166e:	f000 fd2f 	bl	80020d0 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8001672:	2000      	movs	r0, #0
 8001674:	f000 f812 	bl	800169c <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	4619      	mov	r1, r3
 800167c:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8001680:	f000 fcdc 	bl	800203c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8001684:	79bb      	ldrb	r3, [r7, #6]
 8001686:	4619      	mov	r1, r3
 8001688:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800168c:	f000 fcd6 	bl	800203c <SUBGRF_WriteRegister>

    return number;
 8001690:	683b      	ldr	r3, [r7, #0]
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
	...

0800169c <SUBGRF_SetStandby>:
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
    OperatingMode = MODE_SLEEP;
}

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80016a6:	1dfb      	adds	r3, r7, #7
 80016a8:	2201      	movs	r2, #1
 80016aa:	4619      	mov	r1, r3
 80016ac:	2080      	movs	r0, #128	@ 0x80
 80016ae:	f000 fd75 	bl	800219c <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d103      	bne.n	80016c0 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 80016b8:	4b05      	ldr	r3, [pc, #20]	@ (80016d0 <SUBGRF_SetStandby+0x34>)
 80016ba:	2201      	movs	r2, #1
 80016bc:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 80016be:	e002      	b.n	80016c6 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 80016c0:	4b03      	ldr	r3, [pc, #12]	@ (80016d0 <SUBGRF_SetStandby+0x34>)
 80016c2:	2202      	movs	r2, #2
 80016c4:	701a      	strb	r2, [r3, #0]
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000464 	.word	0x20000464

080016d4 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 80016dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001710 <SUBGRF_SetTx+0x3c>)
 80016de:	2204      	movs	r2, #4
 80016e0:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	0c1b      	lsrs	r3, r3, #16
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	0a1b      	lsrs	r3, r3, #8
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 80016f8:	f107 030c 	add.w	r3, r7, #12
 80016fc:	2203      	movs	r2, #3
 80016fe:	4619      	mov	r1, r3
 8001700:	2083      	movs	r0, #131	@ 0x83
 8001702:	f000 fd4b 	bl	800219c <SUBGRF_WriteCommand>
}
 8001706:	bf00      	nop
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000464 	.word	0x20000464

08001714 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800171c:	4b0c      	ldr	r3, [pc, #48]	@ (8001750 <SUBGRF_SetRx+0x3c>)
 800171e:	2205      	movs	r2, #5
 8001720:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	0c1b      	lsrs	r3, r3, #16
 8001726:	b2db      	uxtb	r3, r3
 8001728:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	0a1b      	lsrs	r3, r3, #8
 800172e:	b2db      	uxtb	r3, r3
 8001730:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	b2db      	uxtb	r3, r3
 8001736:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8001738:	f107 030c 	add.w	r3, r7, #12
 800173c:	2203      	movs	r2, #3
 800173e:	4619      	mov	r1, r3
 8001740:	2082      	movs	r0, #130	@ 0x82
 8001742:	f000 fd2b 	bl	800219c <SUBGRF_WriteCommand>
}
 8001746:	bf00      	nop
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000464 	.word	0x20000464

08001754 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
}

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800175e:	1dfb      	adds	r3, r7, #7
 8001760:	2201      	movs	r2, #1
 8001762:	4619      	mov	r1, r3
 8001764:	209f      	movs	r0, #159	@ 0x9f
 8001766:	f000 fd19 	bl	800219c <SUBGRF_WriteCommand>
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <SUBGRF_SetRegulatorMode>:
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
    }
}

void SUBGRF_SetRegulatorMode( void )
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8001778:	f7ff fe5d 	bl	8001436 <RBI_IsDCDC>
 800177c:	4603      	mov	r3, r0
 800177e:	2b01      	cmp	r3, #1
 8001780:	d102      	bne.n	8001788 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8001782:	2301      	movs	r3, #1
 8001784:	71fb      	strb	r3, [r7, #7]
 8001786:	e001      	b.n	800178c <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8001788:	2300      	movs	r3, #0
 800178a:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800178c:	1dfb      	adds	r3, r7, #7
 800178e:	2201      	movs	r2, #1
 8001790:	4619      	mov	r1, r3
 8001792:	2096      	movs	r0, #150	@ 0x96
 8001794:	f000 fd02 	bl	800219c <SUBGRF_WriteCommand>
}
 8001798:	bf00      	nop
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80017a8:	793b      	ldrb	r3, [r7, #4]
 80017aa:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	b25b      	sxtb	r3, r3
 80017b2:	019b      	lsls	r3, r3, #6
 80017b4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80017b6:	793b      	ldrb	r3, [r7, #4]
 80017b8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80017bc:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80017be:	b25b      	sxtb	r3, r3
 80017c0:	015b      	lsls	r3, r3, #5
 80017c2:	b25b      	sxtb	r3, r3
 80017c4:	4313      	orrs	r3, r2
 80017c6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80017c8:	793b      	ldrb	r3, [r7, #4]
 80017ca:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80017ce:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80017d0:	b25b      	sxtb	r3, r3
 80017d2:	011b      	lsls	r3, r3, #4
 80017d4:	b25b      	sxtb	r3, r3
 80017d6:	4313      	orrs	r3, r2
 80017d8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80017da:	793b      	ldrb	r3, [r7, #4]
 80017dc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80017e0:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80017e2:	b25b      	sxtb	r3, r3
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	b25b      	sxtb	r3, r3
 80017e8:	4313      	orrs	r3, r2
 80017ea:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80017ec:	793b      	ldrb	r3, [r7, #4]
 80017ee:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80017f2:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80017f4:	b25b      	sxtb	r3, r3
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	b25b      	sxtb	r3, r3
 80017fa:	4313      	orrs	r3, r2
 80017fc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80017fe:	793b      	ldrb	r3, [r7, #4]
 8001800:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001804:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8001806:	b25b      	sxtb	r3, r3
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	b25b      	sxtb	r3, r3
 800180c:	4313      	orrs	r3, r2
 800180e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8001810:	793b      	ldrb	r3, [r7, #4]
 8001812:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001816:	b2db      	uxtb	r3, r3
 8001818:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800181a:	4313      	orrs	r3, r2
 800181c:	b25b      	sxtb	r3, r3
 800181e:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8001820:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8001822:	f107 030f 	add.w	r3, r7, #15
 8001826:	2201      	movs	r2, #1
 8001828:	4619      	mov	r1, r3
 800182a:	2089      	movs	r0, #137	@ 0x89
 800182c:	f000 fcb6 	bl	800219c <SUBGRF_WriteCommand>
}
 8001830:	bf00      	nop
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a1d      	ldr	r2, [pc, #116]	@ (80018b8 <SUBGRF_CalibrateImage+0x80>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d904      	bls.n	8001852 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8001848:	23e1      	movs	r3, #225	@ 0xe1
 800184a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 800184c:	23e9      	movs	r3, #233	@ 0xe9
 800184e:	737b      	strb	r3, [r7, #13]
 8001850:	e027      	b.n	80018a2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a19      	ldr	r2, [pc, #100]	@ (80018bc <SUBGRF_CalibrateImage+0x84>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d904      	bls.n	8001864 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800185a:	23d7      	movs	r3, #215	@ 0xd7
 800185c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800185e:	23db      	movs	r3, #219	@ 0xdb
 8001860:	737b      	strb	r3, [r7, #13]
 8001862:	e01e      	b.n	80018a2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4a16      	ldr	r2, [pc, #88]	@ (80018c0 <SUBGRF_CalibrateImage+0x88>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d904      	bls.n	8001876 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 800186c:	23c1      	movs	r3, #193	@ 0xc1
 800186e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8001870:	23c5      	movs	r3, #197	@ 0xc5
 8001872:	737b      	strb	r3, [r7, #13]
 8001874:	e015      	b.n	80018a2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a12      	ldr	r2, [pc, #72]	@ (80018c4 <SUBGRF_CalibrateImage+0x8c>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d904      	bls.n	8001888 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800187e:	2375      	movs	r3, #117	@ 0x75
 8001880:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8001882:	2381      	movs	r3, #129	@ 0x81
 8001884:	737b      	strb	r3, [r7, #13]
 8001886:	e00c      	b.n	80018a2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a0f      	ldr	r2, [pc, #60]	@ (80018c8 <SUBGRF_CalibrateImage+0x90>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d904      	bls.n	800189a <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 8001890:	236b      	movs	r3, #107	@ 0x6b
 8001892:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8001894:	236f      	movs	r3, #111	@ 0x6f
 8001896:	737b      	strb	r3, [r7, #13]
 8001898:	e003      	b.n	80018a2 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 800189a:	2329      	movs	r3, #41	@ 0x29
 800189c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 800189e:	232b      	movs	r3, #43	@ 0x2b
 80018a0:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80018a2:	f107 030c 	add.w	r3, r7, #12
 80018a6:	2202      	movs	r2, #2
 80018a8:	4619      	mov	r1, r3
 80018aa:	2098      	movs	r0, #152	@ 0x98
 80018ac:	f000 fc76 	bl	800219c <SUBGRF_WriteCommand>
}
 80018b0:	bf00      	nop
 80018b2:	3710      	adds	r7, #16
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	35a4e900 	.word	0x35a4e900
 80018bc:	32a9f880 	.word	0x32a9f880
 80018c0:	2de54480 	.word	0x2de54480
 80018c4:	1b6b0b00 	.word	0x1b6b0b00
 80018c8:	1954fc40 	.word	0x1954fc40

080018cc <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 80018cc:	b590      	push	{r4, r7, lr}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4604      	mov	r4, r0
 80018d4:	4608      	mov	r0, r1
 80018d6:	4611      	mov	r1, r2
 80018d8:	461a      	mov	r2, r3
 80018da:	4623      	mov	r3, r4
 80018dc:	71fb      	strb	r3, [r7, #7]
 80018de:	4603      	mov	r3, r0
 80018e0:	71bb      	strb	r3, [r7, #6]
 80018e2:	460b      	mov	r3, r1
 80018e4:	717b      	strb	r3, [r7, #5]
 80018e6:	4613      	mov	r3, r2
 80018e8:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 80018ee:	79bb      	ldrb	r3, [r7, #6]
 80018f0:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 80018f2:	797b      	ldrb	r3, [r7, #5]
 80018f4:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 80018f6:	793b      	ldrb	r3, [r7, #4]
 80018f8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 80018fa:	f107 030c 	add.w	r3, r7, #12
 80018fe:	2204      	movs	r2, #4
 8001900:	4619      	mov	r1, r3
 8001902:	2095      	movs	r0, #149	@ 0x95
 8001904:	f000 fc4a 	bl	800219c <SUBGRF_WriteCommand>
}
 8001908:	bf00      	nop
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	bd90      	pop	{r4, r7, pc}

08001910 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8001910:	b590      	push	{r4, r7, lr}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	4604      	mov	r4, r0
 8001918:	4608      	mov	r0, r1
 800191a:	4611      	mov	r1, r2
 800191c:	461a      	mov	r2, r3
 800191e:	4623      	mov	r3, r4
 8001920:	80fb      	strh	r3, [r7, #6]
 8001922:	4603      	mov	r3, r0
 8001924:	80bb      	strh	r3, [r7, #4]
 8001926:	460b      	mov	r3, r1
 8001928:	807b      	strh	r3, [r7, #2]
 800192a:	4613      	mov	r3, r2
 800192c:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800192e:	88fb      	ldrh	r3, [r7, #6]
 8001930:	0a1b      	lsrs	r3, r3, #8
 8001932:	b29b      	uxth	r3, r3
 8001934:	b2db      	uxtb	r3, r3
 8001936:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8001938:	88fb      	ldrh	r3, [r7, #6]
 800193a:	b2db      	uxtb	r3, r3
 800193c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800193e:	88bb      	ldrh	r3, [r7, #4]
 8001940:	0a1b      	lsrs	r3, r3, #8
 8001942:	b29b      	uxth	r3, r3
 8001944:	b2db      	uxtb	r3, r3
 8001946:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8001948:	88bb      	ldrh	r3, [r7, #4]
 800194a:	b2db      	uxtb	r3, r3
 800194c:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800194e:	887b      	ldrh	r3, [r7, #2]
 8001950:	0a1b      	lsrs	r3, r3, #8
 8001952:	b29b      	uxth	r3, r3
 8001954:	b2db      	uxtb	r3, r3
 8001956:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8001958:	887b      	ldrh	r3, [r7, #2]
 800195a:	b2db      	uxtb	r3, r3
 800195c:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800195e:	883b      	ldrh	r3, [r7, #0]
 8001960:	0a1b      	lsrs	r3, r3, #8
 8001962:	b29b      	uxth	r3, r3
 8001964:	b2db      	uxtb	r3, r3
 8001966:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8001968:	883b      	ldrh	r3, [r7, #0]
 800196a:	b2db      	uxtb	r3, r3
 800196c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800196e:	f107 0308 	add.w	r3, r7, #8
 8001972:	2208      	movs	r2, #8
 8001974:	4619      	mov	r1, r3
 8001976:	2008      	movs	r0, #8
 8001978:	f000 fc10 	bl	800219c <SUBGRF_WriteCommand>
}
 800197c:	bf00      	nop
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	bd90      	pop	{r4, r7, pc}

08001984 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	6039      	str	r1, [r7, #0]
 800198e:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	b2db      	uxtb	r3, r3
 8001998:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	0c1b      	lsrs	r3, r3, #16
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	0a1b      	lsrs	r3, r3, #8
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80019b0:	f107 030c 	add.w	r3, r7, #12
 80019b4:	2204      	movs	r2, #4
 80019b6:	4619      	mov	r1, r3
 80019b8:	2097      	movs	r0, #151	@ 0x97
 80019ba:	f000 fbef 	bl	800219c <SUBGRF_WriteCommand>
}
 80019be:	bf00      	nop
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 80019c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019cc:	b084      	sub	sp, #16
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 80019d6:	4b1d      	ldr	r3, [pc, #116]	@ (8001a4c <SUBGRF_SetRfFrequency+0x84>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	f083 0301 	eor.w	r3, r3, #1
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d005      	beq.n	80019f0 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f7ff ff27 	bl	8001838 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 80019ea:	4b18      	ldr	r3, [pc, #96]	@ (8001a4c <SUBGRF_SetRfFrequency+0x84>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	461c      	mov	r4, r3
 80019f6:	4615      	mov	r5, r2
 80019f8:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 80019fc:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8001a00:	4a13      	ldr	r2, [pc, #76]	@ (8001a50 <SUBGRF_SetRfFrequency+0x88>)
 8001a02:	f04f 0300 	mov.w	r3, #0
 8001a06:	4640      	mov	r0, r8
 8001a08:	4649      	mov	r1, r9
 8001a0a:	f7fe fc11 	bl	8000230 <__aeabi_uldivmod>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	4613      	mov	r3, r2
 8001a14:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	0e1b      	lsrs	r3, r3, #24
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	0c1b      	lsrs	r3, r3, #16
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	0a1b      	lsrs	r3, r3, #8
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8001a34:	f107 0308 	add.w	r3, r7, #8
 8001a38:	2204      	movs	r2, #4
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	2086      	movs	r0, #134	@ 0x86
 8001a3e:	f000 fbad 	bl	800219c <SUBGRF_WriteCommand>
}
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a4c:	2000046c 	.word	0x2000046c
 8001a50:	01e84800 	.word	0x01e84800

08001a54 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8001a5e:	79fa      	ldrb	r2, [r7, #7]
 8001a60:	4b09      	ldr	r3, [pc, #36]	@ (8001a88 <SUBGRF_SetPacketType+0x34>)
 8001a62:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d104      	bne.n	8001a74 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8001a70:	f000 fae4 	bl	800203c <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8001a74:	1dfb      	adds	r3, r7, #7
 8001a76:	2201      	movs	r2, #1
 8001a78:	4619      	mov	r1, r3
 8001a7a:	208a      	movs	r0, #138	@ 0x8a
 8001a7c:	f000 fb8e 	bl	800219c <SUBGRF_WriteCommand>
}
 8001a80:	bf00      	nop
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	20000465 	.word	0x20000465

08001a8c <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
    return PacketType;
 8001a90:	4b02      	ldr	r3, [pc, #8]	@ (8001a9c <SUBGRF_GetPacketType+0x10>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr
 8001a9c:	20000465 	.word	0x20000465

08001aa0 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	71fb      	strb	r3, [r7, #7]
 8001aaa:	460b      	mov	r3, r1
 8001aac:	71bb      	strb	r3, [r7, #6]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d149      	bne.n	8001b4c <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f7ff fcc3 	bl	8001444 <RBI_GetRFOMaxPowerConfig>
 8001abe:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8001ac0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	da01      	bge.n	8001ace <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2b0e      	cmp	r3, #14
 8001ad2:	d10e      	bne.n	8001af2 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	2100      	movs	r1, #0
 8001ada:	2004      	movs	r0, #4
 8001adc:	f7ff fef6 	bl	80018cc <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8001ae0:	79ba      	ldrb	r2, [r7, #6]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	330e      	adds	r3, #14
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	71bb      	strb	r3, [r7, #6]
 8001af0:	e01f      	b.n	8001b32 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2b0a      	cmp	r3, #10
 8001af6:	d10e      	bne.n	8001b16 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8001af8:	2301      	movs	r3, #1
 8001afa:	2201      	movs	r2, #1
 8001afc:	2100      	movs	r1, #0
 8001afe:	2001      	movs	r0, #1
 8001b00:	f7ff fee4 	bl	80018cc <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8001b04:	79ba      	ldrb	r2, [r7, #6]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	330d      	adds	r3, #13
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	71bb      	strb	r3, [r7, #6]
 8001b14:	e00d      	b.n	8001b32 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8001b16:	2301      	movs	r3, #1
 8001b18:	2201      	movs	r2, #1
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	2007      	movs	r0, #7
 8001b1e:	f7ff fed5 	bl	80018cc <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8001b22:	79ba      	ldrb	r2, [r7, #6]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	330e      	adds	r3, #14
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8001b32:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001b36:	f113 0f11 	cmn.w	r3, #17
 8001b3a:	da01      	bge.n	8001b40 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8001b3c:	23ef      	movs	r3, #239	@ 0xef
 8001b3e:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8001b40:	2118      	movs	r1, #24
 8001b42:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8001b46:	f000 fa79 	bl	800203c <SUBGRF_WriteRegister>
 8001b4a:	e067      	b.n	8001c1c <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8001b4c:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8001b50:	f000 fa88 	bl	8002064 <SUBGRF_ReadRegister>
 8001b54:	4603      	mov	r3, r0
 8001b56:	f043 031e 	orr.w	r3, r3, #30
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8001b62:	f000 fa6b 	bl	800203c <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8001b66:	2001      	movs	r0, #1
 8001b68:	f7ff fc6c 	bl	8001444 <RBI_GetRFOMaxPowerConfig>
 8001b6c:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 8001b6e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	da01      	bge.n	8001b7c <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2b14      	cmp	r3, #20
 8001b80:	d10e      	bne.n	8001ba0 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8001b82:	2301      	movs	r3, #1
 8001b84:	2200      	movs	r2, #0
 8001b86:	2105      	movs	r1, #5
 8001b88:	2003      	movs	r0, #3
 8001b8a:	f7ff fe9f 	bl	80018cc <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8001b8e:	79ba      	ldrb	r2, [r7, #6]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	3316      	adds	r3, #22
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	71bb      	strb	r3, [r7, #6]
 8001b9e:	e031      	b.n	8001c04 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2b11      	cmp	r3, #17
 8001ba4:	d10e      	bne.n	8001bc4 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	2200      	movs	r2, #0
 8001baa:	2103      	movs	r1, #3
 8001bac:	2002      	movs	r0, #2
 8001bae:	f7ff fe8d 	bl	80018cc <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8001bb2:	79ba      	ldrb	r2, [r7, #6]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	3316      	adds	r3, #22
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	71bb      	strb	r3, [r7, #6]
 8001bc2:	e01f      	b.n	8001c04 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2b0e      	cmp	r3, #14
 8001bc8:	d10e      	bne.n	8001be8 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8001bca:	2301      	movs	r3, #1
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2102      	movs	r1, #2
 8001bd0:	2002      	movs	r0, #2
 8001bd2:	f7ff fe7b 	bl	80018cc <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8001bd6:	79ba      	ldrb	r2, [r7, #6]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	330e      	adds	r3, #14
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	71bb      	strb	r3, [r7, #6]
 8001be6:	e00d      	b.n	8001c04 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8001be8:	2301      	movs	r3, #1
 8001bea:	2200      	movs	r2, #0
 8001bec:	2107      	movs	r1, #7
 8001bee:	2004      	movs	r0, #4
 8001bf0:	f7ff fe6c 	bl	80018cc <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8001bf4:	79ba      	ldrb	r2, [r7, #6]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	3316      	adds	r3, #22
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8001c04:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c08:	f113 0f09 	cmn.w	r3, #9
 8001c0c:	da01      	bge.n	8001c12 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8001c0e:	23f7      	movs	r3, #247	@ 0xf7
 8001c10:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8001c12:	2138      	movs	r1, #56	@ 0x38
 8001c14:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8001c18:	f000 fa10 	bl	800203c <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8001c1c:	79bb      	ldrb	r3, [r7, #6]
 8001c1e:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8001c20:	797b      	ldrb	r3, [r7, #5]
 8001c22:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8001c24:	f107 0308 	add.w	r3, r7, #8
 8001c28:	2202      	movs	r2, #2
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	208e      	movs	r0, #142	@ 0x8e
 8001c2e:	f000 fab5 	bl	800219c <SUBGRF_WriteCommand>
}
 8001c32:	bf00      	nop
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
	...

08001c3c <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8001c3c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c40:	b086      	sub	sp, #24
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001c4a:	f107 0308 	add.w	r3, r7, #8
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	781a      	ldrb	r2, [r3, #0]
 8001c58:	4b5c      	ldr	r3, [pc, #368]	@ (8001dcc <SUBGRF_SetModulationParams+0x190>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d004      	beq.n	8001c6a <SUBGRF_SetModulationParams+0x2e>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff fef5 	bl	8001a54 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	2b03      	cmp	r3, #3
 8001c70:	f200 80a5 	bhi.w	8001dbe <SUBGRF_SetModulationParams+0x182>
 8001c74:	a201      	add	r2, pc, #4	@ (adr r2, 8001c7c <SUBGRF_SetModulationParams+0x40>)
 8001c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c7a:	bf00      	nop
 8001c7c:	08001c8d 	.word	0x08001c8d
 8001c80:	08001d4d 	.word	0x08001d4d
 8001c84:	08001d0f 	.word	0x08001d0f
 8001c88:	08001d7b 	.word	0x08001d7b
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8001c8c:	2308      	movs	r3, #8
 8001c8e:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	4a4e      	ldr	r2, [pc, #312]	@ (8001dd0 <SUBGRF_SetModulationParams+0x194>)
 8001c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9a:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	0c1b      	lsrs	r3, r3, #16
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	0a1b      	lsrs	r3, r3, #8
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	7b1b      	ldrb	r3, [r3, #12]
 8001cb6:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	7b5b      	ldrb	r3, [r3, #13]
 8001cbc:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	461c      	mov	r4, r3
 8001cc6:	4615      	mov	r5, r2
 8001cc8:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8001ccc:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8001cd0:	4a40      	ldr	r2, [pc, #256]	@ (8001dd4 <SUBGRF_SetModulationParams+0x198>)
 8001cd2:	f04f 0300 	mov.w	r3, #0
 8001cd6:	4640      	mov	r0, r8
 8001cd8:	4649      	mov	r1, r9
 8001cda:	f7fe faa9 	bl	8000230 <__aeabi_uldivmod>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	0c1b      	lsrs	r3, r3, #16
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	0a1b      	lsrs	r3, r3, #8
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8001cfc:	7cfb      	ldrb	r3, [r7, #19]
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	f107 0308 	add.w	r3, r7, #8
 8001d04:	4619      	mov	r1, r3
 8001d06:	208b      	movs	r0, #139	@ 0x8b
 8001d08:	f000 fa48 	bl	800219c <SUBGRF_WriteCommand>
        break;
 8001d0c:	e058      	b.n	8001dc0 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_BPSK:
        n = 4;
 8001d0e:	2304      	movs	r3, #4
 8001d10:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	4a2e      	ldr	r2, [pc, #184]	@ (8001dd0 <SUBGRF_SetModulationParams+0x194>)
 8001d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	0c1b      	lsrs	r3, r3, #16
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	0a1b      	lsrs	r3, r3, #8
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	7d1b      	ldrb	r3, [r3, #20]
 8001d38:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8001d3a:	7cfb      	ldrb	r3, [r7, #19]
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	f107 0308 	add.w	r3, r7, #8
 8001d42:	4619      	mov	r1, r3
 8001d44:	208b      	movs	r0, #139	@ 0x8b
 8001d46:	f000 fa29 	bl	800219c <SUBGRF_WriteCommand>
        break;
 8001d4a:	e039      	b.n	8001dc0 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_LORA:
        n = 4;
 8001d4c:	2304      	movs	r3, #4
 8001d4e:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	7e1b      	ldrb	r3, [r3, #24]
 8001d54:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	7e5b      	ldrb	r3, [r3, #25]
 8001d5a:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	7e9b      	ldrb	r3, [r3, #26]
 8001d60:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	7edb      	ldrb	r3, [r3, #27]
 8001d66:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8001d68:	7cfb      	ldrb	r3, [r7, #19]
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	f107 0308 	add.w	r3, r7, #8
 8001d70:	4619      	mov	r1, r3
 8001d72:	208b      	movs	r0, #139	@ 0x8b
 8001d74:	f000 fa12 	bl	800219c <SUBGRF_WriteCommand>

        break;
 8001d78:	e022      	b.n	8001dc0 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_GMSK:
        n = 5;
 8001d7a:	2305      	movs	r3, #5
 8001d7c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	4a13      	ldr	r2, [pc, #76]	@ (8001dd0 <SUBGRF_SetModulationParams+0x194>)
 8001d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d88:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	0c1b      	lsrs	r3, r3, #16
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	0a1b      	lsrs	r3, r3, #8
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	7b1b      	ldrb	r3, [r3, #12]
 8001da4:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	7b5b      	ldrb	r3, [r3, #13]
 8001daa:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8001dac:	7cfb      	ldrb	r3, [r7, #19]
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	f107 0308 	add.w	r3, r7, #8
 8001db4:	4619      	mov	r1, r3
 8001db6:	208b      	movs	r0, #139	@ 0x8b
 8001db8:	f000 f9f0 	bl	800219c <SUBGRF_WriteCommand>
        break;
 8001dbc:	e000      	b.n	8001dc0 <SUBGRF_SetModulationParams+0x184>
    default:
    case PACKET_TYPE_NONE:
      break;
 8001dbe:	bf00      	nop
    }
}
 8001dc0:	bf00      	nop
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000465 	.word	0x20000465
 8001dd0:	3d090000 	.word	0x3d090000
 8001dd4:	01e84800 	.word	0x01e84800

08001dd8 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001de4:	f107 030c 	add.w	r3, r7, #12
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	721a      	strb	r2, [r3, #8]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	781a      	ldrb	r2, [r3, #0]
 8001df4:	4b44      	ldr	r3, [pc, #272]	@ (8001f08 <SUBGRF_SetPacketParams+0x130>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d004      	beq.n	8001e06 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff fe27 	bl	8001a54 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b03      	cmp	r3, #3
 8001e0c:	d878      	bhi.n	8001f00 <SUBGRF_SetPacketParams+0x128>
 8001e0e:	a201      	add	r2, pc, #4	@ (adr r2, 8001e14 <SUBGRF_SetPacketParams+0x3c>)
 8001e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e14:	08001e25 	.word	0x08001e25
 8001e18:	08001eb5 	.word	0x08001eb5
 8001e1c:	08001ea9 	.word	0x08001ea9
 8001e20:	08001e25 	.word	0x08001e25
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	7a5b      	ldrb	r3, [r3, #9]
 8001e28:	2bf1      	cmp	r3, #241	@ 0xf1
 8001e2a:	d10a      	bne.n	8001e42 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8001e2c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001e30:	f7ff fbad 	bl	800158e <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8001e34:	f248 0005 	movw	r0, #32773	@ 0x8005
 8001e38:	f7ff fbc9 	bl	80015ce <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	75bb      	strb	r3, [r7, #22]
 8001e40:	e011      	b.n	8001e66 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	7a5b      	ldrb	r3, [r3, #9]
 8001e46:	2bf2      	cmp	r3, #242	@ 0xf2
 8001e48:	d10a      	bne.n	8001e60 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8001e4a:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 8001e4e:	f7ff fb9e 	bl	800158e <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8001e52:	f241 0021 	movw	r0, #4129	@ 0x1021
 8001e56:	f7ff fbba 	bl	80015ce <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8001e5a:	2306      	movs	r3, #6
 8001e5c:	75bb      	strb	r3, [r7, #22]
 8001e5e:	e002      	b.n	8001e66 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	7a5b      	ldrb	r3, [r3, #9]
 8001e64:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8001e66:	2309      	movs	r3, #9
 8001e68:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	885b      	ldrh	r3, [r3, #2]
 8001e6e:	0a1b      	lsrs	r3, r3, #8
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	885b      	ldrh	r3, [r3, #2]
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	791b      	ldrb	r3, [r3, #4]
 8001e82:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	795b      	ldrb	r3, [r3, #5]
 8001e88:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	799b      	ldrb	r3, [r3, #6]
 8001e8e:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	79db      	ldrb	r3, [r3, #7]
 8001e94:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	7a1b      	ldrb	r3, [r3, #8]
 8001e9a:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8001e9c:	7dbb      	ldrb	r3, [r7, #22]
 8001e9e:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	7a9b      	ldrb	r3, [r3, #10]
 8001ea4:	753b      	strb	r3, [r7, #20]
        break;
 8001ea6:	e022      	b.n	8001eee <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	7b1b      	ldrb	r3, [r3, #12]
 8001eb0:	733b      	strb	r3, [r7, #12]
        break;
 8001eb2:	e01c      	b.n	8001eee <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8001eb4:	2306      	movs	r3, #6
 8001eb6:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	89db      	ldrh	r3, [r3, #14]
 8001ebc:	0a1b      	lsrs	r3, r3, #8
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	89db      	ldrh	r3, [r3, #14]
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	7c1a      	ldrb	r2, [r3, #16]
 8001ed0:	4b0e      	ldr	r3, [pc, #56]	@ (8001f0c <SUBGRF_SetPacketParams+0x134>)
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	7019      	strb	r1, [r3, #0]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	7c5b      	ldrb	r3, [r3, #17]
 8001ede:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	7c9b      	ldrb	r3, [r3, #18]
 8001ee4:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	7cdb      	ldrb	r3, [r3, #19]
 8001eea:	747b      	strb	r3, [r7, #17]
        break;
 8001eec:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8001eee:	7dfb      	ldrb	r3, [r7, #23]
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	f107 030c 	add.w	r3, r7, #12
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	208c      	movs	r0, #140	@ 0x8c
 8001efa:	f000 f94f 	bl	800219c <SUBGRF_WriteCommand>
 8001efe:	e000      	b.n	8001f02 <SUBGRF_SetPacketParams+0x12a>
        return;
 8001f00:	bf00      	nop
}
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20000465 	.word	0x20000465
 8001f0c:	20000466 	.word	0x20000466

08001f10 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	460a      	mov	r2, r1
 8001f1a:	71fb      	strb	r3, [r7, #7]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8001f20:	79fb      	ldrb	r3, [r7, #7]
 8001f22:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8001f24:	79bb      	ldrb	r3, [r7, #6]
 8001f26:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8001f28:	f107 030c 	add.w	r3, r7, #12
 8001f2c:	2202      	movs	r2, #2
 8001f2e:	4619      	mov	r1, r3
 8001f30:	208f      	movs	r0, #143	@ 0x8f
 8001f32:	f000 f933 	bl	800219c <SUBGRF_WriteCommand>
}
 8001f36:	bf00      	nop
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
	...

08001f40 <SUBGRF_GetRxBufferStatus>:
    rssi = -buf[0] >> 1;
    return rssi;
}

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8001f4a:	f107 030c 	add.w	r3, r7, #12
 8001f4e:	2202      	movs	r2, #2
 8001f50:	4619      	mov	r1, r3
 8001f52:	2013      	movs	r0, #19
 8001f54:	f000 f944 	bl	80021e0 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8001f58:	f7ff fd98 	bl	8001a8c <SUBGRF_GetPacketType>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d10d      	bne.n	8001f7e <SUBGRF_GetRxBufferStatus+0x3e>
 8001f62:	4b0c      	ldr	r3, [pc, #48]	@ (8001f94 <SUBGRF_GetRxBufferStatus+0x54>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d108      	bne.n	8001f7e <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8001f6c:	f240 7002 	movw	r0, #1794	@ 0x702
 8001f70:	f000 f878 	bl	8002064 <SUBGRF_ReadRegister>
 8001f74:	4603      	mov	r3, r0
 8001f76:	461a      	mov	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	701a      	strb	r2, [r3, #0]
 8001f7c:	e002      	b.n	8001f84 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8001f7e:	7b3a      	ldrb	r2, [r7, #12]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8001f84:	7b7a      	ldrb	r2, [r7, #13]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	701a      	strb	r2, [r3, #0]
}
 8001f8a:	bf00      	nop
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000466 	.word	0x20000466

08001f98 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8001fa0:	f107 030c 	add.w	r3, r7, #12
 8001fa4:	2203      	movs	r2, #3
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	2014      	movs	r0, #20
 8001faa:	f000 f919 	bl	80021e0 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8001fae:	f7ff fd6d 	bl	8001a8c <SUBGRF_GetPacketType>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d002      	beq.n	8001fc8 <SUBGRF_GetPacketStatus+0x30>
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d013      	beq.n	8001fee <SUBGRF_GetPacketStatus+0x56>
 8001fc6:	e02a      	b.n	800201e <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8001fc8:	7b3a      	ldrb	r2, [r7, #12]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8001fce:	7b7b      	ldrb	r3, [r7, #13]
 8001fd0:	425b      	negs	r3, r3
 8001fd2:	105b      	asrs	r3, r3, #1
 8001fd4:	b25a      	sxtb	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8001fda:	7bbb      	ldrb	r3, [r7, #14]
 8001fdc:	425b      	negs	r3, r3
 8001fde:	105b      	asrs	r3, r3, #1
 8001fe0:	b25a      	sxtb	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	609a      	str	r2, [r3, #8]
            break;
 8001fec:	e020      	b.n	8002030 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8001fee:	7b3b      	ldrb	r3, [r7, #12]
 8001ff0:	425b      	negs	r3, r3
 8001ff2:	105b      	asrs	r3, r3, #1
 8001ff4:	b25a      	sxtb	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8001ffa:	7b7b      	ldrb	r3, [r7, #13]
 8001ffc:	b25b      	sxtb	r3, r3
 8001ffe:	3302      	adds	r3, #2
 8002000:	109b      	asrs	r3, r3, #2
 8002002:	b25a      	sxtb	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8002008:	7bbb      	ldrb	r3, [r7, #14]
 800200a:	425b      	negs	r3, r3
 800200c:	105b      	asrs	r3, r3, #1
 800200e:	b25a      	sxtb	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8002014:	4b08      	ldr	r3, [pc, #32]	@ (8002038 <SUBGRF_GetPacketStatus+0xa0>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	611a      	str	r2, [r3, #16]
            break;
 800201c:	e008      	b.n	8002030 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800201e:	2214      	movs	r2, #20
 8002020:	2100      	movs	r1, #0
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f004 feee 	bl	8006e04 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	220f      	movs	r2, #15
 800202c:	701a      	strb	r2, [r3, #0]
            break;
 800202e:	bf00      	nop
    }
}
 8002030:	bf00      	nop
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	20000468 	.word	0x20000468

0800203c <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	460a      	mov	r2, r1
 8002046:	80fb      	strh	r3, [r7, #6]
 8002048:	4613      	mov	r3, r2
 800204a:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800204c:	1d7a      	adds	r2, r7, #5
 800204e:	88f9      	ldrh	r1, [r7, #6]
 8002050:	2301      	movs	r3, #1
 8002052:	4803      	ldr	r0, [pc, #12]	@ (8002060 <SUBGRF_WriteRegister+0x24>)
 8002054:	f002 fa54 	bl	8004500 <HAL_SUBGHZ_WriteRegisters>
}
 8002058:	bf00      	nop
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	200003c0 	.word	0x200003c0

08002064 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800206e:	f107 020f 	add.w	r2, r7, #15
 8002072:	88f9      	ldrh	r1, [r7, #6]
 8002074:	2301      	movs	r3, #1
 8002076:	4804      	ldr	r0, [pc, #16]	@ (8002088 <SUBGRF_ReadRegister+0x24>)
 8002078:	f002 faa1 	bl	80045be <HAL_SUBGHZ_ReadRegisters>
    return data;
 800207c:	7bfb      	ldrb	r3, [r7, #15]
}
 800207e:	4618      	mov	r0, r3
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	200003c0 	.word	0x200003c0

0800208c <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	6039      	str	r1, [r7, #0]
 8002096:	80fb      	strh	r3, [r7, #6]
 8002098:	4613      	mov	r3, r2
 800209a:	80bb      	strh	r3, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800209c:	f3ef 8310 	mrs	r3, PRIMASK
 80020a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80020a2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80020a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80020a6:	b672      	cpsid	i
}
 80020a8:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 80020aa:	88bb      	ldrh	r3, [r7, #4]
 80020ac:	88f9      	ldrh	r1, [r7, #6]
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	4806      	ldr	r0, [pc, #24]	@ (80020cc <SUBGRF_WriteRegisters+0x40>)
 80020b2:	f002 fa25 	bl	8004500 <HAL_SUBGHZ_WriteRegisters>
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	f383 8810 	msr	PRIMASK, r3
}
 80020c0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80020c2:	bf00      	nop
 80020c4:	3718      	adds	r7, #24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	200003c0 	.word	0x200003c0

080020d0 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	6039      	str	r1, [r7, #0]
 80020da:	80fb      	strh	r3, [r7, #6]
 80020dc:	4613      	mov	r3, r2
 80020de:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020e0:	f3ef 8310 	mrs	r3, PRIMASK
 80020e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80020e6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80020e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80020ea:	b672      	cpsid	i
}
 80020ec:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 80020ee:	88bb      	ldrh	r3, [r7, #4]
 80020f0:	88f9      	ldrh	r1, [r7, #6]
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	4806      	ldr	r0, [pc, #24]	@ (8002110 <SUBGRF_ReadRegisters+0x40>)
 80020f6:	f002 fa62 	bl	80045be <HAL_SUBGHZ_ReadRegisters>
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	f383 8810 	msr	PRIMASK, r3
}
 8002104:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8002106:	bf00      	nop
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	200003c0 	.word	0x200003c0

08002114 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	6039      	str	r1, [r7, #0]
 800211e:	71fb      	strb	r3, [r7, #7]
 8002120:	4613      	mov	r3, r2
 8002122:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002124:	f3ef 8310 	mrs	r3, PRIMASK
 8002128:	60fb      	str	r3, [r7, #12]
  return(result);
 800212a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800212c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800212e:	b672      	cpsid	i
}
 8002130:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8002132:	79bb      	ldrb	r3, [r7, #6]
 8002134:	b29b      	uxth	r3, r3
 8002136:	79f9      	ldrb	r1, [r7, #7]
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	4806      	ldr	r0, [pc, #24]	@ (8002154 <SUBGRF_WriteBuffer+0x40>)
 800213c:	f002 fb53 	bl	80047e6 <HAL_SUBGHZ_WriteBuffer>
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	f383 8810 	msr	PRIMASK, r3
}
 800214a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800214c:	bf00      	nop
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	200003c0 	.word	0x200003c0

08002158 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	6039      	str	r1, [r7, #0]
 8002162:	71fb      	strb	r3, [r7, #7]
 8002164:	4613      	mov	r3, r2
 8002166:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002168:	f3ef 8310 	mrs	r3, PRIMASK
 800216c:	60fb      	str	r3, [r7, #12]
  return(result);
 800216e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8002170:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002172:	b672      	cpsid	i
}
 8002174:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8002176:	79bb      	ldrb	r3, [r7, #6]
 8002178:	b29b      	uxth	r3, r3
 800217a:	79f9      	ldrb	r1, [r7, #7]
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	4806      	ldr	r0, [pc, #24]	@ (8002198 <SUBGRF_ReadBuffer+0x40>)
 8002180:	f002 fb84 	bl	800488c <HAL_SUBGHZ_ReadBuffer>
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	f383 8810 	msr	PRIMASK, r3
}
 800218e:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8002190:	bf00      	nop
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	200003c0 	.word	0x200003c0

0800219c <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	6039      	str	r1, [r7, #0]
 80021a6:	71fb      	strb	r3, [r7, #7]
 80021a8:	4613      	mov	r3, r2
 80021aa:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021ac:	f3ef 8310 	mrs	r3, PRIMASK
 80021b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80021b2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80021b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80021b6:	b672      	cpsid	i
}
 80021b8:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 80021ba:	88bb      	ldrh	r3, [r7, #4]
 80021bc:	79f9      	ldrb	r1, [r7, #7]
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	4806      	ldr	r0, [pc, #24]	@ (80021dc <SUBGRF_WriteCommand+0x40>)
 80021c2:	f002 fa5d 	bl	8004680 <HAL_SUBGHZ_ExecSetCmd>
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	f383 8810 	msr	PRIMASK, r3
}
 80021d0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80021d2:	bf00      	nop
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	200003c0 	.word	0x200003c0

080021e0 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	6039      	str	r1, [r7, #0]
 80021ea:	71fb      	strb	r3, [r7, #7]
 80021ec:	4613      	mov	r3, r2
 80021ee:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021f0:	f3ef 8310 	mrs	r3, PRIMASK
 80021f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80021f6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80021f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80021fa:	b672      	cpsid	i
}
 80021fc:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 80021fe:	88bb      	ldrh	r3, [r7, #4]
 8002200:	79f9      	ldrb	r1, [r7, #7]
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	4806      	ldr	r0, [pc, #24]	@ (8002220 <SUBGRF_ReadCommand+0x40>)
 8002206:	f002 fa9a 	bl	800473e <HAL_SUBGHZ_ExecGetCmd>
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	f383 8810 	msr	PRIMASK, r3
}
 8002214:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8002216:	bf00      	nop
 8002218:	3718      	adds	r7, #24
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	200003c0 	.word	0x200003c0

08002224 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	460a      	mov	r2, r1
 800222e:	71fb      	strb	r3, [r7, #7]
 8002230:	4613      	mov	r3, r2
 8002232:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8002234:	2301      	movs	r3, #1
 8002236:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8002238:	79bb      	ldrb	r3, [r7, #6]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d10d      	bne.n	800225a <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800223e:	79fb      	ldrb	r3, [r7, #7]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d104      	bne.n	800224e <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8002244:	2302      	movs	r3, #2
 8002246:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8002248:	2004      	movs	r0, #4
 800224a:	f000 f8e7 	bl	800241c <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	2b02      	cmp	r3, #2
 8002252:	d107      	bne.n	8002264 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8002254:	2303      	movs	r3, #3
 8002256:	73fb      	strb	r3, [r7, #15]
 8002258:	e004      	b.n	8002264 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800225a:	79bb      	ldrb	r3, [r7, #6]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8002260:	2301      	movs	r3, #1
 8002262:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8002264:	7bfb      	ldrb	r3, [r7, #15]
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff f8c9 	bl	80013fe <RBI_ConfigRFSwitch>
}
 800226c:	bf00      	nop
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800227e:	2301      	movs	r3, #1
 8002280:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8002282:	f7ff f8ca 	bl	800141a <RBI_GetTxConfig>
 8002286:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2b02      	cmp	r3, #2
 800228c:	d016      	beq.n	80022bc <SUBGRF_SetRfTxPower+0x48>
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	2b02      	cmp	r3, #2
 8002292:	dc16      	bgt.n	80022c2 <SUBGRF_SetRfTxPower+0x4e>
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <SUBGRF_SetRfTxPower+0x2e>
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d00a      	beq.n	80022b6 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 80022a0:	e00f      	b.n	80022c2 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 80022a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a6:	2b0f      	cmp	r3, #15
 80022a8:	dd02      	ble.n	80022b0 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 80022aa:	2302      	movs	r3, #2
 80022ac:	73fb      	strb	r3, [r7, #15]
            break;
 80022ae:	e009      	b.n	80022c4 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 80022b0:	2301      	movs	r3, #1
 80022b2:	73fb      	strb	r3, [r7, #15]
            break;
 80022b4:	e006      	b.n	80022c4 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 80022b6:	2301      	movs	r3, #1
 80022b8:	73fb      	strb	r3, [r7, #15]
            break;
 80022ba:	e003      	b.n	80022c4 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 80022bc:	2302      	movs	r3, #2
 80022be:	73fb      	strb	r3, [r7, #15]
            break;
 80022c0:	e000      	b.n	80022c4 <SUBGRF_SetRfTxPower+0x50>
            break;
 80022c2:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 80022c4:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80022c8:	7bfb      	ldrb	r3, [r7, #15]
 80022ca:	2202      	movs	r2, #2
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff fbe7 	bl	8001aa0 <SUBGRF_SetTxParams>

    return paSelect;
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_SUBGHZ_TxCpltCallback>:
    return RF_WAKEUP_TIME;
}

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 80022e4:	4b03      	ldr	r3, [pc, #12]	@ (80022f4 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2001      	movs	r0, #1
 80022ea:	4798      	blx	r3
}
 80022ec:	bf00      	nop
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20000470 	.word	0x20000470

080022f8 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8002300:	4b03      	ldr	r3, [pc, #12]	@ (8002310 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2002      	movs	r0, #2
 8002306:	4798      	blx	r3
}
 8002308:	bf00      	nop
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	20000470 	.word	0x20000470

08002314 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800231c:	4b03      	ldr	r3, [pc, #12]	@ (800232c <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2040      	movs	r0, #64	@ 0x40
 8002322:	4798      	blx	r3
}
 8002324:	bf00      	nop
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	20000470 	.word	0x20000470

08002330 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	460b      	mov	r3, r1
 800233a:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800233c:	78fb      	ldrb	r3, [r7, #3]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d002      	beq.n	8002348 <HAL_SUBGHZ_CADStatusCallback+0x18>
 8002342:	2b01      	cmp	r3, #1
 8002344:	d005      	beq.n	8002352 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8002346:	e00a      	b.n	800235e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8002348:	4b07      	ldr	r3, [pc, #28]	@ (8002368 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2080      	movs	r0, #128	@ 0x80
 800234e:	4798      	blx	r3
            break;
 8002350:	e005      	b.n	800235e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8002352:	4b05      	ldr	r3, [pc, #20]	@ (8002368 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800235a:	4798      	blx	r3
            break;
 800235c:	bf00      	nop
    }
}
 800235e:	bf00      	nop
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20000470 	.word	0x20000470

0800236c <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8002374:	4b04      	ldr	r3, [pc, #16]	@ (8002388 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800237c:	4798      	blx	r3
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	20000470 	.word	0x20000470

0800238c <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8002394:	4b03      	ldr	r3, [pc, #12]	@ (80023a4 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2020      	movs	r0, #32
 800239a:	4798      	blx	r3
}
 800239c:	bf00      	nop
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	20000470 	.word	0x20000470

080023a8 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 80023b0:	4b03      	ldr	r3, [pc, #12]	@ (80023c0 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2004      	movs	r0, #4
 80023b6:	4798      	blx	r3
}
 80023b8:	bf00      	nop
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	20000470 	.word	0x20000470

080023c4 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 80023cc:	4b03      	ldr	r3, [pc, #12]	@ (80023dc <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2008      	movs	r0, #8
 80023d2:	4798      	blx	r3
}
 80023d4:	bf00      	nop
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	20000470 	.word	0x20000470

080023e0 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 80023e8:	4b03      	ldr	r3, [pc, #12]	@ (80023f8 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2010      	movs	r0, #16
 80023ee:	4798      	blx	r3
}
 80023f0:	bf00      	nop
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20000470 	.word	0x20000470

080023fc <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8002404:	4b04      	ldr	r3, [pc, #16]	@ (8002418 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800240c:	4798      	blx	r3
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20000470 	.word	0x20000470

0800241c <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8002426:	f7ff f806 	bl	8001436 <RBI_IsDCDC>
 800242a:	4603      	mov	r3, r0
 800242c:	2b01      	cmp	r3, #1
 800242e:	d112      	bne.n	8002456 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8002430:	f640 1023 	movw	r0, #2339	@ 0x923
 8002434:	f7ff fe16 	bl	8002064 <SUBGRF_ReadRegister>
 8002438:	4603      	mov	r3, r0
 800243a:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800243c:	7bfb      	ldrb	r3, [r7, #15]
 800243e:	f023 0306 	bic.w	r3, r3, #6
 8002442:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8002444:	7bfa      	ldrb	r2, [r7, #15]
 8002446:	79fb      	ldrb	r3, [r7, #7]
 8002448:	4313      	orrs	r3, r2
 800244a:	b2db      	uxtb	r3, r3
 800244c:	4619      	mov	r1, r3
 800244e:	f640 1023 	movw	r0, #2339	@ 0x923
 8002452:	f7ff fdf3 	bl	800203c <SUBGRF_WriteRegister>
  }
}
 8002456:	bf00      	nop
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
	...

08002460 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002466:	2300      	movs	r3, #0
 8002468:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800246a:	2003      	movs	r0, #3
 800246c:	f000 f982 	bl	8002774 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002470:	f001 fc50 	bl	8003d14 <HAL_RCC_GetHCLKFreq>
 8002474:	4603      	mov	r3, r0
 8002476:	4a09      	ldr	r2, [pc, #36]	@ (800249c <HAL_Init+0x3c>)
 8002478:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800247a:	2000      	movs	r0, #0
 800247c:	f000 f810 	bl	80024a0 <HAL_InitTick>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d002      	beq.n	800248c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	71fb      	strb	r3, [r7, #7]
 800248a:	e001      	b.n	8002490 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800248c:	f7fe fc82 	bl	8000d94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002490:	79fb      	ldrb	r3, [r7, #7]
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	2000001c 	.word	0x2000001c

080024a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024a8:	2300      	movs	r3, #0
 80024aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80024ac:	4b17      	ldr	r3, [pc, #92]	@ (800250c <HAL_InitTick+0x6c>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d024      	beq.n	80024fe <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80024b4:	f001 fc2e 	bl	8003d14 <HAL_RCC_GetHCLKFreq>
 80024b8:	4602      	mov	r2, r0
 80024ba:	4b14      	ldr	r3, [pc, #80]	@ (800250c <HAL_InitTick+0x6c>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	4619      	mov	r1, r3
 80024c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024c4:	fbb3 f3f1 	udiv	r3, r3, r1
 80024c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024cc:	4618      	mov	r0, r3
 80024ce:	f000 f992 	bl	80027f6 <HAL_SYSTICK_Config>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10f      	bne.n	80024f8 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b0f      	cmp	r3, #15
 80024dc:	d809      	bhi.n	80024f2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024de:	2200      	movs	r2, #0
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	f04f 30ff 	mov.w	r0, #4294967295
 80024e6:	f000 f950 	bl	800278a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024ea:	4a09      	ldr	r2, [pc, #36]	@ (8002510 <HAL_InitTick+0x70>)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6013      	str	r3, [r2, #0]
 80024f0:	e007      	b.n	8002502 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	73fb      	strb	r3, [r7, #15]
 80024f6:	e004      	b.n	8002502 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	73fb      	strb	r3, [r7, #15]
 80024fc:	e001      	b.n	8002502 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002502:	7bfb      	ldrb	r3, [r7, #15]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	20000030 	.word	0x20000030
 8002510:	2000002c 	.word	0x2000002c

08002514 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002518:	4b05      	ldr	r3, [pc, #20]	@ (8002530 <HAL_IncTick+0x1c>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	461a      	mov	r2, r3
 800251e:	4b05      	ldr	r3, [pc, #20]	@ (8002534 <HAL_IncTick+0x20>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4413      	add	r3, r2
 8002524:	4a03      	ldr	r2, [pc, #12]	@ (8002534 <HAL_IncTick+0x20>)
 8002526:	6013      	str	r3, [r2, #0]
}
 8002528:	bf00      	nop
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr
 8002530:	20000030 	.word	0x20000030
 8002534:	20000474 	.word	0x20000474

08002538 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  return uwTick;
 800253c:	4b02      	ldr	r3, [pc, #8]	@ (8002548 <HAL_GetTick+0x10>)
 800253e:	681b      	ldr	r3, [r3, #0]
}
 8002540:	4618      	mov	r0, r3
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr
 8002548:	20000474 	.word	0x20000474

0800254c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002554:	f7ff fff0 	bl	8002538 <HAL_GetTick>
 8002558:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002564:	d005      	beq.n	8002572 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002566:	4b0a      	ldr	r3, [pc, #40]	@ (8002590 <HAL_Delay+0x44>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	461a      	mov	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4413      	add	r3, r2
 8002570:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002572:	bf00      	nop
 8002574:	f7ff ffe0 	bl	8002538 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	429a      	cmp	r2, r3
 8002582:	d8f7      	bhi.n	8002574 <HAL_Delay+0x28>
  {
  }
}
 8002584:	bf00      	nop
 8002586:	bf00      	nop
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	20000030 	.word	0x20000030

08002594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025a4:	4b0c      	ldr	r3, [pc, #48]	@ (80025d8 <__NVIC_SetPriorityGrouping+0x44>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025b0:	4013      	ands	r3, r2
 80025b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025c6:	4a04      	ldr	r2, [pc, #16]	@ (80025d8 <__NVIC_SetPriorityGrouping+0x44>)
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	60d3      	str	r3, [r2, #12]
}
 80025cc:	bf00      	nop
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bc80      	pop	{r7}
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025e0:	4b04      	ldr	r3, [pc, #16]	@ (80025f4 <__NVIC_GetPriorityGrouping+0x18>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	0a1b      	lsrs	r3, r3, #8
 80025e6:	f003 0307 	and.w	r3, r3, #7
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002606:	2b00      	cmp	r3, #0
 8002608:	db0b      	blt.n	8002622 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800260a:	79fb      	ldrb	r3, [r7, #7]
 800260c:	f003 021f 	and.w	r2, r3, #31
 8002610:	4906      	ldr	r1, [pc, #24]	@ (800262c <__NVIC_EnableIRQ+0x34>)
 8002612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002616:	095b      	lsrs	r3, r3, #5
 8002618:	2001      	movs	r0, #1
 800261a:	fa00 f202 	lsl.w	r2, r0, r2
 800261e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr
 800262c:	e000e100 	.word	0xe000e100

08002630 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800263a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263e:	2b00      	cmp	r3, #0
 8002640:	db12      	blt.n	8002668 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002642:	79fb      	ldrb	r3, [r7, #7]
 8002644:	f003 021f 	and.w	r2, r3, #31
 8002648:	490a      	ldr	r1, [pc, #40]	@ (8002674 <__NVIC_DisableIRQ+0x44>)
 800264a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264e:	095b      	lsrs	r3, r3, #5
 8002650:	2001      	movs	r0, #1
 8002652:	fa00 f202 	lsl.w	r2, r0, r2
 8002656:	3320      	adds	r3, #32
 8002658:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800265c:	f3bf 8f4f 	dsb	sy
}
 8002660:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002662:	f3bf 8f6f 	isb	sy
}
 8002666:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	e000e100 	.word	0xe000e100

08002678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	6039      	str	r1, [r7, #0]
 8002682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002688:	2b00      	cmp	r3, #0
 800268a:	db0a      	blt.n	80026a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	b2da      	uxtb	r2, r3
 8002690:	490c      	ldr	r1, [pc, #48]	@ (80026c4 <__NVIC_SetPriority+0x4c>)
 8002692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002696:	0112      	lsls	r2, r2, #4
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	440b      	add	r3, r1
 800269c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026a0:	e00a      	b.n	80026b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	4908      	ldr	r1, [pc, #32]	@ (80026c8 <__NVIC_SetPriority+0x50>)
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	3b04      	subs	r3, #4
 80026b0:	0112      	lsls	r2, r2, #4
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	440b      	add	r3, r1
 80026b6:	761a      	strb	r2, [r3, #24]
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	bc80      	pop	{r7}
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	e000e100 	.word	0xe000e100
 80026c8:	e000ed00 	.word	0xe000ed00

080026cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b089      	sub	sp, #36	@ 0x24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f1c3 0307 	rsb	r3, r3, #7
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	bf28      	it	cs
 80026ea:	2304      	movcs	r3, #4
 80026ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3304      	adds	r3, #4
 80026f2:	2b06      	cmp	r3, #6
 80026f4:	d902      	bls.n	80026fc <NVIC_EncodePriority+0x30>
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3b03      	subs	r3, #3
 80026fa:	e000      	b.n	80026fe <NVIC_EncodePriority+0x32>
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002700:	f04f 32ff 	mov.w	r2, #4294967295
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43da      	mvns	r2, r3
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	401a      	ands	r2, r3
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002714:	f04f 31ff 	mov.w	r1, #4294967295
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	fa01 f303 	lsl.w	r3, r1, r3
 800271e:	43d9      	mvns	r1, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002724:	4313      	orrs	r3, r2
         );
}
 8002726:	4618      	mov	r0, r3
 8002728:	3724      	adds	r7, #36	@ 0x24
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr

08002730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3b01      	subs	r3, #1
 800273c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002740:	d301      	bcc.n	8002746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002742:	2301      	movs	r3, #1
 8002744:	e00f      	b.n	8002766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002746:	4a0a      	ldr	r2, [pc, #40]	@ (8002770 <SysTick_Config+0x40>)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3b01      	subs	r3, #1
 800274c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800274e:	210f      	movs	r1, #15
 8002750:	f04f 30ff 	mov.w	r0, #4294967295
 8002754:	f7ff ff90 	bl	8002678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002758:	4b05      	ldr	r3, [pc, #20]	@ (8002770 <SysTick_Config+0x40>)
 800275a:	2200      	movs	r2, #0
 800275c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800275e:	4b04      	ldr	r3, [pc, #16]	@ (8002770 <SysTick_Config+0x40>)
 8002760:	2207      	movs	r2, #7
 8002762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	e000e010 	.word	0xe000e010

08002774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f7ff ff09 	bl	8002594 <__NVIC_SetPriorityGrouping>
}
 8002782:	bf00      	nop
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b086      	sub	sp, #24
 800278e:	af00      	add	r7, sp, #0
 8002790:	4603      	mov	r3, r0
 8002792:	60b9      	str	r1, [r7, #8]
 8002794:	607a      	str	r2, [r7, #4]
 8002796:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002798:	f7ff ff20 	bl	80025dc <__NVIC_GetPriorityGrouping>
 800279c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	68b9      	ldr	r1, [r7, #8]
 80027a2:	6978      	ldr	r0, [r7, #20]
 80027a4:	f7ff ff92 	bl	80026cc <NVIC_EncodePriority>
 80027a8:	4602      	mov	r2, r0
 80027aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ae:	4611      	mov	r1, r2
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff ff61 	bl	8002678 <__NVIC_SetPriority>
}
 80027b6:	bf00      	nop
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b082      	sub	sp, #8
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	4603      	mov	r3, r0
 80027c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff ff13 	bl	80025f8 <__NVIC_EnableIRQ>
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	4603      	mov	r3, r0
 80027e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80027e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff ff21 	bl	8002630 <__NVIC_DisableIRQ>
}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7ff ff96 	bl	8002730 <SysTick_Config>
 8002804:	4603      	mov	r3, r0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e04f      	b.n	80028c0 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d008      	beq.n	800283e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2204      	movs	r2, #4
 8002830:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e040      	b.n	80028c0 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 020e 	bic.w	r2, r2, #14
 800284c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002858:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800285c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 0201 	bic.w	r2, r2, #1
 800286c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002872:	f003 021c 	and.w	r2, r3, #28
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287a:	2101      	movs	r1, #1
 800287c:	fa01 f202 	lsl.w	r2, r1, r2
 8002880:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800288a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00c      	beq.n	80028ae <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800289e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028a2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80028ac:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr

080028ca <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b084      	sub	sp, #16
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028d2:	2300      	movs	r3, #0
 80028d4:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d005      	beq.n	80028ee <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2204      	movs	r2, #4
 80028e6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	73fb      	strb	r3, [r7, #15]
 80028ec:	e047      	b.n	800297e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 020e 	bic.w	r2, r2, #14
 80028fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 0201 	bic.w	r2, r2, #1
 800290c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002918:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800291c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002922:	f003 021c 	and.w	r2, r3, #28
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292a:	2101      	movs	r1, #1
 800292c:	fa01 f202 	lsl.w	r2, r1, r2
 8002930:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800293a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00c      	beq.n	800295e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800294e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002952:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800295c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2201      	movs	r2, #1
 8002962:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	4798      	blx	r3
    }
  }
  return status;
 800297e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002980:	4618      	mov	r0, r3
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002988:	b480      	push	{r7}
 800298a:	b087      	sub	sp, #28
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002992:	2300      	movs	r3, #0
 8002994:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002996:	e140      	b.n	8002c1a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	2101      	movs	r1, #1
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	fa01 f303 	lsl.w	r3, r1, r3
 80029a4:	4013      	ands	r3, r2
 80029a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 8132 	beq.w	8002c14 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f003 0303 	and.w	r3, r3, #3
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d005      	beq.n	80029c8 <HAL_GPIO_Init+0x40>
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 0303 	and.w	r3, r3, #3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d130      	bne.n	8002a2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	2203      	movs	r2, #3
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4013      	ands	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	68da      	ldr	r2, [r3, #12]
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029fe:	2201      	movs	r2, #1
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	43db      	mvns	r3, r3
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	091b      	lsrs	r3, r3, #4
 8002a14:	f003 0201 	and.w	r2, r3, #1
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	2b03      	cmp	r3, #3
 8002a34:	d017      	beq.n	8002a66 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	2203      	movs	r2, #3
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	43db      	mvns	r3, r3
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f003 0303 	and.w	r3, r3, #3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d123      	bne.n	8002aba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	08da      	lsrs	r2, r3, #3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	3208      	adds	r2, #8
 8002a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	220f      	movs	r2, #15
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	4013      	ands	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	691a      	ldr	r2, [r3, #16]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	08da      	lsrs	r2, r3, #3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3208      	adds	r2, #8
 8002ab4:	6939      	ldr	r1, [r7, #16]
 8002ab6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	2203      	movs	r2, #3
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	43db      	mvns	r3, r3
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f003 0203 	and.w	r2, r3, #3
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 808c 	beq.w	8002c14 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002afc:	4a4e      	ldr	r2, [pc, #312]	@ (8002c38 <HAL_GPIO_Init+0x2b0>)
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	089b      	lsrs	r3, r3, #2
 8002b02:	3302      	adds	r3, #2
 8002b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f003 0303 	and.w	r3, r3, #3
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	2207      	movs	r2, #7
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002b26:	d00d      	beq.n	8002b44 <HAL_GPIO_Init+0x1bc>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a44      	ldr	r2, [pc, #272]	@ (8002c3c <HAL_GPIO_Init+0x2b4>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d007      	beq.n	8002b40 <HAL_GPIO_Init+0x1b8>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a43      	ldr	r2, [pc, #268]	@ (8002c40 <HAL_GPIO_Init+0x2b8>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d101      	bne.n	8002b3c <HAL_GPIO_Init+0x1b4>
 8002b38:	2302      	movs	r3, #2
 8002b3a:	e004      	b.n	8002b46 <HAL_GPIO_Init+0x1be>
 8002b3c:	2307      	movs	r3, #7
 8002b3e:	e002      	b.n	8002b46 <HAL_GPIO_Init+0x1be>
 8002b40:	2301      	movs	r3, #1
 8002b42:	e000      	b.n	8002b46 <HAL_GPIO_Init+0x1be>
 8002b44:	2300      	movs	r3, #0
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	f002 0203 	and.w	r2, r2, #3
 8002b4c:	0092      	lsls	r2, r2, #2
 8002b4e:	4093      	lsls	r3, r2
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b56:	4938      	ldr	r1, [pc, #224]	@ (8002c38 <HAL_GPIO_Init+0x2b0>)
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	089b      	lsrs	r3, r3, #2
 8002b5c:	3302      	adds	r3, #2
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b64:	4b37      	ldr	r3, [pc, #220]	@ (8002c44 <HAL_GPIO_Init+0x2bc>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	4013      	ands	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b88:	4a2e      	ldr	r2, [pc, #184]	@ (8002c44 <HAL_GPIO_Init+0x2bc>)
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002b8e:	4b2d      	ldr	r3, [pc, #180]	@ (8002c44 <HAL_GPIO_Init+0x2bc>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	43db      	mvns	r3, r3
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002bb2:	4a24      	ldr	r2, [pc, #144]	@ (8002c44 <HAL_GPIO_Init+0x2bc>)
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002bb8:	4b22      	ldr	r3, [pc, #136]	@ (8002c44 <HAL_GPIO_Init+0x2bc>)
 8002bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002bbe:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002bde:	4a19      	ldr	r2, [pc, #100]	@ (8002c44 <HAL_GPIO_Init+0x2bc>)
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002be6:	4b17      	ldr	r3, [pc, #92]	@ (8002c44 <HAL_GPIO_Init+0x2bc>)
 8002be8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bec:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d003      	beq.n	8002c0c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8002c44 <HAL_GPIO_Init+0x2bc>)
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	3301      	adds	r3, #1
 8002c18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	fa22 f303 	lsr.w	r3, r2, r3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f47f aeb7 	bne.w	8002998 <HAL_GPIO_Init+0x10>
  }
}
 8002c2a:	bf00      	nop
 8002c2c:	bf00      	nop
 8002c2e:	371c      	adds	r7, #28
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bc80      	pop	{r7}
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	40010000 	.word	0x40010000
 8002c3c:	48000400 	.word	0x48000400
 8002c40:	48000800 	.word	0x48000800
 8002c44:	58000800 	.word	0x58000800

08002c48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	460b      	mov	r3, r1
 8002c52:	807b      	strh	r3, [r7, #2]
 8002c54:	4613      	mov	r3, r2
 8002c56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c58:	787b      	ldrb	r3, [r7, #1]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c5e:	887a      	ldrh	r2, [r7, #2]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c64:	e002      	b.n	8002c6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c66:	887a      	ldrh	r2, [r7, #2]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bc80      	pop	{r7}
 8002c74:	4770      	bx	lr

08002c76 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b085      	sub	sp, #20
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
 8002c7e:	460b      	mov	r3, r1
 8002c80:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c88:	887a      	ldrh	r2, [r7, #2]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	041a      	lsls	r2, r3, #16
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	43d9      	mvns	r1, r3
 8002c94:	887b      	ldrh	r3, [r7, #2]
 8002c96:	400b      	ands	r3, r1
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	619a      	str	r2, [r3, #24]
}
 8002c9e:	bf00      	nop
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bc80      	pop	{r7}
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cac:	4b04      	ldr	r3, [pc, #16]	@ (8002cc0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a03      	ldr	r2, [pc, #12]	@ (8002cc0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002cb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cb6:	6013      	str	r3, [r2, #0]
}
 8002cb8:	bf00      	nop
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr
 8002cc0:	58000400 	.word	0x58000400

08002cc4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002cc8:	4b03      	ldr	r3, [pc, #12]	@ (8002cd8 <HAL_PWREx_GetVoltageRange+0x14>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr
 8002cd8:	58000400 	.word	0x58000400

08002cdc <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002ce0:	4b06      	ldr	r3, [pc, #24]	@ (8002cfc <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ce8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cec:	d101      	bne.n	8002cf2 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr
 8002cfc:	58000400 	.word	0x58000400

08002d00 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002d04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d0e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002d12:	6013      	str	r3, [r2, #0]
}
 8002d14:	bf00      	nop
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr

08002d1c <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002d20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d2a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002d2e:	6013      	str	r3, [r2, #0]
}
 8002d30:	bf00      	nop
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr

08002d38 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002d3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d4a:	d101      	bne.n	8002d50 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e000      	b.n	8002d52 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bc80      	pop	{r7}
 8002d58:	4770      	bx	lr

08002d5a <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002d5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d6c:	6013      	str	r3, [r2, #0]
}
 8002d6e:	bf00      	nop
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bc80      	pop	{r7}
 8002d74:	4770      	bx	lr

08002d76 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002d76:	b480      	push	{r7}
 8002d78:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002d7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d88:	6013      	str	r3, [r2, #0]
}
 8002d8a:	bf00      	nop
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bc80      	pop	{r7}
 8002d90:	4770      	bx	lr

08002d92 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002d92:	b480      	push	{r7}
 8002d94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002d96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002da4:	d101      	bne.n	8002daa <LL_RCC_HSE_IsReady+0x18>
 8002da6:	2301      	movs	r3, #1
 8002da8:	e000      	b.n	8002dac <LL_RCC_HSE_IsReady+0x1a>
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bc80      	pop	{r7}
 8002db2:	4770      	bx	lr

08002db4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002db8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002dc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dc6:	6013      	str	r3, [r2, #0]
}
 8002dc8:	bf00      	nop
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr

08002dd0 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002dd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002dde:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002de2:	6013      	str	r3, [r2, #0]
}
 8002de4:	bf00      	nop
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr

08002dec <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002df0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dfe:	d101      	bne.n	8002e04 <LL_RCC_HSI_IsReady+0x18>
 8002e00:	2301      	movs	r3, #1
 8002e02:	e000      	b.n	8002e06 <LL_RCC_HSI_IsReady+0x1a>
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc80      	pop	{r7}
 8002e0c:	4770      	bx	lr

08002e0e <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002e16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	061b      	lsls	r3, r3, #24
 8002e24:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	604b      	str	r3, [r1, #4]
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bc80      	pop	{r7}
 8002e34:	4770      	bx	lr

08002e36 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002e36:	b480      	push	{r7}
 8002e38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002e3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d101      	bne.n	8002e4e <LL_RCC_LSE_IsReady+0x18>
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <LL_RCC_LSE_IsReady+0x1a>
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr

08002e58 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002e5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e64:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002e70:	bf00      	nop
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr

08002e78 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002e7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e88:	f023 0301 	bic.w	r3, r3, #1
 8002e8c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002e90:	bf00      	nop
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bc80      	pop	{r7}
 8002e96:	4770      	bx	lr

08002e98 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002e9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ea0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d101      	bne.n	8002eb0 <LL_RCC_LSI_IsReady+0x18>
 8002eac:	2301      	movs	r3, #1
 8002eae:	e000      	b.n	8002eb2 <LL_RCC_LSI_IsReady+0x1a>
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bc80      	pop	{r7}
 8002eb8:	4770      	bx	lr

08002eba <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002ebe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ec8:	f043 0301 	orr.w	r3, r3, #1
 8002ecc:	6013      	str	r3, [r2, #0]
}
 8002ece:	bf00      	nop
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr

08002ed6 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002eda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ee4:	f023 0301 	bic.w	r3, r3, #1
 8002ee8:	6013      	str	r3, [r2, #0]
}
 8002eea:	bf00      	nop
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bc80      	pop	{r7}
 8002ef0:	4770      	bx	lr

08002ef2 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002ef6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d101      	bne.n	8002f08 <LL_RCC_MSI_IsReady+0x16>
 8002f04:	2301      	movs	r3, #1
 8002f06:	e000      	b.n	8002f0a <LL_RCC_MSI_IsReady+0x18>
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr

08002f12 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8002f12:	b480      	push	{r7}
 8002f14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002f16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0308 	and.w	r3, r3, #8
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	d101      	bne.n	8002f28 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002f24:	2301      	movs	r3, #1
 8002f26:	e000      	b.n	8002f2a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bc80      	pop	{r7}
 8002f30:	4770      	bx	lr

08002f32 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002f32:	b480      	push	{r7}
 8002f34:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002f36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bc80      	pop	{r7}
 8002f46:	4770      	bx	lr

08002f48 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002f4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f54:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr

08002f60 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002f68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	021b      	lsls	r3, r3, #8
 8002f76:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	604b      	str	r3, [r1, #4]
}
 8002f7e:	bf00      	nop
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bc80      	pop	{r7}
 8002f86:	4770      	bx	lr

08002f88 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002f90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f023 0203 	bic.w	r2, r3, #3
 8002f9a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	608b      	str	r3, [r1, #8]
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr

08002fae <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002fb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f003 030c 	and.w	r3, r3, #12
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bc80      	pop	{r7}
 8002fc2:	4770      	bx	lr

08002fc4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002fcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fd6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	608b      	str	r3, [r1, #8]
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bc80      	pop	{r7}
 8002fe8:	4770      	bx	lr

08002fea <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002fea:	b480      	push	{r7}
 8002fec:	b083      	sub	sp, #12
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002ff2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ff6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002ffa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ffe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4313      	orrs	r3, r2
 8003006:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800300a:	bf00      	nop
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	bc80      	pop	{r7}
 8003012:	4770      	bx	lr

08003014 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800301c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003020:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003024:	f023 020f 	bic.w	r2, r3, #15
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	091b      	lsrs	r3, r3, #4
 800302c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003030:	4313      	orrs	r3, r2
 8003032:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr

08003040 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003048:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003052:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4313      	orrs	r3, r2
 800305a:	608b      	str	r3, [r1, #8]
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	bc80      	pop	{r7}
 8003064:	4770      	bx	lr

08003066 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003066:	b480      	push	{r7}
 8003068:	b083      	sub	sp, #12
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800306e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003078:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4313      	orrs	r3, r2
 8003080:	608b      	str	r3, [r1, #8]
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr

0800308c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003090:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800309a:	4618      	mov	r0, r3
 800309c:	46bd      	mov	sp, r7
 800309e:	bc80      	pop	{r7}
 80030a0:	4770      	bx	lr

080030a2 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 80030a2:	b480      	push	{r7}
 80030a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80030a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030aa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80030ae:	011b      	lsls	r3, r3, #4
 80030b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr

080030bc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80030c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bc80      	pop	{r7}
 80030d0:	4770      	bx	lr

080030d2 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80030d2:	b480      	push	{r7}
 80030d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80030d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bc80      	pop	{r7}
 80030e6:	4770      	bx	lr

080030e8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80030ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030fa:	6013      	str	r3, [r2, #0]
}
 80030fc:	bf00      	nop
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc80      	pop	{r7}
 8003102:	4770      	bx	lr

08003104 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003108:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003112:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003116:	6013      	str	r3, [r2, #0]
}
 8003118:	bf00      	nop
 800311a:	46bd      	mov	sp, r7
 800311c:	bc80      	pop	{r7}
 800311e:	4770      	bx	lr

08003120 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003124:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800312e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003132:	d101      	bne.n	8003138 <LL_RCC_PLL_IsReady+0x18>
 8003134:	2301      	movs	r3, #1
 8003136:	e000      	b.n	800313a <LL_RCC_PLL_IsReady+0x1a>
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	46bd      	mov	sp, r7
 800313e:	bc80      	pop	{r7}
 8003140:	4770      	bx	lr

08003142 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003142:	b480      	push	{r7}
 8003144:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003146:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	0a1b      	lsrs	r3, r3, #8
 800314e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8003152:	4618      	mov	r0, r3
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr

0800315a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800315a:	b480      	push	{r7}
 800315c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800315e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8003168:	4618      	mov	r0, r3
 800316a:	46bd      	mov	sp, r7
 800316c:	bc80      	pop	{r7}
 800316e:	4770      	bx	lr

08003170 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003174:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800317e:	4618      	mov	r0, r3
 8003180:	46bd      	mov	sp, r7
 8003182:	bc80      	pop	{r7}
 8003184:	4770      	bx	lr

08003186 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003186:	b480      	push	{r7}
 8003188:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800318a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	f003 0303 	and.w	r3, r3, #3
}
 8003194:	4618      	mov	r0, r3
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr

0800319c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80031a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031ae:	d101      	bne.n	80031b4 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80031b0:	2301      	movs	r3, #1
 80031b2:	e000      	b.n	80031b6 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bc80      	pop	{r7}
 80031bc:	4770      	bx	lr

080031be <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80031be:	b480      	push	{r7}
 80031c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80031c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80031ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80031d2:	d101      	bne.n	80031d8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80031d4:	2301      	movs	r3, #1
 80031d6:	e000      	b.n	80031da <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	46bd      	mov	sp, r7
 80031de:	bc80      	pop	{r7}
 80031e0:	4770      	bx	lr

080031e2 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80031e2:	b480      	push	{r7}
 80031e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80031e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031ea:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80031ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031f6:	d101      	bne.n	80031fc <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80031f8:	2301      	movs	r3, #1
 80031fa:	e000      	b.n	80031fe <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	46bd      	mov	sp, r7
 8003202:	bc80      	pop	{r7}
 8003204:	4770      	bx	lr

08003206 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003206:	b480      	push	{r7}
 8003208:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800320a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003214:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003218:	d101      	bne.n	800321e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800321a:	2301      	movs	r3, #1
 800321c:	e000      	b.n	8003220 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	46bd      	mov	sp, r7
 8003224:	bc80      	pop	{r7}
 8003226:	4770      	bx	lr

08003228 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800322c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003236:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800323a:	d101      	bne.n	8003240 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800323c:	2301      	movs	r3, #1
 800323e:	e000      	b.n	8003242 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	46bd      	mov	sp, r7
 8003246:	bc80      	pop	{r7}
 8003248:	4770      	bx	lr
	...

0800324c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b088      	sub	sp, #32
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e36f      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800325e:	f7ff fea6 	bl	8002fae <LL_RCC_GetSysClkSource>
 8003262:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003264:	f7ff ff8f 	bl	8003186 <LL_RCC_PLL_GetMainSource>
 8003268:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0320 	and.w	r3, r3, #32
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 80c4 	beq.w	8003400 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d005      	beq.n	800328a <HAL_RCC_OscConfig+0x3e>
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	2b0c      	cmp	r3, #12
 8003282:	d176      	bne.n	8003372 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d173      	bne.n	8003372 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e353      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800329a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0308 	and.w	r3, r3, #8
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d005      	beq.n	80032b4 <HAL_RCC_OscConfig+0x68>
 80032a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032b2:	e006      	b.n	80032c2 <HAL_RCC_OscConfig+0x76>
 80032b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032bc:	091b      	lsrs	r3, r3, #4
 80032be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d222      	bcs.n	800330c <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 fd5a 	bl	8003d84 <RCC_SetFlashLatencyFromMSIRange>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e331      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80032e4:	f043 0308 	orr.w	r3, r3, #8
 80032e8:	6013      	str	r3, [r2, #0]
 80032ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80032fc:	4313      	orrs	r3, r2
 80032fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff fe2b 	bl	8002f60 <LL_RCC_MSI_SetCalibTrimming>
 800330a:	e021      	b.n	8003350 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800330c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003316:	f043 0308 	orr.w	r3, r3, #8
 800331a:	6013      	str	r3, [r2, #0]
 800331c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800332a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800332e:	4313      	orrs	r3, r2
 8003330:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003336:	4618      	mov	r0, r3
 8003338:	f7ff fe12 	bl	8002f60 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003340:	4618      	mov	r0, r3
 8003342:	f000 fd1f 	bl	8003d84 <RCC_SetFlashLatencyFromMSIRange>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e2f6      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003350:	f000 fce0 	bl	8003d14 <HAL_RCC_GetHCLKFreq>
 8003354:	4603      	mov	r3, r0
 8003356:	4aa7      	ldr	r2, [pc, #668]	@ (80035f4 <HAL_RCC_OscConfig+0x3a8>)
 8003358:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800335a:	4ba7      	ldr	r3, [pc, #668]	@ (80035f8 <HAL_RCC_OscConfig+0x3ac>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f7ff f89e 	bl	80024a0 <HAL_InitTick>
 8003364:	4603      	mov	r3, r0
 8003366:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8003368:	7cfb      	ldrb	r3, [r7, #19]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d047      	beq.n	80033fe <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800336e:	7cfb      	ldrb	r3, [r7, #19]
 8003370:	e2e5      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d02c      	beq.n	80033d4 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800337a:	f7ff fd9e 	bl	8002eba <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800337e:	f7ff f8db 	bl	8002538 <HAL_GetTick>
 8003382:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003384:	e008      	b.n	8003398 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003386:	f7ff f8d7 	bl	8002538 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e2d2      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003398:	f7ff fdab 	bl	8002ef2 <LL_RCC_MSI_IsReady>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0f1      	beq.n	8003386 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80033ac:	f043 0308 	orr.w	r3, r3, #8
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80033c4:	4313      	orrs	r3, r2
 80033c6:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff fdc7 	bl	8002f60 <LL_RCC_MSI_SetCalibTrimming>
 80033d2:	e015      	b.n	8003400 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80033d4:	f7ff fd7f 	bl	8002ed6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033d8:	f7ff f8ae 	bl	8002538 <HAL_GetTick>
 80033dc:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033e0:	f7ff f8aa 	bl	8002538 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e2a5      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80033f2:	f7ff fd7e 	bl	8002ef2 <LL_RCC_MSI_IsReady>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1f1      	bne.n	80033e0 <HAL_RCC_OscConfig+0x194>
 80033fc:	e000      	b.n	8003400 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80033fe:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b00      	cmp	r3, #0
 800340a:	d058      	beq.n	80034be <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	2b08      	cmp	r3, #8
 8003410:	d005      	beq.n	800341e <HAL_RCC_OscConfig+0x1d2>
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	2b0c      	cmp	r3, #12
 8003416:	d108      	bne.n	800342a <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	2b03      	cmp	r3, #3
 800341c:	d105      	bne.n	800342a <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d14b      	bne.n	80034be <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e289      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800342a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800343c:	4313      	orrs	r3, r2
 800343e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003448:	d102      	bne.n	8003450 <HAL_RCC_OscConfig+0x204>
 800344a:	f7ff fc86 	bl	8002d5a <LL_RCC_HSE_Enable>
 800344e:	e00d      	b.n	800346c <HAL_RCC_OscConfig+0x220>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8003458:	d104      	bne.n	8003464 <HAL_RCC_OscConfig+0x218>
 800345a:	f7ff fc51 	bl	8002d00 <LL_RCC_HSE_EnableTcxo>
 800345e:	f7ff fc7c 	bl	8002d5a <LL_RCC_HSE_Enable>
 8003462:	e003      	b.n	800346c <HAL_RCC_OscConfig+0x220>
 8003464:	f7ff fc87 	bl	8002d76 <LL_RCC_HSE_Disable>
 8003468:	f7ff fc58 	bl	8002d1c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d012      	beq.n	800349a <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003474:	f7ff f860 	bl	8002538 <HAL_GetTick>
 8003478:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800347c:	f7ff f85c 	bl	8002538 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b64      	cmp	r3, #100	@ 0x64
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e257      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800348e:	f7ff fc80 	bl	8002d92 <LL_RCC_HSE_IsReady>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0f1      	beq.n	800347c <HAL_RCC_OscConfig+0x230>
 8003498:	e011      	b.n	80034be <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349a:	f7ff f84d 	bl	8002538 <HAL_GetTick>
 800349e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80034a0:	e008      	b.n	80034b4 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034a2:	f7ff f849 	bl	8002538 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b64      	cmp	r3, #100	@ 0x64
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e244      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80034b4:	f7ff fc6d 	bl	8002d92 <LL_RCC_HSE_IsReady>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1f1      	bne.n	80034a2 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d046      	beq.n	8003558 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d005      	beq.n	80034dc <HAL_RCC_OscConfig+0x290>
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	2b0c      	cmp	r3, #12
 80034d4:	d10e      	bne.n	80034f4 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d10b      	bne.n	80034f4 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e22a      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff fc8e 	bl	8002e0e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80034f2:	e031      	b.n	8003558 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d019      	beq.n	8003530 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034fc:	f7ff fc5a 	bl	8002db4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003500:	f7ff f81a 	bl	8002538 <HAL_GetTick>
 8003504:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003508:	f7ff f816 	bl	8002538 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e211      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800351a:	f7ff fc67 	bl	8002dec <LL_RCC_HSI_IsReady>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0f1      	beq.n	8003508 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff fc70 	bl	8002e0e <LL_RCC_HSI_SetCalibTrimming>
 800352e:	e013      	b.n	8003558 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003530:	f7ff fc4e 	bl	8002dd0 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003534:	f7ff f800 	bl	8002538 <HAL_GetTick>
 8003538:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800353c:	f7fe fffc 	bl	8002538 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e1f7      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800354e:	f7ff fc4d 	bl	8002dec <LL_RCC_HSI_IsReady>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1f1      	bne.n	800353c <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0308 	and.w	r3, r3, #8
 8003560:	2b00      	cmp	r3, #0
 8003562:	d06e      	beq.n	8003642 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d056      	beq.n	800361a <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 800356c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003570:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003574:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	69da      	ldr	r2, [r3, #28]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f003 0310 	and.w	r3, r3, #16
 8003580:	429a      	cmp	r2, r3
 8003582:	d031      	beq.n	80035e8 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d006      	beq.n	800359c <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e1d0      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d013      	beq.n	80035ce <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80035a6:	f7ff fc67 	bl	8002e78 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035aa:	f7fe ffc5 	bl	8002538 <HAL_GetTick>
 80035ae:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80035b0:	e008      	b.n	80035c4 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035b2:	f7fe ffc1 	bl	8002538 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b11      	cmp	r3, #17
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e1bc      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80035c4:	f7ff fc68 	bl	8002e98 <LL_RCC_LSI_IsReady>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1f1      	bne.n	80035b2 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80035ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035d6:	f023 0210 	bic.w	r2, r3, #16
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80035e2:	4313      	orrs	r3, r2
 80035e4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035e8:	f7ff fc36 	bl	8002e58 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ec:	f7fe ffa4 	bl	8002538 <HAL_GetTick>
 80035f0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80035f2:	e00c      	b.n	800360e <HAL_RCC_OscConfig+0x3c2>
 80035f4:	2000001c 	.word	0x2000001c
 80035f8:	2000002c 	.word	0x2000002c
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035fc:	f7fe ff9c 	bl	8002538 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b11      	cmp	r3, #17
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e197      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800360e:	f7ff fc43 	bl	8002e98 <LL_RCC_LSI_IsReady>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d0f1      	beq.n	80035fc <HAL_RCC_OscConfig+0x3b0>
 8003618:	e013      	b.n	8003642 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800361a:	f7ff fc2d 	bl	8002e78 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800361e:	f7fe ff8b 	bl	8002538 <HAL_GetTick>
 8003622:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8003624:	e008      	b.n	8003638 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003626:	f7fe ff87 	bl	8002538 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b11      	cmp	r3, #17
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e182      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8003638:	f7ff fc2e 	bl	8002e98 <LL_RCC_LSI_IsReady>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1f1      	bne.n	8003626 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0304 	and.w	r3, r3, #4
 800364a:	2b00      	cmp	r3, #0
 800364c:	f000 80d8 	beq.w	8003800 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003650:	f7ff fb44 	bl	8002cdc <LL_PWR_IsEnabledBkUpAccess>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d113      	bne.n	8003682 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800365a:	f7ff fb25 	bl	8002ca8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800365e:	f7fe ff6b 	bl	8002538 <HAL_GetTick>
 8003662:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003664:	e008      	b.n	8003678 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003666:	f7fe ff67 	bl	8002538 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e162      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003678:	f7ff fb30 	bl	8002cdc <LL_PWR_IsEnabledBkUpAccess>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d0f1      	beq.n	8003666 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d07b      	beq.n	8003782 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	2b85      	cmp	r3, #133	@ 0x85
 8003690:	d003      	beq.n	800369a <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	2b05      	cmp	r3, #5
 8003698:	d109      	bne.n	80036ae <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800369a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800369e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80036a6:	f043 0304 	orr.w	r3, r3, #4
 80036aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ae:	f7fe ff43 	bl	8002538 <HAL_GetTick>
 80036b2:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80036b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80036c0:	f043 0301 	orr.w	r3, r3, #1
 80036c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80036c8:	e00a      	b.n	80036e0 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ca:	f7fe ff35 	bl	8002538 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036d8:	4293      	cmp	r3, r2
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e12e      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80036e0:	f7ff fba9 	bl	8002e36 <LL_RCC_LSE_IsReady>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d0ef      	beq.n	80036ca <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	2b81      	cmp	r3, #129	@ 0x81
 80036f0:	d003      	beq.n	80036fa <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	2b85      	cmp	r3, #133	@ 0x85
 80036f8:	d121      	bne.n	800373e <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fa:	f7fe ff1d 	bl	8002538 <HAL_GetTick>
 80036fe:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003700:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003704:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003708:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800370c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003710:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003714:	e00a      	b.n	800372c <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003716:	f7fe ff0f 	bl	8002538 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003724:	4293      	cmp	r3, r2
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e108      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800372c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003730:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003734:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0ec      	beq.n	8003716 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800373c:	e060      	b.n	8003800 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373e:	f7fe fefb 	bl	8002538 <HAL_GetTick>
 8003742:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003744:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800374c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003750:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003754:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003758:	e00a      	b.n	8003770 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800375a:	f7fe feed 	bl	8002538 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003768:	4293      	cmp	r3, r2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e0e6      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003770:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003774:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003778:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1ec      	bne.n	800375a <HAL_RCC_OscConfig+0x50e>
 8003780:	e03e      	b.n	8003800 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003782:	f7fe fed9 	bl	8002538 <HAL_GetTick>
 8003786:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003788:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800378c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003790:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003794:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003798:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800379c:	e00a      	b.n	80037b4 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800379e:	f7fe fecb 	bl	8002538 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e0c4      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80037b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1ec      	bne.n	800379e <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037c4:	f7fe feb8 	bl	8002538 <HAL_GetTick>
 80037c8:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80037ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80037d6:	f023 0301 	bic.w	r3, r3, #1
 80037da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80037de:	e00a      	b.n	80037f6 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e0:	f7fe feaa 	bl	8002538 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e0a3      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80037f6:	f7ff fb1e 	bl	8002e36 <LL_RCC_LSE_IsReady>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1ef      	bne.n	80037e0 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 8099 	beq.w	800393c <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	2b0c      	cmp	r3, #12
 800380e:	d06c      	beq.n	80038ea <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003814:	2b02      	cmp	r3, #2
 8003816:	d14b      	bne.n	80038b0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003818:	f7ff fc74 	bl	8003104 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381c:	f7fe fe8c 	bl	8002538 <HAL_GetTick>
 8003820:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003824:	f7fe fe88 	bl	8002538 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b0a      	cmp	r3, #10
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e083      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003836:	f7ff fc73 	bl	8003120 <LL_RCC_PLL_IsReady>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1f1      	bne.n	8003824 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003840:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003844:	68da      	ldr	r2, [r3, #12]
 8003846:	4b40      	ldr	r3, [pc, #256]	@ (8003948 <HAL_RCC_OscConfig+0x6fc>)
 8003848:	4013      	ands	r3, r2
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003852:	4311      	orrs	r1, r2
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003858:	0212      	lsls	r2, r2, #8
 800385a:	4311      	orrs	r1, r2
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003860:	4311      	orrs	r1, r2
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003866:	4311      	orrs	r1, r2
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800386c:	430a      	orrs	r2, r1
 800386e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003872:	4313      	orrs	r3, r2
 8003874:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003876:	f7ff fc37 	bl	80030e8 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800387a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003884:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003888:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800388a:	f7fe fe55 	bl	8002538 <HAL_GetTick>
 800388e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8003890:	e008      	b.n	80038a4 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003892:	f7fe fe51 	bl	8002538 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b0a      	cmp	r3, #10
 800389e:	d901      	bls.n	80038a4 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e04c      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80038a4:	f7ff fc3c 	bl	8003120 <LL_RCC_PLL_IsReady>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d0f1      	beq.n	8003892 <HAL_RCC_OscConfig+0x646>
 80038ae:	e045      	b.n	800393c <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b0:	f7ff fc28 	bl	8003104 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b4:	f7fe fe40 	bl	8002538 <HAL_GetTick>
 80038b8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038bc:	f7fe fe3c 	bl	8002538 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b0a      	cmp	r3, #10
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e037      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80038ce:	f7ff fc27 	bl	8003120 <LL_RCC_PLL_IsReady>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1f1      	bne.n	80038bc <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80038d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80038e2:	4b1a      	ldr	r3, [pc, #104]	@ (800394c <HAL_RCC_OscConfig+0x700>)
 80038e4:	4013      	ands	r3, r2
 80038e6:	60cb      	str	r3, [r1, #12]
 80038e8:	e028      	b.n	800393c <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d101      	bne.n	80038f6 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e023      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	f003 0203 	and.w	r2, r3, #3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003908:	429a      	cmp	r2, r3
 800390a:	d115      	bne.n	8003938 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003916:	429a      	cmp	r2, r3
 8003918:	d10e      	bne.n	8003938 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003924:	021b      	lsls	r3, r3, #8
 8003926:	429a      	cmp	r2, r3
 8003928:	d106      	bne.n	8003938 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003934:	429a      	cmp	r2, r3
 8003936:	d001      	beq.n	800393c <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e000      	b.n	800393e <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3720      	adds	r7, #32
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	11c1808c 	.word	0x11c1808c
 800394c:	eefefffc 	.word	0xeefefffc

08003950 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e12c      	b.n	8003bbe <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003964:	4b98      	ldr	r3, [pc, #608]	@ (8003bc8 <HAL_RCC_ClockConfig+0x278>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	429a      	cmp	r2, r3
 8003970:	d91b      	bls.n	80039aa <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003972:	4b95      	ldr	r3, [pc, #596]	@ (8003bc8 <HAL_RCC_ClockConfig+0x278>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f023 0207 	bic.w	r2, r3, #7
 800397a:	4993      	ldr	r1, [pc, #588]	@ (8003bc8 <HAL_RCC_ClockConfig+0x278>)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	4313      	orrs	r3, r2
 8003980:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003982:	f7fe fdd9 	bl	8002538 <HAL_GetTick>
 8003986:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003988:	e008      	b.n	800399c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800398a:	f7fe fdd5 	bl	8002538 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d901      	bls.n	800399c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e110      	b.n	8003bbe <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800399c:	4b8a      	ldr	r3, [pc, #552]	@ (8003bc8 <HAL_RCC_ClockConfig+0x278>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d1ef      	bne.n	800398a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d016      	beq.n	80039e4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7ff fb02 	bl	8002fc4 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80039c0:	f7fe fdba 	bl	8002538 <HAL_GetTick>
 80039c4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80039c6:	e008      	b.n	80039da <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80039c8:	f7fe fdb6 	bl	8002538 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e0f1      	b.n	8003bbe <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80039da:	f7ff fbdf 	bl	800319c <LL_RCC_IsActiveFlag_HPRE>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d0f1      	beq.n	80039c8 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0320 	and.w	r3, r3, #32
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d016      	beq.n	8003a1e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7ff faf8 	bl	8002fea <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80039fa:	f7fe fd9d 	bl	8002538 <HAL_GetTick>
 80039fe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003a00:	e008      	b.n	8003a14 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a02:	f7fe fd99 	bl	8002538 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e0d4      	b.n	8003bbe <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003a14:	f7ff fbd3 	bl	80031be <LL_RCC_IsActiveFlag_C2HPRE>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d0f1      	beq.n	8003a02 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d016      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7ff faf0 	bl	8003014 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a34:	f7fe fd80 	bl	8002538 <HAL_GetTick>
 8003a38:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a3c:	f7fe fd7c 	bl	8002538 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e0b7      	b.n	8003bbe <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003a4e:	f7ff fbc8 	bl	80031e2 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0f1      	beq.n	8003a3c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0304 	and.w	r3, r3, #4
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d016      	beq.n	8003a92 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff fae9 	bl	8003040 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a6e:	f7fe fd63 	bl	8002538 <HAL_GetTick>
 8003a72:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003a74:	e008      	b.n	8003a88 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a76:	f7fe fd5f 	bl	8002538 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e09a      	b.n	8003bbe <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003a88:	f7ff fbbd 	bl	8003206 <LL_RCC_IsActiveFlag_PPRE1>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0f1      	beq.n	8003a76 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d017      	beq.n	8003ace <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff fade 	bl	8003066 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003aaa:	f7fe fd45 	bl	8002538 <HAL_GetTick>
 8003aae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003ab0:	e008      	b.n	8003ac4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003ab2:	f7fe fd41 	bl	8002538 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e07c      	b.n	8003bbe <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003ac4:	f7ff fbb0 	bl	8003228 <LL_RCC_IsActiveFlag_PPRE2>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d0f1      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d043      	beq.n	8003b62 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d106      	bne.n	8003af0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003ae2:	f7ff f956 	bl	8002d92 <LL_RCC_HSE_IsReady>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d11e      	bne.n	8003b2a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e066      	b.n	8003bbe <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	2b03      	cmp	r3, #3
 8003af6:	d106      	bne.n	8003b06 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003af8:	f7ff fb12 	bl	8003120 <LL_RCC_PLL_IsReady>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d113      	bne.n	8003b2a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e05b      	b.n	8003bbe <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d106      	bne.n	8003b1c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003b0e:	f7ff f9f0 	bl	8002ef2 <LL_RCC_MSI_IsReady>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d108      	bne.n	8003b2a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e050      	b.n	8003bbe <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003b1c:	f7ff f966 	bl	8002dec <LL_RCC_HSI_IsReady>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e049      	b.n	8003bbe <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7ff fa2a 	bl	8002f88 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b34:	f7fe fd00 	bl	8002538 <HAL_GetTick>
 8003b38:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b3a:	e00a      	b.n	8003b52 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b3c:	f7fe fcfc 	bl	8002538 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e035      	b.n	8003bbe <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b52:	f7ff fa2c 	bl	8002fae <LL_RCC_GetSysClkSource>
 8003b56:	4602      	mov	r2, r0
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d1ec      	bne.n	8003b3c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b62:	4b19      	ldr	r3, [pc, #100]	@ (8003bc8 <HAL_RCC_ClockConfig+0x278>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0307 	and.w	r3, r3, #7
 8003b6a:	683a      	ldr	r2, [r7, #0]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d21b      	bcs.n	8003ba8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b70:	4b15      	ldr	r3, [pc, #84]	@ (8003bc8 <HAL_RCC_ClockConfig+0x278>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f023 0207 	bic.w	r2, r3, #7
 8003b78:	4913      	ldr	r1, [pc, #76]	@ (8003bc8 <HAL_RCC_ClockConfig+0x278>)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b80:	f7fe fcda 	bl	8002538 <HAL_GetTick>
 8003b84:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003b88:	f7fe fcd6 	bl	8002538 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e011      	b.n	8003bbe <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8003bc8 <HAL_RCC_ClockConfig+0x278>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0307 	and.w	r3, r3, #7
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d1ef      	bne.n	8003b88 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003ba8:	f000 f8b4 	bl	8003d14 <HAL_RCC_GetHCLKFreq>
 8003bac:	4603      	mov	r3, r0
 8003bae:	4a07      	ldr	r2, [pc, #28]	@ (8003bcc <HAL_RCC_ClockConfig+0x27c>)
 8003bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8003bb2:	4b07      	ldr	r3, [pc, #28]	@ (8003bd0 <HAL_RCC_ClockConfig+0x280>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fe fc72 	bl	80024a0 <HAL_InitTick>
 8003bbc:	4603      	mov	r3, r0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	58004000 	.word	0x58004000
 8003bcc:	2000001c 	.word	0x2000001c
 8003bd0:	2000002c 	.word	0x2000002c

08003bd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bd4:	b590      	push	{r4, r7, lr}
 8003bd6:	b087      	sub	sp, #28
 8003bd8:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8003bde:	2300      	movs	r3, #0
 8003be0:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003be2:	f7ff f9e4 	bl	8002fae <LL_RCC_GetSysClkSource>
 8003be6:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003be8:	f7ff facd 	bl	8003186 <LL_RCC_PLL_GetMainSource>
 8003bec:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d005      	beq.n	8003c00 <HAL_RCC_GetSysClockFreq+0x2c>
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	2b0c      	cmp	r3, #12
 8003bf8:	d139      	bne.n	8003c6e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d136      	bne.n	8003c6e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003c00:	f7ff f987 	bl	8002f12 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d115      	bne.n	8003c36 <HAL_RCC_GetSysClockFreq+0x62>
 8003c0a:	f7ff f982 	bl	8002f12 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d106      	bne.n	8003c22 <HAL_RCC_GetSysClockFreq+0x4e>
 8003c14:	f7ff f98d 	bl	8002f32 <LL_RCC_MSI_GetRange>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	0a1b      	lsrs	r3, r3, #8
 8003c1c:	f003 030f 	and.w	r3, r3, #15
 8003c20:	e005      	b.n	8003c2e <HAL_RCC_GetSysClockFreq+0x5a>
 8003c22:	f7ff f991 	bl	8002f48 <LL_RCC_MSI_GetRangeAfterStandby>
 8003c26:	4603      	mov	r3, r0
 8003c28:	0a1b      	lsrs	r3, r3, #8
 8003c2a:	f003 030f 	and.w	r3, r3, #15
 8003c2e:	4a36      	ldr	r2, [pc, #216]	@ (8003d08 <HAL_RCC_GetSysClockFreq+0x134>)
 8003c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c34:	e014      	b.n	8003c60 <HAL_RCC_GetSysClockFreq+0x8c>
 8003c36:	f7ff f96c 	bl	8002f12 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d106      	bne.n	8003c4e <HAL_RCC_GetSysClockFreq+0x7a>
 8003c40:	f7ff f977 	bl	8002f32 <LL_RCC_MSI_GetRange>
 8003c44:	4603      	mov	r3, r0
 8003c46:	091b      	lsrs	r3, r3, #4
 8003c48:	f003 030f 	and.w	r3, r3, #15
 8003c4c:	e005      	b.n	8003c5a <HAL_RCC_GetSysClockFreq+0x86>
 8003c4e:	f7ff f97b 	bl	8002f48 <LL_RCC_MSI_GetRangeAfterStandby>
 8003c52:	4603      	mov	r3, r0
 8003c54:	091b      	lsrs	r3, r3, #4
 8003c56:	f003 030f 	and.w	r3, r3, #15
 8003c5a:	4a2b      	ldr	r2, [pc, #172]	@ (8003d08 <HAL_RCC_GetSysClockFreq+0x134>)
 8003c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c60:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d115      	bne.n	8003c94 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003c6c:	e012      	b.n	8003c94 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	2b04      	cmp	r3, #4
 8003c72:	d102      	bne.n	8003c7a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c74:	4b25      	ldr	r3, [pc, #148]	@ (8003d0c <HAL_RCC_GetSysClockFreq+0x138>)
 8003c76:	617b      	str	r3, [r7, #20]
 8003c78:	e00c      	b.n	8003c94 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d109      	bne.n	8003c94 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003c80:	f7ff f85a 	bl	8002d38 <LL_RCC_HSE_IsEnabledDiv2>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d102      	bne.n	8003c90 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003c8a:	4b20      	ldr	r3, [pc, #128]	@ (8003d0c <HAL_RCC_GetSysClockFreq+0x138>)
 8003c8c:	617b      	str	r3, [r7, #20]
 8003c8e:	e001      	b.n	8003c94 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003c90:	4b1f      	ldr	r3, [pc, #124]	@ (8003d10 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003c92:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c94:	f7ff f98b 	bl	8002fae <LL_RCC_GetSysClkSource>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b0c      	cmp	r3, #12
 8003c9c:	d12f      	bne.n	8003cfe <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003c9e:	f7ff fa72 	bl	8003186 <LL_RCC_PLL_GetMainSource>
 8003ca2:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d003      	beq.n	8003cb2 <HAL_RCC_GetSysClockFreq+0xde>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2b03      	cmp	r3, #3
 8003cae:	d003      	beq.n	8003cb8 <HAL_RCC_GetSysClockFreq+0xe4>
 8003cb0:	e00d      	b.n	8003cce <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003cb2:	4b16      	ldr	r3, [pc, #88]	@ (8003d0c <HAL_RCC_GetSysClockFreq+0x138>)
 8003cb4:	60fb      	str	r3, [r7, #12]
        break;
 8003cb6:	e00d      	b.n	8003cd4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003cb8:	f7ff f83e 	bl	8002d38 <LL_RCC_HSE_IsEnabledDiv2>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d102      	bne.n	8003cc8 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003cc2:	4b12      	ldr	r3, [pc, #72]	@ (8003d0c <HAL_RCC_GetSysClockFreq+0x138>)
 8003cc4:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003cc6:	e005      	b.n	8003cd4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003cc8:	4b11      	ldr	r3, [pc, #68]	@ (8003d10 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003cca:	60fb      	str	r3, [r7, #12]
        break;
 8003ccc:	e002      	b.n	8003cd4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	60fb      	str	r3, [r7, #12]
        break;
 8003cd2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003cd4:	f7ff fa35 	bl	8003142 <LL_RCC_PLL_GetN>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	fb03 f402 	mul.w	r4, r3, r2
 8003ce0:	f7ff fa46 	bl	8003170 <LL_RCC_PLL_GetDivider>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	091b      	lsrs	r3, r3, #4
 8003ce8:	3301      	adds	r3, #1
 8003cea:	fbb4 f4f3 	udiv	r4, r4, r3
 8003cee:	f7ff fa34 	bl	800315a <LL_RCC_PLL_GetR>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	0f5b      	lsrs	r3, r3, #29
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	fbb4 f3f3 	udiv	r3, r4, r3
 8003cfc:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003cfe:	697b      	ldr	r3, [r7, #20]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	371c      	adds	r7, #28
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd90      	pop	{r4, r7, pc}
 8003d08:	0800794c 	.word	0x0800794c
 8003d0c:	00f42400 	.word	0x00f42400
 8003d10:	01e84800 	.word	0x01e84800

08003d14 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d14:	b598      	push	{r3, r4, r7, lr}
 8003d16:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003d18:	f7ff ff5c 	bl	8003bd4 <HAL_RCC_GetSysClockFreq>
 8003d1c:	4604      	mov	r4, r0
 8003d1e:	f7ff f9b5 	bl	800308c <LL_RCC_GetAHBPrescaler>
 8003d22:	4603      	mov	r3, r0
 8003d24:	091b      	lsrs	r3, r3, #4
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	4a03      	ldr	r2, [pc, #12]	@ (8003d38 <HAL_RCC_GetHCLKFreq+0x24>)
 8003d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d30:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	bd98      	pop	{r3, r4, r7, pc}
 8003d38:	080078ec 	.word	0x080078ec

08003d3c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d3c:	b598      	push	{r3, r4, r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003d40:	f7ff ffe8 	bl	8003d14 <HAL_RCC_GetHCLKFreq>
 8003d44:	4604      	mov	r4, r0
 8003d46:	f7ff f9b9 	bl	80030bc <LL_RCC_GetAPB1Prescaler>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	0a1b      	lsrs	r3, r3, #8
 8003d4e:	4a03      	ldr	r2, [pc, #12]	@ (8003d5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d54:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	bd98      	pop	{r3, r4, r7, pc}
 8003d5c:	0800792c 	.word	0x0800792c

08003d60 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d60:	b598      	push	{r3, r4, r7, lr}
 8003d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003d64:	f7ff ffd6 	bl	8003d14 <HAL_RCC_GetHCLKFreq>
 8003d68:	4604      	mov	r4, r0
 8003d6a:	f7ff f9b2 	bl	80030d2 <LL_RCC_GetAPB2Prescaler>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	0adb      	lsrs	r3, r3, #11
 8003d72:	4a03      	ldr	r2, [pc, #12]	@ (8003d80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d78:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	bd98      	pop	{r3, r4, r7, pc}
 8003d80:	0800792c 	.word	0x0800792c

08003d84 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003d84:	b590      	push	{r4, r7, lr}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	091b      	lsrs	r3, r3, #4
 8003d90:	f003 030f 	and.w	r3, r3, #15
 8003d94:	4a10      	ldr	r2, [pc, #64]	@ (8003dd8 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d9a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003d9c:	f7ff f981 	bl	80030a2 <LL_RCC_GetAHB3Prescaler>
 8003da0:	4603      	mov	r3, r0
 8003da2:	091b      	lsrs	r3, r3, #4
 8003da4:	f003 030f 	and.w	r3, r3, #15
 8003da8:	4a0c      	ldr	r2, [pc, #48]	@ (8003ddc <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db4:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	4a09      	ldr	r2, [pc, #36]	@ (8003de0 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003dba:	fba2 2303 	umull	r2, r3, r2, r3
 8003dbe:	0c9c      	lsrs	r4, r3, #18
 8003dc0:	f7fe ff80 	bl	8002cc4 <HAL_PWREx_GetVoltageRange>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	4620      	mov	r0, r4
 8003dca:	f000 f80b 	bl	8003de4 <RCC_SetFlashLatency>
 8003dce:	4603      	mov	r3, r0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3714      	adds	r7, #20
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd90      	pop	{r4, r7, pc}
 8003dd8:	0800794c 	.word	0x0800794c
 8003ddc:	080078ec 	.word	0x080078ec
 8003de0:	431bde83 	.word	0x431bde83

08003de4 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b08e      	sub	sp, #56	@ 0x38
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003dee:	4a3a      	ldr	r2, [pc, #232]	@ (8003ed8 <RCC_SetFlashLatency+0xf4>)
 8003df0:	f107 0320 	add.w	r3, r7, #32
 8003df4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003df8:	6018      	str	r0, [r3, #0]
 8003dfa:	3304      	adds	r3, #4
 8003dfc:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003dfe:	4a37      	ldr	r2, [pc, #220]	@ (8003edc <RCC_SetFlashLatency+0xf8>)
 8003e00:	f107 0318 	add.w	r3, r7, #24
 8003e04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e08:	6018      	str	r0, [r3, #0]
 8003e0a:	3304      	adds	r3, #4
 8003e0c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003e0e:	4a34      	ldr	r2, [pc, #208]	@ (8003ee0 <RCC_SetFlashLatency+0xfc>)
 8003e10:	f107 030c 	add.w	r3, r7, #12
 8003e14:	ca07      	ldmia	r2, {r0, r1, r2}
 8003e16:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e24:	d11b      	bne.n	8003e5e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003e26:	2300      	movs	r3, #0
 8003e28:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e2a:	e014      	b.n	8003e56 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	3338      	adds	r3, #56	@ 0x38
 8003e32:	443b      	add	r3, r7
 8003e34:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003e38:	461a      	mov	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d807      	bhi.n	8003e50 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	3338      	adds	r3, #56	@ 0x38
 8003e46:	443b      	add	r3, r7
 8003e48:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003e4c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003e4e:	e021      	b.n	8003e94 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e52:	3301      	adds	r3, #1
 8003e54:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d9e7      	bls.n	8003e2c <RCC_SetFlashLatency+0x48>
 8003e5c:	e01a      	b.n	8003e94 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003e5e:	2300      	movs	r3, #0
 8003e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e62:	e014      	b.n	8003e8e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	3338      	adds	r3, #56	@ 0x38
 8003e6a:	443b      	add	r3, r7
 8003e6c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003e70:	461a      	mov	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d807      	bhi.n	8003e88 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	3338      	adds	r3, #56	@ 0x38
 8003e7e:	443b      	add	r3, r7
 8003e80:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003e84:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003e86:	e005      	b.n	8003e94 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d9e7      	bls.n	8003e64 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e94:	4b13      	ldr	r3, [pc, #76]	@ (8003ee4 <RCC_SetFlashLatency+0x100>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f023 0207 	bic.w	r2, r3, #7
 8003e9c:	4911      	ldr	r1, [pc, #68]	@ (8003ee4 <RCC_SetFlashLatency+0x100>)
 8003e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003ea4:	f7fe fb48 	bl	8002538 <HAL_GetTick>
 8003ea8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003eaa:	e008      	b.n	8003ebe <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003eac:	f7fe fb44 	bl	8002538 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d901      	bls.n	8003ebe <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e007      	b.n	8003ece <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003ebe:	4b09      	ldr	r3, [pc, #36]	@ (8003ee4 <RCC_SetFlashLatency+0x100>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d1ef      	bne.n	8003eac <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3738      	adds	r7, #56	@ 0x38
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	080078d0 	.word	0x080078d0
 8003edc:	080078d8 	.word	0x080078d8
 8003ee0:	080078e0 	.word	0x080078e0
 8003ee4:	58004000 	.word	0x58004000

08003ee8 <LL_RCC_LSE_IsReady>:
{
 8003ee8:	b480      	push	{r7}
 8003eea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003eec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d101      	bne.n	8003f00 <LL_RCC_LSE_IsReady+0x18>
 8003efc:	2301      	movs	r3, #1
 8003efe:	e000      	b.n	8003f02 <LL_RCC_LSE_IsReady+0x1a>
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bc80      	pop	{r7}
 8003f08:	4770      	bx	lr

08003f0a <LL_RCC_SetUSARTClockSource>:
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	b083      	sub	sp, #12
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003f12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f16:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	0c1b      	lsrs	r3, r3, #16
 8003f1e:	43db      	mvns	r3, r3
 8003f20:	401a      	ands	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bc80      	pop	{r7}
 8003f38:	4770      	bx	lr

08003f3a <LL_RCC_SetI2SClockSource>:
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	b083      	sub	sp, #12
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003f42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f4a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003f5a:	bf00      	nop
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bc80      	pop	{r7}
 8003f62:	4770      	bx	lr

08003f64 <LL_RCC_SetLPUARTClockSource>:
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003f6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f74:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003f78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bc80      	pop	{r7}
 8003f8c:	4770      	bx	lr

08003f8e <LL_RCC_SetI2CClockSource>:
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b083      	sub	sp, #12
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003f96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f9a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	091b      	lsrs	r3, r3, #4
 8003fa2:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003fa6:	43db      	mvns	r3, r3
 8003fa8:	401a      	ands	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	011b      	lsls	r3, r3, #4
 8003fae:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003fb2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bc80      	pop	{r7}
 8003fc4:	4770      	bx	lr

08003fc6 <LL_RCC_SetLPTIMClockSource>:
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003fce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fd2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	0c1b      	lsrs	r3, r3, #16
 8003fda:	041b      	lsls	r3, r3, #16
 8003fdc:	43db      	mvns	r3, r3
 8003fde:	401a      	ands	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	041b      	lsls	r3, r3, #16
 8003fe4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bc80      	pop	{r7}
 8003ff6:	4770      	bx	lr

08003ff8 <LL_RCC_SetRNGClockSource>:
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004000:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004008:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800400c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4313      	orrs	r3, r2
 8004014:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	bc80      	pop	{r7}
 8004020:	4770      	bx	lr

08004022 <LL_RCC_SetADCClockSource>:
{
 8004022:	b480      	push	{r7}
 8004024:	b083      	sub	sp, #12
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800402a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800402e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004032:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004036:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4313      	orrs	r3, r2
 800403e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004042:	bf00      	nop
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	bc80      	pop	{r7}
 800404a:	4770      	bx	lr

0800404c <LL_RCC_SetRTCClockSource>:
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004054:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800405c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004060:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4313      	orrs	r3, r2
 8004068:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	bc80      	pop	{r7}
 8004074:	4770      	bx	lr

08004076 <LL_RCC_GetRTCClockSource>:
{
 8004076:	b480      	push	{r7}
 8004078:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800407a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800407e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004082:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8004086:	4618      	mov	r0, r3
 8004088:	46bd      	mov	sp, r7
 800408a:	bc80      	pop	{r7}
 800408c:	4770      	bx	lr

0800408e <LL_RCC_ForceBackupDomainReset>:
{
 800408e:	b480      	push	{r7}
 8004090:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004092:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800409a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800409e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80040a6:	bf00      	nop
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bc80      	pop	{r7}
 80040ac:	4770      	bx	lr

080040ae <LL_RCC_ReleaseBackupDomainReset>:
{
 80040ae:	b480      	push	{r7}
 80040b0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80040b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80040c6:	bf00      	nop
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bc80      	pop	{r7}
 80040cc:	4770      	bx	lr
	...

080040d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80040d8:	2300      	movs	r3, #0
 80040da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80040dc:	2300      	movs	r3, #0
 80040de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80040e0:	2300      	movs	r3, #0
 80040e2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d058      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80040f0:	f7fe fdda 	bl	8002ca8 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040f4:	f7fe fa20 	bl	8002538 <HAL_GetTick>
 80040f8:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80040fa:	e009      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040fc:	f7fe fa1c 	bl	8002538 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d902      	bls.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	74fb      	strb	r3, [r7, #19]
        break;
 800410e:	e006      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004110:	4b7b      	ldr	r3, [pc, #492]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004118:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800411c:	d1ee      	bne.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800411e:	7cfb      	ldrb	r3, [r7, #19]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d13c      	bne.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8004124:	f7ff ffa7 	bl	8004076 <LL_RCC_GetRTCClockSource>
 8004128:	4602      	mov	r2, r0
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800412e:	429a      	cmp	r2, r3
 8004130:	d00f      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004132:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800413a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800413e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004140:	f7ff ffa5 	bl	800408e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004144:	f7ff ffb3 	bl	80040ae <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004148:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d014      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800415c:	f7fe f9ec 	bl	8002538 <HAL_GetTick>
 8004160:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8004162:	e00b      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004164:	f7fe f9e8 	bl	8002538 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004172:	4293      	cmp	r3, r2
 8004174:	d902      	bls.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	74fb      	strb	r3, [r7, #19]
            break;
 800417a:	e004      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 800417c:	f7ff feb4 	bl	8003ee8 <LL_RCC_LSE_IsReady>
 8004180:	4603      	mov	r3, r0
 8004182:	2b01      	cmp	r3, #1
 8004184:	d1ee      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8004186:	7cfb      	ldrb	r3, [r7, #19]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d105      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004190:	4618      	mov	r0, r3
 8004192:	f7ff ff5b 	bl	800404c <LL_RCC_SetRTCClockSource>
 8004196:	e004      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004198:	7cfb      	ldrb	r3, [r7, #19]
 800419a:	74bb      	strb	r3, [r7, #18]
 800419c:	e001      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800419e:	7cfb      	ldrb	r3, [r7, #19]
 80041a0:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d004      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7ff fea9 	bl	8003f0a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d004      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7ff fe9e 	bl	8003f0a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0320 	and.w	r3, r3, #32
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d004      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	4618      	mov	r0, r3
 80041e0:	f7ff fec0 	bl	8003f64 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d004      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7ff fee6 	bl	8003fc6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004202:	2b00      	cmp	r3, #0
 8004204:	d004      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420a:	4618      	mov	r0, r3
 800420c:	f7ff fedb 	bl	8003fc6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004218:	2b00      	cmp	r3, #0
 800421a:	d004      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004220:	4618      	mov	r0, r3
 8004222:	f7ff fed0 	bl	8003fc6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800422e:	2b00      	cmp	r3, #0
 8004230:	d004      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	4618      	mov	r0, r3
 8004238:	f7ff fea9 	bl	8003f8e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004244:	2b00      	cmp	r3, #0
 8004246:	d004      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	4618      	mov	r0, r3
 800424e:	f7ff fe9e 	bl	8003f8e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800425a:	2b00      	cmp	r3, #0
 800425c:	d004      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	4618      	mov	r0, r3
 8004264:	f7ff fe93 	bl	8003f8e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0310 	and.w	r3, r3, #16
 8004270:	2b00      	cmp	r3, #0
 8004272:	d011      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	4618      	mov	r0, r3
 800427a:	f7ff fe5e 	bl	8003f3a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004286:	d107      	bne.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8004288:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004292:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004296:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d010      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7ff fea5 	bl	8003ff8 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d107      	bne.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80042b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80042c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042c4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d011      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7ff fea3 	bl	8004022 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042e4:	d107      	bne.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80042e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80042f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042f4:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80042f6:	7cbb      	ldrb	r3, [r7, #18]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3718      	adds	r7, #24
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	58000400 	.word	0x58000400

08004304 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800430c:	4b06      	ldr	r3, [pc, #24]	@ (8004328 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004314:	4904      	ldr	r1, [pc, #16]	@ (8004328 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4313      	orrs	r3, r2
 800431a:	608b      	str	r3, [r1, #8]
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	bc80      	pop	{r7}
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	58000400 	.word	0x58000400

0800432c <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 800432c:	b480      	push	{r7}
 800432e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004330:	4b05      	ldr	r3, [pc, #20]	@ (8004348 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8004332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004336:	4a04      	ldr	r2, [pc, #16]	@ (8004348 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8004338:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800433c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004340:	bf00      	nop
 8004342:	46bd      	mov	sp, r7
 8004344:	bc80      	pop	{r7}
 8004346:	4770      	bx	lr
 8004348:	58000400 	.word	0x58000400

0800434c <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 800434c:	b480      	push	{r7}
 800434e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004350:	4b05      	ldr	r3, [pc, #20]	@ (8004368 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8004352:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004356:	4a04      	ldr	r2, [pc, #16]	@ (8004368 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8004358:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800435c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004360:	bf00      	nop
 8004362:	46bd      	mov	sp, r7
 8004364:	bc80      	pop	{r7}
 8004366:	4770      	bx	lr
 8004368:	58000400 	.word	0x58000400

0800436c <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8004370:	4b03      	ldr	r3, [pc, #12]	@ (8004380 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8004372:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004376:	619a      	str	r2, [r3, #24]
}
 8004378:	bf00      	nop
 800437a:	46bd      	mov	sp, r7
 800437c:	bc80      	pop	{r7}
 800437e:	4770      	bx	lr
 8004380:	58000400 	.word	0x58000400

08004384 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8004388:	4b06      	ldr	r3, [pc, #24]	@ (80043a4 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b02      	cmp	r3, #2
 8004392:	d101      	bne.n	8004398 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8004394:	2301      	movs	r3, #1
 8004396:	e000      	b.n	800439a <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	46bd      	mov	sp, r7
 800439e:	bc80      	pop	{r7}
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	58000400 	.word	0x58000400

080043a8 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80043ac:	4b06      	ldr	r3, [pc, #24]	@ (80043c8 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	f003 0304 	and.w	r3, r3, #4
 80043b4:	2b04      	cmp	r3, #4
 80043b6:	d101      	bne.n	80043bc <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80043b8:	2301      	movs	r3, #1
 80043ba:	e000      	b.n	80043be <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bc80      	pop	{r7}
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	58000400 	.word	0x58000400

080043cc <LL_RCC_RF_DisableReset>:
{
 80043cc:	b480      	push	{r7}
 80043ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80043d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80043dc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80043e0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80043e4:	bf00      	nop
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bc80      	pop	{r7}
 80043ea:	4770      	bx	lr

080043ec <LL_RCC_IsRFUnderReset>:
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80043f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004400:	d101      	bne.n	8004406 <LL_RCC_IsRFUnderReset+0x1a>
 8004402:	2301      	movs	r3, #1
 8004404:	e000      	b.n	8004408 <LL_RCC_IsRFUnderReset+0x1c>
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	46bd      	mov	sp, r7
 800440c:	bc80      	pop	{r7}
 800440e:	4770      	bx	lr

08004410 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8004418:	4b06      	ldr	r3, [pc, #24]	@ (8004434 <LL_EXTI_EnableIT_32_63+0x24>)
 800441a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800441e:	4905      	ldr	r1, [pc, #20]	@ (8004434 <LL_EXTI_EnableIT_32_63+0x24>)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4313      	orrs	r3, r2
 8004424:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	bc80      	pop	{r7}
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	58000800 	.word	0x58000800

08004438 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d103      	bne.n	800444e <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	73fb      	strb	r3, [r7, #15]
    return status;
 800444a:	7bfb      	ldrb	r3, [r7, #15]
 800444c:	e052      	b.n	80044f4 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 800444e:	2300      	movs	r3, #0
 8004450:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	799b      	ldrb	r3, [r3, #6]
 8004456:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8004458:	7bbb      	ldrb	r3, [r7, #14]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d002      	beq.n	8004464 <HAL_SUBGHZ_Init+0x2c>
 800445e:	7bbb      	ldrb	r3, [r7, #14]
 8004460:	2b03      	cmp	r3, #3
 8004462:	d109      	bne.n	8004478 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f7fc fd02 	bl	8000e74 <HAL_SUBGHZ_MspInit>
#if defined(CORE_CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8004470:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004474:	f7ff ffcc 	bl	8004410 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8004478:	7bbb      	ldrb	r3, [r7, #14]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d126      	bne.n	80044cc <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2202      	movs	r2, #2
 8004482:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8004484:	f7ff ffa2 	bl	80043cc <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004488:	4b1c      	ldr	r3, [pc, #112]	@ (80044fc <HAL_SUBGHZ_Init+0xc4>)
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	4613      	mov	r3, r2
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	1a9b      	subs	r3, r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	0cdb      	lsrs	r3, r3, #19
 8004496:	2264      	movs	r2, #100	@ 0x64
 8004498:	fb02 f303 	mul.w	r3, r2, r3
 800449c:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d105      	bne.n	80044b0 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	609a      	str	r2, [r3, #8]
        break;
 80044ae:	e007      	b.n	80044c0 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	3b01      	subs	r3, #1
 80044b4:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 80044b6:	f7ff ff99 	bl	80043ec <LL_RCC_IsRFUnderReset>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1ee      	bne.n	800449e <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80044c0:	f7ff ff34 	bl	800432c <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CORE_CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80044c4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80044c8:	f7ff ff1c 	bl	8004304 <LL_PWR_SetRadioBusyTrigger>
#endif /* CORE_CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80044cc:	f7ff ff4e 	bl	800436c <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80044d0:	7bfb      	ldrb	r3, [r7, #15]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10a      	bne.n	80044ec <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4618      	mov	r0, r3
 80044dc:	f000 fabc 	bl	8004a58 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	719a      	strb	r2, [r3, #6]

  return status;
 80044f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	2000001c 	.word	0x2000001c

08004500 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	607a      	str	r2, [r7, #4]
 800450a:	461a      	mov	r2, r3
 800450c:	460b      	mov	r3, r1
 800450e:	817b      	strh	r3, [r7, #10]
 8004510:	4613      	mov	r3, r2
 8004512:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	799b      	ldrb	r3, [r3, #6]
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b01      	cmp	r3, #1
 800451c:	d14a      	bne.n	80045b4 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	795b      	ldrb	r3, [r3, #5]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d101      	bne.n	800452a <HAL_SUBGHZ_WriteRegisters+0x2a>
 8004526:	2302      	movs	r3, #2
 8004528:	e045      	b.n	80045b6 <HAL_SUBGHZ_WriteRegisters+0xb6>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2201      	movs	r2, #1
 800452e:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2202      	movs	r2, #2
 8004534:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f000 fb5c 	bl	8004bf4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800453c:	f7ff ff06 	bl	800434c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8004540:	210d      	movs	r1, #13
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 faa8 	bl	8004a98 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8004548:	897b      	ldrh	r3, [r7, #10]
 800454a:	0a1b      	lsrs	r3, r3, #8
 800454c:	b29b      	uxth	r3, r3
 800454e:	b2db      	uxtb	r3, r3
 8004550:	4619      	mov	r1, r3
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f000 faa0 	bl	8004a98 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004558:	897b      	ldrh	r3, [r7, #10]
 800455a:	b2db      	uxtb	r3, r3
 800455c:	4619      	mov	r1, r3
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f000 fa9a 	bl	8004a98 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004564:	2300      	movs	r3, #0
 8004566:	82bb      	strh	r3, [r7, #20]
 8004568:	e00a      	b.n	8004580 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800456a:	8abb      	ldrh	r3, [r7, #20]
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	4413      	add	r3, r2
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	4619      	mov	r1, r3
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f000 fa8f 	bl	8004a98 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800457a:	8abb      	ldrh	r3, [r7, #20]
 800457c:	3301      	adds	r3, #1
 800457e:	82bb      	strh	r3, [r7, #20]
 8004580:	8aba      	ldrh	r2, [r7, #20]
 8004582:	893b      	ldrh	r3, [r7, #8]
 8004584:	429a      	cmp	r2, r3
 8004586:	d3f0      	bcc.n	800456a <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004588:	f7ff fed0 	bl	800432c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f000 fb55 	bl	8004c3c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d002      	beq.n	80045a0 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	75fb      	strb	r3, [r7, #23]
 800459e:	e001      	b.n	80045a4 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80045a0:	2300      	movs	r3, #0
 80045a2:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2201      	movs	r2, #1
 80045a8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	715a      	strb	r2, [r3, #5]

    return status;
 80045b0:	7dfb      	ldrb	r3, [r7, #23]
 80045b2:	e000      	b.n	80045b6 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80045b4:	2302      	movs	r3, #2
  }
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3718      	adds	r7, #24
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b088      	sub	sp, #32
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	60f8      	str	r0, [r7, #12]
 80045c6:	607a      	str	r2, [r7, #4]
 80045c8:	461a      	mov	r2, r3
 80045ca:	460b      	mov	r3, r1
 80045cc:	817b      	strh	r3, [r7, #10]
 80045ce:	4613      	mov	r3, r2
 80045d0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	799b      	ldrb	r3, [r3, #6]
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d14a      	bne.n	8004676 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	795b      	ldrb	r3, [r3, #5]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d101      	bne.n	80045ec <HAL_SUBGHZ_ReadRegisters+0x2e>
 80045e8:	2302      	movs	r3, #2
 80045ea:	e045      	b.n	8004678 <HAL_SUBGHZ_ReadRegisters+0xba>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2201      	movs	r2, #1
 80045f0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f000 fafe 	bl	8004bf4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80045f8:	f7ff fea8 	bl	800434c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80045fc:	211d      	movs	r1, #29
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 fa4a 	bl	8004a98 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8004604:	897b      	ldrh	r3, [r7, #10]
 8004606:	0a1b      	lsrs	r3, r3, #8
 8004608:	b29b      	uxth	r3, r3
 800460a:	b2db      	uxtb	r3, r3
 800460c:	4619      	mov	r1, r3
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f000 fa42 	bl	8004a98 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004614:	897b      	ldrh	r3, [r7, #10]
 8004616:	b2db      	uxtb	r3, r3
 8004618:	4619      	mov	r1, r3
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f000 fa3c 	bl	8004a98 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8004620:	2100      	movs	r1, #0
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 fa38 	bl	8004a98 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004628:	2300      	movs	r3, #0
 800462a:	82fb      	strh	r3, [r7, #22]
 800462c:	e009      	b.n	8004642 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800462e:	69b9      	ldr	r1, [r7, #24]
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f000 fa87 	bl	8004b44 <SUBGHZSPI_Receive>
      pData++;
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	3301      	adds	r3, #1
 800463a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800463c:	8afb      	ldrh	r3, [r7, #22]
 800463e:	3301      	adds	r3, #1
 8004640:	82fb      	strh	r3, [r7, #22]
 8004642:	8afa      	ldrh	r2, [r7, #22]
 8004644:	893b      	ldrh	r3, [r7, #8]
 8004646:	429a      	cmp	r2, r3
 8004648:	d3f1      	bcc.n	800462e <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800464a:	f7ff fe6f 	bl	800432c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f000 faf4 	bl	8004c3c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d002      	beq.n	8004662 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	77fb      	strb	r3, [r7, #31]
 8004660:	e001      	b.n	8004666 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8004662:	2300      	movs	r3, #0
 8004664:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2201      	movs	r2, #1
 800466a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	715a      	strb	r2, [r3, #5]

    return status;
 8004672:	7ffb      	ldrb	r3, [r7, #31]
 8004674:	e000      	b.n	8004678 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8004676:	2302      	movs	r3, #2
  }
}
 8004678:	4618      	mov	r0, r3
 800467a:	3720      	adds	r7, #32
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	607a      	str	r2, [r7, #4]
 800468a:	461a      	mov	r2, r3
 800468c:	460b      	mov	r3, r1
 800468e:	72fb      	strb	r3, [r7, #11]
 8004690:	4613      	mov	r3, r2
 8004692:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	799b      	ldrb	r3, [r3, #6]
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b01      	cmp	r3, #1
 800469c:	d14a      	bne.n	8004734 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	795b      	ldrb	r3, [r3, #5]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d101      	bne.n	80046aa <HAL_SUBGHZ_ExecSetCmd+0x2a>
 80046a6:	2302      	movs	r3, #2
 80046a8:	e045      	b.n	8004736 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2201      	movs	r2, #1
 80046ae:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 fa9f 	bl	8004bf4 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80046b6:	7afb      	ldrb	r3, [r7, #11]
 80046b8:	2b84      	cmp	r3, #132	@ 0x84
 80046ba:	d002      	beq.n	80046c2 <HAL_SUBGHZ_ExecSetCmd+0x42>
 80046bc:	7afb      	ldrb	r3, [r7, #11]
 80046be:	2b94      	cmp	r3, #148	@ 0x94
 80046c0:	d103      	bne.n	80046ca <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2201      	movs	r2, #1
 80046c6:	711a      	strb	r2, [r3, #4]
 80046c8:	e002      	b.n	80046d0 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80046d0:	f7ff fe3c 	bl	800434c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80046d4:	7afb      	ldrb	r3, [r7, #11]
 80046d6:	4619      	mov	r1, r3
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f000 f9dd 	bl	8004a98 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80046de:	2300      	movs	r3, #0
 80046e0:	82bb      	strh	r3, [r7, #20]
 80046e2:	e00a      	b.n	80046fa <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80046e4:	8abb      	ldrh	r3, [r7, #20]
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	4413      	add	r3, r2
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	4619      	mov	r1, r3
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f000 f9d2 	bl	8004a98 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80046f4:	8abb      	ldrh	r3, [r7, #20]
 80046f6:	3301      	adds	r3, #1
 80046f8:	82bb      	strh	r3, [r7, #20]
 80046fa:	8aba      	ldrh	r2, [r7, #20]
 80046fc:	893b      	ldrh	r3, [r7, #8]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d3f0      	bcc.n	80046e4 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004702:	f7ff fe13 	bl	800432c <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8004706:	7afb      	ldrb	r3, [r7, #11]
 8004708:	2b84      	cmp	r3, #132	@ 0x84
 800470a:	d002      	beq.n	8004712 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f000 fa95 	bl	8004c3c <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d002      	beq.n	8004720 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	75fb      	strb	r3, [r7, #23]
 800471e:	e001      	b.n	8004724 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8004720:	2300      	movs	r3, #0
 8004722:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2201      	movs	r2, #1
 8004728:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	715a      	strb	r2, [r3, #5]

    return status;
 8004730:	7dfb      	ldrb	r3, [r7, #23]
 8004732:	e000      	b.n	8004736 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8004734:	2302      	movs	r3, #2
  }
}
 8004736:	4618      	mov	r0, r3
 8004738:	3718      	adds	r7, #24
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b088      	sub	sp, #32
 8004742:	af00      	add	r7, sp, #0
 8004744:	60f8      	str	r0, [r7, #12]
 8004746:	607a      	str	r2, [r7, #4]
 8004748:	461a      	mov	r2, r3
 800474a:	460b      	mov	r3, r1
 800474c:	72fb      	strb	r3, [r7, #11]
 800474e:	4613      	mov	r3, r2
 8004750:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	799b      	ldrb	r3, [r3, #6]
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b01      	cmp	r3, #1
 800475e:	d13d      	bne.n	80047dc <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	795b      	ldrb	r3, [r3, #5]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d101      	bne.n	800476c <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8004768:	2302      	movs	r3, #2
 800476a:	e038      	b.n	80047de <HAL_SUBGHZ_ExecGetCmd+0xa0>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2201      	movs	r2, #1
 8004770:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f000 fa3e 	bl	8004bf4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004778:	f7ff fde8 	bl	800434c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800477c:	7afb      	ldrb	r3, [r7, #11]
 800477e:	4619      	mov	r1, r3
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f000 f989 	bl	8004a98 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004786:	2100      	movs	r1, #0
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f000 f985 	bl	8004a98 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800478e:	2300      	movs	r3, #0
 8004790:	82fb      	strh	r3, [r7, #22]
 8004792:	e009      	b.n	80047a8 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004794:	69b9      	ldr	r1, [r7, #24]
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f000 f9d4 	bl	8004b44 <SUBGHZSPI_Receive>
      pData++;
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	3301      	adds	r3, #1
 80047a0:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80047a2:	8afb      	ldrh	r3, [r7, #22]
 80047a4:	3301      	adds	r3, #1
 80047a6:	82fb      	strh	r3, [r7, #22]
 80047a8:	8afa      	ldrh	r2, [r7, #22]
 80047aa:	893b      	ldrh	r3, [r7, #8]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d3f1      	bcc.n	8004794 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80047b0:	f7ff fdbc 	bl	800432c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f000 fa41 	bl	8004c3c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d002      	beq.n	80047c8 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	77fb      	strb	r3, [r7, #31]
 80047c6:	e001      	b.n	80047cc <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 80047c8:	2300      	movs	r3, #0
 80047ca:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2201      	movs	r2, #1
 80047d0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	715a      	strb	r2, [r3, #5]

    return status;
 80047d8:	7ffb      	ldrb	r3, [r7, #31]
 80047da:	e000      	b.n	80047de <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80047dc:	2302      	movs	r3, #2
  }
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3720      	adds	r7, #32
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b086      	sub	sp, #24
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	60f8      	str	r0, [r7, #12]
 80047ee:	607a      	str	r2, [r7, #4]
 80047f0:	461a      	mov	r2, r3
 80047f2:	460b      	mov	r3, r1
 80047f4:	72fb      	strb	r3, [r7, #11]
 80047f6:	4613      	mov	r3, r2
 80047f8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	799b      	ldrb	r3, [r3, #6]
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b01      	cmp	r3, #1
 8004802:	d13e      	bne.n	8004882 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	795b      	ldrb	r3, [r3, #5]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d101      	bne.n	8004810 <HAL_SUBGHZ_WriteBuffer+0x2a>
 800480c:	2302      	movs	r3, #2
 800480e:	e039      	b.n	8004884 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2201      	movs	r2, #1
 8004814:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f000 f9ec 	bl	8004bf4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800481c:	f7ff fd96 	bl	800434c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8004820:	210e      	movs	r1, #14
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f000 f938 	bl	8004a98 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004828:	7afb      	ldrb	r3, [r7, #11]
 800482a:	4619      	mov	r1, r3
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f000 f933 	bl	8004a98 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004832:	2300      	movs	r3, #0
 8004834:	82bb      	strh	r3, [r7, #20]
 8004836:	e00a      	b.n	800484e <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004838:	8abb      	ldrh	r3, [r7, #20]
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	4413      	add	r3, r2
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	4619      	mov	r1, r3
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f000 f928 	bl	8004a98 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004848:	8abb      	ldrh	r3, [r7, #20]
 800484a:	3301      	adds	r3, #1
 800484c:	82bb      	strh	r3, [r7, #20]
 800484e:	8aba      	ldrh	r2, [r7, #20]
 8004850:	893b      	ldrh	r3, [r7, #8]
 8004852:	429a      	cmp	r2, r3
 8004854:	d3f0      	bcc.n	8004838 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004856:	f7ff fd69 	bl	800432c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f000 f9ee 	bl	8004c3c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d002      	beq.n	800486e <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	75fb      	strb	r3, [r7, #23]
 800486c:	e001      	b.n	8004872 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 800486e:	2300      	movs	r3, #0
 8004870:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2201      	movs	r2, #1
 8004876:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	715a      	strb	r2, [r3, #5]

    return status;
 800487e:	7dfb      	ldrb	r3, [r7, #23]
 8004880:	e000      	b.n	8004884 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004882:	2302      	movs	r3, #2
  }
}
 8004884:	4618      	mov	r0, r3
 8004886:	3718      	adds	r7, #24
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b088      	sub	sp, #32
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	607a      	str	r2, [r7, #4]
 8004896:	461a      	mov	r2, r3
 8004898:	460b      	mov	r3, r1
 800489a:	72fb      	strb	r3, [r7, #11]
 800489c:	4613      	mov	r3, r2
 800489e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	799b      	ldrb	r3, [r3, #6]
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d141      	bne.n	8004932 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	795b      	ldrb	r3, [r3, #5]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d101      	bne.n	80048ba <HAL_SUBGHZ_ReadBuffer+0x2e>
 80048b6:	2302      	movs	r3, #2
 80048b8:	e03c      	b.n	8004934 <HAL_SUBGHZ_ReadBuffer+0xa8>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2201      	movs	r2, #1
 80048be:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 f997 	bl	8004bf4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80048c6:	f7ff fd41 	bl	800434c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 80048ca:	211e      	movs	r1, #30
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	f000 f8e3 	bl	8004a98 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80048d2:	7afb      	ldrb	r3, [r7, #11]
 80048d4:	4619      	mov	r1, r3
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f000 f8de 	bl	8004a98 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80048dc:	2100      	movs	r1, #0
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f000 f8da 	bl	8004a98 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80048e4:	2300      	movs	r3, #0
 80048e6:	82fb      	strh	r3, [r7, #22]
 80048e8:	e009      	b.n	80048fe <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80048ea:	69b9      	ldr	r1, [r7, #24]
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f000 f929 	bl	8004b44 <SUBGHZSPI_Receive>
      pData++;
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	3301      	adds	r3, #1
 80048f6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80048f8:	8afb      	ldrh	r3, [r7, #22]
 80048fa:	3301      	adds	r3, #1
 80048fc:	82fb      	strh	r3, [r7, #22]
 80048fe:	8afa      	ldrh	r2, [r7, #22]
 8004900:	893b      	ldrh	r3, [r7, #8]
 8004902:	429a      	cmp	r2, r3
 8004904:	d3f1      	bcc.n	80048ea <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004906:	f7ff fd11 	bl	800432c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f000 f996 	bl	8004c3c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d002      	beq.n	800491e <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	77fb      	strb	r3, [r7, #31]
 800491c:	e001      	b.n	8004922 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 800491e:	2300      	movs	r3, #0
 8004920:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2201      	movs	r2, #1
 8004926:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	715a      	strb	r2, [r3, #5]

    return status;
 800492e:	7ffb      	ldrb	r3, [r7, #31]
 8004930:	e000      	b.n	8004934 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8004932:	2302      	movs	r3, #2
  }
}
 8004934:	4618      	mov	r0, r3
 8004936:	3720      	adds	r7, #32
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8004944:	2300      	movs	r3, #0
 8004946:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8004948:	f107 020c 	add.w	r2, r7, #12
 800494c:	2302      	movs	r3, #2
 800494e:	2112      	movs	r1, #18
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f7ff fef4 	bl	800473e <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8004956:	7b3b      	ldrb	r3, [r7, #12]
 8004958:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 800495a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800495e:	021b      	lsls	r3, r3, #8
 8004960:	b21a      	sxth	r2, r3
 8004962:	7b7b      	ldrb	r3, [r7, #13]
 8004964:	b21b      	sxth	r3, r3
 8004966:	4313      	orrs	r3, r2
 8004968:	b21b      	sxth	r3, r3
 800496a:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 800496c:	f107 020c 	add.w	r2, r7, #12
 8004970:	2302      	movs	r3, #2
 8004972:	2102      	movs	r1, #2
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f7ff fe83 	bl	8004680 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800497a:	89fb      	ldrh	r3, [r7, #14]
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	2b00      	cmp	r3, #0
 8004982:	d002      	beq.n	800498a <HAL_SUBGHZ_IRQHandler+0x4e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f7fd fca9 	bl	80022dc <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 800498a:	89fb      	ldrh	r3, [r7, #14]
 800498c:	085b      	lsrs	r3, r3, #1
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	d008      	beq.n	80049a8 <HAL_SUBGHZ_IRQHandler+0x6c>
      (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) == RESET))
 8004996:	89fb      	ldrh	r3, [r7, #14]
 8004998:	099b      	lsrs	r3, r3, #6
 800499a:	f003 0301 	and.w	r3, r3, #1
  if ((SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET) && \
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d102      	bne.n	80049a8 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f7fd fca8 	bl	80022f8 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 80049a8:	89fb      	ldrh	r3, [r7, #14]
 80049aa:	089b      	lsrs	r3, r3, #2
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d002      	beq.n	80049ba <HAL_SUBGHZ_IRQHandler+0x7e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f7fd fcf7 	bl	80023a8 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 80049ba:	89fb      	ldrh	r3, [r7, #14]
 80049bc:	08db      	lsrs	r3, r3, #3
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d002      	beq.n	80049cc <HAL_SUBGHZ_IRQHandler+0x90>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7fd fcfc 	bl	80023c4 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 80049cc:	89fb      	ldrh	r3, [r7, #14]
 80049ce:	091b      	lsrs	r3, r3, #4
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d002      	beq.n	80049de <HAL_SUBGHZ_IRQHandler+0xa2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f7fd fd01 	bl	80023e0 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 80049de:	89fb      	ldrh	r3, [r7, #14]
 80049e0:	095b      	lsrs	r3, r3, #5
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d002      	beq.n	80049f0 <HAL_SUBGHZ_IRQHandler+0xb4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7fd fcce 	bl	800238c <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 80049f0:	89fb      	ldrh	r3, [r7, #14]
 80049f2:	099b      	lsrs	r3, r3, #6
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d002      	beq.n	8004a02 <HAL_SUBGHZ_IRQHandler+0xc6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f7fd fc89 	bl	8002314 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8004a02:	89fb      	ldrh	r3, [r7, #14]
 8004a04:	09db      	lsrs	r3, r3, #7
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00e      	beq.n	8004a2c <HAL_SUBGHZ_IRQHandler+0xf0>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8004a0e:	89fb      	ldrh	r3, [r7, #14]
 8004a10:	0a1b      	lsrs	r3, r3, #8
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d004      	beq.n	8004a24 <HAL_SUBGHZ_IRQHandler+0xe8>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8004a1a:	2101      	movs	r1, #1
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f7fd fc87 	bl	8002330 <HAL_SUBGHZ_CADStatusCallback>
 8004a22:	e003      	b.n	8004a2c <HAL_SUBGHZ_IRQHandler+0xf0>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8004a24:	2100      	movs	r1, #0
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7fd fc82 	bl	8002330 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8004a2c:	89fb      	ldrh	r3, [r7, #14]
 8004a2e:	0a5b      	lsrs	r3, r3, #9
 8004a30:	f003 0301 	and.w	r3, r3, #1
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d002      	beq.n	8004a3e <HAL_SUBGHZ_IRQHandler+0x102>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f7fd fc97 	bl	800236c <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8004a3e:	89fb      	ldrh	r3, [r7, #14]
 8004a40:	0b9b      	lsrs	r3, r3, #14
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <HAL_SUBGHZ_IRQHandler+0x114>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7fd fcd6 	bl	80023fc <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8004a50:	bf00      	nop
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004a60:	4b0c      	ldr	r3, [pc, #48]	@ (8004a94 <SUBGHZSPI_Init+0x3c>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a0b      	ldr	r2, [pc, #44]	@ (8004a94 <SUBGHZSPI_Init+0x3c>)
 8004a66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a6a:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8004a6c:	4a09      	ldr	r2, [pc, #36]	@ (8004a94 <SUBGHZSPI_Init+0x3c>)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8004a74:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8004a76:	4b07      	ldr	r3, [pc, #28]	@ (8004a94 <SUBGHZSPI_Init+0x3c>)
 8004a78:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8004a7c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004a7e:	4b05      	ldr	r3, [pc, #20]	@ (8004a94 <SUBGHZSPI_Init+0x3c>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a04      	ldr	r2, [pc, #16]	@ (8004a94 <SUBGHZSPI_Init+0x3c>)
 8004a84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a88:	6013      	str	r3, [r2, #0]
}
 8004a8a:	bf00      	nop
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bc80      	pop	{r7}
 8004a92:	4770      	bx	lr
 8004a94:	58010000 	.word	0x58010000

08004a98 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b087      	sub	sp, #28
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004aa8:	4b23      	ldr	r3, [pc, #140]	@ (8004b38 <SUBGHZSPI_Transmit+0xa0>)
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	4613      	mov	r3, r2
 8004aae:	00db      	lsls	r3, r3, #3
 8004ab0:	1a9b      	subs	r3, r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	0cdb      	lsrs	r3, r3, #19
 8004ab6:	2264      	movs	r2, #100	@ 0x64
 8004ab8:	fb02 f303 	mul.w	r3, r2, r3
 8004abc:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d105      	bne.n	8004ad0 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	609a      	str	r2, [r3, #8]
      break;
 8004ace:	e008      	b.n	8004ae2 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004ad6:	4b19      	ldr	r3, [pc, #100]	@ (8004b3c <SUBGHZSPI_Transmit+0xa4>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d1ed      	bne.n	8004abe <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004ae2:	4b17      	ldr	r3, [pc, #92]	@ (8004b40 <SUBGHZSPI_Transmit+0xa8>)
 8004ae4:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	78fa      	ldrb	r2, [r7, #3]
 8004aea:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004aec:	4b12      	ldr	r3, [pc, #72]	@ (8004b38 <SUBGHZSPI_Transmit+0xa0>)
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	4613      	mov	r3, r2
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	1a9b      	subs	r3, r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	0cdb      	lsrs	r3, r3, #19
 8004afa:	2264      	movs	r2, #100	@ 0x64
 8004afc:	fb02 f303 	mul.w	r3, r2, r3
 8004b00:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d105      	bne.n	8004b14 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	609a      	str	r2, [r3, #8]
      break;
 8004b12:	e008      	b.n	8004b26 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	3b01      	subs	r3, #1
 8004b18:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004b1a:	4b08      	ldr	r3, [pc, #32]	@ (8004b3c <SUBGHZSPI_Transmit+0xa4>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d1ed      	bne.n	8004b02 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8004b26:	4b05      	ldr	r3, [pc, #20]	@ (8004b3c <SUBGHZSPI_Transmit+0xa4>)
 8004b28:	68db      	ldr	r3, [r3, #12]

  return status;
 8004b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	371c      	adds	r7, #28
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bc80      	pop	{r7}
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	2000001c 	.word	0x2000001c
 8004b3c:	58010000 	.word	0x58010000
 8004b40:	5801000c 	.word	0x5801000c

08004b44 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b087      	sub	sp, #28
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004b52:	4b25      	ldr	r3, [pc, #148]	@ (8004be8 <SUBGHZSPI_Receive+0xa4>)
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	4613      	mov	r3, r2
 8004b58:	00db      	lsls	r3, r3, #3
 8004b5a:	1a9b      	subs	r3, r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	0cdb      	lsrs	r3, r3, #19
 8004b60:	2264      	movs	r2, #100	@ 0x64
 8004b62:	fb02 f303 	mul.w	r3, r2, r3
 8004b66:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d105      	bne.n	8004b7a <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2201      	movs	r2, #1
 8004b76:	609a      	str	r2, [r3, #8]
      break;
 8004b78:	e008      	b.n	8004b8c <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004b80:	4b1a      	ldr	r3, [pc, #104]	@ (8004bec <SUBGHZSPI_Receive+0xa8>)
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d1ed      	bne.n	8004b68 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004b8c:	4b18      	ldr	r3, [pc, #96]	@ (8004bf0 <SUBGHZSPI_Receive+0xac>)
 8004b8e:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	22ff      	movs	r2, #255	@ 0xff
 8004b94:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004b96:	4b14      	ldr	r3, [pc, #80]	@ (8004be8 <SUBGHZSPI_Receive+0xa4>)
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	00db      	lsls	r3, r3, #3
 8004b9e:	1a9b      	subs	r3, r3, r2
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	0cdb      	lsrs	r3, r3, #19
 8004ba4:	2264      	movs	r2, #100	@ 0x64
 8004ba6:	fb02 f303 	mul.w	r3, r2, r3
 8004baa:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d105      	bne.n	8004bbe <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	609a      	str	r2, [r3, #8]
      break;
 8004bbc:	e008      	b.n	8004bd0 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004bc4:	4b09      	ldr	r3, [pc, #36]	@ (8004bec <SUBGHZSPI_Receive+0xa8>)
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f003 0301 	and.w	r3, r3, #1
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d1ed      	bne.n	8004bac <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8004bd0:	4b06      	ldr	r3, [pc, #24]	@ (8004bec <SUBGHZSPI_Receive+0xa8>)
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	701a      	strb	r2, [r3, #0]

  return status;
 8004bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	371c      	adds	r7, #28
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bc80      	pop	{r7}
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	2000001c 	.word	0x2000001c
 8004bec:	58010000 	.word	0x58010000
 8004bf0:	5801000c 	.word	0x5801000c

08004bf4 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	791b      	ldrb	r3, [r3, #4]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d111      	bne.n	8004c28 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8004c04:	4b0c      	ldr	r3, [pc, #48]	@ (8004c38 <SUBGHZ_CheckDeviceReady+0x44>)
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	005b      	lsls	r3, r3, #1
 8004c0c:	4413      	add	r3, r2
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	0c1b      	lsrs	r3, r3, #16
 8004c12:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004c14:	f7ff fb9a 	bl	800434c <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1f9      	bne.n	8004c18 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004c24:	f7ff fb82 	bl	800432c <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 f807 	bl	8004c3c <SUBGHZ_WaitOnBusy>
 8004c2e:	4603      	mov	r3, r0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	2000001c 	.word	0x2000001c

08004c3c <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8004c44:	2300      	movs	r3, #0
 8004c46:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8004c48:	4b12      	ldr	r3, [pc, #72]	@ (8004c94 <SUBGHZ_WaitOnBusy+0x58>)
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	005b      	lsls	r3, r3, #1
 8004c50:	4413      	add	r3, r2
 8004c52:	00db      	lsls	r3, r3, #3
 8004c54:	0d1b      	lsrs	r3, r3, #20
 8004c56:	2264      	movs	r2, #100	@ 0x64
 8004c58:	fb02 f303 	mul.w	r3, r2, r3
 8004c5c:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8004c5e:	f7ff fba3 	bl	80043a8 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8004c62:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d105      	bne.n	8004c76 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2202      	movs	r2, #2
 8004c72:	609a      	str	r2, [r3, #8]
      break;
 8004c74:	e009      	b.n	8004c8a <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8004c7c:	f7ff fb82 	bl	8004384 <LL_PWR_IsActiveFlag_RFBUSYS>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	4013      	ands	r3, r2
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d0e9      	beq.n	8004c5e <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8004c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3718      	adds	r7, #24
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	2000001c 	.word	0x2000001c

08004c98 <LL_RCC_GetUSARTClockSource>:
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004ca0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ca4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	401a      	ands	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	041b      	lsls	r3, r3, #16
 8004cb0:	4313      	orrs	r3, r2
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	370c      	adds	r7, #12
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bc80      	pop	{r7}
 8004cba:	4770      	bx	lr

08004cbc <LL_RCC_GetLPUARTClockSource>:
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004cc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cc8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4013      	ands	r3, r2
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bc80      	pop	{r7}
 8004cd8:	4770      	bx	lr

08004cda <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b082      	sub	sp, #8
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e042      	b.n	8004d72 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d106      	bne.n	8004d04 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7fc f984 	bl	800100c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2224      	movs	r2, #36	@ 0x24
 8004d08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 0201 	bic.w	r2, r2, #1
 8004d1a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d002      	beq.n	8004d2a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 feb1 	bl	8005a8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 fc3a 	bl	80055a4 <UART_SetConfig>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d101      	bne.n	8004d3a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e01b      	b.n	8004d72 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	685a      	ldr	r2, [r3, #4]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d48:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	689a      	ldr	r2, [r3, #8]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d58:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f042 0201 	orr.w	r2, r2, #1
 8004d68:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 ff2f 	bl	8005bce <UART_CheckIdleState>
 8004d70:	4603      	mov	r3, r0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3708      	adds	r7, #8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b08a      	sub	sp, #40	@ 0x28
 8004d7e:	af02      	add	r7, sp, #8
 8004d80:	60f8      	str	r0, [r7, #12]
 8004d82:	60b9      	str	r1, [r7, #8]
 8004d84:	603b      	str	r3, [r7, #0]
 8004d86:	4613      	mov	r3, r2
 8004d88:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d90:	2b20      	cmp	r3, #32
 8004d92:	d173      	bne.n	8004e7c <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d002      	beq.n	8004da0 <HAL_UART_Transmit+0x26>
 8004d9a:	88fb      	ldrh	r3, [r7, #6]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d101      	bne.n	8004da4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e06c      	b.n	8004e7e <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2221      	movs	r2, #33	@ 0x21
 8004db0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004db4:	f7fd fbc0 	bl	8002538 <HAL_GetTick>
 8004db8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	88fa      	ldrh	r2, [r7, #6]
 8004dbe:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	88fa      	ldrh	r2, [r7, #6]
 8004dc6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dd2:	d108      	bne.n	8004de6 <HAL_UART_Transmit+0x6c>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d104      	bne.n	8004de6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	61bb      	str	r3, [r7, #24]
 8004de4:	e003      	b.n	8004dee <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dea:	2300      	movs	r3, #0
 8004dec:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004dee:	e02c      	b.n	8004e4a <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	9300      	str	r3, [sp, #0]
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	2200      	movs	r2, #0
 8004df8:	2180      	movs	r1, #128	@ 0x80
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f000 ff35 	bl	8005c6a <UART_WaitOnFlagUntilTimeout>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e039      	b.n	8004e7e <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d10b      	bne.n	8004e28 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	881b      	ldrh	r3, [r3, #0]
 8004e14:	461a      	mov	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e1e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	3302      	adds	r3, #2
 8004e24:	61bb      	str	r3, [r7, #24]
 8004e26:	e007      	b.n	8004e38 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	781a      	ldrb	r2, [r3, #0]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	3301      	adds	r3, #1
 8004e36:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	3b01      	subs	r3, #1
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1cc      	bne.n	8004df0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	2140      	movs	r1, #64	@ 0x40
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f000 ff02 	bl	8005c6a <UART_WaitOnFlagUntilTimeout>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d001      	beq.n	8004e70 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e006      	b.n	8004e7e <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2220      	movs	r2, #32
 8004e74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	e000      	b.n	8004e7e <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8004e7c:	2302      	movs	r3, #2
  }
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3720      	adds	r7, #32
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
	...

08004e88 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b08a      	sub	sp, #40	@ 0x28
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	4613      	mov	r3, r2
 8004e94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e9c:	2b20      	cmp	r3, #32
 8004e9e:	d137      	bne.n	8004f10 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d002      	beq.n	8004eac <HAL_UART_Receive_IT+0x24>
 8004ea6:	88fb      	ldrh	r3, [r7, #6]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d101      	bne.n	8004eb0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e030      	b.n	8004f12 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a18      	ldr	r2, [pc, #96]	@ (8004f1c <HAL_UART_Receive_IT+0x94>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d01f      	beq.n	8004f00 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d018      	beq.n	8004f00 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	e853 3f00 	ldrex	r3, [r3]
 8004eda:	613b      	str	r3, [r7, #16]
   return(result);
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004ee2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	461a      	mov	r2, r3
 8004eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eec:	623b      	str	r3, [r7, #32]
 8004eee:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef0:	69f9      	ldr	r1, [r7, #28]
 8004ef2:	6a3a      	ldr	r2, [r7, #32]
 8004ef4:	e841 2300 	strex	r3, r2, [r1]
 8004ef8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1e6      	bne.n	8004ece <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004f00:	88fb      	ldrh	r3, [r7, #6]
 8004f02:	461a      	mov	r2, r3
 8004f04:	68b9      	ldr	r1, [r7, #8]
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f000 ff7e 	bl	8005e08 <UART_Start_Receive_IT>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	e000      	b.n	8004f12 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f10:	2302      	movs	r3, #2
  }
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3728      	adds	r7, #40	@ 0x28
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	40008000 	.word	0x40008000

08004f20 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b0ba      	sub	sp, #232	@ 0xe8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	69db      	ldr	r3, [r3, #28]
 8004f2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f46:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004f4a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004f4e:	4013      	ands	r3, r2
 8004f50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004f54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d11b      	bne.n	8004f94 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004f5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f60:	f003 0320 	and.w	r3, r3, #32
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d015      	beq.n	8004f94 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f6c:	f003 0320 	and.w	r3, r3, #32
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d105      	bne.n	8004f80 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004f74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d009      	beq.n	8004f94 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f000 82e3 	beq.w	8005550 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	4798      	blx	r3
      }
      return;
 8004f92:	e2dd      	b.n	8005550 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004f94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f000 8123 	beq.w	80051e4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004f9e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004fa2:	4b8d      	ldr	r3, [pc, #564]	@ (80051d8 <HAL_UART_IRQHandler+0x2b8>)
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d106      	bne.n	8004fb8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004faa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004fae:	4b8b      	ldr	r3, [pc, #556]	@ (80051dc <HAL_UART_IRQHandler+0x2bc>)
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f000 8116 	beq.w	80051e4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fbc:	f003 0301 	and.w	r3, r3, #1
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d011      	beq.n	8004fe8 <HAL_UART_IRQHandler+0xc8>
 8004fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00b      	beq.n	8004fe8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fde:	f043 0201 	orr.w	r2, r3, #1
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d011      	beq.n	8005018 <HAL_UART_IRQHandler+0xf8>
 8004ff4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00b      	beq.n	8005018 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2202      	movs	r2, #2
 8005006:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800500e:	f043 0204 	orr.w	r2, r3, #4
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800501c:	f003 0304 	and.w	r3, r3, #4
 8005020:	2b00      	cmp	r3, #0
 8005022:	d011      	beq.n	8005048 <HAL_UART_IRQHandler+0x128>
 8005024:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005028:	f003 0301 	and.w	r3, r3, #1
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00b      	beq.n	8005048 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2204      	movs	r2, #4
 8005036:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800503e:	f043 0202 	orr.w	r2, r3, #2
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800504c:	f003 0308 	and.w	r3, r3, #8
 8005050:	2b00      	cmp	r3, #0
 8005052:	d017      	beq.n	8005084 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005058:	f003 0320 	and.w	r3, r3, #32
 800505c:	2b00      	cmp	r3, #0
 800505e:	d105      	bne.n	800506c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005060:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005064:	4b5c      	ldr	r3, [pc, #368]	@ (80051d8 <HAL_UART_IRQHandler+0x2b8>)
 8005066:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00b      	beq.n	8005084 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2208      	movs	r2, #8
 8005072:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800507a:	f043 0208 	orr.w	r2, r3, #8
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005088:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800508c:	2b00      	cmp	r3, #0
 800508e:	d012      	beq.n	80050b6 <HAL_UART_IRQHandler+0x196>
 8005090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005094:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00c      	beq.n	80050b6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80050a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ac:	f043 0220 	orr.w	r2, r3, #32
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f000 8249 	beq.w	8005554 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80050c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050c6:	f003 0320 	and.w	r3, r3, #32
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d013      	beq.n	80050f6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80050ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050d2:	f003 0320 	and.w	r3, r3, #32
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d105      	bne.n	80050e6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80050da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d007      	beq.n	80050f6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d003      	beq.n	80050f6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800510a:	2b40      	cmp	r3, #64	@ 0x40
 800510c:	d005      	beq.n	800511a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800510e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005112:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005116:	2b00      	cmp	r3, #0
 8005118:	d054      	beq.n	80051c4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 ff94 	bl	8006048 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800512a:	2b40      	cmp	r3, #64	@ 0x40
 800512c:	d146      	bne.n	80051bc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	3308      	adds	r3, #8
 8005134:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005138:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800513c:	e853 3f00 	ldrex	r3, [r3]
 8005140:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005144:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005148:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800514c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	3308      	adds	r3, #8
 8005156:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800515a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800515e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005162:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005166:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800516a:	e841 2300 	strex	r3, r2, [r1]
 800516e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005172:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1d9      	bne.n	800512e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005180:	2b00      	cmp	r3, #0
 8005182:	d017      	beq.n	80051b4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800518a:	4a15      	ldr	r2, [pc, #84]	@ (80051e0 <HAL_UART_IRQHandler+0x2c0>)
 800518c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005194:	4618      	mov	r0, r3
 8005196:	f7fd fb98 	bl	80028ca <HAL_DMA_Abort_IT>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d019      	beq.n	80051d4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80051ae:	4610      	mov	r0, r2
 80051b0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051b2:	e00f      	b.n	80051d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 f9e0 	bl	800557a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051ba:	e00b      	b.n	80051d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 f9dc 	bl	800557a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051c2:	e007      	b.n	80051d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 f9d8 	bl	800557a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80051d2:	e1bf      	b.n	8005554 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d4:	bf00      	nop
    return;
 80051d6:	e1bd      	b.n	8005554 <HAL_UART_IRQHandler+0x634>
 80051d8:	10000001 	.word	0x10000001
 80051dc:	04000120 	.word	0x04000120
 80051e0:	08006113 	.word	0x08006113

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	f040 8153 	bne.w	8005494 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80051ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051f2:	f003 0310 	and.w	r3, r3, #16
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f000 814c 	beq.w	8005494 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80051fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005200:	f003 0310 	and.w	r3, r3, #16
 8005204:	2b00      	cmp	r3, #0
 8005206:	f000 8145 	beq.w	8005494 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2210      	movs	r2, #16
 8005210:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800521c:	2b40      	cmp	r3, #64	@ 0x40
 800521e:	f040 80bb 	bne.w	8005398 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005230:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 818f 	beq.w	8005558 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005240:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005244:	429a      	cmp	r2, r3
 8005246:	f080 8187 	bcs.w	8005558 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005250:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0320 	and.w	r3, r3, #32
 8005262:	2b00      	cmp	r3, #0
 8005264:	f040 8087 	bne.w	8005376 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005270:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005274:	e853 3f00 	ldrex	r3, [r3]
 8005278:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800527c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005280:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005284:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	461a      	mov	r2, r3
 800528e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005292:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005296:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800529e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80052a2:	e841 2300 	strex	r3, r2, [r1]
 80052a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80052aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1da      	bne.n	8005268 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	3308      	adds	r3, #8
 80052b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80052bc:	e853 3f00 	ldrex	r3, [r3]
 80052c0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80052c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80052c4:	f023 0301 	bic.w	r3, r3, #1
 80052c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	3308      	adds	r3, #8
 80052d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80052d6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80052da:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052dc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80052de:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80052e2:	e841 2300 	strex	r3, r2, [r1]
 80052e6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80052e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1e1      	bne.n	80052b2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	3308      	adds	r3, #8
 80052f4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052f8:	e853 3f00 	ldrex	r3, [r3]
 80052fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80052fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005300:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005304:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	3308      	adds	r3, #8
 800530e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005312:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005314:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005316:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005318:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800531a:	e841 2300 	strex	r3, r2, [r1]
 800531e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005320:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1e3      	bne.n	80052ee <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2220      	movs	r2, #32
 800532a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800533c:	e853 3f00 	ldrex	r3, [r3]
 8005340:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005342:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005344:	f023 0310 	bic.w	r3, r3, #16
 8005348:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	461a      	mov	r2, r3
 8005352:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005356:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005358:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800535c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800535e:	e841 2300 	strex	r3, r2, [r1]
 8005362:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005364:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1e4      	bne.n	8005334 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005370:	4618      	mov	r0, r3
 8005372:	f7fd fa4c 	bl	800280e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2202      	movs	r2, #2
 800537a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005388:	b29b      	uxth	r3, r3
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	b29b      	uxth	r3, r3
 800538e:	4619      	mov	r1, r3
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 f8fb 	bl	800558c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005396:	e0df      	b.n	8005558 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f000 80d1 	beq.w	800555c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80053ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f000 80cc 	beq.w	800555c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053cc:	e853 3f00 	ldrex	r3, [r3]
 80053d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80053d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	461a      	mov	r2, r3
 80053e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80053e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80053e8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80053ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053ee:	e841 2300 	strex	r3, r2, [r1]
 80053f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1e4      	bne.n	80053c4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	3308      	adds	r3, #8
 8005400:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005404:	e853 3f00 	ldrex	r3, [r3]
 8005408:	623b      	str	r3, [r7, #32]
   return(result);
 800540a:	6a3b      	ldr	r3, [r7, #32]
 800540c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005410:	f023 0301 	bic.w	r3, r3, #1
 8005414:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	3308      	adds	r3, #8
 800541e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005422:	633a      	str	r2, [r7, #48]	@ 0x30
 8005424:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005426:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005428:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800542a:	e841 2300 	strex	r3, r2, [r1]
 800542e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1e1      	bne.n	80053fa <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2220      	movs	r2, #32
 800543a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	e853 3f00 	ldrex	r3, [r3]
 8005456:	60fb      	str	r3, [r7, #12]
   return(result);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f023 0310 	bic.w	r3, r3, #16
 800545e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	461a      	mov	r2, r3
 8005468:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800546c:	61fb      	str	r3, [r7, #28]
 800546e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005470:	69b9      	ldr	r1, [r7, #24]
 8005472:	69fa      	ldr	r2, [r7, #28]
 8005474:	e841 2300 	strex	r3, r2, [r1]
 8005478:	617b      	str	r3, [r7, #20]
   return(result);
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1e4      	bne.n	800544a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2202      	movs	r2, #2
 8005484:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005486:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800548a:	4619      	mov	r1, r3
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 f87d 	bl	800558c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005492:	e063      	b.n	800555c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005498:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00e      	beq.n	80054be <HAL_UART_IRQHandler+0x59e>
 80054a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d008      	beq.n	80054be <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80054b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f001 fb88 	bl	8006bcc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80054bc:	e051      	b.n	8005562 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80054be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d014      	beq.n	80054f4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80054ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d105      	bne.n	80054e2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80054d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d008      	beq.n	80054f4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d03a      	beq.n	8005560 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	4798      	blx	r3
    }
    return;
 80054f2:	e035      	b.n	8005560 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80054f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d009      	beq.n	8005514 <HAL_UART_IRQHandler+0x5f4>
 8005500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005508:	2b00      	cmp	r3, #0
 800550a:	d003      	beq.n	8005514 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 fe16 	bl	800613e <UART_EndTransmit_IT>
    return;
 8005512:	e026      	b.n	8005562 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005518:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d009      	beq.n	8005534 <HAL_UART_IRQHandler+0x614>
 8005520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005524:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d003      	beq.n	8005534 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f001 fb5f 	bl	8006bf0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005532:	e016      	b.n	8005562 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005538:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d010      	beq.n	8005562 <HAL_UART_IRQHandler+0x642>
 8005540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005544:	2b00      	cmp	r3, #0
 8005546:	da0c      	bge.n	8005562 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f001 fb48 	bl	8006bde <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800554e:	e008      	b.n	8005562 <HAL_UART_IRQHandler+0x642>
      return;
 8005550:	bf00      	nop
 8005552:	e006      	b.n	8005562 <HAL_UART_IRQHandler+0x642>
    return;
 8005554:	bf00      	nop
 8005556:	e004      	b.n	8005562 <HAL_UART_IRQHandler+0x642>
      return;
 8005558:	bf00      	nop
 800555a:	e002      	b.n	8005562 <HAL_UART_IRQHandler+0x642>
      return;
 800555c:	bf00      	nop
 800555e:	e000      	b.n	8005562 <HAL_UART_IRQHandler+0x642>
    return;
 8005560:	bf00      	nop
  }
}
 8005562:	37e8      	adds	r7, #232	@ 0xe8
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005570:	bf00      	nop
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	bc80      	pop	{r7}
 8005578:	4770      	bx	lr

0800557a <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005582:	bf00      	nop
 8005584:	370c      	adds	r7, #12
 8005586:	46bd      	mov	sp, r7
 8005588:	bc80      	pop	{r7}
 800558a:	4770      	bx	lr

0800558c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	460b      	mov	r3, r1
 8005596:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	bc80      	pop	{r7}
 80055a0:	4770      	bx	lr
	...

080055a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055a8:	b08c      	sub	sp, #48	@ 0x30
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055ae:	2300      	movs	r3, #0
 80055b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	689a      	ldr	r2, [r3, #8]
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	431a      	orrs	r2, r3
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	695b      	ldr	r3, [r3, #20]
 80055c2:	431a      	orrs	r2, r3
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	69db      	ldr	r3, [r3, #28]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	4b94      	ldr	r3, [pc, #592]	@ (8005824 <UART_SetConfig+0x280>)
 80055d4:	4013      	ands	r3, r2
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	6812      	ldr	r2, [r2, #0]
 80055da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055dc:	430b      	orrs	r3, r1
 80055de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	68da      	ldr	r2, [r3, #12]
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	430a      	orrs	r2, r1
 80055f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a89      	ldr	r2, [pc, #548]	@ (8005828 <UART_SetConfig+0x284>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d004      	beq.n	8005610 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800560c:	4313      	orrs	r3, r2
 800560e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800561a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	6812      	ldr	r2, [r2, #0]
 8005622:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005624:	430b      	orrs	r3, r1
 8005626:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800562e:	f023 010f 	bic.w	r1, r3, #15
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	430a      	orrs	r2, r1
 800563c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a7a      	ldr	r2, [pc, #488]	@ (800582c <UART_SetConfig+0x288>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d127      	bne.n	8005698 <UART_SetConfig+0xf4>
 8005648:	2003      	movs	r0, #3
 800564a:	f7ff fb25 	bl	8004c98 <LL_RCC_GetUSARTClockSource>
 800564e:	4603      	mov	r3, r0
 8005650:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8005654:	2b03      	cmp	r3, #3
 8005656:	d81b      	bhi.n	8005690 <UART_SetConfig+0xec>
 8005658:	a201      	add	r2, pc, #4	@ (adr r2, 8005660 <UART_SetConfig+0xbc>)
 800565a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800565e:	bf00      	nop
 8005660:	08005671 	.word	0x08005671
 8005664:	08005681 	.word	0x08005681
 8005668:	08005679 	.word	0x08005679
 800566c:	08005689 	.word	0x08005689
 8005670:	2301      	movs	r3, #1
 8005672:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005676:	e080      	b.n	800577a <UART_SetConfig+0x1d6>
 8005678:	2302      	movs	r3, #2
 800567a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800567e:	e07c      	b.n	800577a <UART_SetConfig+0x1d6>
 8005680:	2304      	movs	r3, #4
 8005682:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005686:	e078      	b.n	800577a <UART_SetConfig+0x1d6>
 8005688:	2308      	movs	r3, #8
 800568a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800568e:	e074      	b.n	800577a <UART_SetConfig+0x1d6>
 8005690:	2310      	movs	r3, #16
 8005692:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005696:	e070      	b.n	800577a <UART_SetConfig+0x1d6>
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a64      	ldr	r2, [pc, #400]	@ (8005830 <UART_SetConfig+0x28c>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d138      	bne.n	8005714 <UART_SetConfig+0x170>
 80056a2:	200c      	movs	r0, #12
 80056a4:	f7ff faf8 	bl	8004c98 <LL_RCC_GetUSARTClockSource>
 80056a8:	4603      	mov	r3, r0
 80056aa:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 80056ae:	2b0c      	cmp	r3, #12
 80056b0:	d82c      	bhi.n	800570c <UART_SetConfig+0x168>
 80056b2:	a201      	add	r2, pc, #4	@ (adr r2, 80056b8 <UART_SetConfig+0x114>)
 80056b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b8:	080056ed 	.word	0x080056ed
 80056bc:	0800570d 	.word	0x0800570d
 80056c0:	0800570d 	.word	0x0800570d
 80056c4:	0800570d 	.word	0x0800570d
 80056c8:	080056fd 	.word	0x080056fd
 80056cc:	0800570d 	.word	0x0800570d
 80056d0:	0800570d 	.word	0x0800570d
 80056d4:	0800570d 	.word	0x0800570d
 80056d8:	080056f5 	.word	0x080056f5
 80056dc:	0800570d 	.word	0x0800570d
 80056e0:	0800570d 	.word	0x0800570d
 80056e4:	0800570d 	.word	0x0800570d
 80056e8:	08005705 	.word	0x08005705
 80056ec:	2300      	movs	r3, #0
 80056ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056f2:	e042      	b.n	800577a <UART_SetConfig+0x1d6>
 80056f4:	2302      	movs	r3, #2
 80056f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056fa:	e03e      	b.n	800577a <UART_SetConfig+0x1d6>
 80056fc:	2304      	movs	r3, #4
 80056fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005702:	e03a      	b.n	800577a <UART_SetConfig+0x1d6>
 8005704:	2308      	movs	r3, #8
 8005706:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800570a:	e036      	b.n	800577a <UART_SetConfig+0x1d6>
 800570c:	2310      	movs	r3, #16
 800570e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005712:	e032      	b.n	800577a <UART_SetConfig+0x1d6>
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a43      	ldr	r2, [pc, #268]	@ (8005828 <UART_SetConfig+0x284>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d12a      	bne.n	8005774 <UART_SetConfig+0x1d0>
 800571e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8005722:	f7ff facb 	bl	8004cbc <LL_RCC_GetLPUARTClockSource>
 8005726:	4603      	mov	r3, r0
 8005728:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800572c:	d01a      	beq.n	8005764 <UART_SetConfig+0x1c0>
 800572e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005732:	d81b      	bhi.n	800576c <UART_SetConfig+0x1c8>
 8005734:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005738:	d00c      	beq.n	8005754 <UART_SetConfig+0x1b0>
 800573a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800573e:	d815      	bhi.n	800576c <UART_SetConfig+0x1c8>
 8005740:	2b00      	cmp	r3, #0
 8005742:	d003      	beq.n	800574c <UART_SetConfig+0x1a8>
 8005744:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005748:	d008      	beq.n	800575c <UART_SetConfig+0x1b8>
 800574a:	e00f      	b.n	800576c <UART_SetConfig+0x1c8>
 800574c:	2300      	movs	r3, #0
 800574e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005752:	e012      	b.n	800577a <UART_SetConfig+0x1d6>
 8005754:	2302      	movs	r3, #2
 8005756:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800575a:	e00e      	b.n	800577a <UART_SetConfig+0x1d6>
 800575c:	2304      	movs	r3, #4
 800575e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005762:	e00a      	b.n	800577a <UART_SetConfig+0x1d6>
 8005764:	2308      	movs	r3, #8
 8005766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800576a:	e006      	b.n	800577a <UART_SetConfig+0x1d6>
 800576c:	2310      	movs	r3, #16
 800576e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005772:	e002      	b.n	800577a <UART_SetConfig+0x1d6>
 8005774:	2310      	movs	r3, #16
 8005776:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a2a      	ldr	r2, [pc, #168]	@ (8005828 <UART_SetConfig+0x284>)
 8005780:	4293      	cmp	r3, r2
 8005782:	f040 80a4 	bne.w	80058ce <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005786:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800578a:	2b08      	cmp	r3, #8
 800578c:	d823      	bhi.n	80057d6 <UART_SetConfig+0x232>
 800578e:	a201      	add	r2, pc, #4	@ (adr r2, 8005794 <UART_SetConfig+0x1f0>)
 8005790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005794:	080057b9 	.word	0x080057b9
 8005798:	080057d7 	.word	0x080057d7
 800579c:	080057c1 	.word	0x080057c1
 80057a0:	080057d7 	.word	0x080057d7
 80057a4:	080057c7 	.word	0x080057c7
 80057a8:	080057d7 	.word	0x080057d7
 80057ac:	080057d7 	.word	0x080057d7
 80057b0:	080057d7 	.word	0x080057d7
 80057b4:	080057cf 	.word	0x080057cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057b8:	f7fe fac0 	bl	8003d3c <HAL_RCC_GetPCLK1Freq>
 80057bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057be:	e010      	b.n	80057e2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057c0:	4b1c      	ldr	r3, [pc, #112]	@ (8005834 <UART_SetConfig+0x290>)
 80057c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80057c4:	e00d      	b.n	80057e2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057c6:	f7fe fa05 	bl	8003bd4 <HAL_RCC_GetSysClockFreq>
 80057ca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057cc:	e009      	b.n	80057e2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80057d4:	e005      	b.n	80057e2 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80057d6:	2300      	movs	r3, #0
 80057d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80057e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80057e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 8137 	beq.w	8005a58 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ee:	4a12      	ldr	r2, [pc, #72]	@ (8005838 <UART_SetConfig+0x294>)
 80057f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057f4:	461a      	mov	r2, r3
 80057f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80057fc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	685a      	ldr	r2, [r3, #4]
 8005802:	4613      	mov	r3, r2
 8005804:	005b      	lsls	r3, r3, #1
 8005806:	4413      	add	r3, r2
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	429a      	cmp	r2, r3
 800580c:	d305      	bcc.n	800581a <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	429a      	cmp	r2, r3
 8005818:	d910      	bls.n	800583c <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005820:	e11a      	b.n	8005a58 <UART_SetConfig+0x4b4>
 8005822:	bf00      	nop
 8005824:	cfff69f3 	.word	0xcfff69f3
 8005828:	40008000 	.word	0x40008000
 800582c:	40013800 	.word	0x40013800
 8005830:	40004400 	.word	0x40004400
 8005834:	00f42400 	.word	0x00f42400
 8005838:	08007994 	.word	0x08007994
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800583c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800583e:	2200      	movs	r2, #0
 8005840:	60bb      	str	r3, [r7, #8]
 8005842:	60fa      	str	r2, [r7, #12]
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005848:	4a8e      	ldr	r2, [pc, #568]	@ (8005a84 <UART_SetConfig+0x4e0>)
 800584a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800584e:	b29b      	uxth	r3, r3
 8005850:	2200      	movs	r2, #0
 8005852:	603b      	str	r3, [r7, #0]
 8005854:	607a      	str	r2, [r7, #4]
 8005856:	e9d7 2300 	ldrd	r2, r3, [r7]
 800585a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800585e:	f7fa fce7 	bl	8000230 <__aeabi_uldivmod>
 8005862:	4602      	mov	r2, r0
 8005864:	460b      	mov	r3, r1
 8005866:	4610      	mov	r0, r2
 8005868:	4619      	mov	r1, r3
 800586a:	f04f 0200 	mov.w	r2, #0
 800586e:	f04f 0300 	mov.w	r3, #0
 8005872:	020b      	lsls	r3, r1, #8
 8005874:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005878:	0202      	lsls	r2, r0, #8
 800587a:	6979      	ldr	r1, [r7, #20]
 800587c:	6849      	ldr	r1, [r1, #4]
 800587e:	0849      	lsrs	r1, r1, #1
 8005880:	2000      	movs	r0, #0
 8005882:	460c      	mov	r4, r1
 8005884:	4605      	mov	r5, r0
 8005886:	eb12 0804 	adds.w	r8, r2, r4
 800588a:	eb43 0905 	adc.w	r9, r3, r5
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	469a      	mov	sl, r3
 8005896:	4693      	mov	fp, r2
 8005898:	4652      	mov	r2, sl
 800589a:	465b      	mov	r3, fp
 800589c:	4640      	mov	r0, r8
 800589e:	4649      	mov	r1, r9
 80058a0:	f7fa fcc6 	bl	8000230 <__aeabi_uldivmod>
 80058a4:	4602      	mov	r2, r0
 80058a6:	460b      	mov	r3, r1
 80058a8:	4613      	mov	r3, r2
 80058aa:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058ac:	6a3b      	ldr	r3, [r7, #32]
 80058ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058b2:	d308      	bcc.n	80058c6 <UART_SetConfig+0x322>
 80058b4:	6a3b      	ldr	r3, [r7, #32]
 80058b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058ba:	d204      	bcs.n	80058c6 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6a3a      	ldr	r2, [r7, #32]
 80058c2:	60da      	str	r2, [r3, #12]
 80058c4:	e0c8      	b.n	8005a58 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80058cc:	e0c4      	b.n	8005a58 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	69db      	ldr	r3, [r3, #28]
 80058d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058d6:	d167      	bne.n	80059a8 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80058d8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80058dc:	2b08      	cmp	r3, #8
 80058de:	d828      	bhi.n	8005932 <UART_SetConfig+0x38e>
 80058e0:	a201      	add	r2, pc, #4	@ (adr r2, 80058e8 <UART_SetConfig+0x344>)
 80058e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e6:	bf00      	nop
 80058e8:	0800590d 	.word	0x0800590d
 80058ec:	08005915 	.word	0x08005915
 80058f0:	0800591d 	.word	0x0800591d
 80058f4:	08005933 	.word	0x08005933
 80058f8:	08005923 	.word	0x08005923
 80058fc:	08005933 	.word	0x08005933
 8005900:	08005933 	.word	0x08005933
 8005904:	08005933 	.word	0x08005933
 8005908:	0800592b 	.word	0x0800592b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800590c:	f7fe fa16 	bl	8003d3c <HAL_RCC_GetPCLK1Freq>
 8005910:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005912:	e014      	b.n	800593e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005914:	f7fe fa24 	bl	8003d60 <HAL_RCC_GetPCLK2Freq>
 8005918:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800591a:	e010      	b.n	800593e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800591c:	4b5a      	ldr	r3, [pc, #360]	@ (8005a88 <UART_SetConfig+0x4e4>)
 800591e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005920:	e00d      	b.n	800593e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005922:	f7fe f957 	bl	8003bd4 <HAL_RCC_GetSysClockFreq>
 8005926:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005928:	e009      	b.n	800593e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800592a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800592e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005930:	e005      	b.n	800593e <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8005932:	2300      	movs	r3, #0
 8005934:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800593c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800593e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005940:	2b00      	cmp	r3, #0
 8005942:	f000 8089 	beq.w	8005a58 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800594a:	4a4e      	ldr	r2, [pc, #312]	@ (8005a84 <UART_SetConfig+0x4e0>)
 800594c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005950:	461a      	mov	r2, r3
 8005952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005954:	fbb3 f3f2 	udiv	r3, r3, r2
 8005958:	005a      	lsls	r2, r3, #1
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	085b      	lsrs	r3, r3, #1
 8005960:	441a      	add	r2, r3
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	fbb2 f3f3 	udiv	r3, r2, r3
 800596a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800596c:	6a3b      	ldr	r3, [r7, #32]
 800596e:	2b0f      	cmp	r3, #15
 8005970:	d916      	bls.n	80059a0 <UART_SetConfig+0x3fc>
 8005972:	6a3b      	ldr	r3, [r7, #32]
 8005974:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005978:	d212      	bcs.n	80059a0 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800597a:	6a3b      	ldr	r3, [r7, #32]
 800597c:	b29b      	uxth	r3, r3
 800597e:	f023 030f 	bic.w	r3, r3, #15
 8005982:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005984:	6a3b      	ldr	r3, [r7, #32]
 8005986:	085b      	lsrs	r3, r3, #1
 8005988:	b29b      	uxth	r3, r3
 800598a:	f003 0307 	and.w	r3, r3, #7
 800598e:	b29a      	uxth	r2, r3
 8005990:	8bfb      	ldrh	r3, [r7, #30]
 8005992:	4313      	orrs	r3, r2
 8005994:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	8bfa      	ldrh	r2, [r7, #30]
 800599c:	60da      	str	r2, [r3, #12]
 800599e:	e05b      	b.n	8005a58 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80059a6:	e057      	b.n	8005a58 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80059a8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80059ac:	2b08      	cmp	r3, #8
 80059ae:	d828      	bhi.n	8005a02 <UART_SetConfig+0x45e>
 80059b0:	a201      	add	r2, pc, #4	@ (adr r2, 80059b8 <UART_SetConfig+0x414>)
 80059b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b6:	bf00      	nop
 80059b8:	080059dd 	.word	0x080059dd
 80059bc:	080059e5 	.word	0x080059e5
 80059c0:	080059ed 	.word	0x080059ed
 80059c4:	08005a03 	.word	0x08005a03
 80059c8:	080059f3 	.word	0x080059f3
 80059cc:	08005a03 	.word	0x08005a03
 80059d0:	08005a03 	.word	0x08005a03
 80059d4:	08005a03 	.word	0x08005a03
 80059d8:	080059fb 	.word	0x080059fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059dc:	f7fe f9ae 	bl	8003d3c <HAL_RCC_GetPCLK1Freq>
 80059e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80059e2:	e014      	b.n	8005a0e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059e4:	f7fe f9bc 	bl	8003d60 <HAL_RCC_GetPCLK2Freq>
 80059e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80059ea:	e010      	b.n	8005a0e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059ec:	4b26      	ldr	r3, [pc, #152]	@ (8005a88 <UART_SetConfig+0x4e4>)
 80059ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80059f0:	e00d      	b.n	8005a0e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059f2:	f7fe f8ef 	bl	8003bd4 <HAL_RCC_GetSysClockFreq>
 80059f6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80059f8:	e009      	b.n	8005a0e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a00:	e005      	b.n	8005a0e <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8005a02:	2300      	movs	r3, #0
 8005a04:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005a0c:	bf00      	nop
    }

    if (pclk != 0U)
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d021      	beq.n	8005a58 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a18:	4a1a      	ldr	r2, [pc, #104]	@ (8005a84 <UART_SetConfig+0x4e0>)
 8005a1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a1e:	461a      	mov	r2, r3
 8005a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a22:	fbb3 f2f2 	udiv	r2, r3, r2
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	085b      	lsrs	r3, r3, #1
 8005a2c:	441a      	add	r2, r3
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a36:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a38:	6a3b      	ldr	r3, [r7, #32]
 8005a3a:	2b0f      	cmp	r3, #15
 8005a3c:	d909      	bls.n	8005a52 <UART_SetConfig+0x4ae>
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a44:	d205      	bcs.n	8005a52 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a46:	6a3b      	ldr	r3, [r7, #32]
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	60da      	str	r2, [r3, #12]
 8005a50:	e002      	b.n	8005a58 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	2200      	movs	r2, #0
 8005a72:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005a74:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3730      	adds	r7, #48	@ 0x30
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a82:	bf00      	nop
 8005a84:	08007994 	.word	0x08007994
 8005a88:	00f42400 	.word	0x00f42400

08005a8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a98:	f003 0308 	and.w	r3, r3, #8
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00a      	beq.n	8005ab6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00a      	beq.n	8005ad8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	430a      	orrs	r2, r1
 8005ad6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005adc:	f003 0302 	and.w	r3, r3, #2
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00a      	beq.n	8005afa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	430a      	orrs	r2, r1
 8005af8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005afe:	f003 0304 	and.w	r3, r3, #4
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00a      	beq.n	8005b1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	430a      	orrs	r2, r1
 8005b1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b20:	f003 0310 	and.w	r3, r3, #16
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00a      	beq.n	8005b3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b42:	f003 0320 	and.w	r3, r3, #32
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00a      	beq.n	8005b60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	430a      	orrs	r2, r1
 8005b5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d01a      	beq.n	8005ba2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b8a:	d10a      	bne.n	8005ba2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00a      	beq.n	8005bc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	605a      	str	r2, [r3, #4]
  }
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bc80      	pop	{r7}
 8005bcc:	4770      	bx	lr

08005bce <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b086      	sub	sp, #24
 8005bd2:	af02      	add	r7, sp, #8
 8005bd4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005bde:	f7fc fcab 	bl	8002538 <HAL_GetTick>
 8005be2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 0308 	and.w	r3, r3, #8
 8005bee:	2b08      	cmp	r3, #8
 8005bf0:	d10e      	bne.n	8005c10 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bf2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005bf6:	9300      	str	r3, [sp, #0]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 f832 	bl	8005c6a <UART_WaitOnFlagUntilTimeout>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d001      	beq.n	8005c10 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e028      	b.n	8005c62 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0304 	and.w	r3, r3, #4
 8005c1a:	2b04      	cmp	r3, #4
 8005c1c:	d10e      	bne.n	8005c3c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c1e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 f81c 	bl	8005c6a <UART_WaitOnFlagUntilTimeout>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d001      	beq.n	8005c3c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e012      	b.n	8005c62 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2220      	movs	r2, #32
 8005c40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2220      	movs	r2, #32
 8005c48:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b09c      	sub	sp, #112	@ 0x70
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	60f8      	str	r0, [r7, #12]
 8005c72:	60b9      	str	r1, [r7, #8]
 8005c74:	603b      	str	r3, [r7, #0]
 8005c76:	4613      	mov	r3, r2
 8005c78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c7a:	e0af      	b.n	8005ddc <UART_WaitOnFlagUntilTimeout+0x172>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c82:	f000 80ab 	beq.w	8005ddc <UART_WaitOnFlagUntilTimeout+0x172>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c86:	f7fc fc57 	bl	8002538 <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d302      	bcc.n	8005c9c <UART_WaitOnFlagUntilTimeout+0x32>
 8005c96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d140      	bne.n	8005d1e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ca4:	e853 3f00 	ldrex	r3, [r3]
 8005ca8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005caa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cac:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005cb0:	667b      	str	r3, [r7, #100]	@ 0x64
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005cbc:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cbe:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005cc0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005cc2:	e841 2300 	strex	r3, r2, [r1]
 8005cc6:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005cc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1e6      	bne.n	8005c9c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	3308      	adds	r3, #8
 8005cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cd8:	e853 3f00 	ldrex	r3, [r3]
 8005cdc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ce0:	f023 0301 	bic.w	r3, r3, #1
 8005ce4:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	3308      	adds	r3, #8
 8005cec:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005cee:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005cf0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005cf4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005cf6:	e841 2300 	strex	r3, r2, [r1]
 8005cfa:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005cfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1e5      	bne.n	8005cce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2220      	movs	r2, #32
 8005d06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2220      	movs	r2, #32
 8005d0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e06f      	b.n	8005dfe <UART_WaitOnFlagUntilTimeout+0x194>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0304 	and.w	r3, r3, #4
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d057      	beq.n	8005ddc <UART_WaitOnFlagUntilTimeout+0x172>
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	2b80      	cmp	r3, #128	@ 0x80
 8005d30:	d054      	beq.n	8005ddc <UART_WaitOnFlagUntilTimeout+0x172>
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	2b40      	cmp	r3, #64	@ 0x40
 8005d36:	d051      	beq.n	8005ddc <UART_WaitOnFlagUntilTimeout+0x172>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	69db      	ldr	r3, [r3, #28]
 8005d3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d46:	d149      	bne.n	8005ddc <UART_WaitOnFlagUntilTimeout+0x172>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d50:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d5a:	e853 3f00 	ldrex	r3, [r3]
 8005d5e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d62:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005d66:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d70:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d72:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d74:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005d76:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d78:	e841 2300 	strex	r3, r2, [r1]
 8005d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1e6      	bne.n	8005d52 <UART_WaitOnFlagUntilTimeout+0xe8>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	3308      	adds	r3, #8
 8005d8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	e853 3f00 	ldrex	r3, [r3]
 8005d92:	613b      	str	r3, [r7, #16]
   return(result);
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	f023 0301 	bic.w	r3, r3, #1
 8005d9a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	3308      	adds	r3, #8
 8005da2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005da4:	623a      	str	r2, [r7, #32]
 8005da6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da8:	69f9      	ldr	r1, [r7, #28]
 8005daa:	6a3a      	ldr	r2, [r7, #32]
 8005dac:	e841 2300 	strex	r3, r2, [r1]
 8005db0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1e5      	bne.n	8005d84 <UART_WaitOnFlagUntilTimeout+0x11a>

          huart->gState = HAL_UART_STATE_READY;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2220      	movs	r2, #32
 8005dbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2220      	movs	r2, #32
 8005dc4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2220      	movs	r2, #32
 8005dcc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e010      	b.n	8005dfe <UART_WaitOnFlagUntilTimeout+0x194>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	69da      	ldr	r2, [r3, #28]
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	4013      	ands	r3, r2
 8005de6:	68ba      	ldr	r2, [r7, #8]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	bf0c      	ite	eq
 8005dec:	2301      	moveq	r3, #1
 8005dee:	2300      	movne	r3, #0
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	461a      	mov	r2, r3
 8005df4:	79fb      	ldrb	r3, [r7, #7]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	f43f af40 	beq.w	8005c7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3770      	adds	r7, #112	@ 0x70
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
	...

08005e08 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b0a3      	sub	sp, #140	@ 0x8c
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	4613      	mov	r3, r2
 8005e14:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	68ba      	ldr	r2, [r7, #8]
 8005e1a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	88fa      	ldrh	r2, [r7, #6]
 8005e20:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	88fa      	ldrh	r2, [r7, #6]
 8005e28:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e3a:	d10e      	bne.n	8005e5a <UART_Start_Receive_IT+0x52>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d105      	bne.n	8005e50 <UART_Start_Receive_IT+0x48>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005e4a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005e4e:	e02d      	b.n	8005eac <UART_Start_Receive_IT+0xa4>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	22ff      	movs	r2, #255	@ 0xff
 8005e54:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005e58:	e028      	b.n	8005eac <UART_Start_Receive_IT+0xa4>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d10d      	bne.n	8005e7e <UART_Start_Receive_IT+0x76>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d104      	bne.n	8005e74 <UART_Start_Receive_IT+0x6c>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	22ff      	movs	r2, #255	@ 0xff
 8005e6e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005e72:	e01b      	b.n	8005eac <UART_Start_Receive_IT+0xa4>
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	227f      	movs	r2, #127	@ 0x7f
 8005e78:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005e7c:	e016      	b.n	8005eac <UART_Start_Receive_IT+0xa4>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e86:	d10d      	bne.n	8005ea4 <UART_Start_Receive_IT+0x9c>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d104      	bne.n	8005e9a <UART_Start_Receive_IT+0x92>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	227f      	movs	r2, #127	@ 0x7f
 8005e94:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005e98:	e008      	b.n	8005eac <UART_Start_Receive_IT+0xa4>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	223f      	movs	r2, #63	@ 0x3f
 8005e9e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005ea2:	e003      	b.n	8005eac <UART_Start_Receive_IT+0xa4>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2222      	movs	r2, #34	@ 0x22
 8005eb8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	3308      	adds	r3, #8
 8005ec2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ec6:	e853 3f00 	ldrex	r3, [r3]
 8005eca:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8005ecc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ece:	f043 0301 	orr.w	r3, r3, #1
 8005ed2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	3308      	adds	r3, #8
 8005edc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005ee0:	673a      	str	r2, [r7, #112]	@ 0x70
 8005ee2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8005ee6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8005ee8:	e841 2300 	strex	r3, r2, [r1]
 8005eec:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8005eee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1e3      	bne.n	8005ebc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ef8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005efc:	d14f      	bne.n	8005f9e <UART_Start_Receive_IT+0x196>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005f04:	88fa      	ldrh	r2, [r7, #6]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d349      	bcc.n	8005f9e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f12:	d107      	bne.n	8005f24 <UART_Start_Receive_IT+0x11c>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d103      	bne.n	8005f24 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	4a46      	ldr	r2, [pc, #280]	@ (8006038 <UART_Start_Receive_IT+0x230>)
 8005f20:	675a      	str	r2, [r3, #116]	@ 0x74
 8005f22:	e002      	b.n	8005f2a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	4a45      	ldr	r2, [pc, #276]	@ (800603c <UART_Start_Receive_IT+0x234>)
 8005f28:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d01a      	beq.n	8005f68 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f3a:	e853 3f00 	ldrex	r3, [r3]
 8005f3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005f40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f46:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	461a      	mov	r2, r3
 8005f50:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005f54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f56:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f58:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005f5a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005f5c:	e841 2300 	strex	r3, r2, [r1]
 8005f60:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005f62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d1e4      	bne.n	8005f32 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	3308      	adds	r3, #8
 8005f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f72:	e853 3f00 	ldrex	r3, [r3]
 8005f76:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	3308      	adds	r3, #8
 8005f86:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005f88:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005f8a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005f8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f90:	e841 2300 	strex	r3, r2, [r1]
 8005f94:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005f96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d1e5      	bne.n	8005f68 <UART_Start_Receive_IT+0x160>
 8005f9c:	e046      	b.n	800602c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fa6:	d107      	bne.n	8005fb8 <UART_Start_Receive_IT+0x1b0>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d103      	bne.n	8005fb8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	4a23      	ldr	r2, [pc, #140]	@ (8006040 <UART_Start_Receive_IT+0x238>)
 8005fb4:	675a      	str	r2, [r3, #116]	@ 0x74
 8005fb6:	e002      	b.n	8005fbe <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	4a22      	ldr	r2, [pc, #136]	@ (8006044 <UART_Start_Receive_IT+0x23c>)
 8005fbc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d019      	beq.n	8005ffa <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fce:	e853 3f00 	ldrex	r3, [r3]
 8005fd2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005fda:	677b      	str	r3, [r7, #116]	@ 0x74
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fe4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fe6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005fea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005fec:	e841 2300 	strex	r3, r2, [r1]
 8005ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1e6      	bne.n	8005fc6 <UART_Start_Receive_IT+0x1be>
 8005ff8:	e018      	b.n	800602c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	e853 3f00 	ldrex	r3, [r3]
 8006006:	613b      	str	r3, [r7, #16]
   return(result);
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	f043 0320 	orr.w	r3, r3, #32
 800600e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	461a      	mov	r2, r3
 8006016:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006018:	623b      	str	r3, [r7, #32]
 800601a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601c:	69f9      	ldr	r1, [r7, #28]
 800601e:	6a3a      	ldr	r2, [r7, #32]
 8006020:	e841 2300 	strex	r3, r2, [r1]
 8006024:	61bb      	str	r3, [r7, #24]
   return(result);
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d1e6      	bne.n	8005ffa <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	378c      	adds	r7, #140	@ 0x8c
 8006032:	46bd      	mov	sp, r7
 8006034:	bc80      	pop	{r7}
 8006036:	4770      	bx	lr
 8006038:	08006865 	.word	0x08006865
 800603c:	08006505 	.word	0x08006505
 8006040:	0800634d 	.word	0x0800634d
 8006044:	08006195 	.word	0x08006195

08006048 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006048:	b480      	push	{r7}
 800604a:	b095      	sub	sp, #84	@ 0x54
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006056:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006058:	e853 3f00 	ldrex	r3, [r3]
 800605c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800605e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006060:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006064:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	461a      	mov	r2, r3
 800606c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800606e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006070:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006072:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006074:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006076:	e841 2300 	strex	r3, r2, [r1]
 800607a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800607c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1e6      	bne.n	8006050 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	3308      	adds	r3, #8
 8006088:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608a:	6a3b      	ldr	r3, [r7, #32]
 800608c:	e853 3f00 	ldrex	r3, [r3]
 8006090:	61fb      	str	r3, [r7, #28]
   return(result);
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006098:	f023 0301 	bic.w	r3, r3, #1
 800609c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	3308      	adds	r3, #8
 80060a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060ae:	e841 2300 	strex	r3, r2, [r1]
 80060b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80060b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1e3      	bne.n	8006082 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d118      	bne.n	80060f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	e853 3f00 	ldrex	r3, [r3]
 80060ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	f023 0310 	bic.w	r3, r3, #16
 80060d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	461a      	mov	r2, r3
 80060de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060e0:	61bb      	str	r3, [r7, #24]
 80060e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e4:	6979      	ldr	r1, [r7, #20]
 80060e6:	69ba      	ldr	r2, [r7, #24]
 80060e8:	e841 2300 	strex	r3, r2, [r1]
 80060ec:	613b      	str	r3, [r7, #16]
   return(result);
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d1e6      	bne.n	80060c2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2220      	movs	r2, #32
 80060f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006108:	bf00      	nop
 800610a:	3754      	adds	r7, #84	@ 0x54
 800610c:	46bd      	mov	sp, r7
 800610e:	bc80      	pop	{r7}
 8006110:	4770      	bx	lr

08006112 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b084      	sub	sp, #16
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800611e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2200      	movs	r2, #0
 8006124:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f7ff fa22 	bl	800557a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006136:	bf00      	nop
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}

0800613e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800613e:	b580      	push	{r7, lr}
 8006140:	b088      	sub	sp, #32
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	e853 3f00 	ldrex	r3, [r3]
 8006152:	60bb      	str	r3, [r7, #8]
   return(result);
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800615a:	61fb      	str	r3, [r7, #28]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	461a      	mov	r2, r3
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	61bb      	str	r3, [r7, #24]
 8006166:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006168:	6979      	ldr	r1, [r7, #20]
 800616a:	69ba      	ldr	r2, [r7, #24]
 800616c:	e841 2300 	strex	r3, r2, [r1]
 8006170:	613b      	str	r3, [r7, #16]
   return(result);
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d1e6      	bne.n	8006146 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2220      	movs	r2, #32
 800617c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f7ff f9ee 	bl	8005568 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800618c:	bf00      	nop
 800618e:	3720      	adds	r7, #32
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b09c      	sub	sp, #112	@ 0x70
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80061a2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80061ac:	2b22      	cmp	r3, #34	@ 0x22
 80061ae:	f040 80be 	bne.w	800632e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80061bc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80061c0:	b2d9      	uxtb	r1, r3
 80061c2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80061c6:	b2da      	uxtb	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061cc:	400a      	ands	r2, r1
 80061ce:	b2d2      	uxtb	r2, r2
 80061d0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061d6:	1c5a      	adds	r2, r3, #1
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	3b01      	subs	r3, #1
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	f040 80a1 	bne.w	800633e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006202:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006204:	e853 3f00 	ldrex	r3, [r3]
 8006208:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800620a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800620c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006210:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	461a      	mov	r2, r3
 8006218:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800621a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800621c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006220:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006222:	e841 2300 	strex	r3, r2, [r1]
 8006226:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006228:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1e6      	bne.n	80061fc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	3308      	adds	r3, #8
 8006234:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006238:	e853 3f00 	ldrex	r3, [r3]
 800623c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800623e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006240:	f023 0301 	bic.w	r3, r3, #1
 8006244:	667b      	str	r3, [r7, #100]	@ 0x64
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	3308      	adds	r3, #8
 800624c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800624e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006250:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006252:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006254:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006256:	e841 2300 	strex	r3, r2, [r1]
 800625a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800625c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800625e:	2b00      	cmp	r3, #0
 8006260:	d1e5      	bne.n	800622e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2220      	movs	r2, #32
 8006266:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a33      	ldr	r2, [pc, #204]	@ (8006348 <UART_RxISR_8BIT+0x1b4>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d01f      	beq.n	80062c0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d018      	beq.n	80062c0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006296:	e853 3f00 	ldrex	r3, [r3]
 800629a:	623b      	str	r3, [r7, #32]
   return(result);
 800629c:	6a3b      	ldr	r3, [r7, #32]
 800629e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80062a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	461a      	mov	r2, r3
 80062aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80062ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80062ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062b4:	e841 2300 	strex	r3, r2, [r1]
 80062b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80062ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d1e6      	bne.n	800628e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d12e      	bne.n	8006326 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	e853 3f00 	ldrex	r3, [r3]
 80062da:	60fb      	str	r3, [r7, #12]
   return(result);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f023 0310 	bic.w	r3, r3, #16
 80062e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	461a      	mov	r2, r3
 80062ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80062ec:	61fb      	str	r3, [r7, #28]
 80062ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f0:	69b9      	ldr	r1, [r7, #24]
 80062f2:	69fa      	ldr	r2, [r7, #28]
 80062f4:	e841 2300 	strex	r3, r2, [r1]
 80062f8:	617b      	str	r3, [r7, #20]
   return(result);
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d1e6      	bne.n	80062ce <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	69db      	ldr	r3, [r3, #28]
 8006306:	f003 0310 	and.w	r3, r3, #16
 800630a:	2b10      	cmp	r3, #16
 800630c:	d103      	bne.n	8006316 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2210      	movs	r2, #16
 8006314:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800631c:	4619      	mov	r1, r3
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f7ff f934 	bl	800558c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006324:	e00b      	b.n	800633e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f7fa faa6 	bl	8000878 <HAL_UART_RxCpltCallback>
}
 800632c:	e007      	b.n	800633e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	699a      	ldr	r2, [r3, #24]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f042 0208 	orr.w	r2, r2, #8
 800633c:	619a      	str	r2, [r3, #24]
}
 800633e:	bf00      	nop
 8006340:	3770      	adds	r7, #112	@ 0x70
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	40008000 	.word	0x40008000

0800634c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b09c      	sub	sp, #112	@ 0x70
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800635a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006364:	2b22      	cmp	r3, #34	@ 0x22
 8006366:	f040 80be 	bne.w	80064e6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006370:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006378:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800637a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800637e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006382:	4013      	ands	r3, r2
 8006384:	b29a      	uxth	r2, r3
 8006386:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006388:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800638e:	1c9a      	adds	r2, r3, #2
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800639a:	b29b      	uxth	r3, r3
 800639c:	3b01      	subs	r3, #1
 800639e:	b29a      	uxth	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f040 80a1 	bne.w	80064f6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063bc:	e853 3f00 	ldrex	r3, [r3]
 80063c0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80063c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063c8:	667b      	str	r3, [r7, #100]	@ 0x64
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	461a      	mov	r2, r3
 80063d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80063d4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80063d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80063da:	e841 2300 	strex	r3, r2, [r1]
 80063de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80063e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d1e6      	bne.n	80063b4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	3308      	adds	r3, #8
 80063ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063f0:	e853 3f00 	ldrex	r3, [r3]
 80063f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80063f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f8:	f023 0301 	bic.w	r3, r3, #1
 80063fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	3308      	adds	r3, #8
 8006404:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006406:	643a      	str	r2, [r7, #64]	@ 0x40
 8006408:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800640c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800640e:	e841 2300 	strex	r3, r2, [r1]
 8006412:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1e5      	bne.n	80063e6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2220      	movs	r2, #32
 800641e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a33      	ldr	r2, [pc, #204]	@ (8006500 <UART_RxISR_16BIT+0x1b4>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d01f      	beq.n	8006478 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006442:	2b00      	cmp	r3, #0
 8006444:	d018      	beq.n	8006478 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800644c:	6a3b      	ldr	r3, [r7, #32]
 800644e:	e853 3f00 	ldrex	r3, [r3]
 8006452:	61fb      	str	r3, [r7, #28]
   return(result);
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800645a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	461a      	mov	r2, r3
 8006462:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006464:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006466:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006468:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800646a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800646c:	e841 2300 	strex	r3, r2, [r1]
 8006470:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006474:	2b00      	cmp	r3, #0
 8006476:	d1e6      	bne.n	8006446 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800647c:	2b01      	cmp	r3, #1
 800647e:	d12e      	bne.n	80064de <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	e853 3f00 	ldrex	r3, [r3]
 8006492:	60bb      	str	r3, [r7, #8]
   return(result);
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	f023 0310 	bic.w	r3, r3, #16
 800649a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	461a      	mov	r2, r3
 80064a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80064a4:	61bb      	str	r3, [r7, #24]
 80064a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a8:	6979      	ldr	r1, [r7, #20]
 80064aa:	69ba      	ldr	r2, [r7, #24]
 80064ac:	e841 2300 	strex	r3, r2, [r1]
 80064b0:	613b      	str	r3, [r7, #16]
   return(result);
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d1e6      	bne.n	8006486 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	69db      	ldr	r3, [r3, #28]
 80064be:	f003 0310 	and.w	r3, r3, #16
 80064c2:	2b10      	cmp	r3, #16
 80064c4:	d103      	bne.n	80064ce <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2210      	movs	r2, #16
 80064cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80064d4:	4619      	mov	r1, r3
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f7ff f858 	bl	800558c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80064dc:	e00b      	b.n	80064f6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f7fa f9ca 	bl	8000878 <HAL_UART_RxCpltCallback>
}
 80064e4:	e007      	b.n	80064f6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	699a      	ldr	r2, [r3, #24]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f042 0208 	orr.w	r2, r2, #8
 80064f4:	619a      	str	r2, [r3, #24]
}
 80064f6:	bf00      	nop
 80064f8:	3770      	adds	r7, #112	@ 0x70
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	40008000 	.word	0x40008000

08006504 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b0ac      	sub	sp, #176	@ 0xb0
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006512:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	69db      	ldr	r3, [r3, #28]
 800651c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800653a:	2b22      	cmp	r3, #34	@ 0x22
 800653c:	f040 8182 	bne.w	8006844 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006546:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800654a:	e125      	b.n	8006798 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006552:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006556:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800655a:	b2d9      	uxtb	r1, r3
 800655c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8006560:	b2da      	uxtb	r2, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006566:	400a      	ands	r2, r1
 8006568:	b2d2      	uxtb	r2, r2
 800656a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006570:	1c5a      	adds	r2, r3, #1
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800657c:	b29b      	uxth	r3, r3
 800657e:	3b01      	subs	r3, #1
 8006580:	b29a      	uxth	r2, r3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	69db      	ldr	r3, [r3, #28]
 800658e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006592:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006596:	f003 0307 	and.w	r3, r3, #7
 800659a:	2b00      	cmp	r3, #0
 800659c:	d053      	beq.n	8006646 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800659e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80065a2:	f003 0301 	and.w	r3, r3, #1
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d011      	beq.n	80065ce <UART_RxISR_8BIT_FIFOEN+0xca>
 80065aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80065ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00b      	beq.n	80065ce <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2201      	movs	r2, #1
 80065bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065c4:	f043 0201 	orr.w	r2, r3, #1
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80065d2:	f003 0302 	and.w	r3, r3, #2
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d011      	beq.n	80065fe <UART_RxISR_8BIT_FIFOEN+0xfa>
 80065da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80065de:	f003 0301 	and.w	r3, r3, #1
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00b      	beq.n	80065fe <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2202      	movs	r2, #2
 80065ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065f4:	f043 0204 	orr.w	r2, r3, #4
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006602:	f003 0304 	and.w	r3, r3, #4
 8006606:	2b00      	cmp	r3, #0
 8006608:	d011      	beq.n	800662e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800660a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800660e:	f003 0301 	and.w	r3, r3, #1
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00b      	beq.n	800662e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2204      	movs	r2, #4
 800661c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006624:	f043 0202 	orr.w	r2, r3, #2
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006634:	2b00      	cmp	r3, #0
 8006636:	d006      	beq.n	8006646 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f7fe ff9e 	bl	800557a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800664c:	b29b      	uxth	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	f040 80a2 	bne.w	8006798 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800665c:	e853 3f00 	ldrex	r3, [r3]
 8006660:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8006662:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006664:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006668:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	461a      	mov	r2, r3
 8006672:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006676:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006678:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800667c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800667e:	e841 2300 	strex	r3, r2, [r1]
 8006682:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8006684:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1e4      	bne.n	8006654 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	3308      	adds	r3, #8
 8006690:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006692:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006694:	e853 3f00 	ldrex	r3, [r3]
 8006698:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800669a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800669c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066a0:	f023 0301 	bic.w	r3, r3, #1
 80066a4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	3308      	adds	r3, #8
 80066ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80066b2:	66ba      	str	r2, [r7, #104]	@ 0x68
 80066b4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80066b8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80066ba:	e841 2300 	strex	r3, r2, [r1]
 80066be:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80066c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1e1      	bne.n	800668a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2220      	movs	r2, #32
 80066ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a5f      	ldr	r2, [pc, #380]	@ (800685c <UART_RxISR_8BIT_FIFOEN+0x358>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d021      	beq.n	8006728 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d01a      	beq.n	8006728 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066fa:	e853 3f00 	ldrex	r3, [r3]
 80066fe:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006700:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006702:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006706:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	461a      	mov	r2, r3
 8006710:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006714:	657b      	str	r3, [r7, #84]	@ 0x54
 8006716:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006718:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800671a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800671c:	e841 2300 	strex	r3, r2, [r1]
 8006720:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006722:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1e4      	bne.n	80066f2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800672c:	2b01      	cmp	r3, #1
 800672e:	d130      	bne.n	8006792 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800673e:	e853 3f00 	ldrex	r3, [r3]
 8006742:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006746:	f023 0310 	bic.w	r3, r3, #16
 800674a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	461a      	mov	r2, r3
 8006754:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006758:	643b      	str	r3, [r7, #64]	@ 0x40
 800675a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800675e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006760:	e841 2300 	strex	r3, r2, [r1]
 8006764:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1e4      	bne.n	8006736 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	69db      	ldr	r3, [r3, #28]
 8006772:	f003 0310 	and.w	r3, r3, #16
 8006776:	2b10      	cmp	r3, #16
 8006778:	d103      	bne.n	8006782 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2210      	movs	r2, #16
 8006780:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006788:	4619      	mov	r1, r3
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f7fe fefe 	bl	800558c <HAL_UARTEx_RxEventCallback>
 8006790:	e002      	b.n	8006798 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f7fa f870 	bl	8000878 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006798:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800679c:	2b00      	cmp	r3, #0
 800679e:	d006      	beq.n	80067ae <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80067a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80067a4:	f003 0320 	and.w	r3, r3, #32
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	f47f aecf 	bne.w	800654c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80067b4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80067b8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d049      	beq.n	8006854 <UART_RxISR_8BIT_FIFOEN+0x350>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80067c6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d242      	bcs.n	8006854 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	3308      	adds	r3, #8
 80067d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d6:	6a3b      	ldr	r3, [r7, #32]
 80067d8:	e853 3f00 	ldrex	r3, [r3]
 80067dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80067e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	3308      	adds	r3, #8
 80067ee:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80067f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80067f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80067f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067fa:	e841 2300 	strex	r3, r2, [r1]
 80067fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1e3      	bne.n	80067ce <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a15      	ldr	r2, [pc, #84]	@ (8006860 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800680a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	e853 3f00 	ldrex	r3, [r3]
 8006818:	60bb      	str	r3, [r7, #8]
   return(result);
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	f043 0320 	orr.w	r3, r3, #32
 8006820:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	461a      	mov	r2, r3
 800682a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800682e:	61bb      	str	r3, [r7, #24]
 8006830:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006832:	6979      	ldr	r1, [r7, #20]
 8006834:	69ba      	ldr	r2, [r7, #24]
 8006836:	e841 2300 	strex	r3, r2, [r1]
 800683a:	613b      	str	r3, [r7, #16]
   return(result);
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1e4      	bne.n	800680c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006842:	e007      	b.n	8006854 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	699a      	ldr	r2, [r3, #24]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f042 0208 	orr.w	r2, r2, #8
 8006852:	619a      	str	r2, [r3, #24]
}
 8006854:	bf00      	nop
 8006856:	37b0      	adds	r7, #176	@ 0xb0
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	40008000 	.word	0x40008000
 8006860:	08006195 	.word	0x08006195

08006864 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b0ae      	sub	sp, #184	@ 0xb8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006872:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	69db      	ldr	r3, [r3, #28]
 800687c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800689a:	2b22      	cmp	r3, #34	@ 0x22
 800689c:	f040 8186 	bne.w	8006bac <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80068a6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80068aa:	e129      	b.n	8006b00 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80068be:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80068c2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80068c6:	4013      	ands	r3, r2
 80068c8:	b29a      	uxth	r2, r3
 80068ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80068ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068d4:	1c9a      	adds	r2, r3, #2
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	3b01      	subs	r3, #1
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	69db      	ldr	r3, [r3, #28]
 80068f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80068f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80068fa:	f003 0307 	and.w	r3, r3, #7
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d053      	beq.n	80069aa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006902:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	2b00      	cmp	r3, #0
 800690c:	d011      	beq.n	8006932 <UART_RxISR_16BIT_FIFOEN+0xce>
 800690e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00b      	beq.n	8006932 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2201      	movs	r2, #1
 8006920:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006928:	f043 0201 	orr.w	r2, r3, #1
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006932:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006936:	f003 0302 	and.w	r3, r3, #2
 800693a:	2b00      	cmp	r3, #0
 800693c:	d011      	beq.n	8006962 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800693e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00b      	beq.n	8006962 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	2202      	movs	r2, #2
 8006950:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006958:	f043 0204 	orr.w	r2, r3, #4
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006962:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006966:	f003 0304 	and.w	r3, r3, #4
 800696a:	2b00      	cmp	r3, #0
 800696c:	d011      	beq.n	8006992 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800696e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006972:	f003 0301 	and.w	r3, r3, #1
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00b      	beq.n	8006992 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2204      	movs	r2, #4
 8006980:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006988:	f043 0202 	orr.w	r2, r3, #2
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006998:	2b00      	cmp	r3, #0
 800699a:	d006      	beq.n	80069aa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f7fe fdec 	bl	800557a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	f040 80a4 	bne.w	8006b00 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80069c0:	e853 3f00 	ldrex	r3, [r3]
 80069c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80069c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80069c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	461a      	mov	r2, r3
 80069d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80069da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80069de:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80069e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80069e6:	e841 2300 	strex	r3, r2, [r1]
 80069ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80069ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1e2      	bne.n	80069b8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	3308      	adds	r3, #8
 80069f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80069fc:	e853 3f00 	ldrex	r3, [r3]
 8006a00:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006a02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a08:	f023 0301 	bic.w	r3, r3, #1
 8006a0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	3308      	adds	r3, #8
 8006a16:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8006a1a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006a1c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006a20:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006a22:	e841 2300 	strex	r3, r2, [r1]
 8006a26:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006a28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1e1      	bne.n	80069f2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2220      	movs	r2, #32
 8006a32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a5f      	ldr	r2, [pc, #380]	@ (8006bc4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d021      	beq.n	8006a90 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d01a      	beq.n	8006a90 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a62:	e853 3f00 	ldrex	r3, [r3]
 8006a66:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006a68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a6a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006a6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	461a      	mov	r2, r3
 8006a78:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006a7c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a7e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a80:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006a82:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a84:	e841 2300 	strex	r3, r2, [r1]
 8006a88:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006a8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1e4      	bne.n	8006a5a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d130      	bne.n	8006afa <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aa6:	e853 3f00 	ldrex	r3, [r3]
 8006aaa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aae:	f023 0310 	bic.w	r3, r3, #16
 8006ab2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	461a      	mov	r2, r3
 8006abc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006ac0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ac2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ac6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ac8:	e841 2300 	strex	r3, r2, [r1]
 8006acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ace:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1e4      	bne.n	8006a9e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	69db      	ldr	r3, [r3, #28]
 8006ada:	f003 0310 	and.w	r3, r3, #16
 8006ade:	2b10      	cmp	r3, #16
 8006ae0:	d103      	bne.n	8006aea <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2210      	movs	r2, #16
 8006ae8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006af0:	4619      	mov	r1, r3
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f7fe fd4a 	bl	800558c <HAL_UARTEx_RxEventCallback>
 8006af8:	e002      	b.n	8006b00 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f7f9 febc 	bl	8000878 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006b00:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d006      	beq.n	8006b16 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8006b08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006b0c:	f003 0320 	and.w	r3, r3, #32
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f47f aecb 	bne.w	80068ac <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006b1c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006b20:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d049      	beq.n	8006bbc <UART_RxISR_16BIT_FIFOEN+0x358>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006b2e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d242      	bcs.n	8006bbc <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	3308      	adds	r3, #8
 8006b3c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b40:	e853 3f00 	ldrex	r3, [r3]
 8006b44:	623b      	str	r3, [r7, #32]
   return(result);
 8006b46:	6a3b      	ldr	r3, [r7, #32]
 8006b48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	3308      	adds	r3, #8
 8006b56:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8006b5a:	633a      	str	r2, [r7, #48]	@ 0x30
 8006b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b62:	e841 2300 	strex	r3, r2, [r1]
 8006b66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1e3      	bne.n	8006b36 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a15      	ldr	r2, [pc, #84]	@ (8006bc8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8006b72:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	e853 3f00 	ldrex	r3, [r3]
 8006b80:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f043 0320 	orr.w	r3, r3, #32
 8006b88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	461a      	mov	r2, r3
 8006b92:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006b96:	61fb      	str	r3, [r7, #28]
 8006b98:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9a:	69b9      	ldr	r1, [r7, #24]
 8006b9c:	69fa      	ldr	r2, [r7, #28]
 8006b9e:	e841 2300 	strex	r3, r2, [r1]
 8006ba2:	617b      	str	r3, [r7, #20]
   return(result);
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1e4      	bne.n	8006b74 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006baa:	e007      	b.n	8006bbc <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	699a      	ldr	r2, [r3, #24]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f042 0208 	orr.w	r2, r2, #8
 8006bba:	619a      	str	r2, [r3, #24]
}
 8006bbc:	bf00      	nop
 8006bbe:	37b8      	adds	r7, #184	@ 0xb8
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	40008000 	.word	0x40008000
 8006bc8:	0800634d 	.word	0x0800634d

08006bcc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006bd4:	bf00      	nop
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bc80      	pop	{r7}
 8006bdc:	4770      	bx	lr

08006bde <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006bde:	b480      	push	{r7}
 8006be0:	b083      	sub	sp, #12
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006be6:	bf00      	nop
 8006be8:	370c      	adds	r7, #12
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bc80      	pop	{r7}
 8006bee:	4770      	bx	lr

08006bf0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006bf8:	bf00      	nop
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bc80      	pop	{r7}
 8006c00:	4770      	bx	lr

08006c02 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006c02:	b480      	push	{r7}
 8006c04:	b085      	sub	sp, #20
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d101      	bne.n	8006c18 <HAL_UARTEx_DisableFifoMode+0x16>
 8006c14:	2302      	movs	r3, #2
 8006c16:	e027      	b.n	8006c68 <HAL_UARTEx_DisableFifoMode+0x66>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2224      	movs	r2, #36	@ 0x24
 8006c24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f022 0201 	bic.w	r2, r2, #1
 8006c3e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006c46:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2220      	movs	r2, #32
 8006c5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3714      	adds	r7, #20
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bc80      	pop	{r7}
 8006c70:	4770      	bx	lr

08006c72 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b084      	sub	sp, #16
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
 8006c7a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d101      	bne.n	8006c8a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006c86:	2302      	movs	r3, #2
 8006c88:	e02d      	b.n	8006ce6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2224      	movs	r2, #36	@ 0x24
 8006c96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f022 0201 	bic.w	r2, r2, #1
 8006cb0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	683a      	ldr	r2, [r7, #0]
 8006cc2:	430a      	orrs	r2, r1
 8006cc4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 f850 	bl	8006d6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2220      	movs	r2, #32
 8006cd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b084      	sub	sp, #16
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
 8006cf6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d101      	bne.n	8006d06 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006d02:	2302      	movs	r3, #2
 8006d04:	e02d      	b.n	8006d62 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2224      	movs	r2, #36	@ 0x24
 8006d12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f022 0201 	bic.w	r2, r2, #1
 8006d2c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	683a      	ldr	r2, [r7, #0]
 8006d3e:	430a      	orrs	r2, r1
 8006d40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 f812 	bl	8006d6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	68fa      	ldr	r2, [r7, #12]
 8006d4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2220      	movs	r2, #32
 8006d54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
	...

08006d6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b085      	sub	sp, #20
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d108      	bne.n	8006d8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006d8c:	e031      	b.n	8006df2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006d8e:	2308      	movs	r3, #8
 8006d90:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006d92:	2308      	movs	r3, #8
 8006d94:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	0e5b      	lsrs	r3, r3, #25
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	f003 0307 	and.w	r3, r3, #7
 8006da4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	0f5b      	lsrs	r3, r3, #29
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	f003 0307 	and.w	r3, r3, #7
 8006db4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006db6:	7bbb      	ldrb	r3, [r7, #14]
 8006db8:	7b3a      	ldrb	r2, [r7, #12]
 8006dba:	4910      	ldr	r1, [pc, #64]	@ (8006dfc <UARTEx_SetNbDataToProcess+0x90>)
 8006dbc:	5c8a      	ldrb	r2, [r1, r2]
 8006dbe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006dc2:	7b3a      	ldrb	r2, [r7, #12]
 8006dc4:	490e      	ldr	r1, [pc, #56]	@ (8006e00 <UARTEx_SetNbDataToProcess+0x94>)
 8006dc6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006dc8:	fb93 f3f2 	sdiv	r3, r3, r2
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006dd4:	7bfb      	ldrb	r3, [r7, #15]
 8006dd6:	7b7a      	ldrb	r2, [r7, #13]
 8006dd8:	4908      	ldr	r1, [pc, #32]	@ (8006dfc <UARTEx_SetNbDataToProcess+0x90>)
 8006dda:	5c8a      	ldrb	r2, [r1, r2]
 8006ddc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006de0:	7b7a      	ldrb	r2, [r7, #13]
 8006de2:	4907      	ldr	r1, [pc, #28]	@ (8006e00 <UARTEx_SetNbDataToProcess+0x94>)
 8006de4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006de6:	fb93 f3f2 	sdiv	r3, r3, r2
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006df2:	bf00      	nop
 8006df4:	3714      	adds	r7, #20
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bc80      	pop	{r7}
 8006dfa:	4770      	bx	lr
 8006dfc:	080079ac 	.word	0x080079ac
 8006e00:	080079b4 	.word	0x080079b4

08006e04 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 8006e04:	b480      	push	{r7}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	70fb      	strb	r3, [r7, #3]
 8006e10:	4613      	mov	r3, r2
 8006e12:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	60fb      	str	r3, [r7, #12]
  while( size-- )
 8006e18:	e004      	b.n	8006e24 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	1c5a      	adds	r2, r3, #1
 8006e1e:	60fa      	str	r2, [r7, #12]
 8006e20:	78fa      	ldrb	r2, [r7, #3]
 8006e22:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8006e24:	883b      	ldrh	r3, [r7, #0]
 8006e26:	1e5a      	subs	r2, r3, #1
 8006e28:	803a      	strh	r2, [r7, #0]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1f5      	bne.n	8006e1a <UTIL_MEM_set_8+0x16>
  }
}
 8006e2e:	bf00      	nop
 8006e30:	bf00      	nop
 8006e32:	3714      	adds	r7, #20
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bc80      	pop	{r7}
 8006e38:	4770      	bx	lr
	...

08006e3c <sniprintf>:
 8006e3c:	b40c      	push	{r2, r3}
 8006e3e:	b530      	push	{r4, r5, lr}
 8006e40:	4b18      	ldr	r3, [pc, #96]	@ (8006ea4 <sniprintf+0x68>)
 8006e42:	1e0c      	subs	r4, r1, #0
 8006e44:	681d      	ldr	r5, [r3, #0]
 8006e46:	b09d      	sub	sp, #116	@ 0x74
 8006e48:	da08      	bge.n	8006e5c <sniprintf+0x20>
 8006e4a:	238b      	movs	r3, #139	@ 0x8b
 8006e4c:	602b      	str	r3, [r5, #0]
 8006e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8006e52:	b01d      	add	sp, #116	@ 0x74
 8006e54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e58:	b002      	add	sp, #8
 8006e5a:	4770      	bx	lr
 8006e5c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006e60:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006e64:	f04f 0300 	mov.w	r3, #0
 8006e68:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006e6a:	bf14      	ite	ne
 8006e6c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006e70:	4623      	moveq	r3, r4
 8006e72:	9304      	str	r3, [sp, #16]
 8006e74:	9307      	str	r3, [sp, #28]
 8006e76:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006e7a:	9002      	str	r0, [sp, #8]
 8006e7c:	9006      	str	r0, [sp, #24]
 8006e7e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006e82:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006e84:	ab21      	add	r3, sp, #132	@ 0x84
 8006e86:	a902      	add	r1, sp, #8
 8006e88:	4628      	mov	r0, r5
 8006e8a:	9301      	str	r3, [sp, #4]
 8006e8c:	f000 f9b6 	bl	80071fc <_svfiprintf_r>
 8006e90:	1c43      	adds	r3, r0, #1
 8006e92:	bfbc      	itt	lt
 8006e94:	238b      	movlt	r3, #139	@ 0x8b
 8006e96:	602b      	strlt	r3, [r5, #0]
 8006e98:	2c00      	cmp	r4, #0
 8006e9a:	d0da      	beq.n	8006e52 <sniprintf+0x16>
 8006e9c:	9b02      	ldr	r3, [sp, #8]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	701a      	strb	r2, [r3, #0]
 8006ea2:	e7d6      	b.n	8006e52 <sniprintf+0x16>
 8006ea4:	20000034 	.word	0x20000034

08006ea8 <siprintf>:
 8006ea8:	b40e      	push	{r1, r2, r3}
 8006eaa:	b510      	push	{r4, lr}
 8006eac:	b09d      	sub	sp, #116	@ 0x74
 8006eae:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006eb0:	9002      	str	r0, [sp, #8]
 8006eb2:	9006      	str	r0, [sp, #24]
 8006eb4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006eb8:	480a      	ldr	r0, [pc, #40]	@ (8006ee4 <siprintf+0x3c>)
 8006eba:	9107      	str	r1, [sp, #28]
 8006ebc:	9104      	str	r1, [sp, #16]
 8006ebe:	490a      	ldr	r1, [pc, #40]	@ (8006ee8 <siprintf+0x40>)
 8006ec0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ec4:	9105      	str	r1, [sp, #20]
 8006ec6:	2400      	movs	r4, #0
 8006ec8:	a902      	add	r1, sp, #8
 8006eca:	6800      	ldr	r0, [r0, #0]
 8006ecc:	9301      	str	r3, [sp, #4]
 8006ece:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006ed0:	f000 f994 	bl	80071fc <_svfiprintf_r>
 8006ed4:	9b02      	ldr	r3, [sp, #8]
 8006ed6:	701c      	strb	r4, [r3, #0]
 8006ed8:	b01d      	add	sp, #116	@ 0x74
 8006eda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ede:	b003      	add	sp, #12
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	20000034 	.word	0x20000034
 8006ee8:	ffff0208 	.word	0xffff0208

08006eec <memset>:
 8006eec:	4402      	add	r2, r0
 8006eee:	4603      	mov	r3, r0
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d100      	bne.n	8006ef6 <memset+0xa>
 8006ef4:	4770      	bx	lr
 8006ef6:	f803 1b01 	strb.w	r1, [r3], #1
 8006efa:	e7f9      	b.n	8006ef0 <memset+0x4>

08006efc <__errno>:
 8006efc:	4b01      	ldr	r3, [pc, #4]	@ (8006f04 <__errno+0x8>)
 8006efe:	6818      	ldr	r0, [r3, #0]
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	20000034 	.word	0x20000034

08006f08 <__libc_init_array>:
 8006f08:	b570      	push	{r4, r5, r6, lr}
 8006f0a:	4d0d      	ldr	r5, [pc, #52]	@ (8006f40 <__libc_init_array+0x38>)
 8006f0c:	4c0d      	ldr	r4, [pc, #52]	@ (8006f44 <__libc_init_array+0x3c>)
 8006f0e:	1b64      	subs	r4, r4, r5
 8006f10:	10a4      	asrs	r4, r4, #2
 8006f12:	2600      	movs	r6, #0
 8006f14:	42a6      	cmp	r6, r4
 8006f16:	d109      	bne.n	8006f2c <__libc_init_array+0x24>
 8006f18:	4d0b      	ldr	r5, [pc, #44]	@ (8006f48 <__libc_init_array+0x40>)
 8006f1a:	4c0c      	ldr	r4, [pc, #48]	@ (8006f4c <__libc_init_array+0x44>)
 8006f1c:	f000 fc64 	bl	80077e8 <_init>
 8006f20:	1b64      	subs	r4, r4, r5
 8006f22:	10a4      	asrs	r4, r4, #2
 8006f24:	2600      	movs	r6, #0
 8006f26:	42a6      	cmp	r6, r4
 8006f28:	d105      	bne.n	8006f36 <__libc_init_array+0x2e>
 8006f2a:	bd70      	pop	{r4, r5, r6, pc}
 8006f2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f30:	4798      	blx	r3
 8006f32:	3601      	adds	r6, #1
 8006f34:	e7ee      	b.n	8006f14 <__libc_init_array+0xc>
 8006f36:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f3a:	4798      	blx	r3
 8006f3c:	3601      	adds	r6, #1
 8006f3e:	e7f2      	b.n	8006f26 <__libc_init_array+0x1e>
 8006f40:	080079f8 	.word	0x080079f8
 8006f44:	080079f8 	.word	0x080079f8
 8006f48:	080079f8 	.word	0x080079f8
 8006f4c:	080079fc 	.word	0x080079fc

08006f50 <__retarget_lock_acquire_recursive>:
 8006f50:	4770      	bx	lr

08006f52 <__retarget_lock_release_recursive>:
 8006f52:	4770      	bx	lr

08006f54 <_free_r>:
 8006f54:	b538      	push	{r3, r4, r5, lr}
 8006f56:	4605      	mov	r5, r0
 8006f58:	2900      	cmp	r1, #0
 8006f5a:	d041      	beq.n	8006fe0 <_free_r+0x8c>
 8006f5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f60:	1f0c      	subs	r4, r1, #4
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	bfb8      	it	lt
 8006f66:	18e4      	addlt	r4, r4, r3
 8006f68:	f000 f8e0 	bl	800712c <__malloc_lock>
 8006f6c:	4a1d      	ldr	r2, [pc, #116]	@ (8006fe4 <_free_r+0x90>)
 8006f6e:	6813      	ldr	r3, [r2, #0]
 8006f70:	b933      	cbnz	r3, 8006f80 <_free_r+0x2c>
 8006f72:	6063      	str	r3, [r4, #4]
 8006f74:	6014      	str	r4, [r2, #0]
 8006f76:	4628      	mov	r0, r5
 8006f78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f7c:	f000 b8dc 	b.w	8007138 <__malloc_unlock>
 8006f80:	42a3      	cmp	r3, r4
 8006f82:	d908      	bls.n	8006f96 <_free_r+0x42>
 8006f84:	6820      	ldr	r0, [r4, #0]
 8006f86:	1821      	adds	r1, r4, r0
 8006f88:	428b      	cmp	r3, r1
 8006f8a:	bf01      	itttt	eq
 8006f8c:	6819      	ldreq	r1, [r3, #0]
 8006f8e:	685b      	ldreq	r3, [r3, #4]
 8006f90:	1809      	addeq	r1, r1, r0
 8006f92:	6021      	streq	r1, [r4, #0]
 8006f94:	e7ed      	b.n	8006f72 <_free_r+0x1e>
 8006f96:	461a      	mov	r2, r3
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	b10b      	cbz	r3, 8006fa0 <_free_r+0x4c>
 8006f9c:	42a3      	cmp	r3, r4
 8006f9e:	d9fa      	bls.n	8006f96 <_free_r+0x42>
 8006fa0:	6811      	ldr	r1, [r2, #0]
 8006fa2:	1850      	adds	r0, r2, r1
 8006fa4:	42a0      	cmp	r0, r4
 8006fa6:	d10b      	bne.n	8006fc0 <_free_r+0x6c>
 8006fa8:	6820      	ldr	r0, [r4, #0]
 8006faa:	4401      	add	r1, r0
 8006fac:	1850      	adds	r0, r2, r1
 8006fae:	4283      	cmp	r3, r0
 8006fb0:	6011      	str	r1, [r2, #0]
 8006fb2:	d1e0      	bne.n	8006f76 <_free_r+0x22>
 8006fb4:	6818      	ldr	r0, [r3, #0]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	6053      	str	r3, [r2, #4]
 8006fba:	4408      	add	r0, r1
 8006fbc:	6010      	str	r0, [r2, #0]
 8006fbe:	e7da      	b.n	8006f76 <_free_r+0x22>
 8006fc0:	d902      	bls.n	8006fc8 <_free_r+0x74>
 8006fc2:	230c      	movs	r3, #12
 8006fc4:	602b      	str	r3, [r5, #0]
 8006fc6:	e7d6      	b.n	8006f76 <_free_r+0x22>
 8006fc8:	6820      	ldr	r0, [r4, #0]
 8006fca:	1821      	adds	r1, r4, r0
 8006fcc:	428b      	cmp	r3, r1
 8006fce:	bf04      	itt	eq
 8006fd0:	6819      	ldreq	r1, [r3, #0]
 8006fd2:	685b      	ldreq	r3, [r3, #4]
 8006fd4:	6063      	str	r3, [r4, #4]
 8006fd6:	bf04      	itt	eq
 8006fd8:	1809      	addeq	r1, r1, r0
 8006fda:	6021      	streq	r1, [r4, #0]
 8006fdc:	6054      	str	r4, [r2, #4]
 8006fde:	e7ca      	b.n	8006f76 <_free_r+0x22>
 8006fe0:	bd38      	pop	{r3, r4, r5, pc}
 8006fe2:	bf00      	nop
 8006fe4:	200005bc 	.word	0x200005bc

08006fe8 <sbrk_aligned>:
 8006fe8:	b570      	push	{r4, r5, r6, lr}
 8006fea:	4e0f      	ldr	r6, [pc, #60]	@ (8007028 <sbrk_aligned+0x40>)
 8006fec:	460c      	mov	r4, r1
 8006fee:	6831      	ldr	r1, [r6, #0]
 8006ff0:	4605      	mov	r5, r0
 8006ff2:	b911      	cbnz	r1, 8006ffa <sbrk_aligned+0x12>
 8006ff4:	f000 fba4 	bl	8007740 <_sbrk_r>
 8006ff8:	6030      	str	r0, [r6, #0]
 8006ffa:	4621      	mov	r1, r4
 8006ffc:	4628      	mov	r0, r5
 8006ffe:	f000 fb9f 	bl	8007740 <_sbrk_r>
 8007002:	1c43      	adds	r3, r0, #1
 8007004:	d103      	bne.n	800700e <sbrk_aligned+0x26>
 8007006:	f04f 34ff 	mov.w	r4, #4294967295
 800700a:	4620      	mov	r0, r4
 800700c:	bd70      	pop	{r4, r5, r6, pc}
 800700e:	1cc4      	adds	r4, r0, #3
 8007010:	f024 0403 	bic.w	r4, r4, #3
 8007014:	42a0      	cmp	r0, r4
 8007016:	d0f8      	beq.n	800700a <sbrk_aligned+0x22>
 8007018:	1a21      	subs	r1, r4, r0
 800701a:	4628      	mov	r0, r5
 800701c:	f000 fb90 	bl	8007740 <_sbrk_r>
 8007020:	3001      	adds	r0, #1
 8007022:	d1f2      	bne.n	800700a <sbrk_aligned+0x22>
 8007024:	e7ef      	b.n	8007006 <sbrk_aligned+0x1e>
 8007026:	bf00      	nop
 8007028:	200005b8 	.word	0x200005b8

0800702c <_malloc_r>:
 800702c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007030:	1ccd      	adds	r5, r1, #3
 8007032:	f025 0503 	bic.w	r5, r5, #3
 8007036:	3508      	adds	r5, #8
 8007038:	2d0c      	cmp	r5, #12
 800703a:	bf38      	it	cc
 800703c:	250c      	movcc	r5, #12
 800703e:	2d00      	cmp	r5, #0
 8007040:	4606      	mov	r6, r0
 8007042:	db01      	blt.n	8007048 <_malloc_r+0x1c>
 8007044:	42a9      	cmp	r1, r5
 8007046:	d904      	bls.n	8007052 <_malloc_r+0x26>
 8007048:	230c      	movs	r3, #12
 800704a:	6033      	str	r3, [r6, #0]
 800704c:	2000      	movs	r0, #0
 800704e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007052:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007128 <_malloc_r+0xfc>
 8007056:	f000 f869 	bl	800712c <__malloc_lock>
 800705a:	f8d8 3000 	ldr.w	r3, [r8]
 800705e:	461c      	mov	r4, r3
 8007060:	bb44      	cbnz	r4, 80070b4 <_malloc_r+0x88>
 8007062:	4629      	mov	r1, r5
 8007064:	4630      	mov	r0, r6
 8007066:	f7ff ffbf 	bl	8006fe8 <sbrk_aligned>
 800706a:	1c43      	adds	r3, r0, #1
 800706c:	4604      	mov	r4, r0
 800706e:	d158      	bne.n	8007122 <_malloc_r+0xf6>
 8007070:	f8d8 4000 	ldr.w	r4, [r8]
 8007074:	4627      	mov	r7, r4
 8007076:	2f00      	cmp	r7, #0
 8007078:	d143      	bne.n	8007102 <_malloc_r+0xd6>
 800707a:	2c00      	cmp	r4, #0
 800707c:	d04b      	beq.n	8007116 <_malloc_r+0xea>
 800707e:	6823      	ldr	r3, [r4, #0]
 8007080:	4639      	mov	r1, r7
 8007082:	4630      	mov	r0, r6
 8007084:	eb04 0903 	add.w	r9, r4, r3
 8007088:	f000 fb5a 	bl	8007740 <_sbrk_r>
 800708c:	4581      	cmp	r9, r0
 800708e:	d142      	bne.n	8007116 <_malloc_r+0xea>
 8007090:	6821      	ldr	r1, [r4, #0]
 8007092:	1a6d      	subs	r5, r5, r1
 8007094:	4629      	mov	r1, r5
 8007096:	4630      	mov	r0, r6
 8007098:	f7ff ffa6 	bl	8006fe8 <sbrk_aligned>
 800709c:	3001      	adds	r0, #1
 800709e:	d03a      	beq.n	8007116 <_malloc_r+0xea>
 80070a0:	6823      	ldr	r3, [r4, #0]
 80070a2:	442b      	add	r3, r5
 80070a4:	6023      	str	r3, [r4, #0]
 80070a6:	f8d8 3000 	ldr.w	r3, [r8]
 80070aa:	685a      	ldr	r2, [r3, #4]
 80070ac:	bb62      	cbnz	r2, 8007108 <_malloc_r+0xdc>
 80070ae:	f8c8 7000 	str.w	r7, [r8]
 80070b2:	e00f      	b.n	80070d4 <_malloc_r+0xa8>
 80070b4:	6822      	ldr	r2, [r4, #0]
 80070b6:	1b52      	subs	r2, r2, r5
 80070b8:	d420      	bmi.n	80070fc <_malloc_r+0xd0>
 80070ba:	2a0b      	cmp	r2, #11
 80070bc:	d917      	bls.n	80070ee <_malloc_r+0xc2>
 80070be:	1961      	adds	r1, r4, r5
 80070c0:	42a3      	cmp	r3, r4
 80070c2:	6025      	str	r5, [r4, #0]
 80070c4:	bf18      	it	ne
 80070c6:	6059      	strne	r1, [r3, #4]
 80070c8:	6863      	ldr	r3, [r4, #4]
 80070ca:	bf08      	it	eq
 80070cc:	f8c8 1000 	streq.w	r1, [r8]
 80070d0:	5162      	str	r2, [r4, r5]
 80070d2:	604b      	str	r3, [r1, #4]
 80070d4:	4630      	mov	r0, r6
 80070d6:	f000 f82f 	bl	8007138 <__malloc_unlock>
 80070da:	f104 000b 	add.w	r0, r4, #11
 80070de:	1d23      	adds	r3, r4, #4
 80070e0:	f020 0007 	bic.w	r0, r0, #7
 80070e4:	1ac2      	subs	r2, r0, r3
 80070e6:	bf1c      	itt	ne
 80070e8:	1a1b      	subne	r3, r3, r0
 80070ea:	50a3      	strne	r3, [r4, r2]
 80070ec:	e7af      	b.n	800704e <_malloc_r+0x22>
 80070ee:	6862      	ldr	r2, [r4, #4]
 80070f0:	42a3      	cmp	r3, r4
 80070f2:	bf0c      	ite	eq
 80070f4:	f8c8 2000 	streq.w	r2, [r8]
 80070f8:	605a      	strne	r2, [r3, #4]
 80070fa:	e7eb      	b.n	80070d4 <_malloc_r+0xa8>
 80070fc:	4623      	mov	r3, r4
 80070fe:	6864      	ldr	r4, [r4, #4]
 8007100:	e7ae      	b.n	8007060 <_malloc_r+0x34>
 8007102:	463c      	mov	r4, r7
 8007104:	687f      	ldr	r7, [r7, #4]
 8007106:	e7b6      	b.n	8007076 <_malloc_r+0x4a>
 8007108:	461a      	mov	r2, r3
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	42a3      	cmp	r3, r4
 800710e:	d1fb      	bne.n	8007108 <_malloc_r+0xdc>
 8007110:	2300      	movs	r3, #0
 8007112:	6053      	str	r3, [r2, #4]
 8007114:	e7de      	b.n	80070d4 <_malloc_r+0xa8>
 8007116:	230c      	movs	r3, #12
 8007118:	6033      	str	r3, [r6, #0]
 800711a:	4630      	mov	r0, r6
 800711c:	f000 f80c 	bl	8007138 <__malloc_unlock>
 8007120:	e794      	b.n	800704c <_malloc_r+0x20>
 8007122:	6005      	str	r5, [r0, #0]
 8007124:	e7d6      	b.n	80070d4 <_malloc_r+0xa8>
 8007126:	bf00      	nop
 8007128:	200005bc 	.word	0x200005bc

0800712c <__malloc_lock>:
 800712c:	4801      	ldr	r0, [pc, #4]	@ (8007134 <__malloc_lock+0x8>)
 800712e:	f7ff bf0f 	b.w	8006f50 <__retarget_lock_acquire_recursive>
 8007132:	bf00      	nop
 8007134:	200005b4 	.word	0x200005b4

08007138 <__malloc_unlock>:
 8007138:	4801      	ldr	r0, [pc, #4]	@ (8007140 <__malloc_unlock+0x8>)
 800713a:	f7ff bf0a 	b.w	8006f52 <__retarget_lock_release_recursive>
 800713e:	bf00      	nop
 8007140:	200005b4 	.word	0x200005b4

08007144 <__ssputs_r>:
 8007144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007148:	688e      	ldr	r6, [r1, #8]
 800714a:	461f      	mov	r7, r3
 800714c:	42be      	cmp	r6, r7
 800714e:	680b      	ldr	r3, [r1, #0]
 8007150:	4682      	mov	sl, r0
 8007152:	460c      	mov	r4, r1
 8007154:	4690      	mov	r8, r2
 8007156:	d82d      	bhi.n	80071b4 <__ssputs_r+0x70>
 8007158:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800715c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007160:	d026      	beq.n	80071b0 <__ssputs_r+0x6c>
 8007162:	6965      	ldr	r5, [r4, #20]
 8007164:	6909      	ldr	r1, [r1, #16]
 8007166:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800716a:	eba3 0901 	sub.w	r9, r3, r1
 800716e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007172:	1c7b      	adds	r3, r7, #1
 8007174:	444b      	add	r3, r9
 8007176:	106d      	asrs	r5, r5, #1
 8007178:	429d      	cmp	r5, r3
 800717a:	bf38      	it	cc
 800717c:	461d      	movcc	r5, r3
 800717e:	0553      	lsls	r3, r2, #21
 8007180:	d527      	bpl.n	80071d2 <__ssputs_r+0x8e>
 8007182:	4629      	mov	r1, r5
 8007184:	f7ff ff52 	bl	800702c <_malloc_r>
 8007188:	4606      	mov	r6, r0
 800718a:	b360      	cbz	r0, 80071e6 <__ssputs_r+0xa2>
 800718c:	6921      	ldr	r1, [r4, #16]
 800718e:	464a      	mov	r2, r9
 8007190:	f000 fae6 	bl	8007760 <memcpy>
 8007194:	89a3      	ldrh	r3, [r4, #12]
 8007196:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800719a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800719e:	81a3      	strh	r3, [r4, #12]
 80071a0:	6126      	str	r6, [r4, #16]
 80071a2:	6165      	str	r5, [r4, #20]
 80071a4:	444e      	add	r6, r9
 80071a6:	eba5 0509 	sub.w	r5, r5, r9
 80071aa:	6026      	str	r6, [r4, #0]
 80071ac:	60a5      	str	r5, [r4, #8]
 80071ae:	463e      	mov	r6, r7
 80071b0:	42be      	cmp	r6, r7
 80071b2:	d900      	bls.n	80071b6 <__ssputs_r+0x72>
 80071b4:	463e      	mov	r6, r7
 80071b6:	6820      	ldr	r0, [r4, #0]
 80071b8:	4632      	mov	r2, r6
 80071ba:	4641      	mov	r1, r8
 80071bc:	f000 faa6 	bl	800770c <memmove>
 80071c0:	68a3      	ldr	r3, [r4, #8]
 80071c2:	1b9b      	subs	r3, r3, r6
 80071c4:	60a3      	str	r3, [r4, #8]
 80071c6:	6823      	ldr	r3, [r4, #0]
 80071c8:	4433      	add	r3, r6
 80071ca:	6023      	str	r3, [r4, #0]
 80071cc:	2000      	movs	r0, #0
 80071ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071d2:	462a      	mov	r2, r5
 80071d4:	f000 fad2 	bl	800777c <_realloc_r>
 80071d8:	4606      	mov	r6, r0
 80071da:	2800      	cmp	r0, #0
 80071dc:	d1e0      	bne.n	80071a0 <__ssputs_r+0x5c>
 80071de:	6921      	ldr	r1, [r4, #16]
 80071e0:	4650      	mov	r0, sl
 80071e2:	f7ff feb7 	bl	8006f54 <_free_r>
 80071e6:	230c      	movs	r3, #12
 80071e8:	f8ca 3000 	str.w	r3, [sl]
 80071ec:	89a3      	ldrh	r3, [r4, #12]
 80071ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071f2:	81a3      	strh	r3, [r4, #12]
 80071f4:	f04f 30ff 	mov.w	r0, #4294967295
 80071f8:	e7e9      	b.n	80071ce <__ssputs_r+0x8a>
	...

080071fc <_svfiprintf_r>:
 80071fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007200:	4698      	mov	r8, r3
 8007202:	898b      	ldrh	r3, [r1, #12]
 8007204:	061b      	lsls	r3, r3, #24
 8007206:	b09d      	sub	sp, #116	@ 0x74
 8007208:	4607      	mov	r7, r0
 800720a:	460d      	mov	r5, r1
 800720c:	4614      	mov	r4, r2
 800720e:	d510      	bpl.n	8007232 <_svfiprintf_r+0x36>
 8007210:	690b      	ldr	r3, [r1, #16]
 8007212:	b973      	cbnz	r3, 8007232 <_svfiprintf_r+0x36>
 8007214:	2140      	movs	r1, #64	@ 0x40
 8007216:	f7ff ff09 	bl	800702c <_malloc_r>
 800721a:	6028      	str	r0, [r5, #0]
 800721c:	6128      	str	r0, [r5, #16]
 800721e:	b930      	cbnz	r0, 800722e <_svfiprintf_r+0x32>
 8007220:	230c      	movs	r3, #12
 8007222:	603b      	str	r3, [r7, #0]
 8007224:	f04f 30ff 	mov.w	r0, #4294967295
 8007228:	b01d      	add	sp, #116	@ 0x74
 800722a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800722e:	2340      	movs	r3, #64	@ 0x40
 8007230:	616b      	str	r3, [r5, #20]
 8007232:	2300      	movs	r3, #0
 8007234:	9309      	str	r3, [sp, #36]	@ 0x24
 8007236:	2320      	movs	r3, #32
 8007238:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800723c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007240:	2330      	movs	r3, #48	@ 0x30
 8007242:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80073e0 <_svfiprintf_r+0x1e4>
 8007246:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800724a:	f04f 0901 	mov.w	r9, #1
 800724e:	4623      	mov	r3, r4
 8007250:	469a      	mov	sl, r3
 8007252:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007256:	b10a      	cbz	r2, 800725c <_svfiprintf_r+0x60>
 8007258:	2a25      	cmp	r2, #37	@ 0x25
 800725a:	d1f9      	bne.n	8007250 <_svfiprintf_r+0x54>
 800725c:	ebba 0b04 	subs.w	fp, sl, r4
 8007260:	d00b      	beq.n	800727a <_svfiprintf_r+0x7e>
 8007262:	465b      	mov	r3, fp
 8007264:	4622      	mov	r2, r4
 8007266:	4629      	mov	r1, r5
 8007268:	4638      	mov	r0, r7
 800726a:	f7ff ff6b 	bl	8007144 <__ssputs_r>
 800726e:	3001      	adds	r0, #1
 8007270:	f000 80a7 	beq.w	80073c2 <_svfiprintf_r+0x1c6>
 8007274:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007276:	445a      	add	r2, fp
 8007278:	9209      	str	r2, [sp, #36]	@ 0x24
 800727a:	f89a 3000 	ldrb.w	r3, [sl]
 800727e:	2b00      	cmp	r3, #0
 8007280:	f000 809f 	beq.w	80073c2 <_svfiprintf_r+0x1c6>
 8007284:	2300      	movs	r3, #0
 8007286:	f04f 32ff 	mov.w	r2, #4294967295
 800728a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800728e:	f10a 0a01 	add.w	sl, sl, #1
 8007292:	9304      	str	r3, [sp, #16]
 8007294:	9307      	str	r3, [sp, #28]
 8007296:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800729a:	931a      	str	r3, [sp, #104]	@ 0x68
 800729c:	4654      	mov	r4, sl
 800729e:	2205      	movs	r2, #5
 80072a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072a4:	484e      	ldr	r0, [pc, #312]	@ (80073e0 <_svfiprintf_r+0x1e4>)
 80072a6:	f7f8 ff73 	bl	8000190 <memchr>
 80072aa:	9a04      	ldr	r2, [sp, #16]
 80072ac:	b9d8      	cbnz	r0, 80072e6 <_svfiprintf_r+0xea>
 80072ae:	06d0      	lsls	r0, r2, #27
 80072b0:	bf44      	itt	mi
 80072b2:	2320      	movmi	r3, #32
 80072b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072b8:	0711      	lsls	r1, r2, #28
 80072ba:	bf44      	itt	mi
 80072bc:	232b      	movmi	r3, #43	@ 0x2b
 80072be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072c2:	f89a 3000 	ldrb.w	r3, [sl]
 80072c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80072c8:	d015      	beq.n	80072f6 <_svfiprintf_r+0xfa>
 80072ca:	9a07      	ldr	r2, [sp, #28]
 80072cc:	4654      	mov	r4, sl
 80072ce:	2000      	movs	r0, #0
 80072d0:	f04f 0c0a 	mov.w	ip, #10
 80072d4:	4621      	mov	r1, r4
 80072d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072da:	3b30      	subs	r3, #48	@ 0x30
 80072dc:	2b09      	cmp	r3, #9
 80072de:	d94b      	bls.n	8007378 <_svfiprintf_r+0x17c>
 80072e0:	b1b0      	cbz	r0, 8007310 <_svfiprintf_r+0x114>
 80072e2:	9207      	str	r2, [sp, #28]
 80072e4:	e014      	b.n	8007310 <_svfiprintf_r+0x114>
 80072e6:	eba0 0308 	sub.w	r3, r0, r8
 80072ea:	fa09 f303 	lsl.w	r3, r9, r3
 80072ee:	4313      	orrs	r3, r2
 80072f0:	9304      	str	r3, [sp, #16]
 80072f2:	46a2      	mov	sl, r4
 80072f4:	e7d2      	b.n	800729c <_svfiprintf_r+0xa0>
 80072f6:	9b03      	ldr	r3, [sp, #12]
 80072f8:	1d19      	adds	r1, r3, #4
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	9103      	str	r1, [sp, #12]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	bfbb      	ittet	lt
 8007302:	425b      	neglt	r3, r3
 8007304:	f042 0202 	orrlt.w	r2, r2, #2
 8007308:	9307      	strge	r3, [sp, #28]
 800730a:	9307      	strlt	r3, [sp, #28]
 800730c:	bfb8      	it	lt
 800730e:	9204      	strlt	r2, [sp, #16]
 8007310:	7823      	ldrb	r3, [r4, #0]
 8007312:	2b2e      	cmp	r3, #46	@ 0x2e
 8007314:	d10a      	bne.n	800732c <_svfiprintf_r+0x130>
 8007316:	7863      	ldrb	r3, [r4, #1]
 8007318:	2b2a      	cmp	r3, #42	@ 0x2a
 800731a:	d132      	bne.n	8007382 <_svfiprintf_r+0x186>
 800731c:	9b03      	ldr	r3, [sp, #12]
 800731e:	1d1a      	adds	r2, r3, #4
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	9203      	str	r2, [sp, #12]
 8007324:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007328:	3402      	adds	r4, #2
 800732a:	9305      	str	r3, [sp, #20]
 800732c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80073e4 <_svfiprintf_r+0x1e8>
 8007330:	7821      	ldrb	r1, [r4, #0]
 8007332:	2203      	movs	r2, #3
 8007334:	4650      	mov	r0, sl
 8007336:	f7f8 ff2b 	bl	8000190 <memchr>
 800733a:	b138      	cbz	r0, 800734c <_svfiprintf_r+0x150>
 800733c:	9b04      	ldr	r3, [sp, #16]
 800733e:	eba0 000a 	sub.w	r0, r0, sl
 8007342:	2240      	movs	r2, #64	@ 0x40
 8007344:	4082      	lsls	r2, r0
 8007346:	4313      	orrs	r3, r2
 8007348:	3401      	adds	r4, #1
 800734a:	9304      	str	r3, [sp, #16]
 800734c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007350:	4825      	ldr	r0, [pc, #148]	@ (80073e8 <_svfiprintf_r+0x1ec>)
 8007352:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007356:	2206      	movs	r2, #6
 8007358:	f7f8 ff1a 	bl	8000190 <memchr>
 800735c:	2800      	cmp	r0, #0
 800735e:	d036      	beq.n	80073ce <_svfiprintf_r+0x1d2>
 8007360:	4b22      	ldr	r3, [pc, #136]	@ (80073ec <_svfiprintf_r+0x1f0>)
 8007362:	bb1b      	cbnz	r3, 80073ac <_svfiprintf_r+0x1b0>
 8007364:	9b03      	ldr	r3, [sp, #12]
 8007366:	3307      	adds	r3, #7
 8007368:	f023 0307 	bic.w	r3, r3, #7
 800736c:	3308      	adds	r3, #8
 800736e:	9303      	str	r3, [sp, #12]
 8007370:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007372:	4433      	add	r3, r6
 8007374:	9309      	str	r3, [sp, #36]	@ 0x24
 8007376:	e76a      	b.n	800724e <_svfiprintf_r+0x52>
 8007378:	fb0c 3202 	mla	r2, ip, r2, r3
 800737c:	460c      	mov	r4, r1
 800737e:	2001      	movs	r0, #1
 8007380:	e7a8      	b.n	80072d4 <_svfiprintf_r+0xd8>
 8007382:	2300      	movs	r3, #0
 8007384:	3401      	adds	r4, #1
 8007386:	9305      	str	r3, [sp, #20]
 8007388:	4619      	mov	r1, r3
 800738a:	f04f 0c0a 	mov.w	ip, #10
 800738e:	4620      	mov	r0, r4
 8007390:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007394:	3a30      	subs	r2, #48	@ 0x30
 8007396:	2a09      	cmp	r2, #9
 8007398:	d903      	bls.n	80073a2 <_svfiprintf_r+0x1a6>
 800739a:	2b00      	cmp	r3, #0
 800739c:	d0c6      	beq.n	800732c <_svfiprintf_r+0x130>
 800739e:	9105      	str	r1, [sp, #20]
 80073a0:	e7c4      	b.n	800732c <_svfiprintf_r+0x130>
 80073a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80073a6:	4604      	mov	r4, r0
 80073a8:	2301      	movs	r3, #1
 80073aa:	e7f0      	b.n	800738e <_svfiprintf_r+0x192>
 80073ac:	ab03      	add	r3, sp, #12
 80073ae:	9300      	str	r3, [sp, #0]
 80073b0:	462a      	mov	r2, r5
 80073b2:	4b0f      	ldr	r3, [pc, #60]	@ (80073f0 <_svfiprintf_r+0x1f4>)
 80073b4:	a904      	add	r1, sp, #16
 80073b6:	4638      	mov	r0, r7
 80073b8:	f3af 8000 	nop.w
 80073bc:	1c42      	adds	r2, r0, #1
 80073be:	4606      	mov	r6, r0
 80073c0:	d1d6      	bne.n	8007370 <_svfiprintf_r+0x174>
 80073c2:	89ab      	ldrh	r3, [r5, #12]
 80073c4:	065b      	lsls	r3, r3, #25
 80073c6:	f53f af2d 	bmi.w	8007224 <_svfiprintf_r+0x28>
 80073ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80073cc:	e72c      	b.n	8007228 <_svfiprintf_r+0x2c>
 80073ce:	ab03      	add	r3, sp, #12
 80073d0:	9300      	str	r3, [sp, #0]
 80073d2:	462a      	mov	r2, r5
 80073d4:	4b06      	ldr	r3, [pc, #24]	@ (80073f0 <_svfiprintf_r+0x1f4>)
 80073d6:	a904      	add	r1, sp, #16
 80073d8:	4638      	mov	r0, r7
 80073da:	f000 f879 	bl	80074d0 <_printf_i>
 80073de:	e7ed      	b.n	80073bc <_svfiprintf_r+0x1c0>
 80073e0:	080079bc 	.word	0x080079bc
 80073e4:	080079c2 	.word	0x080079c2
 80073e8:	080079c6 	.word	0x080079c6
 80073ec:	00000000 	.word	0x00000000
 80073f0:	08007145 	.word	0x08007145

080073f4 <_printf_common>:
 80073f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073f8:	4616      	mov	r6, r2
 80073fa:	4698      	mov	r8, r3
 80073fc:	688a      	ldr	r2, [r1, #8]
 80073fe:	690b      	ldr	r3, [r1, #16]
 8007400:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007404:	4293      	cmp	r3, r2
 8007406:	bfb8      	it	lt
 8007408:	4613      	movlt	r3, r2
 800740a:	6033      	str	r3, [r6, #0]
 800740c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007410:	4607      	mov	r7, r0
 8007412:	460c      	mov	r4, r1
 8007414:	b10a      	cbz	r2, 800741a <_printf_common+0x26>
 8007416:	3301      	adds	r3, #1
 8007418:	6033      	str	r3, [r6, #0]
 800741a:	6823      	ldr	r3, [r4, #0]
 800741c:	0699      	lsls	r1, r3, #26
 800741e:	bf42      	ittt	mi
 8007420:	6833      	ldrmi	r3, [r6, #0]
 8007422:	3302      	addmi	r3, #2
 8007424:	6033      	strmi	r3, [r6, #0]
 8007426:	6825      	ldr	r5, [r4, #0]
 8007428:	f015 0506 	ands.w	r5, r5, #6
 800742c:	d106      	bne.n	800743c <_printf_common+0x48>
 800742e:	f104 0a19 	add.w	sl, r4, #25
 8007432:	68e3      	ldr	r3, [r4, #12]
 8007434:	6832      	ldr	r2, [r6, #0]
 8007436:	1a9b      	subs	r3, r3, r2
 8007438:	42ab      	cmp	r3, r5
 800743a:	dc26      	bgt.n	800748a <_printf_common+0x96>
 800743c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007440:	6822      	ldr	r2, [r4, #0]
 8007442:	3b00      	subs	r3, #0
 8007444:	bf18      	it	ne
 8007446:	2301      	movne	r3, #1
 8007448:	0692      	lsls	r2, r2, #26
 800744a:	d42b      	bmi.n	80074a4 <_printf_common+0xb0>
 800744c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007450:	4641      	mov	r1, r8
 8007452:	4638      	mov	r0, r7
 8007454:	47c8      	blx	r9
 8007456:	3001      	adds	r0, #1
 8007458:	d01e      	beq.n	8007498 <_printf_common+0xa4>
 800745a:	6823      	ldr	r3, [r4, #0]
 800745c:	6922      	ldr	r2, [r4, #16]
 800745e:	f003 0306 	and.w	r3, r3, #6
 8007462:	2b04      	cmp	r3, #4
 8007464:	bf02      	ittt	eq
 8007466:	68e5      	ldreq	r5, [r4, #12]
 8007468:	6833      	ldreq	r3, [r6, #0]
 800746a:	1aed      	subeq	r5, r5, r3
 800746c:	68a3      	ldr	r3, [r4, #8]
 800746e:	bf0c      	ite	eq
 8007470:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007474:	2500      	movne	r5, #0
 8007476:	4293      	cmp	r3, r2
 8007478:	bfc4      	itt	gt
 800747a:	1a9b      	subgt	r3, r3, r2
 800747c:	18ed      	addgt	r5, r5, r3
 800747e:	2600      	movs	r6, #0
 8007480:	341a      	adds	r4, #26
 8007482:	42b5      	cmp	r5, r6
 8007484:	d11a      	bne.n	80074bc <_printf_common+0xc8>
 8007486:	2000      	movs	r0, #0
 8007488:	e008      	b.n	800749c <_printf_common+0xa8>
 800748a:	2301      	movs	r3, #1
 800748c:	4652      	mov	r2, sl
 800748e:	4641      	mov	r1, r8
 8007490:	4638      	mov	r0, r7
 8007492:	47c8      	blx	r9
 8007494:	3001      	adds	r0, #1
 8007496:	d103      	bne.n	80074a0 <_printf_common+0xac>
 8007498:	f04f 30ff 	mov.w	r0, #4294967295
 800749c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074a0:	3501      	adds	r5, #1
 80074a2:	e7c6      	b.n	8007432 <_printf_common+0x3e>
 80074a4:	18e1      	adds	r1, r4, r3
 80074a6:	1c5a      	adds	r2, r3, #1
 80074a8:	2030      	movs	r0, #48	@ 0x30
 80074aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80074ae:	4422      	add	r2, r4
 80074b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80074b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80074b8:	3302      	adds	r3, #2
 80074ba:	e7c7      	b.n	800744c <_printf_common+0x58>
 80074bc:	2301      	movs	r3, #1
 80074be:	4622      	mov	r2, r4
 80074c0:	4641      	mov	r1, r8
 80074c2:	4638      	mov	r0, r7
 80074c4:	47c8      	blx	r9
 80074c6:	3001      	adds	r0, #1
 80074c8:	d0e6      	beq.n	8007498 <_printf_common+0xa4>
 80074ca:	3601      	adds	r6, #1
 80074cc:	e7d9      	b.n	8007482 <_printf_common+0x8e>
	...

080074d0 <_printf_i>:
 80074d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074d4:	7e0f      	ldrb	r7, [r1, #24]
 80074d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80074d8:	2f78      	cmp	r7, #120	@ 0x78
 80074da:	4691      	mov	r9, r2
 80074dc:	4680      	mov	r8, r0
 80074de:	460c      	mov	r4, r1
 80074e0:	469a      	mov	sl, r3
 80074e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80074e6:	d807      	bhi.n	80074f8 <_printf_i+0x28>
 80074e8:	2f62      	cmp	r7, #98	@ 0x62
 80074ea:	d80a      	bhi.n	8007502 <_printf_i+0x32>
 80074ec:	2f00      	cmp	r7, #0
 80074ee:	f000 80d1 	beq.w	8007694 <_printf_i+0x1c4>
 80074f2:	2f58      	cmp	r7, #88	@ 0x58
 80074f4:	f000 80b8 	beq.w	8007668 <_printf_i+0x198>
 80074f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80074fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007500:	e03a      	b.n	8007578 <_printf_i+0xa8>
 8007502:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007506:	2b15      	cmp	r3, #21
 8007508:	d8f6      	bhi.n	80074f8 <_printf_i+0x28>
 800750a:	a101      	add	r1, pc, #4	@ (adr r1, 8007510 <_printf_i+0x40>)
 800750c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007510:	08007569 	.word	0x08007569
 8007514:	0800757d 	.word	0x0800757d
 8007518:	080074f9 	.word	0x080074f9
 800751c:	080074f9 	.word	0x080074f9
 8007520:	080074f9 	.word	0x080074f9
 8007524:	080074f9 	.word	0x080074f9
 8007528:	0800757d 	.word	0x0800757d
 800752c:	080074f9 	.word	0x080074f9
 8007530:	080074f9 	.word	0x080074f9
 8007534:	080074f9 	.word	0x080074f9
 8007538:	080074f9 	.word	0x080074f9
 800753c:	0800767b 	.word	0x0800767b
 8007540:	080075a7 	.word	0x080075a7
 8007544:	08007635 	.word	0x08007635
 8007548:	080074f9 	.word	0x080074f9
 800754c:	080074f9 	.word	0x080074f9
 8007550:	0800769d 	.word	0x0800769d
 8007554:	080074f9 	.word	0x080074f9
 8007558:	080075a7 	.word	0x080075a7
 800755c:	080074f9 	.word	0x080074f9
 8007560:	080074f9 	.word	0x080074f9
 8007564:	0800763d 	.word	0x0800763d
 8007568:	6833      	ldr	r3, [r6, #0]
 800756a:	1d1a      	adds	r2, r3, #4
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	6032      	str	r2, [r6, #0]
 8007570:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007574:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007578:	2301      	movs	r3, #1
 800757a:	e09c      	b.n	80076b6 <_printf_i+0x1e6>
 800757c:	6833      	ldr	r3, [r6, #0]
 800757e:	6820      	ldr	r0, [r4, #0]
 8007580:	1d19      	adds	r1, r3, #4
 8007582:	6031      	str	r1, [r6, #0]
 8007584:	0606      	lsls	r6, r0, #24
 8007586:	d501      	bpl.n	800758c <_printf_i+0xbc>
 8007588:	681d      	ldr	r5, [r3, #0]
 800758a:	e003      	b.n	8007594 <_printf_i+0xc4>
 800758c:	0645      	lsls	r5, r0, #25
 800758e:	d5fb      	bpl.n	8007588 <_printf_i+0xb8>
 8007590:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007594:	2d00      	cmp	r5, #0
 8007596:	da03      	bge.n	80075a0 <_printf_i+0xd0>
 8007598:	232d      	movs	r3, #45	@ 0x2d
 800759a:	426d      	negs	r5, r5
 800759c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075a0:	4858      	ldr	r0, [pc, #352]	@ (8007704 <_printf_i+0x234>)
 80075a2:	230a      	movs	r3, #10
 80075a4:	e011      	b.n	80075ca <_printf_i+0xfa>
 80075a6:	6821      	ldr	r1, [r4, #0]
 80075a8:	6833      	ldr	r3, [r6, #0]
 80075aa:	0608      	lsls	r0, r1, #24
 80075ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80075b0:	d402      	bmi.n	80075b8 <_printf_i+0xe8>
 80075b2:	0649      	lsls	r1, r1, #25
 80075b4:	bf48      	it	mi
 80075b6:	b2ad      	uxthmi	r5, r5
 80075b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80075ba:	4852      	ldr	r0, [pc, #328]	@ (8007704 <_printf_i+0x234>)
 80075bc:	6033      	str	r3, [r6, #0]
 80075be:	bf14      	ite	ne
 80075c0:	230a      	movne	r3, #10
 80075c2:	2308      	moveq	r3, #8
 80075c4:	2100      	movs	r1, #0
 80075c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80075ca:	6866      	ldr	r6, [r4, #4]
 80075cc:	60a6      	str	r6, [r4, #8]
 80075ce:	2e00      	cmp	r6, #0
 80075d0:	db05      	blt.n	80075de <_printf_i+0x10e>
 80075d2:	6821      	ldr	r1, [r4, #0]
 80075d4:	432e      	orrs	r6, r5
 80075d6:	f021 0104 	bic.w	r1, r1, #4
 80075da:	6021      	str	r1, [r4, #0]
 80075dc:	d04b      	beq.n	8007676 <_printf_i+0x1a6>
 80075de:	4616      	mov	r6, r2
 80075e0:	fbb5 f1f3 	udiv	r1, r5, r3
 80075e4:	fb03 5711 	mls	r7, r3, r1, r5
 80075e8:	5dc7      	ldrb	r7, [r0, r7]
 80075ea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80075ee:	462f      	mov	r7, r5
 80075f0:	42bb      	cmp	r3, r7
 80075f2:	460d      	mov	r5, r1
 80075f4:	d9f4      	bls.n	80075e0 <_printf_i+0x110>
 80075f6:	2b08      	cmp	r3, #8
 80075f8:	d10b      	bne.n	8007612 <_printf_i+0x142>
 80075fa:	6823      	ldr	r3, [r4, #0]
 80075fc:	07df      	lsls	r7, r3, #31
 80075fe:	d508      	bpl.n	8007612 <_printf_i+0x142>
 8007600:	6923      	ldr	r3, [r4, #16]
 8007602:	6861      	ldr	r1, [r4, #4]
 8007604:	4299      	cmp	r1, r3
 8007606:	bfde      	ittt	le
 8007608:	2330      	movle	r3, #48	@ 0x30
 800760a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800760e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007612:	1b92      	subs	r2, r2, r6
 8007614:	6122      	str	r2, [r4, #16]
 8007616:	f8cd a000 	str.w	sl, [sp]
 800761a:	464b      	mov	r3, r9
 800761c:	aa03      	add	r2, sp, #12
 800761e:	4621      	mov	r1, r4
 8007620:	4640      	mov	r0, r8
 8007622:	f7ff fee7 	bl	80073f4 <_printf_common>
 8007626:	3001      	adds	r0, #1
 8007628:	d14a      	bne.n	80076c0 <_printf_i+0x1f0>
 800762a:	f04f 30ff 	mov.w	r0, #4294967295
 800762e:	b004      	add	sp, #16
 8007630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007634:	6823      	ldr	r3, [r4, #0]
 8007636:	f043 0320 	orr.w	r3, r3, #32
 800763a:	6023      	str	r3, [r4, #0]
 800763c:	4832      	ldr	r0, [pc, #200]	@ (8007708 <_printf_i+0x238>)
 800763e:	2778      	movs	r7, #120	@ 0x78
 8007640:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007644:	6823      	ldr	r3, [r4, #0]
 8007646:	6831      	ldr	r1, [r6, #0]
 8007648:	061f      	lsls	r7, r3, #24
 800764a:	f851 5b04 	ldr.w	r5, [r1], #4
 800764e:	d402      	bmi.n	8007656 <_printf_i+0x186>
 8007650:	065f      	lsls	r7, r3, #25
 8007652:	bf48      	it	mi
 8007654:	b2ad      	uxthmi	r5, r5
 8007656:	6031      	str	r1, [r6, #0]
 8007658:	07d9      	lsls	r1, r3, #31
 800765a:	bf44      	itt	mi
 800765c:	f043 0320 	orrmi.w	r3, r3, #32
 8007660:	6023      	strmi	r3, [r4, #0]
 8007662:	b11d      	cbz	r5, 800766c <_printf_i+0x19c>
 8007664:	2310      	movs	r3, #16
 8007666:	e7ad      	b.n	80075c4 <_printf_i+0xf4>
 8007668:	4826      	ldr	r0, [pc, #152]	@ (8007704 <_printf_i+0x234>)
 800766a:	e7e9      	b.n	8007640 <_printf_i+0x170>
 800766c:	6823      	ldr	r3, [r4, #0]
 800766e:	f023 0320 	bic.w	r3, r3, #32
 8007672:	6023      	str	r3, [r4, #0]
 8007674:	e7f6      	b.n	8007664 <_printf_i+0x194>
 8007676:	4616      	mov	r6, r2
 8007678:	e7bd      	b.n	80075f6 <_printf_i+0x126>
 800767a:	6833      	ldr	r3, [r6, #0]
 800767c:	6825      	ldr	r5, [r4, #0]
 800767e:	6961      	ldr	r1, [r4, #20]
 8007680:	1d18      	adds	r0, r3, #4
 8007682:	6030      	str	r0, [r6, #0]
 8007684:	062e      	lsls	r6, r5, #24
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	d501      	bpl.n	800768e <_printf_i+0x1be>
 800768a:	6019      	str	r1, [r3, #0]
 800768c:	e002      	b.n	8007694 <_printf_i+0x1c4>
 800768e:	0668      	lsls	r0, r5, #25
 8007690:	d5fb      	bpl.n	800768a <_printf_i+0x1ba>
 8007692:	8019      	strh	r1, [r3, #0]
 8007694:	2300      	movs	r3, #0
 8007696:	6123      	str	r3, [r4, #16]
 8007698:	4616      	mov	r6, r2
 800769a:	e7bc      	b.n	8007616 <_printf_i+0x146>
 800769c:	6833      	ldr	r3, [r6, #0]
 800769e:	1d1a      	adds	r2, r3, #4
 80076a0:	6032      	str	r2, [r6, #0]
 80076a2:	681e      	ldr	r6, [r3, #0]
 80076a4:	6862      	ldr	r2, [r4, #4]
 80076a6:	2100      	movs	r1, #0
 80076a8:	4630      	mov	r0, r6
 80076aa:	f7f8 fd71 	bl	8000190 <memchr>
 80076ae:	b108      	cbz	r0, 80076b4 <_printf_i+0x1e4>
 80076b0:	1b80      	subs	r0, r0, r6
 80076b2:	6060      	str	r0, [r4, #4]
 80076b4:	6863      	ldr	r3, [r4, #4]
 80076b6:	6123      	str	r3, [r4, #16]
 80076b8:	2300      	movs	r3, #0
 80076ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076be:	e7aa      	b.n	8007616 <_printf_i+0x146>
 80076c0:	6923      	ldr	r3, [r4, #16]
 80076c2:	4632      	mov	r2, r6
 80076c4:	4649      	mov	r1, r9
 80076c6:	4640      	mov	r0, r8
 80076c8:	47d0      	blx	sl
 80076ca:	3001      	adds	r0, #1
 80076cc:	d0ad      	beq.n	800762a <_printf_i+0x15a>
 80076ce:	6823      	ldr	r3, [r4, #0]
 80076d0:	079b      	lsls	r3, r3, #30
 80076d2:	d413      	bmi.n	80076fc <_printf_i+0x22c>
 80076d4:	68e0      	ldr	r0, [r4, #12]
 80076d6:	9b03      	ldr	r3, [sp, #12]
 80076d8:	4298      	cmp	r0, r3
 80076da:	bfb8      	it	lt
 80076dc:	4618      	movlt	r0, r3
 80076de:	e7a6      	b.n	800762e <_printf_i+0x15e>
 80076e0:	2301      	movs	r3, #1
 80076e2:	4632      	mov	r2, r6
 80076e4:	4649      	mov	r1, r9
 80076e6:	4640      	mov	r0, r8
 80076e8:	47d0      	blx	sl
 80076ea:	3001      	adds	r0, #1
 80076ec:	d09d      	beq.n	800762a <_printf_i+0x15a>
 80076ee:	3501      	adds	r5, #1
 80076f0:	68e3      	ldr	r3, [r4, #12]
 80076f2:	9903      	ldr	r1, [sp, #12]
 80076f4:	1a5b      	subs	r3, r3, r1
 80076f6:	42ab      	cmp	r3, r5
 80076f8:	dcf2      	bgt.n	80076e0 <_printf_i+0x210>
 80076fa:	e7eb      	b.n	80076d4 <_printf_i+0x204>
 80076fc:	2500      	movs	r5, #0
 80076fe:	f104 0619 	add.w	r6, r4, #25
 8007702:	e7f5      	b.n	80076f0 <_printf_i+0x220>
 8007704:	080079cd 	.word	0x080079cd
 8007708:	080079de 	.word	0x080079de

0800770c <memmove>:
 800770c:	4288      	cmp	r0, r1
 800770e:	b510      	push	{r4, lr}
 8007710:	eb01 0402 	add.w	r4, r1, r2
 8007714:	d902      	bls.n	800771c <memmove+0x10>
 8007716:	4284      	cmp	r4, r0
 8007718:	4623      	mov	r3, r4
 800771a:	d807      	bhi.n	800772c <memmove+0x20>
 800771c:	1e43      	subs	r3, r0, #1
 800771e:	42a1      	cmp	r1, r4
 8007720:	d008      	beq.n	8007734 <memmove+0x28>
 8007722:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007726:	f803 2f01 	strb.w	r2, [r3, #1]!
 800772a:	e7f8      	b.n	800771e <memmove+0x12>
 800772c:	4402      	add	r2, r0
 800772e:	4601      	mov	r1, r0
 8007730:	428a      	cmp	r2, r1
 8007732:	d100      	bne.n	8007736 <memmove+0x2a>
 8007734:	bd10      	pop	{r4, pc}
 8007736:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800773a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800773e:	e7f7      	b.n	8007730 <memmove+0x24>

08007740 <_sbrk_r>:
 8007740:	b538      	push	{r3, r4, r5, lr}
 8007742:	4d06      	ldr	r5, [pc, #24]	@ (800775c <_sbrk_r+0x1c>)
 8007744:	2300      	movs	r3, #0
 8007746:	4604      	mov	r4, r0
 8007748:	4608      	mov	r0, r1
 800774a:	602b      	str	r3, [r5, #0]
 800774c:	f7f9 fba6 	bl	8000e9c <_sbrk>
 8007750:	1c43      	adds	r3, r0, #1
 8007752:	d102      	bne.n	800775a <_sbrk_r+0x1a>
 8007754:	682b      	ldr	r3, [r5, #0]
 8007756:	b103      	cbz	r3, 800775a <_sbrk_r+0x1a>
 8007758:	6023      	str	r3, [r4, #0]
 800775a:	bd38      	pop	{r3, r4, r5, pc}
 800775c:	200005b0 	.word	0x200005b0

08007760 <memcpy>:
 8007760:	440a      	add	r2, r1
 8007762:	4291      	cmp	r1, r2
 8007764:	f100 33ff 	add.w	r3, r0, #4294967295
 8007768:	d100      	bne.n	800776c <memcpy+0xc>
 800776a:	4770      	bx	lr
 800776c:	b510      	push	{r4, lr}
 800776e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007772:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007776:	4291      	cmp	r1, r2
 8007778:	d1f9      	bne.n	800776e <memcpy+0xe>
 800777a:	bd10      	pop	{r4, pc}

0800777c <_realloc_r>:
 800777c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007780:	4607      	mov	r7, r0
 8007782:	4614      	mov	r4, r2
 8007784:	460d      	mov	r5, r1
 8007786:	b921      	cbnz	r1, 8007792 <_realloc_r+0x16>
 8007788:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800778c:	4611      	mov	r1, r2
 800778e:	f7ff bc4d 	b.w	800702c <_malloc_r>
 8007792:	b92a      	cbnz	r2, 80077a0 <_realloc_r+0x24>
 8007794:	f7ff fbde 	bl	8006f54 <_free_r>
 8007798:	4625      	mov	r5, r4
 800779a:	4628      	mov	r0, r5
 800779c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077a0:	f000 f81a 	bl	80077d8 <_malloc_usable_size_r>
 80077a4:	4284      	cmp	r4, r0
 80077a6:	4606      	mov	r6, r0
 80077a8:	d802      	bhi.n	80077b0 <_realloc_r+0x34>
 80077aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80077ae:	d8f4      	bhi.n	800779a <_realloc_r+0x1e>
 80077b0:	4621      	mov	r1, r4
 80077b2:	4638      	mov	r0, r7
 80077b4:	f7ff fc3a 	bl	800702c <_malloc_r>
 80077b8:	4680      	mov	r8, r0
 80077ba:	b908      	cbnz	r0, 80077c0 <_realloc_r+0x44>
 80077bc:	4645      	mov	r5, r8
 80077be:	e7ec      	b.n	800779a <_realloc_r+0x1e>
 80077c0:	42b4      	cmp	r4, r6
 80077c2:	4622      	mov	r2, r4
 80077c4:	4629      	mov	r1, r5
 80077c6:	bf28      	it	cs
 80077c8:	4632      	movcs	r2, r6
 80077ca:	f7ff ffc9 	bl	8007760 <memcpy>
 80077ce:	4629      	mov	r1, r5
 80077d0:	4638      	mov	r0, r7
 80077d2:	f7ff fbbf 	bl	8006f54 <_free_r>
 80077d6:	e7f1      	b.n	80077bc <_realloc_r+0x40>

080077d8 <_malloc_usable_size_r>:
 80077d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077dc:	1f18      	subs	r0, r3, #4
 80077de:	2b00      	cmp	r3, #0
 80077e0:	bfbc      	itt	lt
 80077e2:	580b      	ldrlt	r3, [r1, r0]
 80077e4:	18c0      	addlt	r0, r0, r3
 80077e6:	4770      	bx	lr

080077e8 <_init>:
 80077e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ea:	bf00      	nop
 80077ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ee:	bc08      	pop	{r3}
 80077f0:	469e      	mov	lr, r3
 80077f2:	4770      	bx	lr

080077f4 <_fini>:
 80077f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077f6:	bf00      	nop
 80077f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077fa:	bc08      	pop	{r3}
 80077fc:	469e      	mov	lr, r3
 80077fe:	4770      	bx	lr
